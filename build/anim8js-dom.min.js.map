{"version":3,"sources":["anim8js-core.js","anim8js-defer.js","anim8js-easing.js","anim8js-color.js","anim8js-calculator.js","anim8js-path.js","anim8js-spring.js","anim8js-event.js","anim8js-animation.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tween.js","anim8js-object.js","anim8js-dom-core.js","anim8js-dom-property.js","anim8js-dom-attribute.js","anim8js-dom-animator.js"],"names":["m8","anim8","subject","Animator","factory","factories","parseAnimator","m8s","anim8s","subjects","isArray","animators","i","length","animator","push","Animators","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","copy","p","coalesce","a","b","c","d","delegate","functionName","returning","RETURN_THIS","this","arguments","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","once","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","max","slice","trigger","time","regex","conversions","s","sec","min","ms","hr","parsed","exec","parseFloat","unit","Math","floor","constant","variable","optional","factoryName","is","attribute","attr","defaultValue","defaults","duration","easing","teasing","delay","sleep","repeat","Defer","methods","$factory","$push","prototype","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","indexOf","pair","e","t","easingType","bezier","isEasingName","out","inout","pong","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","scale","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","v","vparsed","window","isNaN","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","toLowerCase","named","matches","parseInt","invalidColor","format","ca","cr","cg","cb","toString","calculator","calc","create","name","defaultMethods","clone","adds","add","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","isPristine","method","amountScale","mul","ab","isValid","isZero","epsilon","isEqual","y","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","z","dz","angle","da","dr","dg","db","number","path","Path","spring","type","reset","points","trues","hasTrue","compute","ps","reference","last","first","point","resolvePoint","DeltaPath","deltas","ds","d0","d1","pd","p0","p1","PointPath","KeyframePath","easings","ea","keyframe","defaultEasing","CubicPath","p2","p3","d2","d3","i1","i3","QuadraticPath","quadratic","CompiledPath","pointCount","index","compiled","Tween","tween","JumpPath","jump","Spring","rest","position","gravity","velocity","update","frame","dt","MAX_DT","starting","updateVelocity","updated","EPSILON","resolveRest","BoxSpring","acceleration","box","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","temp","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","hasInitialState","parser","totalTime","newInstance","EventInstance","state","pauseTime","pauseState","elapsed","catchup","isAnimating","isInfinite","finish","progress","applyValue","getParser","getPoint","getFuture","fdelta","getDelta","getStart","getEnd","baseValue","value","isPaused","isDelayed","isSleeping","cycle","cycleCount","maxCycles","newState","timeRemaining","timeRemainingInChain","queue","pause","resume","Number","POSITIVE_INFINITY","hasStarted","isFinished","hasStates","states","stateText","animation","options","Animation","parserName","save","isSaved","newEvents","springs","attributes","finished","active","restore","preupdate","wasFinished","placeSpring","placeEvent","trimEvents","deactivate","destroy","createEvents","merge","onAnimation","unspring","springsFor","play","all","attrs","maxRemaining","transition","transitionTime","transitionDelta","transitionEasing","e1","e2","transitionPath","transitionEvent","transitionInto","transitionFromDelta","transitionIntoDelta","tweenTo","f","target","applyInitialState","eventCount","eventsFor","ref","request","current","get","follow","objectsFor","objects","resulting","stop","set","hasEvents","hasSprings","DeferAnimator","fill","each","iterator","filter","filterer","alive","remove","sequence","Sequence","running","live","animating","requestRun","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","run","maxDelay","delayOffset","Parser","newOptions","oldOptions","durations","delays","sleeps","repeats","ParserDeltas","values","valueCount","deltaObject","calculators","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","sort","from","half","to","times","maxTime","order","key","pathEasings","ParserTween","$animator","parseAnimators","dom","prop","style","hyphenize","str","replace","currentStyle","document","defaultView","getComputedStyle","getPropertyValue","prefix","createElement","prefixes","toPixels","baseUnit","defaultRate","body","div","appendChild","width","pixels","offsetWidth","removeChild","parseValue","convert","getFontSize","notUnit","fontSize","getConverterScale","px","relativeTo","variables","parentWidth","parentNode","scrollWidth","parentHeight","scrollHeight","height","offsetHeight","parentFontSize","htmlFontSize","htmlElement","getElementsByTagName","pt","cm","mm","vw","deg","rad","PI","em","rem","given","converter","toUnit","fromUnit","converter1","converter2","ids","cached","has","getAttribute","animatorId","DomAnimator","setAttribute","nm","anim","converted","units","styles","unset","factoryDerivable","deriver","factoryColor","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","outlineWidth","textIndent","borderSpacing","lineHeight","zIndex","backgroundColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor","minWidth","maxWidth","minHeight","maxHeight","offsetTop","offsetLeft","visibility","backface","css","transformOrigin","keywords","setOriginAttribute","setOrigin","origin","originZ","valueOr","transform","translate","translate3d","scale3d","d4","rotate3d","translateX","translateY","translateZ","scaleX","scaleY","scaleZ","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY","desiredUnit","transforms","join","opacity","grayscale","sepia","saturate","hueRotate","invert","brightness","contrast","blur","patterns","RegExp","filters","cx","cy","ccx","ccy","centerX","centerY","preset","rw","rh","orbit","DEGREE_TO_RADIAN","RADIAN_TO_DEGREE","ox","oy","orbitOffset","cunit","cox","coy","atan2","orbitX","orbitY","originUnit","originX","originY","defaultUnit","outlineOffset","saturation","properties","truesUpdated","attributeToProperty","styled","stylesUpdated","getStyles","applyProperties","props","flash","other","subproperty"],"mappings":"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","file":"anim8js-dom.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factories( subject );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.parseAnimator( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {any} subject\n */\nm8s = anim8s = function(subjects)\n{\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n      \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t        eventListeners.length = 0;\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n */\nanim8.time = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(s|sec|min|ms|hr)?/;\n  \n  var conversions = {\n    s:    1000,\n    sec:  1000,\n    min:  1000 * 60,\n    ms:   1,\n    hr:   1000 * 60 * 60\n  };\n  \n  return function(time) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      return time;\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor(time);\n      }\n    }\n    \n    return false;\n  };\n  \n})();\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n\n/*****************************************************************\n  REGISTRIES\n******************************************************************/\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factories = function(subject, optional) \n{\n\tfor (var factoryName in anim8.factories) \n\t{\n\t\tvar factory = anim8.factories[ factoryName ];\n\t\t\t\n\t\tif ( factory.is( subject ) )\n\t\t{\t\t\t\n\t\t\treturn factory;\n\t\t}\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow 'No factory exists for subject ' + subject;\n};\n\n/* Attributes are the animatable properties of a subject\n\n  anim8.attribute[name] = {\n    // the default value for an attribute if none exists on the subject\n    defaultValue: 0,\n    // the name of the calculator this attribute requires for mathematical operations. default value: anim8.calculator.default\n    calculator: calculatorName,\n    // other values can be specified here that the respective factory might use\n    \"factory specific attributes\"\n  }\n*/\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.attribute = function(attr) \n{\n  if ( anim8.isObject(attr) && anim8.isDefined(attr.defaultValue) ) \n\t{\n    return attr;\n  }\n  if ( anim8.isString(attr) && attr in anim8.attribute ) \n\t{\n    return anim8.attribute[ attr ];\n  }\n\t\n  return anim8.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.attribute.default = {defaultValue: 0};\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n  duration: 1000,\n  easing: 'ease',\n  teasing: 'linear',\n  delay: 0,\n  sleep: 0,\n  repeat: 1\n};\n","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, optional) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) {\n\t\treturn easing( x );\n\t};\n};\n\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) {\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } else {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\nanim8.easingType.pong = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x );\n\t  } else {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x) + 2.0) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  \n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n\nanim8.easing.default      = anim8.easing.ease;","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return this.invalidColor;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.coalesce( color.a, 1.0 );\n  var cr = anim8.coalesce( color.r, 255 );\n  var cg = anim8.coalesce( color.g, 255 );\n  var cb = anim8.coalesce( color.b, 255 );\n  \n  if (ca === 1.0)\n  {\n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};\n\n/**\n * The color to return when input is invalid.\n */\nanim8.color.invalidColor = anim8.color.defaultValue =\n{\n  r: 255,\n  g: 255,\n  b: 255,\n  a: 1.0\n};","/**\n * Calculators perform math and basic operations for a specific data structure. Calculators have the following methods.\n *\n *  parse(x, default)\n *  copy(out, copy)\n * -clone(out)\n *  create()\n *  zero(out)\n * -scale(out, scale)\n * -add(out, amount)\n *  adds(out, amount, amountScale)\n * -sub(out, amount)\n *  mul(out, scale)\n * -interpolate(out, start, end, delta)\n *  distanceSq(a, b)\n *  isValid(a)\n *  isNaN(a)\n *  isZero(a, epsilon)\n *  isEqual(a, b, epsilon)\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n\tif ( anim8.isObject(calc) )\n\t{\n\t\treturn calc;\n\t}\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Creates a calculator and fills in any missing methods where possible.\n * \n * @param {string} name\n * @param {object} methods\n */\nanim8.calculator.create = function(name, methods)\n{\n  var defaultMethods = \n\t{\n\t  clone: function(out) \n\t\t{\n\t    return this.copy( this.create(), out );\n\t  },\n\t  scale: function(out, scale) \n\t\t{\n\t    return this.adds( out, out, scale - 1 );\n\t  },\n\t  add: function(out, amount) \n\t\t{\n\t    return this.adds( out, amount, 1 );\n\t  },\n\t  sub: function(out, amount) \n\t\t{\n\t    return this.adds( out, amount, -1 );\n\t  },\n\t  interpolate: function(out, start, end, delta) \n\t\t{\n\t    out = this.zero( out );\n\t    out = this.adds( out, start, 1 - delta );\n\t    out = this.adds( out, end, delta );\n\t    return out;\n\t  },\n\t\tdistance: function(a, b)\n\t\t{\n\t\t\treturn Math.sqrt( this.distanceSq( a, b ) );\n\t\t},\n    isPristine: function(x)\n    {\n      return ( x === true || anim8.isFunction( x ) );\n    }\n\t};\n  \n  for (var method in defaultMethods)\n  {\n    if ( !(method in methods) )\n    {\n      methods[ method ] = defaultMethods[ method ];\n    }\n  }\n  \n\tanim8.calculator[name] = methods; \n};\n\n/**\n * A calculator for number primitives.\n */\nanim8.calculator.create('number', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\tif ( anim8.isString( x ) )\n\t\t{\n\t\t\tx = parseFloat( x );\n\t\t\t\n\t\t\tif (!isNaN(x))\n\t\t\t{\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn defaultValue;\n\t},\n  copy: function(out, copy) \n\t{\t\n    return copy;\n  },\n  create: function() \n\t{\n    return 0.0;\n  },\n  zero: function(out) \n\t{\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n\t{\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n\t{\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a - b) < epsilon;\n  }\n});\n\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.calculator.create('2d', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y )\n\t\t\t};\n\t\t}\n    if ( anim8.isString( x ) )\n    {\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.calculator.create('3d',\n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\t\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y ),\n\t\t\t\tz: anim8.coalesce( x.z, defaultValue.z )\n\t\t\t};\n\t\t}\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.calculator.create('quaternion', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y ),\n\t\t\t\tz: anim8.coalesce( x.z, defaultValue.z ),\n\t\t\t\tangle: anim8.coalesce( x.angle, defaultValue.angle )\n\t\t\t};\n\t\t}\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.calculator.create('rgb', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn anim8.color.parse( x );\n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.calculator.create('rgba', \n{\n\tparse: function(a, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( a ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: a,\n\t\t\t\tg: a,\n\t\t\t\tb: a,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn anim8.color.parse( a );\n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  }\n});\n\n/**\n * Sets the default calculator to the numeric calculator.\n */\nanim8.calculator.default = anim8.calculator.number;","anim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.trues = this.hasTrue();\n  },\n  compute: function(out, delta) \n\t{\n    return out;\n  },\n  hasTrue: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if (ps[i] === true) \n      {\n        return true;\n      }\n    }\n    return false;\n  },\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  }\n};\n\n\n\n\n\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.DeltaPath.prototype = new anim8.Path();\n\nanim8.DeltaPath.prototype.compute = function(out, delta) \n{\n  var ds = this.deltas;\n  var end = ds.length - 2;\n  var i = 0;\n  while (ds[i + 1] < delta && i < end) i++;\n  var d0 = ds[i];\n  var d1 = ds[i + 1];\n  var pd = (delta - d0) / (d1 - d0);\n  var p0 = this.resolvePoint( i );\n  var p1 = this.resolvePoint( i + 1 );\n  \n  return this.calculator.interpolate( out, p0, p1, pd );\n};\n  \nanim8.DeltaPath.prototype.copy = function() \n{\n    return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n};\n\nanim8.path.delta = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n\n\n\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.PointPath.prototype = new anim8.Path();\n\nanim8.PointPath.prototype.compute = function(out, delta)\n{\n  return this.calculator.copy( out, this.resolvePoint( 0 ) );\n};\n  \nanim8.PointPath.prototype.copy = function() \n{\n  return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n};\n\nanim8.path.point = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n\n\n\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.KeyframePath.prototype = new anim8.Path();\n\nanim8.KeyframePath.prototype.compute = function(out, delta) \n{  \n  var ds = this.deltas;\n  var end = ds.length - 2;\n  \n  if ( delta < ds[0] ) {\n    return false;\n  }\n  \n  if ( delta > ds[ds.length - 1] ) {\n    return this.points[ds.length - 1];\n  }\n  \n  var i = 0;\n  while (ds[i + 1] < delta && i < end) i++;\n  var d0 = ds[i];\n  var d1 = ds[i + 1];\n  var pd = (delta - d0) / (d1 - d0);\n  var p0 = this.resolvePoint( i );\n  var p1 = this.resolvePoint( i + 1 );\n  var ea = this.easings[i];\n  \n  return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n};\n  \nanim8.KeyframePath.prototype.copy = function() \n{\n  return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n};\n\nanim8.path.keyframe = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, true );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n\n\n\n\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.CubicPath.prototype = new anim8.Path();\n\nanim8.CubicPath.prototype.compute = function(out, d1)\n{\n  var calc = this.calculator;\n  var d2 = d1 * d1;\n  var d3 = d1 * d2;\n  var i1 = 1 - d1;\n  var i2 = i1 * i1;\n  var i3 = i1 * i2;\n  \n  out = calc.copy( out, this.resolvePoint( 0 ) );\n  out = calc.scale( out, i3 );\n  out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n  out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n  out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n  \n  return out;\n};\n  \nanim8.CubicPath.prototype.copy = function() \n{\n  return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n};\n\nanim8.path.cubic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n\n\n\n\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.QuadraticPath.prototype = new anim8.Path();\n\nanim8.QuadraticPath.prototype.compute = function(out, d1)\n{\n  var calc = this.calculator;\n  var d2 = d1 * d1;\n  var i1 = 1 - d1;\n  var i2 = i1 * i1;\n  \n  out = calc.copy( out, this.resolvePoint( 0 ) );\n  out = calc.scale( out, i2 );\n  out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n  out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n    \n  return out;\n};\n  \nanim8.QuadraticPath.prototype.copy = function() \n{\n  return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n};\n\nanim8.path.quadratic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n\n\n\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.CompiledPath.prototype = new anim8.Path();\n\nanim8.CompiledPath.prototype.compute = function(out, delta)\n{\n  var a = Math.floor( delta * this.points.length );\n  var index = Math.min( a, this.points.length - 1 );\n  \n  return this.calculator.copy( out, this.resolvePoint( index ) );\n};\n  \nanim8.CompiledPath.prototype.copy = function() \n{\n  return new anim8.CompiledPath( this.name, this, this.points.length );\n};\n\nanim8.path.compiled = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n\n\n\n\n\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [start, end] );\n};\n\nanim8.Tween.prototype = new anim8.Path();\n\nanim8.Tween.prototype.compute = function(out, delta)\n{\n  return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n};\n  \nanim8.Tween.prototype.copy = function() \n{\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n};\n\nanim8.path.tween = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start ),\n    calc.parse( path.end )\n  );\n};\n\n\n\n\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.JumpPath.prototype = new anim8.Path();\n\nanim8.JumpPath.prototype.compute = function(out, delta)\n{\n  var a = Math.floor( delta * this.points.length );\n  var index = Math.min( a, this.points.length - 1 );\n  \n  return this.calculator.copy( out, this.resolvePoint( index ) );\n};\n  \nanim8.JumpPath.prototype.copy = function() \n{\n  return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n};\n\nanim8.path.jump = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.Spring.prototype = \n{\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  reset: function(attribute, calculator, rest, position, gravity)\n  {\n    var calc = anim8.calculator( calculator );\n    var a = anim8.attribute( attribute );\n    \n    this.attribute    = attribute;\n    this.calculator   = calc;\n    this.rest         = calc.parse( rest, a.defaultValue );\n    this.position     = calc.parse( position, a.defaultValue );\n    this.gravity      = calc.parse( gravity, calc.create() );\n    this.velocity     = calc.create();\n    this.time         = 0;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} now\n   * @param {object} frame\n   */\n  update: function(now, frame)\n  {\n    if (this.time === 0)\n    {\n      this.time = now;\n    }\n    \n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (now - this.time) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.copy( {}, this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    this.time = now;\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    \n  }\n};\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n\n\n\n/**\n * A box spring is a simple string\n */\nanim8.BoxSpring = function(attribute, calculator, position, rest, constant, gravity)\n{\n  var a = anim8.attribute( attribute );\n    \n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.acceleration   = this.calculator.create();\n  this.constant       = this.calculator.parse( constant, a.defaultValue );\n};\n\nanim8.BoxSpring.prototype = new anim8.Spring();\n\nanim8.BoxSpring.prototype.updateVelocity = function(dt)\n{\n  var calc = this.calculator;\n  \n  this.acceleration = calc.copy( this.acceleration, this.resolveRest() );\n  this.acceleration = calc.sub( this.acceleration, this.position );\n  this.acceleration = calc.mul( this.acceleration, this.constant );\n  this.velocity     = calc.adds( this.velocity, this.acceleration, dt );\n};\n\nanim8.spring.box = function(spring)\n{ \n  return new anim8.BoxSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.constant,\n    spring.gravity\n  );\n};\n\n\n\n\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, gravity)\n{\n  var a = anim8.attribute( attribute );\n  \n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.damping      = this.calculator.parse( damping, a.defaultValue );\n  this.stiffness    = this.calculator.parse( stiffness, a.defaultValue );\n  this.temp0        = this.calculator.create();\n  this.temp1        = this.calculator.create();\n};\n\nanim8.LinearSpring.prototype = new anim8.Spring();\n\nanim8.LinearSpring.prototype.updateVelocity = function(dt)\n{\n  // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n\t// position += velocity * elapsed.seconds;\n    \n  var calc = this.calculator;\n\n  this.temp1 = calc.copy( this.temp1, this.damping );\n  this.temp1 = calc.mul( this.temp1, this.velocity );\n  \n  this.temp0 = calc.copy( this.temp0, this.position );\n  this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n  this.temp0 = calc.mul( this.temp0, this.stiffness );\n  this.temp0 = calc.sub( this.temp0, this.temp1 );\n  \n  this.velocity = calc.adds( this.velocity, this.temp0, dt );\n};\n\nanim8.spring.linear = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};\n\n\n\n\n\n\n\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = this.calculator.create();\n};\n\nanim8.DistanceSpring.prototype = new anim8.Spring();\n\nanim8.DistanceSpring.prototype.updateVelocity = function(dt)\n{\n  // d = DISTANCE( position, rest )\n  // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n  // position += velocity * elapsed.seconds;\n\n  var calc = this.calculator;\n  var rest = this.resolveRest();\n  \n  var d = calc.distance( this.position, rest );\n  \n  this.temp = calc.copy( this.temp, this.position )\n  this.temp = calc.sub( this.temp, rest );\n  \n  if ( d !== 0 )\n  {\n  \tthis.temp = calc.scale( this.temp, 1.0 / d );\n  \tthis.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n  }\n\n  this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n  this.velocity = calc.adds( this.velocity, this.temp, dt );\n};\n\nanim8.spring.distance = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, hasInitialState, parser) \n{\n  this.attribute \t      = attribute;\n  this.path \t\t\t      = path;\n  this.easing \t\t      = anim8.easing( easing );\n  this.delay \t\t\t      = anim8.coalesce( delay, anim8.defaults.delay );\n  this.duration \t      = anim8.coalesce( duration, anim8.defaults.duration );\n  this.sleep \t\t\t      = anim8.coalesce( sleep, anim8.defaults.sleep );\n  this.repeat \t\t      = anim8.coalesce( repeat, anim8.defaults.repeat );\n  this.hasInitialState  = hasInitialState;\n  this.parser           = parser;\n};\n\nanim8.Event.prototype = \n{\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this );\n  }\n};\n\nanim8.EventInstance = function(event)\n{\n\tthis.event \t\t\t      = event;\n\tthis.attribute \t      = event.attribute;\n\tthis.path \t\t\t      = event.path;\n\tthis.duration \t      = event.duration;\n\tthis.easing \t\t      = event.easing;\n\tthis.delay \t\t\t      = event.delay;\n\tthis.sleep \t\t\t      = event.sleep;\n\tthis.repeat \t\t      = event.repeat;\n  this.state \t\t\t      = anim8.EventState.CREATED;\n  this.time \t\t\t      = 0;\n  this.pauseTime \t      = 0;\n  this.pauseState       = 0;\n\tthis.elapsed\t\t      = 0;\n\tthis.next\t\t\t\t      = null;\n};\n\nanim8.EventInstance.prototype = \n{\n  update: function(now, frame) \n\t{\n    var updated = false;\n    var elapsed = this.catchup( now );\n    \n    if ( this.isAnimating() ) \n\t\t{\t\t\t\n      var delta = elapsed / this.duration;\n      \n      if (delta >= 1 || this.duration === 0)\n\t\t\t{\n        if (!this.isInfinite() && --this.repeat === 0) \n\t\t\t\t{\n          this.finish(frame);\n\t\t\t\t\t\n          return true;\n        } \n\t\t\t\telse \n\t\t\t\t{\n          if (this.sleep)\n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING ); \n            delta = 1;\n            \n            this.trigger('sleeping', this);\n          } \n\t\t\t\t\telse \n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.ANIMATING );\n            delta -= 1;\n          }\n        }\n      }\n      \n      this.applyValue( frame, frame[this.attribute], delta );\n      updated = true;\n    }\n    \n    return updated;\n  },\n  hasInitialState: function()\n  {\n    return this.event.hasInitialState;\n  },\n  getParser: function()\n  {\n    return this.event.parser;\n  },\n  getPoint: function(delta)\n  {\n    return this.path.compute( this.path.calculator.create(), this.easing( delta ) );\n  },\n  getFuture: function(fdelta)\n  {\n    return this.getPoint( Math.min( 1.0, this.getDelta() + fdelta ) );\n  },\n  getDelta: function()\n  {\n    return this.isAnimating() ? Math.min( 1.0, (anim8.now() - this.time) / this.duration ) : 0.0;\n  },\n  getStart: function()\n  {\n    return this.getPoint( 0 );\n  },\n  getEnd: function() \n\t{\n    return this.getPoint( 1 );\n  },\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n        \n    if ( value !== false )\n    {\n      frame[this.attribute] = value;\n    }\n  },\n  catchup: function(now)\n\t{\n    if ( this.isPaused() )\n    {\n      return;\n    }\n    \n    if ( this.state === anim8.EventState.CREATED )\n\t\t{\n      this.time = now;\n\t\t\t\n      if ( this.delay )\n\t\t\t{\n        this.state = anim8.EventState.DELAYED;\n        \n        this.trigger('delaying', this);\n      } \n\t\t\telse \n\t\t\t{\n        this.state = anim8.EventState.ANIMATING;\n      }\n    }\n    \n\t\tvar elapsed = now - this.time;\n    \n    if ( this.isDelayed() )\n\t\t{\n      if ( elapsed > this.delay ) \n\t\t\t{\n        this.trigger('delayed', this);\n        \n        elapsed = this.progress( elapsed, this.delay, anim8.EventState.ANIMATING );\n      }\n    }\n\t\t\n    if ( this.isSleeping() )\n\t\t{\n      if ( elapsed > this.sleep )\n\t\t\t{\n        this.trigger('slept', this);\n        \n        elapsed = this.progress( elapsed, this.sleep, anim8.EventState.ANIMATING );\n      }\n    }\n\t\t\n    if ( this.isAnimating() && this.duration )\n    {\n      var cycle = this.duration + this.sleep;\n      var cycleCount = Math.floor( ( elapsed + this.sleep ) / cycle );\n      var maxCycles = Math.min( this.repeat, cycleCount );\n            \n      elapsed = this.progress( elapsed, maxCycles * cycle, anim8.EventState.ANIMATING );\n      \n      if ( !this.isInfinite() )\n      { \n        if (maxCycles === this.repeat)\n        {\n          elapsed = this.duration;\n          this.repeat = 1;\n        }\n        else\n        {\n          this.repeat -= cycleCount;\n        }\n      }\n      \n      if ( elapsed > this.duration )\n      {\n        elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING );\n        \n        this.trigger('sleeping', this);\n      }\n    }\n\t\t\n\t\treturn elapsed;\n  },\n  progress: function(elapsed, time, newState) \n\t{\n    this.time += time;\n\t\tthis.elapsed += time;\n    this.state = newState;\n\t\t\n    return elapsed - time;\n  },\n  finish: function(frame) \n\t{\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n    \n    this.trigger('finish', this);\n  },\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n  timeRemaining: function() \n\t{    \n\t\treturn this.totalTime() - this.elapsed;\n  },\n  timeRemainingInChain: function()\n  {\n    return this.timeRemaining() + (this.next ? this.next.timeRemainingInChain() : 0);\n  },\n  queue: function(e)\n  {\n    if ( this.next )\n    {\n      this.next.queue( e );\n    }\n    else\n    {\n      this.next = e;\n    }\n  },\n  pause: function() \n\t{\n    if (this.state !== anim8.EventState.PAUSED) \n\t\t{\n      this.pauseTime = anim8.now();\n      this.pauseState = this.state;\n      this.state = anim8.EventState.PAUSED; \n    }\n  },\n  resume: function() \n\t{\n    if (this.state === anim8.EventState.PAUSED) \n\t\t{\n      this.time += anim8.now() - this.pauseTime;\n      this.state = this.pauseState; \n    }\n  },\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY);\n  },\n\thasStarted: function()\n\t{\n\t\treturn (this.state !== anim8.EventState.CREATED && this.state !== anim8.EventState.DELAYED);\n\t},\n  isAnimating: function() \n\t{\n    return (this.state === anim8.EventState.ANIMATING);\n  },\n  isFinished: function() \n\t{\n    return (this.state === anim8.EventState.FINISHED);\n  },\n  isDelayed: function() \n\t{\n    return (this.state === anim8.EventState.DELAYED);\n  },\n  isPaused: function() \n\t{\n    return (this.state === anim8.EventState.PAUSED);\n  },\n  isSleeping: function() \n\t{\n    return (this.state === anim8.EventState.SLEEPING);\n  },\n  hasStates: function(states) \n\t{\n    return (this.state & states) !== 0;\n  },\n  stateText: function() \n\t{\n    switch(this.state) \n    {\n      case anim8.EventState.CREATED:            return \"created\";\n      case anim8.EventState.DELAYED:            return \"delayed\";\n      case anim8.EventState.ANIMATING:          return \"animating\";\n      case anim8.EventState.SLEEPING:           return \"sleeping\";\n      case anim8.EventState.FINISHED:           return \"finished\";\n    }\n  },\n  hasTrue: function()\n  {\n    return this.path.trues;\n  }\n};\n\n/**\n * Adds the following event methods to EventInstances: on, once, off, trigger.\n */\nanim8.eventize( anim8.EventInstance.prototype );","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n */\nanim8.animation = function(animation, options)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) && animation in anim8.animation )\n\t{\n\t\treturn anim8.animation[ animation ];\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n\t\tvar events = [];\n\t\t\n\t\toptions = options || {};\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, events );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (events.length)\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, events );\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  \n  animation.name = name;\n  \n  anim8.animation[name] = animation;\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the events that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate events, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} events\n */\nanim8.Animation = function(name, input, options, events)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.events = events;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an array of event instances from the events in this animation.\n   */\n  newEvents: function()\n  {\n    var e = [];\n    \n    for (var i = 0; i < this.events.length; i++)\n    {\n      e.push( this.events[i].newInstance() );\n    }\n    \n    return e;\n  }\n};","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(e)\n\t{\n\t  this.e = e;\n\t  this.events = {};\n    this.springs = {};\n\t  this.attributes = {};\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    \n    return this;\n\t},\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  {\n    \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function()\n  {\n\t\tthis.trigger('preupdate');\n    \n    return this;\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    \n    this.finished = true;\n\t\t\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      this.updated[ attr ] = e.update( now, this.frame );\n      \n      this.finished = this.finished && e.isFinished();\n    }\n    \n    for (var attr in this.springs)\n    {\n      var s = this.springs[ attr ];\n      \n      this.updated[ attr ] = s.update( now, this.frame );\n      \n      this.finished = false;\n    }\n\t\n\t\tthis.trigger('update');\n    \n    return this;\n  },\n  \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function(s)\n  {\n    var attr = s.attribute;\n    \n    this.springs[ attr ] = s;\n    \n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = anim8.attribute( attr ).defaultValue;\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function(e)\n  {\n    var attr = e.attribute;\n    \n    this.events[ attr ] = e;\n    \n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = anim8.attribute( attr ).defaultValue;\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.e[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimEvents();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      var e = this.events[attr];\n      \n      if ( e.isFinished() )\n      {\n        if ( e.next )\n        {                    \n          this.placeEvent( e.next );\n          this.finished = false;\n        }\n        else\n        {\n          delete this.events[attr];\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createEvents: function(animation, options)\n  {\n    options = options || {};\n    \n    var animation = anim8.animation( animation, options );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var events = animation.newEvents();\n    \n    if ( animation.isSaved() )\n    {      \n      for (var parserName in animation.input)\n      {\n        var parser = anim8.parser( parserName );\n        \n        if ( parser !== false )\n        {\n          parser.merge( animation.input, options, animation.options, events );\n        }\n      }\n    }\n    \n    this.onAnimation( animation, options, events );\n    \n    return events;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeSpring( spring );\n    \n    anim8.add( this );\n    \n    return spring;\n  },\n  \n  /**\n   * Removes springs for the specified attributes. If no attributes are specified then all springs\n   * are removed. Attributes can be specified as an array of attribute names or a string with attribute\n   * names separated by a space.\n   *\n   * @param {string|Array} attributes\n   */\n  unspring: function(attributes)\n  {\n    return this.springsFor( attributes, function(s)\n    {\n      delete this.springs[ s.attribute ];\n    });\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   */\n\tplay: function(animation, options, all)\n\t{\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    var attrs = {};\n    \n    for (var i = 0; i < events.length; i++)\n    { \n      this.placeEvent( events[i] );\n      \n      attrs[ events[i].attribute ] = true;\n    }\n    \n    if ( all )\n    {\n      for (var attr in this.events)\n      {\n        if ( !(attr in attrs) )\n        {\n          this.events[ attr ].finish( this.frame );\n        }\n      }\n    }\n    \n    anim8.add( this );\n    \n\t\treturn this;\n\t},\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options)\n\t{\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n        \n    var maxRemaining = 0.0;\n    \n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      if ( !e.isInfinite() )\n      {\n        maxRemaining = Math.max( maxRemaining, this.events[attr].timeRemainingInChain() );  \n      }\n    }\n        \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      \n      if ( attr in this.events  && !this.events[ attr ].isInfinite() )\n      {    \n        e.delay += (maxRemaining - this.events[attr].timeRemainingInChain());\n        \n        this.events[attr].queue( e );\n      }\n      else\n      {\n        e.delay += maxRemaining;\n        \n        this.placeEvent( e );\n      }\n    }\n    \n    anim8.add( this );\n    \n\t\treturn this;\n\t},\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all)\n  {\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionDelta );\n          var p2 = e1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, calc, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1, true ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n    \n    anim8.add( this );\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transitionInto: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation, options, all)\n  {\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionFromDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transitionIntoDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1, true ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n    \n    anim8.add( this );\n    \n    return this;\n  },\n  \n  /**\n   * Tweens a single attribute or a map of attributes to target values.\n   *\n   * .tweenTo( attributeName, targetValue, duration, delay, easing, repeat, sleep )\n   * .tweenTo( attributeMap, duration, delay, easing, repeat sleep )\n   */\n  tweenTo: function(input, a, b, c, d, e, f)\n  {\n    if ( anim8.isString( input ) )\n    {\n      var attr = anim8.attribute( input );\n      var calc = anim8.calculator( attr.calculator );\n      var target = calc.parse( a, attr.defaultValue );\n      var duration = anim8.coalesce( b, anim8.defaults.duration );\n      var delay = anim8.coalesce( c, anim8.defaults.delay );\n      var easing = anim8.easing( d );\n      var repeat = anim8.coalesce( e, anim8.defaults.repeat );\n      var sleep = anim8.coalesce( f, anim8.defaults.sleep );\n      var start = input in this.frame ? calc.clone( this.frame[ input ] ) : true;\n\n      var path = new anim8.Tween( input, calc, start, target );\n      var event = new anim8.Event( input, path, duration, easing, delay, sleep, repeat );\n      \n      this.placeEvent( event.newInstance() );\n    }\n    else if ( anim8.isObject( input ) )\n    {\n      for ( var attribute in input )\n      {\n        var attr = anim8.attribute( input );\n        var calc = anim8.calculator( attr.calculator );\n        var target = calc.parse( input[ attribute ], attr.defaultValue );\n        var duration = anim8.coalesce( a, anim8.defaults.duration );\n        var delay = anim8.coalesce( b, anim8.defaults.delay );\n        var easing = anim8.easing( c );\n        var repeat = anim8.coalesce( d, anim8.defaults.repeat );\n        var sleep = anim8.coalesce( e, anim8.defaults.sleep );\n        var start = attribute in this.frame ? calc.clone( this.frame[ attribute ] ) : true;\n        \n        var path = new anim8.Tween( attribute, calc, start, target );\n        var event = new anim8.Event( attribute, path, duration, easing, delay, sleep, repeat );\n        \n        this.placeEvent( event.newInstance() );\n      }\n    }\n    \n    anim8.add( this );\n    \n    return this;\n  },\n  \n  /**\n   * Tweens a single attribute or a map of attributes to target values.\n   *\n   * .tween( attributeName, startValue, targetValue, duration, delay, easing, repeat, sleep )\n   * .tween( startMap, endMap, duration, delay, easing, repeat sleep )\n   */\n  tween: function(input, a, b, c, d, e, f, g)\n  {\n    if ( anim8.isString( input ) )\n    {\n      var attr = anim8.attribute( input );\n      var calc = anim8.calculator( attr.calculator );\n      var start = calc.parse( a, attr.defaultValue );\n      var target = calc.parse( b, attr.defaultValue );\n      var duration = anim8.coalesce( c, anim8.defaults.duration );\n      var delay = anim8.coalesce( d, anim8.defaults.delay );\n      var easing = anim8.easing( e );\n      var repeat = anim8.coalesce( f, anim8.defaults.repeat );\n      var sleep = anim8.coalesce( g, anim8.defaults.sleep );\n\n      var path = new anim8.Tween( input, calc, start, target );\n      var event = new anim8.Event( input, path, duration, easing, delay, sleep, repeat );\n      \n      this.placeEvent( event.newInstance() );\n    }\n    else if ( anim8.isObject( input ) )\n    {\n      for ( var attribute in input )\n      {\n        var attr = anim8.attribute( input );\n        var calc = anim8.calculator( attr.calculator );\n        var start = calc.parse( input[ attribute ], attr.defaultValue );\n        var target = calc.parse( a[ attribute ], attr.defaultValue );\n        var duration = anim8.coalesce( b, anim8.defaults.duration );\n        var delay = anim8.coalesce( c, anim8.defaults.delay );\n        var easing = anim8.easing( d );\n        var repeat = anim8.coalesce( e, anim8.defaults.repeat );\n        var sleep = anim8.coalesce( f, anim8.defaults.sleep );\n        \n        var path = new anim8.Tween( attribute, calc, start, target );\n        var event = new anim8.Event( attribute, path, duration, easing, delay, sleep, repeat );\n        \n        this.placeEvent( event.newInstance() );\n      }\n    }\n    \n    anim8.add( this );\n    \n    return this;\n  },\n\t\n\t/**\n\t * Applies the initial state of all unstarted current events for the specified attributes immediately. \n\t * Attribute names can be given as an array or a space separated string. If no attributes are given all \n\t * attributes are assumed.\n\t *\n   * @param {string|array} attributes\n\t */\n\tapplyInitialState: function(attributes)\n\t{\n\t\tvar eventCount = this.eventsFor( attributes, function(event, attr)\n\t\t{\n\t\t\tif ( !event.hasStarted() && event.hasInitialState() )\n\t\t\t{\n\t\t\t\tevent.applyValue( this.frame, this.frame[ attr ], 0.0 );\n\t\t\t\t\n\t\t\t\tthis.updated[ attr ] = true;\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.apply();\n\t\t\n\t\treturn eventCount;\n\t},\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame )\n      {\n        return animator.frame[ attribute ];\n      }\n      \n      request[ attribute ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return anim8.attribute( attribute ).defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number] duration\n   * @param [number] delay\n   * @param [function|string] easing\n   * @param [number] repeat\n   * @param [number] sleep  \n   */\n  follow: function(attribute, path, duration, delay, easing, repeat, sleep)\n  {\n    var path = anim8.path( path );\n    \n    // attribute, path, duration, easing, delay, sleep, repeat) \n    var event = new anim8.Event( \n      attribute, \n      path, \n      anim8.coalesce( duration, anim8.defaults.duration ),\n      anim8.easing( easing ),\n      anim8.coalesce( delay, anim8.defaults.delay ),\n      anim8.coalesce( sleep, anim8.defaults.sleep ),\n      anim8.coalesce( repeat, anim8.defaults.repeat ),\n      true\n    );\n    \n    this.placeEvent( event.newInstance() );\n    \n    anim8.add( this );\n    \n    return this;\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  objectsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n    \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        \n        if ( attr in objects )\n        {\n          if ( resulting )\n          {\n            results.push( objects[attr] );\n          }\n          else\n          {\n            callback.call( this, objects[attr], attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      for (var attr in objects)\n      {\n        if ( resulting )\n        {\n          results.push( objects[attr] );\n        }\n        else\n        {\n          callback.call( this, objects[attr], attr );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n  \n  /**\n   * Invokes the callback for each event for the given attributes.\n   * \n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\teventsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.events );\n\t},\n  \n  /**\n   * Invokes the callback for each spring for the given attributes.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\tspringsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.springs );\n\t},\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event, attr) \n\t\t{\n\t\t\tdelete this.events[ attr ];\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event) \n\t\t{\n\t\t\twhile (event.next)\n\t\t\t{\n\t\t\t\tevent = event.next;\n\t\t\t}\n\t\t\t\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator.\n   */\n  hasSprings: function()\n  {\n    for (var attr in this.springs)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator or animating events.\n   */\n  isAnimating: function()\n  {\n    if ( this.hasSprings() )\n    {\n      return true;\n    }\n    \n    for (var attr in this.events)\n    {\n      if ( this.events[attr].isAnimating() )\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t}\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'play', 'queue', 'transition', 'restore', 'set', 'resume', 'pause', \n  'finish', 'end', 'stop', 'follow', 'applyInitialState', 'tweenTo', \n  'spring', 'unspring', 'apply', 'placeSpring', 'placeEvent'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.Animators.prototype = new Array();\n\n/**\n * Invokes a callback for each element in the array.\n * \n * @param {function} iterator\n */\nanim8.Animators.prototype.each = function(iterator, context) \n{\n  for (var i = 0; i < this.length; i++) \n  {\n    if ( iterator.call( context || this[i], this[i], i ) === false ) \n    {\n      break;\n    }\n  }\n\t\n\treturn this;\n};\n\n/**\n * Appends the array of animators given to the end of this array.\n *\n * @param {array} animators\n */\nanim8.Animators.prototype.fill = function(animators)\n{\n  for (var i = 0; i < animators.length; i++)\n  {\n    this.push( animators[i] );\n  }\n\n  return this;\n};\n\n/**\n * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n *\n * @param {function} filterer\n */\nanim8.Animators.prototype.filter = function(filterer)\n{\t\n\tvar alive = 0;\n\t\n\tfor (var i = 0; i < this.length; i++)\n\t{\n\t\tvar remove = filterer( this[i] );\n\t\t\n\t\tif ( !remove )\n\t\t{\n\t\t\tthis[alive++] = this[i];\n\t\t}\n\t}\n\t\n\tthis.length = alive;\n\t\n\treturn this;\n};\n\n/**\n * Returns the first animator in the array.\n */\nanim8.Animators.prototype.first = function()\n{\n  return this[0];\n};\n\n/**\n * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n */\nanim8.Animators.prototype.sequence = function(delay, easing, animation, options)\n{\n  return new anim8.Sequence( this, delay, easing, animation, options );\n};\n\n/**\n * Adds the following methods to make an array of Animators appear like a single Animator.\n */\nanim8.Animators.prototype.restore           = anim8.delegate( 'restore', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.placeSpring       = anim8.delegate( 'placeSpring', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.placeEvent        = anim8.delegate( 'placeEvent', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.preupdate         = anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.update            = anim8.delegate( 'update', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.apply             = anim8.delegate( 'apply', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.trimEvents        = anim8.delegate( 'trimEvents', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.deactivate        = anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.destroy           = anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.spring            = anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS );\nanim8.Animators.prototype.unspring          = anim8.delegate( 'unspring', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.play              = anim8.delegate( 'play', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.queue             = anim8.delegate( 'queue', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.transition        = anim8.delegate( 'transition', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.tweenTo           = anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.applyInitialState = anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.follow            = anim8.delegate( 'follow', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.eventsFor         = anim8.delegate( 'eventsFor', anim8.delegate.RETURN_RESULTS );\nanim8.Animators.prototype.springsFor        = anim8.delegate( 'springsFor', anim8.delegate.RETURN_RESULTS );\nanim8.Animators.prototype.stop              = anim8.delegate( 'stop', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.end               = anim8.delegate( 'end', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.finish            = anim8.delegate( 'finish', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.pause \t\t\t      = anim8.delegate( 'pause', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.resume \t\t\t      = anim8.delegate( 'resume', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.set               = anim8.delegate( 'set', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.get               = anim8.delegate( 'get', anim8.delegate.RETURN_FIRST );\nanim8.Animators.prototype.isAnimating       = anim8.delegate( 'isAnimating', anim8.delegate.RETURN_TRUE );\nanim8.Animators.prototype.hasEvents         = anim8.delegate( 'hasEvents', anim8.delegate.RETURN_TRUE );\nanim8.Animators.prototype.hasSprings        = anim8.delegate( 'hasSprings', anim8.delegate.RETURN_TRUE );\nanim8.Animators.prototype.on\t\t\t          = anim8.delegate( 'on', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.once\t\t          = anim8.delegate( 'once', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.off\t\t\t          = anim8.delegate( 'off', anim8.delegate.RETURN_THIS );\nanim8.Animators.prototype.trigger           = anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS );\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate();\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );","anim8.Sequence = function(animators, delay, easing, animation, options)\n{\n  this.animators = animators;\n  this.delay = delay;\n  this.easing = anim8.easing( easing );\n  this.animation = anim8.animation( animation, options );\n  this.options = options;\n};\n\nanim8.Sequence.prototype =\n{\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  createEvents: function(i)\n  {\n    var events = this.animation.newEvents();\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = 0; k < events.length; k++)\n    {\n      events[k].delay += delayOffset;\n    }\n    \n    return events;\n  },\n  \n  play: function()\n  {    \n    this.animators.each(function(animator, i)\n    {\n      var events = this.createEvents(i);\n      \n      for (var k = 0; k < events.length; k++)\n      {\n        animator.placeEvent( events[k] );\n      }\n            \n    }, this);\n    \n    return this.add();\n  },\n  \n  add: function()\n  {\n    this.animators.each(function(animator)\n    {\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    });\n    \n    this.animators.applyInitialState();\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n  \t\tanim8.trigger('starting');\n  \t\tanim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    return true;\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var easings   = animation.easings || {};\n    var delays    = animation.delays || {};\n    var sleeps    = animation.sleeps || {};\n    var repeats   = animation.repeats || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      e.easing   = anim8.coalesce( easings[attr],   newOptions.easing,    oldOptions.easing,    e.easing );\n      e.duration = anim8.coalesce( durations[attr], newOptions.duration,  oldOptions.duration,  e.duration );\n      e.delay    = anim8.coalesce( delays[attr],    newOptions.delay,     oldOptions.delay,     e.delay );\n      e.sleep    = anim8.coalesce( sleeps[attr],    newOptions.sleep,     oldOptions.sleep,     e.sleep );\n      e.repeat   = anim8.coalesce( repeats[attr],   newOptions.repeat,    oldOptions.repeat,    e.repeat );\n      e.easing   = anim8.easing( e.easing );\n    }\n  }\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.ParserDeltas.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserDeltas.prototype.parse = function( animation, options, events )\n{\n  // 1. If deltas wasn't specified, assume a uniform distribution of points\n  // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n  // 3. Generate the events\n  \n\tvar deltas = animation.deltas;\n\tvar values = animation.values;\n\n  if ( !anim8.isDefined( deltas ) )\n  {\n    var valueCount = 0;\n    \n\t\tfor (var attr in values)\n\t\t{\n      valueCount++; \n    }\n    \n    deltas = [];\n    \n    for (var i = 0; i < valueCount; i++)\n    {\n      deltas[i] = i / (valueCount - 1);\n    }\n  }\n\tif ( anim8.isArray( deltas ) )\n\t{\n\t\tvar deltaObject = {};\n\t\t\n\t\tfor (var attr in values)\n\t\t{\n\t\t\tdeltaObject[attr] = deltas;\t\n\t\t}\n\t\t\n\t\tdeltas = deltaObject;\n\t}\n\t\n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculators[attr] = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaults[attr] = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculators[attr] = anim8.calculator.default;\n\t\t\tdefaults[attr] = calculators[attr].create();\n    }\n\t\t\n\t\tfor (var k = 0; k < value.length; k++)\n\t\t{\n\t\t\tvalue[k] = calculators[attr].parse( value[k], defaults[attr] );\n\t\t}\n\t\t\n    var duration = anim8.coalesce( durations[attr], options.duration, anim8.defaults.duration );\n    var easing   = anim8.coalesce( easings[attr], options.easing, anim8.defaults.easing );\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep, anim8.defaults.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat, anim8.defaults.repeat );\n\n    var path     = new anim8.DeltaPath( attr, calculators[attr], values[attr], deltas[attr] );\n    var event    = new anim8.Event( attr, path, duration, anim8.easing( easing ), delay, sleep, repeat, true, this );\n    \n    events.push( event );\n\t}\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.values = new anim8.ParserDeltas();","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.ParserFinal.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserFinal.prototype.parse = function( animation, options, events )\n{\n  // 1. Generate the events, only caring about the delays and durations\n  \n\tvar values = animation.final;\n\t\n  var delays = animation.delays || {};\n  var durations = animation.durations || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n\n    value = calculator.parse( value, defaultValue ); \n\t\t\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    var duration = anim8.coalesce( durations[attr], options.duration, anim8.defaults.duration );\n    \n    var path     = new anim8.PointPath( attr, calculator, value );\n    var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, false, this );\n    \n    events.push( event );\n\t}\n};\n\n/**\n * Merges the options with the given event instances. This is when an existing \n * animation is provided but the user wants to override the animation's options.\n *\n * Because event properties can be specified in several places there's a priority\n * to which one takes precedence. The properties specified in the animation object\n * itself are highest priority, followed by the new options, then by the old\n * options, and finally by the existing property on the event instance.\n *\n * @param {object} animation\n * @param {object} newOptions\n * @param {object} oldOptions\n * @param {Array} events\n */\nanim8.ParserFinal.prototype.merge = function( animation, newOptions, oldOptions, events )\n{\n  var durations = animation.durations || {};\n  var delays    = animation.delays || {};\n  \n  for (var i = 0; i < events.length; i++)\n  {\n    var e = events[i];\n    var attr = e.attribute;\n      \n    if ( e.getParser() !== this )\n    {\n      continue;\n    }\n    \n    e.delay    = anim8.coalesce( delays[attr],    newOptions.delay,     oldOptions.delay,     e.delay ) +\n                 anim8.coalesce( durations[attr], newOptions.duration,  oldOptions.duration,  e.duration );\n  }\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.final = new anim8.ParserFinal();","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.ParserInitial.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserInitial.prototype.parse = function( animation, options, events )\n{\n  // 1. Generate the events, only caring about the delays\n  \n\tvar values = animation.initial;\n\t\n  var delays = animation.delays || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n    \n    value = calculator.parse( value, defaultValue ); \n\t\t\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    \n    var path     = new anim8.PointPath( attr, calculator, value );\n    var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, true, this );\n    \n    events.push( event );\n\t}\n};\n\n/**\n * Merges the options with the given event instances. This is when an existing \n * animation is provided but the user wants to override the animation's options.\n *\n * Because event properties can be specified in several places there's a priority\n * to which one takes precedence. The properties specified in the animation object\n * itself are highest priority, followed by the new options, then by the old\n * options, and finally by the existing property on the event instance.\n *\n * @param {object} animation\n * @param {object} newOptions\n * @param {object} oldOptions\n * @param {Array} events\n */\nanim8.ParserInitial.prototype.merge = function( animation, newOptions, oldOptions, events )\n{\n  var durations = animation.durations || {};\n  var delays    = animation.delays || {};\n  \n  for (var i = 0; i < events.length; i++)\n  {\n    var e = events[i];\n    var attr = e.attribute;\n      \n    if ( e.getParser() !== this )\n    {\n      continue;\n    }\n    \n    e.delay    = anim8.coalesce( delays[attr],    newOptions.delay,     oldOptions.delay,     e.delay );\n  }\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.initial = new anim8.ParserInitial();","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.ParserKeyframe.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserKeyframe.prototype.parse = function( animation, options, events )\n{\n  // 1. Normalize keys by converting aliases to the actual value\n  // 2. Split up keys that have commas into multiple entries\n  // 3. Validate keys and remove invalid ones - also calculate max key value\n  // 4. Sort frames by the key\n  // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n  // 6. Generate the events\n  \n  var kframes = animation.keyframe;\n  \n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n  \n  var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n  \n  var sort = false;\n  \n  var aliases = {\n    from:     '0',\n    start:    '0',\n    initial:  '0',\n    first:    '0',\n    half:     '50',\n    middle:   '50',\n    to:       '100',\n    end:      '100',\n    last:     '100'\n  };\n  \n  // split up comma delimited times\n  for (var time in kframes)\n  {\n    if ( time in aliases )\n    {\n      kframes[ aliases[time] ] = kframes[ time ];\n      \n      delete kframes[ time ];\n    }\n    else if ( time.indexOf(',') !== -1 )\n    {\n      var times = time.split(',');\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i]] = kframes[time];\n      }\n      \n      delete kframes[time];\n      \n      sort = true;\n    }\n  }\n  \n  var times = [];\n  \n  // validate times\n  var lastTime = 0.0;\n  var maxTime = 0.0;\n  \n  for (var time in kframes)\n  {\n    var t = parseFloat(time);\n    \n    if (isNaN(t))\n    {\n      delete kframes[time];\n    }\n    else\n    {\n      if (t < lastTime)\n      {\n        sort = true;\n      }\n      \n      times.push({\n        order: t,\n        key: time,\n        value: kframes[time]\n      });\n      \n      lastTime = t;\n      \n      maxTime = Math.max( maxTime, t );\n    }\n  }\n  \n  // sort if necessary\n  if (sort)\n  {\n    times.sort(function(a, b) {\n      return a.order - b.order;\n    });\n    \n    kframes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      kframes[times[i].key] = times[i].value;\n    }\n  }\n  \n  // split up into deltas and values\n  var deltas = {};\n  var values = {};\n  var calculators = {};\n\tvar defaults = {};\n  var pathEasings = {};\n  \n  for (var i = 0; i < times.length; i++)\n  {\n    var frame = times[i];\n    var easing = anim8.coalesce( frame.value.easing, options.easing );\n    \n    delete frame.value.easing;\n    \n    for (var attr in frame.value)\n    {\n      if ( !(attr in deltas) )\n      {\n        deltas[attr] = [];\n        values[attr] = [];\n        pathEasings[attr] = [];\n        \n        if (attr in anim8.attribute)\n        {\n          calculators[attr] = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\t\t\tdefaults[attr] = anim8.attribute[attr].defaultValue;\n        }\n        else\n        {\n          calculators[attr] = anim8.calculator.default;\n\t\t\t\t\tdefaults[attr] = calculators[attr].create();\n        }\n      }\n\t\t\t\n      deltas[attr].push( frame.order / maxTime );\n      values[attr].push( calculators[attr].parse( frame.value[attr], defaults[attr] ) );\n      pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[attr], easing ) ) );\n    }\n  }\n\t\n  // create events & paths\n  for (var attr in deltas)\n  {\n    var duration = anim8.coalesce( durations[attr], options.duration, anim8.defaults.duration );\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep, anim8.defaults.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat, anim8.defaults.repeat );\n    \n    var path     = new anim8.KeyframePath( attr, calculators[attr], values[attr], deltas[attr], pathEasings[attr] );\n    var event    = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, true, this );\n    \n    events.push( event );\n  }\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.keyframe = new anim8.ParserKeyframe();","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTween = function()\n{\n  \n};\n\n// ParserTween extends anim8.Parser()\nanim8.ParserTween.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserTween.prototype.parse = function( animation, options, events )\n{\n  // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n  var tweenTo = animation.tweenTo;\n\n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n\n\tfor (var attr in tweenTo)\n\t{\n    var calculator = null;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue= calculator.create();\n    }\n\t\t\n    var value    = calculator.parse( tweenTo[attr], defaultValue );\n    var duration = anim8.coalesce( durations[attr], options.duration, anim8.defaults.duration );\n    var easing   = anim8.coalesce( easings[attr], options.easing, anim8.defaults.easing );\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep, anim8.defaults.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat, anim8.defaults.repeat );\n\n    var path     = new anim8.Tween( attr, calculator, true, value );\n    var event    = new anim8.Event( attr, path, duration, anim8.easing( easing ), delay, sleep, repeat, true, this );\n    \n    events.push( event );\n\t}\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.tweenTo = new anim8.ParserTween();","\n/**\n * The factory for Plain-Old-Javascript-Objects.\n */\nanim8.factories.object = \n{\n  is: function(subject) \n\t{\n    return anim8.isObject( subject ) && !anim8.isElement( subject );\n  },\n\n  parseAnimator: function(from)\n  {\n    var animator = from.$animator;\n    \n    if ( !animator )\n    {\n      animator = new anim8.Animator( from );\n      animator.factory = this;\n      \n      from.$animator = animator;\n    }\n\n    return animator;\n  },\n  \n  parseAnimators: function(from, animators) \n\t{\n    animators.push( this.parseAnimator( from ) );\n  }\n};","\n/*\n  DOM create styles to apply, then apply them all at the same time\n  don't apply styles if they're impercivable (convert value to pixels of applicable)\n\n*/\n\n/**\n * All DOM related\n */\nanim8.dom = {};\n\n/* \n  anim8.property[name] = {\n    get: function(e, anim) {\n      // based on anim.animating, gets one or more value from the entity and places it on anim.frame. this function should only do this for an attribute if\n      // anim.animating[attribute] === false. When it successfully gets a value anim.animating[attribute] should be set to true. This is called before an animation\n      // begins on attributes that will be animated based on the current value. \n    },\n    set: function(e, anim) {\n      // applies the applicable attributes in anim.frame to the entity, \n    }\n }\n*/\nanim8.property = function(prop) \n{\n  if ( anim8.isObject( prop ) && anim8.isFunction( prop.get ) && anim8.isFunction( prop.set ) ) \n  {\n    return prop;\n  }\n  if ( anim8.isString( prop ) && prop in anim8.property )\n  {\n\t  return anim8.property[ prop ];\n  }\n\t\n  throw prop + ' is not a valid property';\n}\n\n/**\n * Computes the desired style of the given element and returns it as a string. The style\n * given must be in hyphenated format like so: anim8.style( element, 'font-size' ) = '12px'\n */\nanim8.style = (function()\n{\n  var hyphenize = function(str) \n\t{\n    str = str.replace(/[a-z][A-Z]/g, function(str, letter)\n    {\n     return str[0] + '-' + str[1].toLowerCase();\n    });\n    \n    str = str.replace(/^Webkit/, '-webkit');\n    str = str.replace(/^Moz/, '-moz');\n    str = str.replace(/^Ms/, '-ms');\n    str = str.replace(/^O/, '-o');\n    str = str.replace(/^Khtml/, '-khtml');\n    \n    return str;\n  };\n\t\n\treturn function(e, style) \n\t{\n\t  if (e.currentStyle)\n\t\t{\n\t    return e.currentStyle[ style ];\n\t  } \n\t\telse if (document.defaultView && document.defaultView.getComputedStyle) \n\t\t{\n\t    return document.defaultView.getComputedStyle( e, null ).getPropertyValue( hyphenize( style ) );\n\t  } \n\t\telse \n\t\t{\n\t    return e.style[ style ]; \n\t  }\n\t};\n\t\n})();\n\n/**\n * Given an array of styles this will return the first one that is present on elements in the current browser.\n */\nanim8.prefix = (function() \n{\n  var a = document.createElement('a');\n  \n  return function(prefixes) \n  {\n    for (var i = 0; i < prefixes.length; i++) \n    {\n      if ( anim8.isDefined( a.style[ prefixes[ i ] ] ) ) \n      {\n        return prefixes[i];\n      }\n    }\n    return false;\n  };\n  \n})();\n\n/**\n * Calculators how many pixels a given value & unit is.\n * \n * For Example: anim8.toPixels( 100, 'in' ) \n *    returns how many pixels are in 1 inch, with up to 2 decimal points of accuracy.\n */\nanim8.toPixels = function(baseValue, baseUnit, defaultRate)\n{\n  if ( document.body )\n  {\n    var div = document.createElement('div');\n    document.body.appendChild( div );\n    div.style.width = baseValue + baseUnit;\n    var pixels = (div.offsetWidth / baseValue);\n    document.body.removeChild( div );\n    return pixels || defaultRate;\n  }\n  \n  return defaultRate;\n};\n\n/**\n * Parses the string for a value and a unit.\n *\n * @param {string} value\n */\nanim8.parseValue = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(px|em|%|vw|ex|cm|mm|in|pt|pc|deg|rad)?/;\n  \n  return function(x)\n  {\n    var parsed = regex.exec( x );\n    \n    if (parsed) \n    {      \n      return {\n        value: parseFloat( parsed[1] ),\n        unit: parsed[3]\n      }\n    }\n    \n    return false;\n  };\n})();\n\n\n/**\n * Converts one unit to another for a given element.\n *\n * For Example: anim8.convert( element, '100px', '%', 'parentWidth' )\n *    returns how much percent 100px relativeTo parentWidth of the given element\n *\n * @param {HTMLElement} e\n * @param {string} from\n * @param {string} toUnit\n * @param {string} relativeTo\n */\nanim8.convert = (function()\n{  \n  var getFontSize = function(e, notUnit)\n  {\n    var fontSize = anim8.style( e, 'fontSize' );\n    var parsed = anim8.parseValue( fontSize );\n    \n    if ( !parsed || parsed.unit === notUnit )\n    {\n      return 12;\n    }\n    \n    if ( parsed.unit === 'px' ) \n    {\n      return parsed.value;\n    }\n    \n    return getConverterScale( e, conversions[ parsed.unit ].px, relativeTo );\n  };\n\n  var variables = {};\n  \n  variables.parentWidth = function(e)\n  {\n    return e.parentNode.scrollWidth;\n  };\n  variables.parentHeight = function(e)\n  {\n    return e.parentNode.scrollHeight;\n  };\n  variables.width = function(e)\n  {\n    return e.offsetWidth;\n  };\n  variables.height = function(e)\n  {\n    return e.offsetHeight;\n  };\n  variables.fontSize = function(e)\n  {\n    return getFontSize( e, '%' );\n  };\n  variables.parentFontSize = function(e)\n  {\n    return getFontSize( e.parentNode, '%' );\n  };\n  variables.htmlFontSize = function(e)\n  {\n    var htmlElement = document.getElementsByTagName(\"html\")[0];\n    \n    return getFontSize( htmlElement, '%' );\n  };\n  \n  var conversions = {};\n  \n  conversions.pt  = { px: anim8.toPixels(100, 'pt') };\n  conversions.in  = { px: anim8.toPixels(100, 'in') };\n  conversions.cm  = { px: anim8.toPixels(1000, 'cm') };\n  conversions.mm  = { px: anim8.toPixels(100000, 'mm') };\n  conversions.vw  = { px: anim8.toPixels(1000, 'vw') };\n  conversions.deg = { rad: Math.PI / 180.0};\n\n  conversions.em = \n  {\n    px: function(e, relativeTo) \n    {\n      return getFontSize( e, 'em' );\n    }\n  };\n  \n  conversions.rem = \n  {\n    px: function(e, relativeTo) \n    {\n      var htmlElement = document.getElementsByTagName(\"html\")[0];\n      \n      return getFontSize( htmlElement, 'rem' );\n    }\n  };\n  \n  conversions['%'] = \n  {\n    px: function(e, relativeTo) \n    {\n      if ( anim8.isNumber( relativeTo ) )\n      {\n        return relativeTo;\n      }\n      if ( relativeTo in variables )\n      {\n        return variables[ relativeTo ]( e ) / 100.0;\n      }\n      \n      return 1.0;\n    }\n  };\n  \n  // Populate conversions going other way.\n  for (var unit in conversions)\n  {\n    for (var to in conversions[ unit ])\n    {\n      if ( !(to in conversions) )\n      {\n        conversions[ to ] = {};\n      }\n      \n      if ( !(unit in conversions[ to ]) )\n      {\n        var given = conversions[ unit ][ to ];\n        \n        if ( anim8.isNumber( given ) )\n        {\n          conversions[ to ][ unit ] = 1.0 / given;  \n        }\n        if ( anim8.isFunction( given ) )\n        {\n          conversions[ to ][ unit ] = (function(converter) \n          {\n            return function(e, relativeTo) \n            {\n              return 1.0 / converter( e, relativeTo );\n            };\n          })( given );\n        }\n      }\n    }\n  }\n  \n  // Given an element, convert, and relativeTo - return the number we need to multiply by.\n  var getConverterScale = function(e, converter, relativeTo)\n  {\n    if ( anim8.isNumber( converter ) )\n    {\n      return converter;\n    }\n    else if ( anim8.isFunction( converter ) )\n    {\n      return converter( e, relativeTo );\n    }\n    \n    return 1.0;\n  };\n  \n  return function(e, from, toUnit, relativeTo)\n  {\n    if ( anim8.isNumber( from ) )\n    {\n      return from;\n    }\n    \n    var parsed = anim8.parseValue( from );\n    \n    if ( !parsed )\n    {\n      return false;\n    }\n    \n    var value = parsed.value;\n    var fromUnit = parsed.unit;\n    \n    if ( !fromUnit || fromUnit === toUnit )\n    {\n      return value;\n    }\n    \n    // First see if we have a direct conversion available...\n    if ( fromUnit in conversions && toUnit in conversions[ fromUnit ] )\n    {\n      var converter = conversions[ fromUnit ][ toUnit ];\n      \n      value *= getConverterScale( e, converter, relativeTo );\n    }\n    // Otherwise convert it to px, then to the desired unit\n    else if ( fromUnit in conversions && conversions[ fromUnit ].px && toUnit in conversions.px )\n    {\n      var converter1 = conversions[ fromUnit ].px;\n      var converter2 = conversions.px[ toUnit ];\n      \n      value *= getConverterScale( e, converter1, relativeTo );\n      value *= getConverterScale( e, converter2, relativeTo );\n    }\n    \n    return value;\n  };\n  \n})();\n\n\nanim8.factories.dom = \n{\n\tids: 0,\n  \n\tcached: {},\n  \n  attribute: 'anim8',\n  \n  is: function(subject) \n\t{\n    return anim8.isElement( subject );\n  },\n  \n  has: function(from)\n  {\n    return from.getAttribute( this.attribute ) in this.cached;\n  },\n  \n  parseAnimators: function(from, animators) \n  {\n    animators.push( this.parseAnimator( from ) );\n  },\n  \n  parseAnimator: function(from) \n\t{\n\t\tvar animatorId = from.getAttribute( this.attribute );\n\t\t\n\t\tif (!(animatorId in this.cached)) \n\t\t{\n\t\t\tvar animator = new anim8.DomAnimator( from );\n\t\t\t\n\t\t\tfrom.setAttribute( this.attribute, animatorId = animator.id = ++this.ids );\n\t\t\t\n\t\t\tanimator.factory = this;\n\t\t\t\n\t\t\tthis.cached[animatorId] = animator;\n\t\t}\n\n    return this.cached[ animatorId ];\n  },\n  \n\tdestroy: function(animator) \n\t{\n\t\tdelete this.cached[ animator.id ];\n\t}\n};","\nanim8.property.factory = function(nm, relativeTo) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.style( e, nm );\n        var converted = anim8.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.property.factoryDerivable = function(nm, relativeTo, deriver) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.style( e, nm );\n        var converted = anim8.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n        else if ( anim8.isFunction( deriver ) )\n        {\n          converted = anim8.convert( e, deriver( e ), anim.units[ nm ], relativeTo );\n          \n          if ( converted !== false )\n          {\n            anim.frame[nm] = converted;\n            anim.animating[nm] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.property.factoryColor = function(nm) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var parsed = anim8.color.parse( e.style[nm] );\n        \n        if (parsed !== anim8.color.invalidColor) \n        {\n          anim.frame[nm] = parsed;\n          anim.animating[nm] = true;\n        }              \n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[nm] = anim8.color.format( anim.frame[nm] );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.property.padding                  = anim8.property.factory( 'padding', 'parentWidth' );\nanim8.property.paddingTop               = anim8.property.factory( 'paddingTop', 'parentWidth' );\nanim8.property.paddingRight             = anim8.property.factory( 'paddingRight', 'parentWidth' );\nanim8.property.paddingBottom            = anim8.property.factory( 'paddingBottom', 'parentWidth' );\nanim8.property.paddingLeft              = anim8.property.factory( 'paddingLeft', 'parentWidth' );\n\nanim8.property.margin                   = anim8.property.factory( 'margin', 'parentWidth' );\nanim8.property.marginTop                = anim8.property.factory( 'marginTop', 'parentWidth' );\nanim8.property.marginRight              = anim8.property.factory( 'marginRight', 'parentWidth' );\nanim8.property.marginBottom             = anim8.property.factory( 'marginBottom', 'parentWidth' );\nanim8.property.marginLeft               = anim8.property.factory( 'marginLeft', 'parentWidth' );\n\nanim8.property.borderRadius             = anim8.property.factory( 'borderRadius', 'width' );\nanim8.property.borderTopLeftRadius      = anim8.property.factory( 'borderTopLeftRadius', 'width' );\nanim8.property.borderTopRightRadius     = anim8.property.factory( 'borderTopRightRadius', 'width' );\nanim8.property.borderBottomLeftRadius   = anim8.property.factory( 'borderBottomLeftRadius', 'width' );\nanim8.property.borderBottomRightRadius  = anim8.property.factory( 'borderBottomRightRadius', 'width' );\n\nanim8.property.borderWidth              = anim8.property.factory( 'borderWidth' );\nanim8.property.borderTopWidth           = anim8.property.factory( 'borderTopWidth' );\nanim8.property.borderRightWidth         = anim8.property.factory( 'borderRightWidth' );\nanim8.property.borderBottomWidth        = anim8.property.factory( 'borderBottomWidth' );\nanim8.property.borderLeftWidth          = anim8.property.factory( 'borderLeftWidth' );\n\nanim8.property.outlineWidth             = anim8.property.factory( 'outlineWidth' );\nanim8.property.textIndent               = anim8.property.factory( 'textIndent', 'parentWidth' );\nanim8.property.borderSpacing            = anim8.property.factory( 'borderSpacing' );\nanim8.property.fontSize                 = anim8.property.factory( 'fontSize', 'parentFontSize' );\nanim8.property.lineHeight               = anim8.property.factory( 'lineHeight', 'fontSize' );\nanim8.property.zIndex                   = anim8.property.factory( 'zIndex' );\n\nanim8.property.color                    = anim8.property.factoryColor( 'color' );\nanim8.property.backgroundColor          = anim8.property.factoryColor( 'backgroundColor' );\nanim8.property.borderTopColor           = anim8.property.factoryColor( 'borderTopColor' );\nanim8.property.borderRightColor         = anim8.property.factoryColor( 'borderRightColor' );\nanim8.property.borderBottomColor        = anim8.property.factoryColor( 'borderBottomColor' );\nanim8.property.borderLeftColor          = anim8.property.factoryColor( 'borderLeftColor' );\nanim8.property.outlineColor             = anim8.property.factoryColor( 'outlineColor' );\n\nanim8.property.minWidth                 = anim8.property.factory( 'minWidth', 'parentWidth' );\nanim8.property.maxWidth                 = anim8.property.factory( 'maxWidth', 'parentWidth' );\nanim8.property.minHeight                = anim8.property.factory( 'minHeight', 'parentHeight' );\nanim8.property.maxHeight                = anim8.property.factory( 'maxHeight', 'parentHeight' );\n\nanim8.property.width                    = anim8.property.factoryDerivable('width', 'parentWidth', function(e) { return e.offsetWidth + 'px'; });\nanim8.property.height                   = anim8.property.factoryDerivable('height', 'parentHeight', function(e) { return e.offsetHeight + 'px'; });\n\nanim8.property.top                      = anim8.property.factoryDerivable('top', 'parentHeight', function(e) { return e.offsetTop + 'px'; });\nanim8.property.right                    = anim8.property.factoryDerivable('right', 'parentWidth', function(e) { return (e.parentNode.scrollWidth - (e.offsetLeft + e.offsetWidth)) + 'px'; });\nanim8.property.bottom                   = anim8.property.factoryDerivable('bottom', 'parentHeight', function(e) { return (e.parentNode.scrollHeight - (e.offsetTop + e.offsetHeight)) + 'px'; });\nanim8.property.left                     = anim8.property.factoryDerivable('left', 'parentWidth', function(e) { return e.offsetLeft + 'px'; });\n\nanim8.property.visibility = \n{\n  get: function(e, anim) \n  {\n    if (anim.animating.visibility === false) \n    {\n      var style = anim8.style( e, 'visibility' );\n      anim.frame.visibility = style === 'hidden' ? 0.0 : 1.0;\n      anim.animating = true;\n    }\n  },\n  set: function(e, anim) \n  {\n    anim.styles.visibility = anim.frame.visibility < 0.5 ? 'hidden' : 'visible'\n  },\n  unset: function(e, anim)\n  {\n    e.style.visibility = null;\n  }\n}\n\nanim8.property.backface = (function()\n{\n  var css = anim8.prefix(['WebkitBackfaceVisibility', 'MozBackfaceVisibility', 'msBackfaceVisibility', 'BackfaceVisibility']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim)\n    {\n      if ( anim.animating.backface === false )\n      {\n        var style = anim8.style( e, css ); \n        \n        anim.frame.backface = (style === 'visible') ? 1.0 : 0.0;\n        anim.animating.backface = true;\n      }\n    },\n    set: function(e, anim)\n    {\n      anim.styles[css] = anim.frame.backface < 0.5 ? 'none' : 'visible';\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n    \n  };\n  \n})();\n\nanim8.property.transformOrigin = (function() \n{\n  var css = anim8.prefix(['WebkitTransformOrigin', 'MozTransformOrigin', 'OTransformOrigin', 'msTransformOrigin', 'transformOrigin']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  var keywords = \n  {\n    'left':   '0%',\n    'center': '50%',\n    'right':  '100%',\n    'top':    '0%',\n    'bottom': '100%'\n  };\n  \n  var setOriginAttribute = function(e, value, anim, attr, relativeTo ) \n  {\n    if (anim.animating[attr] === false) \n    {\n      if ( value in keywords )\n      {        \n        value = keywords[ value ];\n      }\n\n      var converted = anim8.convert( e, value, anim.units[ attr ], relativeTo );\n      \n      if ( converted !== false )\n      {\n        anim.frame[ attr ] = converted;\n        anim.animating[ attr ] = true;\n      }\n    }\n  };\n  \n  var setOrigin = function(e, split, anim) \n  {\n    if (anim.animating.origin === false) \n    {\n      if ((split.length === 1) || \n          (split.length === 2 && split[0] === split[1]) || \n          (split.length === 3 && split[0] === split[1] && split[1] === split[2])) \n      {     \n        setOriginAttribute( e, split[0], anim, 'origin', 'width' );\n      }            \n    }\n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.style( e, css );\n      \n      if (style) \n      {\n        var origin = style.toLowerCase();\n        var split = origin.split(' ');\n        \n        switch (split.length) \n        {\n        case 3:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOriginAttribute( e, split[2], anim, 'originZ' );\n          setOrigin( e, split, anim );\n          break;\n        case 2:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        case 1:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[0], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var style = null;\n      \n      if ( anim8.isDefined( anim.frame.originZ ) )\n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' ) + ' ' + anim.valueOr( 'originZ', 'origin', 'z' );\n      } \n      else \n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' );\n      }\n      \n      anim.styles[css] = style;\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.property.transform = (function() \n{\n  var css = anim8.prefix(['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);\n   \n  if ( !css )\n  {\n    return false;\n  }\n\n  var d2 = { translate: true, scale: true };\n  var d3 = { translate3d: true, scale3d: true };\n  var d4 = { rotate3d: true };\n  var axis = ['X', 'Y', 'Z'];\n    \n  var regex = \n  {\n    translate: /translate\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translate3d: /translate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translateX: /translateX\\(([^\\)]+)\\)/i,\n    translateY: /translateY\\(([^\\)]+)\\)/i,\n    translateZ: /translateZ\\(([^\\)]+)\\)/i,\n    scale: /scale\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scale3d: /scale3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scaleX: /scaleX\\(([^\\)]+)\\)/i,\n    scaleY: /scaleY\\(([^\\)]+)\\)/i,\n    scaleZ: /scaleZ\\(([^\\)]+)\\)/i,\n    rotate: /rotate\\(([^\\)]+)\\)/i,\n    rotate3d: /rotate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    rotateX: /rotateX\\(([^\\)]+)\\)/i,\n    rotateY: /rotateY\\(([^\\)]+)\\)/i,\n    rotateZ: /rotateZ\\(([^\\)]+)\\)/i,\n    skew: /skew\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    skewX: /skewX\\(([^\\)]+)\\)/i,\n    skewY: /skewY\\(([^\\)]+)\\)/i\n  };\n  \n  var parse = function( e, value, anim, attr, relativeTo )\n  {\n    var desiredUnit = anim.units[ attr ];\n    var converted = anim8.convert( e, value, desiredUnit, relativeTo );\n    \n    if ( converted !== false )\n    {\n      return converted;\n    }\n    \n    // TODO show convert this to desiredUnit, however defaultValue may be non-scalar.\n    return anim8.attribute( attr ).defaultValue;    \n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.style( e, css );\n      \n      for (var attr in anim.animating) \n      {\n        if ( anim.animating[ attr ] === false && attr in regex ) \n        {\n          var parsed = regex[ attr ].exec( style );\n          \n          if ( parsed ) \n          {\n            if ( attr in d4 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr ),\n                angle: parse( e, parsed[4], anim, attr )\n              };\n            }\n            else if ( attr in d3 )\n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr )\n              };\n            }\n            else if ( attr in d2 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' )\n              };\n            }\n            else \n            {\n              anim.frame[attr] = parse( e, parsed[1], anim, attr, 'width' );\n            }\n            \n            anim.animating[attr] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    {  \n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n      var transforms = [];\n      \n      for (var attr in regex) \n      {\n        if (attr in anim.frame) \n        { \n          var value = anim.frame[ attr ];\n          var unit = anim.units[ attr ];\n          \n          if (attr in d4) \n          {\n            transforms.push( attr + '(' + value.x + ',' + value.y + ',' + value.z + ',' + value.angle + unit + ')' );\n          }\n          else if (attr in d3) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ',' + value.z + unit + ')' );\n          }\n          else if (attr in d2) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ')' );\n          }\n          else\n          {\n            transforms.push( attr + '(' + value + unit + ')' );\n          }\n        }\n      }\n\t\t\t\n      if (transforms.length) \n      {\n        anim.styles[css] = transforms.join(' ');\n      }\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.property.opacity = (function() \n{\n  var css = anim8.prefix(['WebkitOpacity', 'MozOpacity', 'KhtmlOpacity', 'opacity']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating.opacity === false) \n      {\n        var style = anim8.style( e, css );\n        var opacity = parseFloat( style );\n        \n        if ( !isNaN(opacity) ) \n        {\n          anim.frame.opacity = opacity\n          anim.animating.opacity = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[ css ] = anim.frame.opacity;\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n  };\n  \n})();\n\nanim8.property.filter = (function() \n{\n  var css = anim8.prefix(['WebkitFilter', 'MozFilter', 'OFilter', 'msFilter', 'filter']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n\tvar methods = \n  {\n\t\tgrayscale: \t'grayscale',\n\t\tsepia: \t\t\t'sepia',\n\t\tsaturate: \t'saturate',\n\t\thueRotate: \t'hue-rotate',\n\t\tinvert: \t\t'invert',\n\t\tbrightness: 'brightness',\n\t\tcontrast: \t'contrast',\n    blur:       'blur'\n\t};\n\t\n\tvar patterns = {};\n\t\n\tfor (var attr in methods) \n  {\n\t\tpatterns[attr] = new RegExp( methods[attr] + '\\(([^\\)]+)\\)', 'i');\n\t}\n  \n\treturn {\n    \n\t\tget: function(e, anim) \n    {\n\t\t\tvar style = anim8.style( e, css );\n      \n\t\t\tfor (var attr in patterns) \n      {\n\t\t\t\tif ( anim.animating[attr] === false ) \n        {\n\t\t\t\t\tvar parsed = patterns[attr].exec( style );\n          \n\t\t\t\t\tif (parsed !== false) \n          {\n            var converted = anim8.convert( e, parsed[1], anim.units[ attr ] );\n            \n            if ( converted !== false )\n            {\n              anim.frame[ attr ] = converted;\n              anim.animating[ attr ] = true;\n            }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\t\tset: function(e, anim) \n    {\n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n\t\t\tvar filters = [];\n      \n\t\t\tfor (var attr in methods) \n      {\n\t\t\t\tif ( attr in anim.frame ) \n        {\n          filters.push( methods[attr] + '(' + anim.value( attr ) + ')' );\n\t\t\t\t}\n\t\t\t}\n      \n\t\t\tif (filters.length) \n      {\n\t\t\t\tanim.styles[ css ] = filters.join(' ');\n\t\t\t}\n\t\t},\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n\t};\n\t\n})();\n\nanim8.property.center = \n{\n  get: function(e, anim)\n  {\n    var cx = (e.offsetLeft + e.offsetWidth * 0.5) + 'px';\n    var cy = (e.offsetTop + e.offsetHeight * 0.5) + 'px';\n    \n    if ( anim.animating.center === false )\n    {\n      var desiredUnit = anim.units.center;\n      var ccx = anim8.convert( e, cx, desiredUnit, 'parentWidth' );\n      var ccy = anim8.convert( e, cy, desiredUnit, 'parentHeight' );\n    \n      if ( ccx !== false && ccy !== false )\n      {\n        anim.frame.center = {\n          x: ccx,\n          y: ccy\n        };\n        anim.animating.center = true;\n      }\n    }\n    if ( anim.animating.centerX === false )\n    {\n      var desiredUnit = anim.units.centerX;\n      var ccx = anim8.convert( e, cx, desiredUnit, 'parentWidth' );\n      \n      if ( ccx !== false )\n      {\n        anim.frame.centerX = ccx;\n        anim.animating.centerX = true;\n      }\n    }\n    if ( anim.animating.centerY === false )\n    {\n      var desiredUnit = anim.units.centerY;\n      var ccy = anim8.convert( e, cy, desiredUnit, 'parentHeight' );\n      \n      if ( ccy !== false )\n      {\n        anim.frame.centerY = ccy;\n        anim.animating.centerY = true;\n      }\n    }\n  },\n  preset: function(e, anim)\n  {\n    anim.cached.width  = anim8.convert( e, e.offsetWidth + 'px', anim.units.centerX || anim.units.center, 'parentWidth' );\n    anim.cached.height = anim8.convert( e, e.offsetHeight + 'px', anim.units.centerY || anim.units.center, 'parentHeight' );\n  },\n  set: function(e, anim)\n  {\n    var rw = anim.cached.width * 0.5;\n    var rh = anim.cached.height * 0.5;\n        \n    if ( anim.updated.center )\n    {\n      anim.styles.left = (anim.frame.center.x - rw) + anim.units.center;\n      anim.styles.top = (anim.frame.center.y - rh) + anim.units.center;\n    }\n    if ( anim.updated.centerX )\n    {\n      anim.styles.left = (anim.frame.centerX - rw) + anim.units.centerX;\n    }\n    if ( anim.updated.centerY )\n    {\n      anim.styles.top = (anim.frame.centerY - rh) + anim.units.centerY;\n    }\n  }\n};\n\nanim8.property.orbit = \n{\n  DEGREE_TO_RADIAN: Math.PI / 180.0,\n  \n  RADIAN_TO_DEGREE: 180.0 / Math.PI,\n  \n  get: function(e, anim)\n  {\n    var ox = (e.parentNode.scrollWidth * 0.5);\n    var oy = (e.parentNode.scrollHeight * 0.5); \n    var cx = (e.offsetLeft + e.offsetWidth * 0.5);\n    var cy = (e.offsetTop + e.offsetHeight * 0.5);\n    var dx = cx - ox;\n    var dy = cy - oy;\n  \n    if ( anim.animating.orbitOffset === false )\n    {\n      var cunit = anim.units.orbitOffset;\n      var cox = anim8.convert( e, ox + 'px', cunit, 'parentWidth' );\n      var coy = anim8.convert( e, oy + 'px', cunit, 'parentHeight' );\n      \n      if ( cox !== false && coy !== false )\n      {\n        anim.frame.orbitOffset = {\n          x: cox,\n          y: coy\n        };\n        anim.animating.orbitOffset = false;\n      }\n    }\n    \n    if ( anim.animating.distance === false )\n    {\n      anim.frame.distance = Math.sqrt( dx * dx + dy * dy );\n      anim.animating.distance = true;\n    }\n    \n    if ( anim.animating.angle === false )\n    {\n      anim.frame.angle = Math.atan2( dy, dx ) * this.RADIAN_TO_DEGREE;\n      anim.animating.angle = true;\n    }\n  },\n  \n  preset: function(e, anim)\n  {  \n    anim.cached.parentWidth = e.parentNode.scrollWidth;\n    anim.cached.parentHeight = e.parentNode.scrollHeight;\n    anim.cached.width = e.offsetWidth;\n    anim.cached.height = e.offsetHeight;\n  },\n  \n  set: function(e, anim)\n  {\n    // TODO calculator this correctly\n    var cunit = anim.units.orbitOffset || '%';\n    var orbitX = anim.frame.orbitOffset ? anim.frame.orbitOffset.x : 50;\n    var orbitY = anim.frame.orbitOffset ? anim.frame.orbitOffset.y : 50;\n    \n    var originUnit = anim.units.origin || '%';\n    var originX = anim.frame.origin ? anim.frame.origin.x : 50;\n    var originY = anim.frame.origin ? anim.frame.origin.y : 50;\n    \n    var cox = anim8.convert( e, orbitX + cunit, 'px', anim.cached.parentWidth / 100.0 );\n    var coy = anim8.convert( e, orbitY + cunit, 'px', anim.cached.parentHeight / 100.0 );\n    \n    var ox = anim8.convert( e, originX + originUnit, 'px', anim.cached.width / 100.0 );\n    var oy = anim8.convert( e, originY + originUnit, 'px', anim.cached.height / 100.0 );\n    \n    var angle = (anim.frame.angle || 0.0) * this.DEGREE_TO_RADIAN;\n    var distance = anim.frame.distance || 0.0;\n        \n    var cos = Math.cos( angle ) * distance;\n    var sin = Math.sin( angle ) * distance;\n    \n    anim.styles.left = (cox + cos - ox) + 'px';\n    anim.styles.top = (coy + sin - oy) + 'px';\n  }\n};","\n/**\n * All animatable attributes for DomAnimators & HTMLElements.\n */\n\nanim8.attribute.padding                 = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.paddingTop              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.paddingRight            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.paddingBottom           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.paddingLeft             = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.margin                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.marginTop               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.marginRight             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.marginBottom            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.marginLeft              = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.borderRadius            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderTopLeftRadius     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderTopRightRadius    = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderBottomLeftRadius  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderBottomRightRadius = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.borderWidth             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderTopWidth          = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderRightWidth        = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderBottomWidth       = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderLeftWidth         = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.outlineWidth\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.outlineOffset\t\t\t\t\t\t= {defaultValue: 0};\nanim8.attribute.textIndent\t\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderSpacing\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.fontSize\t\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\nanim8.attribute.lineHeight\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\n\nanim8.attribute.origin                  = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'transformOrigin', calculator: '2d'};\nanim8.attribute.originX                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\nanim8.attribute.originY                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\n\nanim8.attribute.opacity                 = {defaultValue: 1};\nanim8.attribute.zIndex                  = {defaultValue: 1};\n\nanim8.attribute.width                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.minWidth                = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.maxWidth                = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.height                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.minHeight               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.maxHeight               = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.angle                   = {defaultValue: 0, property: 'orbit'};\nanim8.attribute.distance                = {defaultValue: 0, property: 'orbit'};\nanim8.attribute.orbitOffset             = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'orbitOffset', calculator: '2d'};\n\nanim8.attribute.top                     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.right                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.bottom                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.left                    = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.center                  = {defaultValue: {x:0, y:0}, defaultUnit: 'px', property: 'center', calculator: '2d'};\nanim8.attribute.centerX                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\nanim8.attribute.centerY                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\n\nanim8.attribute.blur                    = {defaultValue: 0, property: 'filter', defaultUnit: 'px'};\nanim8.attribute.sepia                   = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.brightness              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.grayscale               = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.contrast                = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.invert                  = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.saturation              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.hueRotate               = {defaultValue: 0, property: 'filter', defaultUnit: 'deg'};\n\nanim8.attribute.rotate                  = {defaultValue: 0, property: 'transform', defaultUnit: 'deg'};\nanim8.attribute.rotate3d                = {defaultValue: {x:0, y:0, z:1, angle:0}, property: 'transform', calculator: 'quaternion', defaultUnit: 'deg'};\n\nanim8.attribute.translate               = {defaultValue: {x:0, y:0}, property: 'transform', calculator: '2d', defaultUnit: 'px'};\nanim8.attribute.translateX              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.attribute.translateY              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.attribute.translateZ              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.attribute.translate3d             = {defaultValue: {x:0, y:0, z:0}, property: 'transform', calculator: '3d', defaultUnit: 'px'};\n\nanim8.attribute.scale                   = {defaultValue: {x: 0, y:0}, property: 'transform', calculator: '2d'};\nanim8.attribute.scaleX\t                = {defaultValue: 1, property: 'transform'};\nanim8.attribute.scaleY  \t              = {defaultValue: 1, property: 'transform'};\nanim8.attribute.scaleZ  \t              = {defaultValue: 1, property: 'transform'};\nanim8.attribute.scale3d                 = {defaultValue: {x:1, y:1, z:1}, property: 'transform', calculator: '3d'};\n\nanim8.attribute.skew                    = {defaultValue: {x:0, y:0}, defaultUnit: 'deg', property: 'transform', calculator: '2d'};\nanim8.attribute.skewX                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\nanim8.attribute.skewY                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\n\nanim8.attribute.backface                = {defaultValue: 0};\nanim8.attribute.visibility              = {defaultValue: 1};\n\nanim8.attribute.backgroundColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.color                   = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.borderTopColor          = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.borderRightColor        = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.borderBottomColor       = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.borderLeftColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.outlineColor            = {defaultValue: anim8.color(), calculator: 'rgba'};","\n/**\n * Instantiates a new DomAnimator given a subject.\n * \n * @param {HTMLElement} e\n */\nanim8.DomAnimator = function(e)\n{\n\tthis.reset( e );\n  this.properties = {};\n  this.trues = {};\n  this.truesUpdated = false;\n  this.attributeToProperty = {};\n  this.animating = {};\n  this.units = {};\n  this.cached = {};\n  this.styles = {};\n  this.styled = false;\n  this.stylesUpdated = false;\n  this.animation = null;\n};\n\n/**\n * Extends anim8.Animator\n */\nanim8.DomAnimator.prototype = new anim8.Animator();\n\n/**\n * A method thats invoked along with all other animators before updates are called.\n * This is used to make any necessary preparations before the animator is updated.\n *\n * If any events that were recently added have true values this is where we replace\n * this true values with the values currently on the subject.\n */\nanim8.DomAnimator.prototype.preupdate = function()\n{\n  if ( this.truesUpdated )\n  {    \n    var properties = {};\n  \n    for (var attr in this.trues)\n    {\n      properties[ this.attributeToProperty[attr] ] = true;\n      \n      this.animating[ attr ] = false;\n    }\n  \n    for (var prop in properties)\n    {\n      this.properties[ prop ].get( this.e, this );\n    }\n    \n    for (var attr in this.trues)\n    {\n      if ( this.animating[attr] === true )\n      {\n        var calculator = anim8.calculator( this.attributes[ attr ].calculator );\n\n        var e = this.trues[ attr ];\n        var p = e.path.copy();\n        var ps = p.points;\n        \n        for (var i = 0; i < ps.length; i++)\n        {\n          if ( ps[i] === true )\n          {\n            ps[i] = calculator.clone( this.frame[ attr ] );\n          }\n        }\n\n        e.path = p;\n      }\n    \n      delete this.trues[ attr ];\n    }\n    \n    this.truesUpdated = false;\n  }\n  \n  for (var prop in this.properties)\n  {\n    var property = this.properties[ prop ];\n    \n    if ( anim8.isFunction( property.preset ) )\n    {\n      property.preset( this.e, this );\n    }\n  }\n  \n  this.trigger('preupdate');\n};\n  \n/**\n * Updates the animator with the current time. All events and springs in this\n * animator are updated.\n *\n * @param {number} now\n */\nanim8.DomAnimator.prototype.update = function(now)\n{\n  anim8.Animator.prototype.update.apply( this, arguments );\n    \n  this.getStyles();\n  this.stylesUpdated = true;\n};\n\n/**\n * A method invoked when an animation is about to be played in the Animator.\n * \n * @param {anim8.Animation} animation\n * @param {object} options\n * @param {array:anim8.EventInstance} events\n */\nanim8.DomAnimator.prototype.onAnimation = function(animation, options, events)\n{  \n  if ( animation.input.units )\n  {\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n    \n      if ( attr in animation.input.units )\n      {\n        e.unit = animation.input.units[ attr ];\n      }\n    }  \n  }\n};\n\n/**\n * Builds the styles map in preparation to be applied.\n */\nanim8.DomAnimator.prototype.getStyles = function()\n{\n  this.styles = {};\n  \n  var applyProperties = {};\n  \n  for (var attr in this.frame)\n  {\n    if ( this.updated[ attr ] )\n    {\n      var prop = this.attributeToProperty[ attr ];\n      \n      if ( prop in this.properties )\n      {\n        applyProperties[ prop ] = true; \n      }\n    }\n  }\n  \n  for (var prop in applyProperties)\n  {\n    this.properties[ prop ].set( this.e, this );  \n    \n    this.styled = true;\n  }\n};\n\n/**\n * Applies all updated attributes to the subject. This method is invoked with all of the other\n * animators at the end of the animation cycle.\n */\nanim8.DomAnimator.prototype.apply = function()\n{\n  if ( !this.styled && !this.stylesUpdated )\n  {\n    this.getStyles();\n  }\n  \n  if ( this.styled )\n  {    \n    for (var prop in this.styles)\n    {\n       this.e.style[ prop ] = this.styles[ prop ];\n    }\n    \n    for (var attr in this.frame)\n    {\n      this.updated[ attr ] = false;\n    }\n  \n    this.styled = false;\n  }\n  \n  this.stylesUpdated = false;\n  \n  this.trigger('apply');\n  \n  this.trimEvents();\n\n  return this;\n};\n  \n/**\n * Places the event in this animator replacing any event that exists for the same\n * attribute. The next time the animator is updated the event will be started.\n *\n * @param {anim8.EventInstance} e\n */\nanim8.DomAnimator.prototype.placeEvent = function( e )\n{\n  anim8.Animator.prototype.placeEvent.apply( this, arguments );\n  \n  var attr = e.attribute;\n  var attribute = anim8.attribute( attr );\n  var prop = anim8.coalesce( attribute.property, attr );\n  var property = anim8.property( prop );\n  \n  if ( e.hasTrue() )\n  {    \n    this.trues[ attr ] = e;\n    this.truesUpdated = true;\n  }\n  \n  this.attributes[ attr ] = attribute;\n  this.properties[ prop ] = property;\n  this.attributeToProperty[ attr ] = prop;\n  this.units[ attr ] = e.unit || attribute.defaultUnit || '';\n\n  return this;\n};\n  \n/**\n * Places the spring in this animator replacing any spring that exists for the same\n * attribute. The next time the animator is updated the spring will be started.\n *\n * @param {anim8.Spring} s\n */\nanim8.DomAnimator.prototype.placeSpring = function( s )\n{\n  anim8.Animator.prototype.placeSpring.apply( this, arguments );\n  \n  var attr = s.attribute;\n  var attribute = anim8.attribute( attr );\n  var prop = anim8.coalesce( attribute.property, attr );\n  var property = anim8.property( prop );\n  \n  this.attributes[ attr ] = attribute;\n  this.properties[ prop ] = property;\n  this.attributeToProperty[ attr ] = prop;\n  this.units[ attr ] = attribute.defaultUnit || '';\n\n  return this;\n};\n  \n/**\n * Restores any temporary state that may exist on this Animator that\n * is a result from animations.\n */\nanim8.DomAnimator.prototype.restore = function()\n{\n  for (var prop in this.properties)\n  {\n    this.properties[ prop ].unset( this.e, this );\n  }\n\t\n\tthis.frame = {};\n\n  return this;\n};\n\n/**\n * A method that can be invoked to destroy an animator - removing any relationship between\n * the subject and animator. The next time an animator is generated for the subject a new\n * one will be created.\n */\nanim8.DomAnimator.prototype.destroy = function()\n{\n  this.factory.destroy( this );\n  \n  anim8.Animator.prototype.destroy.apply( this, arguments );\n\n  return this;\n};\n\n/**\n * Sets the given attributes to this Animator immediately.\n *\n * @param {object} attributes\n */\nanim8.DomAnimator.prototype.set = function(attributes)\n{\n  var props = {};\n  var updated = {};\n  var units = {};\n  var styles = {};\n  \n  for (var attr in attributes)\n  {\n    var attribute = anim8.attribute( attr );\n    var prop      = anim8.coalesce( attribute.property, attr );\n    var property  = anim8.property( prop );\n    var calc      = anim8.calculator( attribute.calculator );\n    var value     = attributes[ attr ];\n    \n    units[ attr ] = attribute.defaultUnit || '';\n    \n    if ( anim8.isString( value ) )\n    {\n      var parsed = anim8.parseValue( value, attribute.defaultUnit );\n      \n      if ( parsed !== false )\n      {\n        units[ attr ] = parsed.unit || attribute.defaultUnit || '';\n        value = parsed.value;\n      }  \n    }\n    \n    var parsed = calc.parse( value, attribute.defaultValue );\n    \n    if ( parsed !== false )\n    {\n      props[ prop ] = property;\n      attributes[ attr ] = parsed;\n      updated[ attr ] = true;\n    }\n  }\n    \n  var flash = \n  {\n    units: units,\n     \n    frame: attributes,\n    \n    updated: updated,\n    \n    styles: styles,\n    \n    cached: {},\n    \n    value: function(attr)\n    {\n      return attributes[ attr ] + units[ attr ];\n    },\n    \n    valueOr: function(attr, other, subproperty)\n    {\n      var value = attributes[ attr ];\n      \n      if ( !anim8.isDefined( value ) )\n      {\n        value = attributes[ attr = other ];\n      \n        if ( anim8.isDefined( subproperty ) )\n        {\n          value = value[ subproperty ];\n        }\n      }\n  \n      return value + units[ attr ];\n    }\n  };\n  \n  for (var prop in props)\n  {\n    var property = props[ prop ];\n    \n    if ( anim8.isFunction( property.preset ) )\n    {\n      props[ prop ].preset( this.e, flash );\n    }\n  }\n  \n  for (var prop in props)\n  {\n    props[ prop ].set( this.e, flash );\n  }\n  \n  for (var prop in styles)\n  {\n    this.e.style[ prop ] = styles[ prop ];\n  }\n\n  return this;\n};\n\n/**\n * Gets the current attribute values for all attributes specified. The argument must be an object\n * where the key is the name of an attribute and the value is the desired unit.\n *\n * @param {object} attributes\n */\nanim8.DomAnimator.prototype.get = function(attributes)\n{\n  var props = {};\n  var animating = {};\n  var units = {};\n  var out = {};\n  \n  for (var attr in attributes)\n  {    \n    var attribute = anim8.attribute( attr );\n    var prop      = anim8.coalesce( attribute.property, attr );\n    var property  = anim8.property( prop );\n    var calc      = anim8.calculator( attribute.calculator );\n    \n    animating[ attr ] = false;    \n    units[ attr ] = attributes[ attr ] || attribute.defaultUnit || '';\n    props[ prop ] = property;\n    out[ attr ] = calc.clone( attribute.defaultValue );\n  }\n  \n  var flash = \n  {    \n    units: units,\n    \n    frame: out,\n    \n    animating: animating,\n    \n    unit: function(attr)\n    {\n      return units[ attr ];\n    }\n  };\n  \n  for (var prop in props)\n  {\n    props[ prop ].get( this.e, flash );\n  }\n  \n  return out;\n};\n\n/**\n * Returns a function that returns the current value for the given attribute when invoked.\n * \n * @param {string} attribute\n */\nanim8.DomAnimator.prototype.ref = function(attribute, desiredUnit, relativeTo)\n{\n  var animator = this;\n  var request = {};\n  \n  return function()\n  {\n    if ( attribute in animator.frame && anim8.isNumber( animator.frame[ attribute ] ) )\n    {\n      return anim8.convert( animator.e, animator.value( attribute ), desiredUnit, relativeTo );\n    }\n    \n    request[ attribute ] = desiredUnit;\n    \n    var current = animator.get( request );\n    \n    if ( anim8.isDefined( current[ attribute ] ) )\n    {\n      return current[ attribute ];\n    }\n    \n    return anim8.attribute( attribute ).defaultValue;\n  };\n},\n\n/**\n * Returns the value for the given attribute as a string with the current units.\n *\n * @param {string} attr\n */\nanim8.DomAnimator.prototype.value = function(attr)\n{\n  return this.frame[ attr ] + this.units[ attr ];\n};\n\n/**\n * Returns the value for the given attribute as a string with the current units.\n * if the attribute doesn't exist a secondary one is looked up. If that value\n * is an object and contains the given subproperty the value is resolved once again.\n *\n * @param {string} attr\n * @param {string} other\n * @param [string] subproperty\n */\nanim8.DomAnimator.prototype.valueOr = function(attr, other, subproperty)\n{\n  var value = this.frame[ attr ];\n    \n  if ( !anim8.isDefined( value ) )\n  {\n    value = this.frame[ attr = other ];\n    \n    if ( anim8.isDefined( subproperty ) )\n    {\n      value = value[ subproperty ];\n    }\n  }\n  \n  return value + this.units[ attr ];\n};\n"],"sourceRoot":"/source/"}