{"version":3,"sources":["anim8js-core.js","anim8js-fast-map.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-point.js","anim8js-attrimator.js","anim8js-attrimator-map.js","anim8js-event.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-physics.js","anim8js-animation.js","anim8js-transition.js","anim8js-options.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tweenTo.js","anim8js-parser-tweenFrom.js","anim8js-parser-move.js","anim8js-parser-springs.js","anim8js-parser-physics.js","anim8js-parser-travel.js","anim8js-factory.js","anim8js-object.js","anim8js-dom-core.js","anim8js-dom-property.js","anim8js-dom-attribute.js","anim8js-dom-animator.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","defaults","duration","easing","teasing","delay","sleep","repeat","scale","transitionTime","transitionOutro","transitionIntro","transitionEasing","transitionGranularity","cache","cacheOptions","cacheTransitions","noOptions","noTransition","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","trim","String","prototype","replace","log","size","prop","isEmpty","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","number","value","constant","variable","resolve","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","FastMap","map","reset","putMap","put","values","keys","indices","key","get","remove","removeAt","index","lastValue","pop","lastKey","indexOf","has","hasOverlap","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","pair","e","t","easingType","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","yoyo","mirror","reverse","flip","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attrimator","attr","attribute","getAttribute","frame","calculator","clone","cloneDefault","relative","relativeAmount","mask","isComputed","relativeFunction","calc","mul","add","randomSelection","randomFunction","selected","ZERO","Path","compute","create","resolvedMin","resolvedMax","Calculator","createConstants","ONE","INFINITY","adds","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","isValid","isZero","isEqual","distSq","isRelative","getRelativeAmount","z","NumberCalculator","defaultValue","amountScale","ab","epsilon","Point2dCalculator","y","cx","cy","rx","ry","ix","iy","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Point3dCalculator","cz","rz","iz","dz","QuaternionCalculator","angle","ra","ia","da","RGBCalculator","rr","rg","rb","ir","ig","ib","dr","dg","db","RGBACalculator","path","spring","type","name","points","hasComputed","ps","reference","trues","last","first","point","replaceComputed","resolvePoint","isLinear","granularity","prev","temp","Tween","CubicPath","p0","p1","p2","p3","d1","d2","d3","i1","i3","QuadraticPath","DeltaPath","deltas","ds","d0","pd","JumpPath","CompiledPath","pointCount","KeyframePath","easings","ea","defaultEasing","PointPath","Attrimator","parser","startTime","pauseTime","elapsed","stopTime","paused","cycle","startCycle","setTime","updated","finish","update","getElapsed","stopIn","milliseconds","valueAt","totalTime","timeRemaining","isInfinite","pause","resume","isPaused","isFinished","getParser","queue","AttrimatorMap","queueMap","onNewAttribute","maxRemaining","attrimators","existing","unqueueAt","remaining","applyCycle","nextCycle","currentDepth","nextDepth","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","scaleBase","hasInitialState","state","applyValue","oldState","newState","iteration","computeValue","baseValue","Spring","set","rest","position","velocity","gravity","finishOnRest","finished","parseValue","dt","MAX_DT","starting","updateVelocity","EPSILON","resolveRest","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","Physics","acceleration","terminal","initalPosition","vel","resolveVelocity","acc","resolveAcceleration","pos","usePosition","animation","options","Animation","animationStrings","anim","parsedAnimation","parsedOptions","attrimatorMap","helper","ParserHelper","parserName","save","isSaved","newAttrimators","merge","force","transition","originalInput","transitionArray","part","charAt","intro","substring","outro","parseProperty","propertyAdd","propertyScale","fn","attrimatorsAdded","active","cycleCurrent","cycleNext","cycleEnded","newCycle","applyCurrentCycle","endCurrentCycle","restore","preupdate","aa","setDefault","wasFinished","minCycle","placeAttrimator","trimAttrimators","activate","deactivate","destroy","createAttrimators","onAnimation","queueAttrimators","play","all","playAttrimators","transitionAttrimators","a1","a2","getFuture","outroDelta","getPoint","transitionPath","transitionEvent","newInstance","tweenTo","target","tweenManyTo","targets","tween","starts","ends","tweenMany","ref","request","follow","attrimatorsFor","attributes","resulting","stop","unset","hasAttrimators","getSubject","wrapper","invoke","func","args","DeferAnimator","onCycleStart","onCycleEnd","fill","each","iterator","filter","filterer","alive","getSubjects","mid","e0","e1","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","Parser","newOptions","oldOptions","mergeEasing","mergeRepeat","mergeDelay","mergeSleep","mergeDuration","mergeScale","mergeScaleBase","prepareSpecifics","specifics","parseEasing","parseFirst","parseRepeat","parseNumber","parseDelay","parseSleep","parseDuration","parseScale","parseScaleBase","option","parseEvent","parseOptionFunction","optionAdd","optionScale","baseRaw","base","mergeFirst","mergeNumber","ParserDeltas","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","keyframe","sort","from","half","to","times","maxTime","order","pathEasings","ParserTweenTo","ParserTweenFrom","tweenFrom","ParserMove","move","ParseSpring","springs","ParsePhysics","physics","physic","stopAt","ParserTravel","travel","pointing","subtractVelocity","pointingFunction","targetValue","difference","traveling","traveler","highestPriorityFactory","factoryName","is","priority","Factory","ObjectFactory","$animator","calculatorName","dom","DomFactory","cached","ids","elementAttribute","animatorId","DomAnimator","setAttribute","propertyName","defaultUnit","style","hyphenated","hyphenize","str","currentStyle","document","defaultView","getComputedStyle","getPropertyValue","prefix","createElement","prefixes","convert","toPixels","baseUnit","defaultRate","body","div","appendChild","width","pixels","offsetWidth","removeChild","getFontSize","notUnit","fontSize","getConverterScale","px","relativeTo","variables","parentWidth","parentNode","scrollWidth","parentHeight","scrollHeight","height","offsetHeight","parentFontSize","htmlFontSize","htmlElement","getElementsByTagName","pt","cm","mm","vw","deg","rad","PI","em","rem","given","converter","toUnit","fromUnit","converter1","converter2","nm","converted","units","styles","factoryDerivable","deriver","factoryColor","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","outlineWidth","textIndent","borderSpacing","lineHeight","zIndex","backgroundColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor","minWidth","maxWidth","minHeight","maxHeight","offsetTop","offsetLeft","visibility","backface","css","transformOrigin","keywords","setOriginAttribute","setOrigin","origin","originZ","valueOr","transform","desiredUnit","getter1d","getter2d","getter3d","getter4d","setter1d","setter2d","setter3d","setter4d","regexes","translate","translate3d","translateX","translateY","translateZ","scale3d","scaleX","scaleY","scaleZ","rotate","rotate3d","rotateX","rotateY","rotateZ","skew","skewX","skewY","getters","setters","props","attrs","transforms","join","opacity","grayscale","sepia","saturate","hueRotate","invert","brightness","contrast","blur","patterns","RegExp","filters","ccx","ccy","centerX","centerY","preset","rw","rh","orbit","DEGREE_TO_RADIAN","RADIAN_TO_DEGREE","ox","oy","orbitOffset","cunit","cox","coy","atan2","orbitX","orbitY","originUnit","originX","originY","outlineOffset","saturation","properties","propertiesPreset","attributeToProperty","styled","stylesUpdated","presets","getStyles","applyProperties","flash","other","subproperty"],"mappings":"AAOAA,GAAAC,MAAA,SAAAC,GAEA,GAAAA,YAAAD,OAAAE,SAEA,MAAAD,EAGA,IAAAE,GAAAH,MAAAI,WAAAH,GAAA,EAEA,OAAAE,MAAA,GAEA,EAGAA,EAAAE,YAAAJ,IAQAK,IAAAC,OAAA,SAAAC,GAEA,GAAAL,GAAAH,MAAAI,WAAAI,GAAA,GACAC,IAEA,IAAAN,KAAA,EAIA,MAFAA,GAAAO,aAAAF,EAAAC,GAEA,GAAAT,OAAAW,UAAAF,EAGAT,OAAAY,QAAAJ,KAEAA,GAAAA,GAKA,KAAA,GAFAC,MAEAI,EAAA,EAAAA,EAAAL,EAAAM,OAAAD,IACA,CACA,GAAAE,GAAAf,MAAAQ,EAAAK,GAEAE,MAAA,GAEAN,EAAAO,KAAAD,GAIA,MAAA,IAAAf,OAAAW,UAAAF,IAOAT,MAAAiB,UAQAC,SAAA,IAOAC,OAAA,OAQAC,QAAA,SAOAC,MAAA,EAOAC,MAAA,EAOAC,OAAA,EAOAC,MAAA,EAOAC,eAAA,IAOAC,gBAAA,IAOAC,gBAAA,IAOAC,iBAAA,SAWAC,sBAAA,EAUAC,OAAA,EASAC,cAAA,EASAC,kBAAA,EAOAC,aAMAC,iBAWAlC,MAAAmC,KAAA,aAKAnC,MAAAoC,UAAA,SAAAC,GAEA,MAAA,mBAAAA,IAMArC,MAAAsC,WAAA,SAAAD,GAEA,SAAAA,GAAAA,EAAAE,aAAAF,EAAAG,MAAAH,EAAAI,QAMAzC,MAAA0C,SAAA,SAAAL,GAEA,MAAA,gBAAAA,IAMArC,MAAA2C,SAAA,SAAAN,GAEA,MAAA,gBAAAA,IAOArC,MAAAY,QAAA,SAAAyB,GAEA,MAAAA,aAAAO,QAMA5C,MAAA6C,SAAA,SAAAR,GAEA,MAAA,gBAAAA,IAMArC,MAAA8C,UAAA,SAAAT,GAEA,MAAA,gBAAAU,aAAAV,YAAAU,aACAV,GAAA,gBAAAA,IAAA,OAAAA,GAAA,IAAAA,EAAAW,UAAA,gBAAAX,GAAAY,UAMAjD,MAAAkD,IAAA,WAEA,MAAAC,MAAAD,IAAAC,KAAAD,IAAA,WAEA,OAAA,GAAAC,OAAAC,cAUApD,MAAAqD,KAAA,WAEA,MAAAC,QAAAC,UAAAF,KACA,SAAAhB,GACA,MAAAA,GAAAgB,QAGA,SAAAhB,GACA,MAAAA,GAAAmB,QAAA,qBAAA,QAcAxD,MAAAyD,KAAA,EAUAzD,MAAA0D,KAAA,SAAArB,GAEA,GAAArC,MAAAY,QAAAyB,IAAArC,MAAA2C,SAAAN,GAEA,MAAAA,GAAAvB,MAEA,IAAA,OAAAuB,EAEA,MAAA,EAEA,IAAArC,MAAA6C,SAAAR,GACA,CACA,GAAAqB,GAAA,CAEA,KAAA,GAAAC,KAAAtB,GAEAqB,GAGA,OAAAA,GAEA,MAAA1D,OAAA0C,SAAAL,GAEAA,EAGA,GAQArC,MAAA4D,QAAA,SAAAvB,GAEA,GAAArC,MAAAY,QAAAyB,IAAArC,MAAA2C,SAAAN,GAEA,MAAAA,GAAAvB,OAAA,CAEA,IAAA,OAAAuB,EAEA,OAAA,CAEA,IAAArC,MAAA6C,SAAAR,GAEA,IAAA,GAAAsB,KAAAtB,GAEA,OAAA,MAGA,IAAArC,MAAA0C,SAAAL,GAEA,MAAA,KAAAA,CAGA,QAAA,GAUArC,MAAA6D,KAAA,SAAAxB,GAEA,GAAArC,MAAAY,QAAAyB,GACA,CAEA,IAAA,GADAwB,MACAhD,EAAA,EAAAA,EAAAwB,EAAAvB,OAAAD,IAEAgD,EAAA7C,KAAAhB,MAAA6D,KAAAxB,EAAAxB,IAEAwB,GAAAwB,MAEA,IAAA7D,MAAA6C,SAAAR,GACA,CACA,GAAAwB,KACA,KAAA,GAAAC,KAAAzB,GAEAwB,EAAAC,GAAA9D,MAAA6D,KAAAxB,EAAAyB,GAEAzB,GAAAwB,EAGA,MAAAxB,IASArC,MAAA+D,OAAA,SAAAC,GAEA,IAAA,GAAAnD,GAAA,EAAAA,EAAAoD,UAAAnD,OAAAD,IACA,CACA,GAAAqD,GAAAD,UAAApD,EAEA,IAAAb,MAAA6C,SAAAqB,GAEA,IAAA,GAAAP,KAAAO,GAEAP,IAAAK,KAEAA,EAAAL,GAAAO,EAAAP,IAMA,MAAAK,IASAhE,MAAAmE,SAAA,SAAAH,GAEA,IAAA,GAAAnD,GAAA,EAAAA,EAAAoD,UAAAnD,OAAAD,IACA,CACA,GAAAqD,GAAAD,UAAApD,EAEA,IAAAb,MAAA6C,SAAAqB,GAEA,IAAA,GAAAP,KAAAO,GAEAF,EAAAL,GAAAO,EAAAP,GAKA,MAAAK,IAMAhE,MAAAoE,SAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,MAAAxE,OAAAoC,UAAAiC,GAAAA,EACArE,MAAAoC,UAAAkC,GAAAA,EACAtE,MAAAoC,UAAAmC,GAAAA,EACAC,GAUAxE,MAAAyE,KAAA,WAEA,GAAAC,GAAA,gEAEAC,GACAC,GAAA,EACAL,EAAA,IACAM,GAAA,IACAC,MAAA,IAAA,GACAC,MAAA,IAAA,GACAC,EAAA,IACAC,IAAA,IACAC,EAAA,IACAC,IAAA,IACAC,EAAA,KACAC,GAAA,KAGA,OAAA,UAAAZ,EAAAa,GAEA,GAAAtF,MAAA0C,SAAA+B,GAGA,MAAAc,MAAAC,MAAAf,EAEA,IAAAzE,MAAA2C,SAAA8B,GACA,CACA,GAAAgB,GAAAf,EAAAgB,KAAAjB,EAEA,IAAAgB,EACA,CACA,GAAAhB,GAAAkB,WAAAF,EAAA,IACAG,EAAAH,EAAA,EAOA,OALAG,KAAAjB,KAEAF,GAAAE,EAAAiB,IAGAL,KAAAC,MAAAf,IAIA,MAAAzE,OAAAoE,SAAAkB,EAAA,OAWAtF,MAAAqB,MAAA,SAAAoD,GAEA,MAAAzE,OAAAyE,KAAAA,EAAAzE,MAAAiB,SAAAI,QASArB,MAAAsB,MAAA,SAAAmD,GAEA,MAAAzE,OAAAyE,KAAAA,EAAAzE,MAAAiB,SAAAK,QASAtB,MAAAkB,SAAA,SAAAuD,GAEA,MAAAzE,OAAAyE,KAAAA,EAAAzE,MAAAiB,SAAAC,WASAlB,MAAAuB,OAAA,WAEA,GAAAoD,IACAkB,IAAAC,OAAAC,kBACAC,SAAAF,OAAAC,kBACAE,SAAAH,OAAAC,kBACAG,KAAA,EACAC,MAAA,EACAC,OAAA,EACAC,MAAA,GACAC,OAAA,EAGA,OAAA,UAAA/E,EAAA+D,GAEA,GAAAtF,MAAA0C,SAAAnB,GAEA,MAAAA,EAEA,IAAAvB,MAAA2C,SAAApB,GACA,CAGA,GAFAA,EAAAA,EAAAgF,cAEAhF,IAAAoD,GAEA,MAAAA,GAAApD,EAIA,IAAAkE,GAAAe,SAAAjF,EAEA,KAAAkF,MAAAhB,GAEA,MAAAA,GAKA,MAAAzF,OAAAoE,SAAAkB,EAAAtF,MAAAiB,SAAAM,YAaAvB,MAAA0G,OAAA,SAAAC,EAAArB,GAEA,GAAAG,GAAAE,WAAAgB,EAEA,OAAAF,OAAAhB,GAAAH,EAAAG,GASAzF,MAAAwB,MAAA,SAAAA,GAEA,MAAAxB,OAAA0G,OAAAlF,EAAAxB,MAAAiB,SAAAO,QAQAxB,MAAA4G,SAAA,SAAAC,GAEA,MAAA,YAEA,MAAAA,KAUA7G,MAAA8G,QAAA,SAAAD,GAEA,MAAA7G,OAAAsC,WAAAuE,GAAAA,IAAAA,GAWA7G,MAAA+G,MAAA,SAAAC,EAAA7B,EAAA8B,GAEA,MAAA9B,GAAA6B,EAAA7B,EAAA6B,EAAAC,EAAAA,EAAAD,GASAhH,MAAAkH,SAAA,SAAAC,EAAAC,GAEA,OAAAA,GAEA,IAAApH,OAAAkH,SAAAG,YACA,MAAA,YAEA,IAAA,GAAAxG,GAAA,EAAAA,EAAAyG,KAAAxG,OAAAD,IAEAyG,KAAAzG,GAAAsG,GAAA1E,MAAA6E,KAAAzG,GAAAoD,UAGA,OAAAqD,MAGA,KAAAtH,OAAAkH,SAAAK,eACA,MAAA,YAIA,IAAA,GAFAC,MAEA3G,EAAA,EAAAA,EAAAyG,KAAAxG,OAAAD,IAEA2G,EAAAxG,KAAAsG,KAAAzG,GAAAsG,GAAA1E,MAAA6E,KAAAzG,GAAAoD,WAGA,OAAAuD,GAGA,KAAAxH,OAAAkH,SAAAO,aACA,MAAA,YAEA,MAAA,KAAAH,KAAAxG,OAAA4G,OAAAJ,KAAA,GAAAH,GAAA1E,MAAA6E,KAAA,GAAArD,WAGA,KAAAjE,OAAAkH,SAAAS,YACA,MAAA,YAEA,IAAA,GAAA9G,GAAA,EAAAA,EAAAyG,KAAAxG,OAAAD,IAEA,GAAAyG,KAAAzG,GAAAsG,GAAA1E,MAAA6E,KAAAzG,GAAAoD,WAEA,OAAA,CAIA,QAAA,GAKA,MAAAjE,OAAAmC,MAMAnC,MAAAkH,SAAAG,YAAA,OAKArH,MAAAkH,SAAAK,eAAA,UAKAvH,MAAAkH,SAAAO,aAAA,QAKAzH,MAAAkH,SAAAS,YAAA,OAOA3H,MAAA4H,SAAA,SAAAC,GAEA,GAAAC,GAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAF,EAAAA,EAAAG,MAAA,KAEApI,MAAAoC,UAAA2F,EAAAC,MAEAD,EAAAC,MAGA,KAAA,GAAAnH,GAAA,EAAAA,EAAAoH,EAAAnH,OAAAD,IAEAb,MAAAoC,UAAA2F,EAAAC,GAAAC,EAAApH,OAEAkH,EAAAC,GAAAC,EAAApH,QAGAkH,EAAAC,GAAAC,EAAApH,IAAAG,MAAAkH,EAAAC,GAAAJ,IAIAF,GAAAQ,GAAA,SAAAJ,EAAAC,EAAAC,GAEAL,EAAAR,KAAA,MAAAW,EAAAC,EAAAC,IAGAN,EAAA3B,KAAA,SAAA+B,EAAAC,EAAAC,GAEAL,EAAAR,KAAA,QAAAW,EAAAC,EAAAC,GAGA,IAAAG,GAAA,SAAAC,EAAAC,EAAAN,GAEA,GAAAK,GAAAC,IAAAD,GAIA,IAAA,GAFAE,GAAAF,EAAAC,GAEAE,EAAAD,EAAA3H,OAAA,EAAA4H,GAAA,EAAAA,IAEAD,EAAAC,GAAA,KAAAR,GAEAO,EAAAE,OAAAD,EAAA,GAMAb,GAAAe,IAAA,SAAAX,GAEAA,EAAAA,EAAAG,MAAA,IAEA,KAAA,GAAAvH,GAAA,EAAAA,EAAAoH,EAAAnH,OAAAD,IAEAyH,EAAAhB,KAAAuB,IAAAZ,EAAApH,IACAyH,EAAAhB,KAAAwB,MAAAb,EAAApH,IAIA,IAAAkI,GAAA,SAAAR,EAAAC,EAAAQ,EAAAC,GAEA,GAAAV,GAAAC,IAAAD,GACA,CAIA,IAAA,GAHAE,GAAAF,EAAAC,GACAvB,EAAAwB,EAAA3H,OAEAD,EAAA,EAAAoG,EAAApG,EAAAA,IACA,CACA,GAAAqH,GAAAO,EAAA5H,EAEAqH,GAAA,GAAA1F,KAAA0F,EAAA,GAAAc,GAGAC,IAEAR,EAAA3H,SAAAmG,EAEAsB,EAAAC,GAAAC,EAAAS,MAAAjC,SAIAsB,GAAAC,KAMAX,GAAAsB,QAAA,SAAAX,EAAAQ,GAEAD,EAAAzB,KAAAuB,IAAAL,EAAAQ,GAAA,GACAD,EAAAzB,KAAAwB,MAAAN,EAAAQ,GAAA,KCp0BAhJ,MAAAoJ,QAAA,SAAAC,GAIA,GAFA/B,KAAAgC,QAEAD,YAAArJ,OAAAoJ,QAEA9B,KAAAiC,OAAAF,OAEA,IAAArJ,MAAA6C,SAAAwG,GAEA,IAAA,GAAA1F,KAAA0F,GAEA/B,KAAAkC,IAAA7F,EAAA0F,EAAA1F,KAKA3D,MAAAoJ,QAAA7F,WAQA+F,MAAA,WAMA,MAJAhC,MAAAmC,UACAnC,KAAAoC,QACApC,KAAAqC,WAEArC,MAUAkC,IAAA,SAAAI,EAAAjD,GAaA,MAXAiD,KAAAtC,MAAAqC,QAEArC,KAAAmC,OAAAnC,KAAAqC,QAAAC,IAAAjD,GAIAW,KAAAqC,QAAAC,GAAAtC,KAAAmC,OAAA3I,OACAwG,KAAAmC,OAAAzI,KAAA2F,GACAW,KAAAoC,KAAA1I,KAAA4I,IAGAtC,MASAiC,OAAA,SAAAF,GAKA,IAAA,GAHAK,GAAAL,EAAAK,KACAD,EAAAJ,EAAAI,OAEA5I,EAAA,EAAAA,EAAA6I,EAAA5I,OAAAD,IAEAyG,KAAAkC,IAAAE,EAAA7I,GAAA4I,EAAA5I,GAGA,OAAAyG,OASAuC,IAAA,SAAAD,GAEA,MAAAtC,MAAAmC,OAAAnC,KAAAqC,QAAAC,KASAE,OAAA,SAAAF,GAOA,MALAA,KAAAtC,MAAAqC,SAEArC,KAAAyC,SAAAzC,KAAAqC,QAAAC,IAGAtC,MASAyC,SAAA,SAAAC,GAEA,GAAAJ,GAAAtC,KAAAoC,KAAAM,GACAC,EAAA3C,KAAAmC,OAAAS,MACAC,EAAA7C,KAAAoC,KAAAQ,KAWA,OATAF,GAAA1C,KAAAmC,OAAA3I,SAEAwG,KAAAmC,OAAAO,GAAAC,EACA3C,KAAAoC,KAAAM,GAAAG,EACA7C,KAAAqC,QAAAQ,GAAAH,SAGA1C,MAAAqC,QAAAC,GAEAtC,MASA8C,QAAA,SAAAR,GAEA,MAAA5J,OAAAoE,SAAAkD,KAAAqC,QAAAC,GAAA,KASAS,IAAA,SAAAT,GAEA,MAAAA,KAAAtC,MAAAqC,SASAW,WAAA,SAAAjB,GAKA,IAAA,GAHAK,GAAApC,KAAAoC,KACAC,EAAAN,EAAAM,QAEA9I,EAAA,EAAAA,EAAA6I,EAAA5I,OAAAD,IAEA,GAAA6I,EAAA7I,IAAA8I,GAEA,OAAA,CAIA,QAAA,GAQAjG,KAAA,WAEA,MAAA4D,MAAAmC,OAAA3I,QAQAmI,MAAA,WAMA,MAJA3B,MAAAmC,OAAA3I,OAAA,EACAwG,KAAAoC,KAAA5I,OAAA,EACAwG,KAAAqC,WAEArC,OCtMAtH,MAAAuK,MAAA,SAAApK,EAAAqK,GAEAlD,KAAAmD,SAAAtK,CAEA,KAAA,GAAAU,GAAA,EAAAA,EAAA2J,EAAA1J,OAAAD,IAEAyG,KAAAkD,EAAA3J,IAAAyG,KAAAoD,MAAAF,EAAA3J,KAIAb,MAAAuK,MAAAhH,WAEAoH,OAAA,SAAAC,EAAAC,EAAAC,EAAAtC,EAAAN,GAEAZ,KAAAyD,WAAAH,EACAtD,KAAA0D,UAAAH,EACAvD,KAAA2D,WAAAH,EACAxD,KAAA4D,OAAA1C,EACAlB,KAAA6D,UAAAjD,EACAZ,KAAA8D,UACA9D,KAAA+D,SAEA/D,KAAAgE,WAEAhE,KAAAiE,aAGAD,QAAA,WAEA,MAAAhE,MAAAyD,aAAAzD,KAAA0D,WAEAO,UAAA,WAEAjE,KAAAyD,WAAAzD,KAAA2D,YAAA3D,KAAA4D,OAAA5D,KAAAkE,KAAAlE,OAEAoD,MAAA,SAAAe,GAEA,MAAA,YAIA,MAFAnE,MAAA8D,OAAApK,MAAAyK,EAAAxH,YAEAqD,OAGAkE,KAAA,WAEAxL,MAAAsC,WAAAgF,KAAA6D,YAEA7D,KAAA6D,UAAA3I,KAAA8E,KAAAyD,WAAAzD,KAGA,KAAA,GAAAzG,GAAA,EAAAA,EAAAyG,KAAA8D,OAAAtK,OAAAD,IACA,CACA,GAAA2B,GAAA8E,KAAA8D,OAAAvK,EAEAyG,MAAAyD,WAAAvI,EAAA,IAAAC,MAAA6E,KAAAyD,WAAAvI,EAAA,IAGA,IAAA,GAAAkG,GAAA,EAAAA,EAAApB,KAAA+D,MAAAvK,OAAA4H,IAEApB,KAAA+D,MAAA3C,GAAA6C,aAGAG,QAAA,WAEA,MAAApE,MAAA0D,WAEAW,MAAA,SAAAb,EAAAtC,EAAAN,GAEA,GAAA0D,GAAA,GAAAtE,MAAAmD,SAAAnD,KAAAyD,WAAAzD,KAAAwD,EAAAtC,EAAAN,EAIA,OAFAZ,MAAA+D,MAAArK,KAAA4K,GAEAA,IC9DA5L,MAAAmB,OAAA,SAAAA,EAAAmE,GAEA,GAAAtF,MAAAsC,WAAAnB,GAEA,MAAAA,EAEA,IAAAnB,MAAA2C,SAAAxB,GACA,CACA,GAAAA,IAAAnB,OAAAmB,OAEA,MAAAnB,OAAAmB,OAAAA,EAGA,IAAA,KAAAA,EAAAiJ,QAAA,KACA,CACA,GAAAyB,GAAA1K,EAAAiH,MAAA,KACA0D,EAAAD,EAAA,GACAE,EAAAF,EAAA,EAEA,IAAAA,EAAA/K,QAAA,GAAAgL,IAAA9L,OAAAmB,QAAA4K,IAAA/L,OAAAgM,WAEA,MAAAhM,OAAAgM,WAAAD,GAAA/L,MAAAmB,OAAA2K,KAIA,GAAA9L,MAAAY,QAAAO,IAAA,IAAAA,EAAAL,QAAAd,MAAA0C,SAAAvB,EAAA,KAAAnB,MAAA0C,SAAAvB,EAAA,KAAAnB,MAAA0C,SAAAvB,EAAA,KAAAnB,MAAA0C,SAAAvB,EAAA,IAEA,MAAAnB,OAAAmB,OAAA8K,OAAAxJ,MAAA,KAAAtB,EAEA,KAAAnB,MAAAoC,UAAAjB,GAEA,MAAAnB,OAAAmB,OAAAnB,UAGA,IAAAA,MAAAoC,UAAAkD,GAEA,MAAAA,EAGA,MAAAnE,GAAA,0BASAnB,MAAAkM,aAAA,SAAA/K,GAEA,GAAAA,IAAAnB,OAAAmB,OAEA,OAAA,CAGA,IAAA0K,GAAA1K,EAAAiH,MAAA,KACA0D,EAAAD,EAAA,GACAE,EAAAF,EAAA,EAEA,OAAAA,GAAA/K,QAAA,GAAAgL,IAAA9L,OAAAmB,QAAA4K,IAAA/L,OAAAgM,YAEA,GAGA,GAKAhM,MAAAmB,OAAAgL,OAAA,SAAA9J,GAEA,MAAAA,IAIArC,MAAAmB,OAAAiL,KAAA,SAAA/J,GAEA,MAAAA,GAAAA,GAIArC,MAAAmB,OAAAkL,KAAA,SAAAhK,GAEA,GAAAxB,GAAA,EAAAwB,EACAiK,EAAAzL,EAAAA,EACA0L,EAAAlK,EAAAA,EACAmK,EAAA,GAAAF,EAAAjK,EAAA,EAAAxB,EAAA0L,EAAAA,EAAAlK,EACAoK,EAAA,EAAAH,EAAAA,CAEA,OAAAE,GAAA3L,EAAA4L,EAAApK,GAIArC,MAAAmB,OAAAuL,MAAA,SAAArK,GAEA,MAAAA,GAAAA,EAAAA,GAIArC,MAAAmB,OAAAwL,QAAA,SAAAtK,GAEA,GAAAkK,GAAAlK,EAAAA,CACA,OAAAkK,GAAAA,GAIAvM,MAAAmB,OAAAyL,QAAA,SAAAvK,GAEA,GAAAkK,GAAAlK,EAAAA,CACA,OAAAkK,GAAAA,EAAAlK,GAIArC,MAAAmB,OAAA0L,KAAA,SAAAxK,GAEA,GAAAkK,GAAAlK,EAAAA,EACAyK,EAAAP,EAAAlK,CACA,OAAAyK,GAAAP,EAAAlK,GAIArC,MAAAmB,OAAA4L,KAAA,SAAA1K,GAEA,MAAAkD,MAAAyH,IAAA,cAAA3K,IAIArC,MAAAmB,OAAA8L,SAAA,SAAA5K,GAEA,OAAA,EAAA,GAAAA,GAAAA,GAAA,GAAA,IAIArC,MAAAmB,OAAA+L,QAAA,SAAA7K,GAEA,GAAAkK,GAAAlK,EAAAA,EACAyK,EAAAP,EAAAlK,EACAb,EAAA+K,GAAA,EAAAO,EAAAP,EAAA,EAAAlK,EAAA,GACA8K,GAAA5H,KAAAyH,IAAA,cAAA3K,EACA,OAAAb,GAAA2L,GAIAnN,MAAAmB,OAAAiM,QAAA,SAAA/K,GAEA,MAAAkD,MAAA8H,IAAAhL,EAAAkD,KAAAyH,IAAA,cAAA3K,KAIArC,MAAAmB,OAAAmM,MAAA,SAAAjL,GAEA,MAAA,GAAAkD,KAAAgI,IAAAlL,EAAAA,EAAAA,EAAA,KAAA,EAAAA,IAIArC,MAAAmB,OAAAqM,WAAA,SAAAnL,GAEA,GAAAkK,GAAAlK,EAAAA,CACA,OAAA,GAAAkD,KAAA8H,KAAA,EAAAd,GAAAhH,KAAAgI,IAAAhB,EAAAlK,EAAA,iBAIArC,MAAAmB,OAAAsM,OAAA,SAAApL,GAEA,MAAA,GAAAkD,KAAA8H,KAAA,EAAAhL,GAAAkD,KAAAgI,IAAAlL,EAAAA,EAAA,iBAIArC,MAAAmB,OAAAuM,YAAA,SAAArL,GAEA,GAAAsL,GAAA,EAAAtL,CACA,OAAA,GAAAkD,KAAA8H,IAAAM,EAAAA,EAAApI,KAAAgI,IAAAlL,EAAAA,EAAA,iBAIArC,MAAAmB,OAAAyM,WAAA,SAAAvL,GAEA,GAAAsL,GAAA,EAAAtL,CACA,OAAA,GAAAkD,KAAA8H,IAAAM,EAAAA,EAAApI,KAAAgI,IAAAlL,EAAAA,EAAA,KAIArC,MAAAmB,OAAA0M,SAAA,SAAAxL,GAEA,MAAAkD,MAAAgI,IAAAlL,EAAAA,EAAA,IAAAA,GAAA,EAAAA,GAAAA,GAIArC,MAAAmB,OAAA2M,KAAA,SAAAzL,GAEA,MAAAkD,MAAAuI,KAAAzL,IAIArC,MAAAmB,OAAA4M,MAAA,SAAA1L,GAEA,GAAAxB,GAAA,EAAAwB,EACAiK,EAAAzL,EAAAA,CACA,OAAA,IAAA,EAAAyL,EAAAA,EAAAjK,IAIArC,MAAAmB,OAAA6M,MAAA,SAAA3L,GAEA,MAAA,IAAAkD,KAAAyI,MAAA3L,EAAA,KAAA,GAAA,oBAIArC,MAAAmB,OAAA8M,UAAA,SAAA5L,GAEA,GAAA,GAAAA,EACA,MAAAA,IAAA,IAEA,IAAAmC,GAAAnC,EAAA,EACA,OAAA,IAAAmC,EAAAA,EAAA,KAAA,KAKAxE,MAAAmB,OAAA+M,SAAA,SAAA7L,GAEA,MAAA,GAAAkD,KAAAuI,KAAA,EAAAzL,EAAAA,IAIArC,MAAAmB,OAAAgN,OAAA,SAAA9L,GAEA,MAAA,IAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAWArC,MAAAmB,OAAA8K,OAAA,SAAAmC,EAAAC,EAAAC,EAAAC,GAGA,QAAAC,GAAAC,EAAAC,GAAA,MAAA,GAAA,EAAAA,EAAA,EAAAD,EACA,QAAAE,GAAAF,EAAAC,GAAA,MAAA,GAAAA,EAAA,EAAAD,EACA,QAAAG,GAAAH,GAAA,MAAA,GAAAA,EAGA,QAAAI,GAAAC,EAAAL,EAAAC,GACA,QAAAF,EAAAC,EAAAC,GAAAI,EAAAH,EAAAF,EAAAC,IAAAI,EAAAF,EAAAH,IAAAK,EAIA,QAAAC,GAAAD,EAAAL,EAAAC,GACA,MAAA,GAAAF,EAAAC,EAAAC,GAAAI,EAAAA,EAAA,EAAAH,EAAAF,EAAAC,GAAAI,EAAAF,EAAAH,GAGA,QAAAO,GAAAC,GAGA,IAAA,GADAC,GAAAD,EACApO,EAAA,EAAA,EAAAA,IAAAA,EAAA,CACA,GAAAsO,GAAAJ,EAAAG,EAAAd,EAAAE,EACA,IAAA,GAAAa,EAAA,MAAAD,EACA,IAAAE,GAAAP,EAAAK,EAAAd,EAAAE,GAAAW,CACAC,IAAAE,EAAAD,EAEA,MAAAD,GAGA,MAAA,UAAA7M,GACA,MAAAwM,GAAAG,EAAA3M,GAAAgM,EAAAE,KAQAvO,MAAAmB,OAAAnB,WAAAA,MAAAmB,OAAAkL,KCvRArM,MAAAgM,WAAA,SAAAA,EAAAqD,GAEA,GAAArP,MAAAsC,WAAA0J,GAEA,MAAAA,EAEA,IAAAhM,MAAA2C,SAAAqJ,IAAAA,IAAAhM,OAAAgM,WAEA,MAAAhM,OAAAgM,WAAAA,EAGA,IAAAqD,EAEA,OAAA,CAGA,MAAArD,GAAA,+BAcAhM,MAAAgM,WAAAhM,MAAA,SAAAmB,GAEA,MAAA,UAAAkB,GAEA,MAAAlB,GAAAkB,KAUArC,MAAAgM,WAAAhI,IAAA,SAAA7C,GAEA,MAAA,UAAAkB,GAEA,MAAA,GAAAlB,EAAA,EAAAkB,KAUArC,MAAAgM,WAAAsD,MAAA,SAAAnO,GAEA,MAAA,UAAAkB,GAEA,MAAA,GAAAA,EAEA,GAAAlB,EAAA,EAAAkB,GAIA,EAAA,GAAAlB,EAAA,EAAA,EAAAkB,KAWArC,MAAAgM,WAAAuD,KAAA,SAAApO,GAEA,MAAA,UAAAkB,GAEA,MAEAlB,GAFA,GAAAkB,EAEA,EAAAA,EAIA,EAAA,EAAAA,KAWArC,MAAAgM,WAAAwD,OAAA,SAAArO,GAEA,MAAA,UAAAkB,GAEA,MAAA,GAAAA,EAEAlB,EAAA,EAAAkB,GAIA,EAAAlB,EAAA,EAAA,EAAAkB,KAWArC,MAAAgM,WAAAyD,QAAA,SAAAtO,GAEA,MAAAA,GAAA,EAAAkB,IASArC,MAAAgM,WAAA0D,KAAA,SAAAvO,GAEA,MAAA,GAAAA,EAAAkB,IC7IArC,MAAAmB,OAAAwO,QAAA3P,MAAAmB,OAAAkL,KACArM,MAAAmB,OAAAyO,UAAA5P,MAAAmB,OAAAiL,KACApM,MAAAmB,OAAA0O,WAAA7P,MAAAgM,WAAAhI,IAAAhE,MAAAmB,OAAAiL,MACApM,MAAAmB,OAAA2O,aAAA9P,MAAAgM,WAAAsD,MAAAtP,MAAAmB,OAAAiL,MACApM,MAAAmB,OAAA4O,UAAA/P,MAAAmB,OAAAgL,OCCAnM,MAAAgQ,MAAA,SAAAC,EAAAC,EAAA5L,EAAAD,GAEA,OACA4L,EAAAjQ,MAAAoE,SAAA6L,EAAA,KACAC,EAAAlQ,MAAAoE,SAAA8L,EAAA,KACA5L,EAAAtE,MAAAoE,SAAAE,EAAA,KACAD,EAAArE,MAAAoE,SAAAC,EAAA,KAOArE,MAAAgQ,MAAAG,UAGAC,MAAA,SAAAC,GACA,GAAA,gBAAAA,GAAA,CACA,GAAAL,IACAC,EAAA3I,KAAAgJ,eAAAD,EAAAJ,EAAA,WAAA,KACAC,EAAA5I,KAAAgJ,eAAAD,EAAAH,EAAA,WAAA,KACA5L,EAAAgD,KAAAgJ,eAAAD,EAAA/L,EAAA,WAAA,KACAD,EAAAiD,KAAAgJ,eAAAD,EAAAhM,EAAA,aAAA,GAEA,OAAA2L,GAEA,OAAA,GAEAM,eAAA,SAAA/L,EAAAgM,EAAAtJ,GACA,GAAA8E,SAAAxH,GACAyC,EAAAC,CACA,IAAA,WAAA8E,EAAA,CACA,GAAAyE,GAAAC,OAAAF,GAAAxE,EAAA,GACAtF,OAAA+J,KACAxJ,EAAAwJ,OAGA,WAAAzE,IACA/E,EAAAzC,EAQA,OANAyC,GAAAC,IACAD,EAAAC,GAEA,EAAAD,IACAA,EAAA,GAEAA,KAIA0J,OACAC,aAAAV,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAuM,WAAAX,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAwM,cAAAZ,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAyM,MAAAb,EAAA,EAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA0M,YAAAd,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA2M,OAAAf,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA4M,OAAAhB,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA6M,QAAAjB,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA8M,OAAAlB,EAAA,EAAAC,EAAA,EAAA5L,EAAA,EAAAD,EAAA,GACA+M,gBAAAnB,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAgN,MAAApB,EAAA,EAAAC,EAAA,EAAA5L,EAAA,IAAAD,EAAA,GACAiN,YAAArB,EAAA,IAAAC,EAAA,GAAA5L,EAAA,IAAAD,EAAA,GACAkN,OAAAtB,EAAA,IAAAC,EAAA,GAAA5L,EAAA,GAAAD,EAAA,GACAmN,WAAAvB,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAoN,WAAAxB,EAAA,GAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAqN,YAAAzB,EAAA,IAAAC,EAAA,IAAA5L,EAAA,EAAAD,EAAA,GACAsN,WAAA1B,EAAA,IAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACAuN,OAAA3B,EAAA,IAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACAwN,gBAAA5B,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAyN,UAAA7B,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA0N,SAAA9B,EAAA,IAAAC,EAAA,GAAA5L,EAAA,GAAAD,EAAA,GACA2N,MAAA/B,EAAA,EAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA4N,UAAAhC,EAAA,EAAAC,EAAA,EAAA5L,EAAA,IAAAD,EAAA,GACA6N,UAAAjC,EAAA,EAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA8N,eAAAlC,EAAA,IAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACA+N,UAAAnC,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAgO,WAAApC,EAAA,EAAAC,EAAA,IAAA5L,EAAA,EAAAD,EAAA,GACAiO,WAAArC,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAkO,aAAAtC,EAAA,IAAAC,EAAA,EAAA5L,EAAA,IAAAD,EAAA,GACAmO,gBAAAvC,EAAA,GAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACAoO,YAAAxC,EAAA,IAAAC,EAAA,IAAA5L,EAAA,EAAAD,EAAA,GACAqO,YAAAzC,EAAA,IAAAC,EAAA,GAAA5L,EAAA,IAAAD,EAAA,GACAsO,SAAA1C,EAAA,IAAAC,EAAA,EAAA5L,EAAA,EAAAD,EAAA,GACAuO,YAAA3C,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAwO,cAAA5C,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAyO,eAAA7C,EAAA,GAAAC,EAAA,GAAA5L,EAAA,IAAAD,EAAA,GACA0O,eAAA9C,EAAA,GAAAC,EAAA,GAAA5L,EAAA,GAAAD,EAAA,GACA2O,eAAA/C,EAAA,EAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA4O,YAAAhD,EAAA,IAAAC,EAAA,EAAA5L,EAAA,IAAAD,EAAA,GACA6O,UAAAjD,EAAA,IAAAC,EAAA,GAAA5L,EAAA,IAAAD,EAAA,GACA8O,aAAAlD,EAAA,EAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA+O,SAAAnD,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAgP,YAAApD,EAAA,GAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAiP,UAAArD,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAkP,WAAAtD,EAAA,IAAAC,EAAA,GAAA5L,EAAA,GAAAD,EAAA,GACAmP,aAAAvD,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAoP,aAAAxD,EAAA,GAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACAqP,SAAAzD,EAAA,IAAAC,EAAA,EAAA5L,EAAA,IAAAD,EAAA,GACAsP,WAAA1D,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAuP,YAAA3D,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAwP,MAAA5D,EAAA,IAAAC,EAAA,IAAA5L,EAAA,EAAAD,EAAA,GACAyP,WAAA7D,EAAA,IAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACA0P,MAAA9D,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA2P,OAAA/D,EAAA,EAAAC,EAAA,IAAA5L,EAAA,EAAAD,EAAA,GACA4P,aAAAhE,EAAA,IAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACA6P,UAAAjE,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA8P,SAAAlE,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA+P,WAAAnE,EAAA,IAAAC,EAAA,GAAA5L,EAAA,GAAAD,EAAA,GACAgQ,QAAApE,EAAA,GAAAC,EAAA,EAAA5L,EAAA,IAAAD,EAAA,GACAiQ,OAAArE,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAkQ,OAAAtE,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAmQ,UAAAvE,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAoQ,eAAAxE,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAqQ,WAAAzE,EAAA,IAAAC,EAAA,IAAA5L,EAAA,EAAAD,EAAA,GACAsQ,cAAA1E,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAuQ,WAAA3E,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAwQ,YAAA5E,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAyQ,WAAA7E,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA0Q,sBAAA9E,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA2Q,WAAA/E,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA4Q,YAAAhF,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA6Q,WAAAjF,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA8Q,aAAAlF,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA+Q,eAAAnF,EAAA,GAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAgR,cAAApF,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAiR,gBAAArF,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAkR,gBAAAtF,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAmR,gBAAAvF,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAoR,aAAAxF,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAqR,MAAAzF,EAAA,EAAAC,EAAA,IAAA5L,EAAA,EAAAD,EAAA,GACAsR,WAAA1F,EAAA,GAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACAuR,OAAA3F,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAwR,SAAA5F,EAAA,IAAAC,EAAA,EAAA5L,EAAA,IAAAD,EAAA,GACAyR,QAAA7F,EAAA,IAAAC,EAAA,EAAA5L,EAAA,EAAAD,EAAA,GACA0R,kBAAA9F,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA2R,YAAA/F,EAAA,EAAAC,EAAA,EAAA5L,EAAA,IAAAD,EAAA,GACA4R,cAAAhG,EAAA,IAAAC,EAAA,GAAA5L,EAAA,IAAAD,EAAA,GACA6R,cAAAjG,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA8R,gBAAAlG,EAAA,GAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA+R,iBAAAnG,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAgS,mBAAApG,EAAA,EAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAiS,iBAAArG,EAAA,GAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAkS,iBAAAtG,EAAA,IAAAC,EAAA,GAAA5L,EAAA,IAAAD,EAAA,GACAmS,cAAAvG,EAAA,GAAAC,EAAA,GAAA5L,EAAA,IAAAD,EAAA,GACAoS,WAAAxG,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAqS,WAAAzG,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAsS,UAAA1G,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAuS,aAAA3G,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAwS,MAAA5G,EAAA,EAAAC,EAAA,EAAA5L,EAAA,IAAAD,EAAA,GACAyS,SAAA7G,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA0S,OAAA9G,EAAA,IAAAC,EAAA,IAAA5L,EAAA,EAAAD,EAAA,GACA2S,WAAA/G,EAAA,IAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACA4S,QAAAhH,EAAA,IAAAC,EAAA,IAAA5L,EAAA,EAAAD,EAAA,GACA6S,WAAAjH,EAAA,IAAAC,EAAA,GAAA5L,EAAA,EAAAD,EAAA,GACA8S,QAAAlH,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA+S,eAAAnH,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAgT,WAAApH,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAiT,eAAArH,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAkT,eAAAtH,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAmT,YAAAvH,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAoT,WAAAxH,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAqT,MAAAzH,EAAA,IAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACAsT,MAAA1H,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAuT,MAAA3H,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAwT,YAAA5H,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAyT,QAAA7H,EAAA,IAAAC,EAAA,EAAA5L,EAAA,IAAAD,EAAA,GACA0T,KAAA9H,EAAA,IAAAC,EAAA,EAAA5L,EAAA,EAAAD,EAAA,GACA2T,WAAA/H,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA4T,WAAAhI,EAAA,GAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA6T,aAAAjI,EAAA,IAAAC,EAAA,GAAA5L,EAAA,GAAAD,EAAA,GACA8T,QAAAlI,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA+T,YAAAnI,EAAA,IAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACAgU,UAAApI,EAAA,GAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,GACAiU,UAAArI,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAkU,QAAAtI,EAAA,IAAAC,EAAA,GAAA5L,EAAA,GAAAD,EAAA,GACAmU,QAAAvI,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAoU,SAAAxI,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAqU,WAAAzI,EAAA,IAAAC,EAAA,GAAA5L,EAAA,IAAAD,EAAA,GACAsU,WAAA1I,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAuU,MAAA3I,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAwU,aAAA5I,EAAA,EAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAyU,WAAA7I,EAAA,GAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA0U,KAAA9I,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA2U,MAAA/I,EAAA,EAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA4U,SAAAhJ,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA6U,QAAAjJ,EAAA,IAAAC,EAAA,GAAA5L,EAAA,GAAAD,EAAA,GACA8U,WAAAlJ,EAAA,GAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACA+U,QAAAnJ,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAgV,WAAApJ,EAAA,IAAAC,EAAA,GAAA5L,EAAA,IAAAD,EAAA,GACAiV,OAAArJ,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAkV,OAAAtJ,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAmV,YAAAvJ,EAAA,IAAAC,EAAA,IAAA5L,EAAA,IAAAD,EAAA,GACAoV,QAAAxJ,EAAA,IAAAC,EAAA,IAAA5L,EAAA,EAAAD,EAAA,GACAqV,aAAAzJ,EAAA,IAAAC,EAAA,IAAA5L,EAAA,GAAAD,EAAA,IAEA+L,MAAA,SAAAC,GACA,GAAA,gBAAAA,KACAA,EAAAA,EAAA9J,cACA8J,IAAA/I,MAAAoJ,OAAA,CACA,GAAAiJ,GAAArS,KAAAoJ,MAAAL,EACA,QACAJ,EAAA0J,EAAA1J,EACAC,EAAAyJ,EAAAzJ,EACA5L,EAAAqV,EAAArV,EACAD,EAAAsV,EAAAtV,GAIA,OAAA,KAIAK,MAAA,sCACA0L,MAAA,SAAAC,GACA,GAAAuJ,GAAAtS,KAAA5C,MAAAgB,KAAA2K,EACA,OAAA,QAAAuJ,GAEA3J,EAAAzJ,SAAAoT,EAAA,GAAAA,EAAA,GAAA,IACA1J,EAAA1J,SAAAoT,EAAA,GAAAA,EAAA,GAAA,IACAtV,EAAAkC,SAAAoT,EAAA,GAAAA,EAAA,GAAA,IACAvV,EAAA,IAGA,KAIAK,MAAA,+CACA0L,MAAA,SAAAC,GACA,GAAAuJ,GAAAtS,KAAA5C,MAAAgB,KAAA2K,EACA,OAAA,QAAAuJ,GAEA3J,EAAAzJ,SAAAoT,EAAA,GAAA,IACA1J,EAAA1J,SAAAoT,EAAA,GAAA,IACAtV,EAAAkC,SAAAoT,EAAA,GAAA,IACAvV,EAAA,IAGA,KAIAK,MAAA,sDACA0L,MAAA,SAAAC,GACA,GAAAuJ,GAAAtS,KAAA5C,MAAAgB,KAAA2K,EACA,OAAA,QAAAuJ,GAEA3J,EAAA1K,KAAAJ,IAAA,IAAAqB,SAAAoT,EAAA,GAAA,KACA1J,EAAA3K,KAAAJ,IAAA,IAAAqB,SAAAoT,EAAA,GAAA,KACAtV,EAAAiB,KAAAJ,IAAA,IAAAqB,SAAAoT,EAAA,GAAA,KACAvV,EAAA,IAGA,KAIAK,MAAA,4EACA0L,MAAA,SAAAC,GACA,GAAAuJ,GAAAtS,KAAA5C,MAAAgB,KAAA2K,EACA,OAAA,QAAAuJ,GAEA3J,EAAA1K,KAAAJ,IAAA,IAAAqB,SAAAoT,EAAA,GAAA,KACA1J,EAAA3K,KAAAJ,IAAA,IAAAqB,SAAAoT,EAAA,GAAA,KACAtV,EAAAiB,KAAAJ,IAAA,IAAAqB,SAAAoT,EAAA,GAAA,KACAvV,EAAAkB,KAAAJ,IAAA,EAAAQ,WAAAiU,EAAA,OAGA,KAUA5Z,MAAAgQ,MAAAI,MAAA,SAAAC,GAIA,IAAA,GAAAxP,IAFAd,GAAAiQ,MAAAG,QAEA,GAAAtP,EAAAyG,KAAA6I,QAAArP,OAAAD,IACA,CACA,GAAA4E,GAAA6B,KAAA6I,QAAAtP,GAAAuP,MAAAC,EAEA,IAAA5K,KAAA,EAEA,MAAAA,GAIA,OAAA,GAQAzF,MAAAgQ,MAAA6J,OAAA,SAAA7J,GAEA,GAAA8J,GAAA9Z,MAAA+G,MAAA/G,MAAAoE,SAAA4L,EAAA3L,EAAA,GAAA,EAAA,GACA0V,EAAAxU,KAAAC,MAAAxF,MAAA+G,MAAA/G,MAAAoE,SAAA4L,EAAAC,EAAA,KAAA,EAAA,MACA+J,EAAAzU,KAAAC,MAAAxF,MAAA+G,MAAA/G,MAAAoE,SAAA4L,EAAAE,EAAA,KAAA,EAAA,MACA+J,EAAA1U,KAAAC,MAAAxF,MAAA+G,MAAA/G,MAAAoE,SAAA4L,EAAA1L,EAAA,KAAA,EAAA,KAEA,IAAA,IAAAwV,EACA,CACA,GAAA7J,GAAA8J,EAAAG,SAAA,IACAhK,EAAA8J,EAAAE,SAAA,IACA5V,EAAA2V,EAAAC,SAAA,GAMA,OAJA,IAAAjK,EAAAnP,SAAAmP,EAAA,IAAAA,GACA,GAAAC,EAAApP,SAAAoP,EAAA,IAAAA,GACA,GAAA5L,EAAAxD,SAAAwD,EAAA,IAAAA,GAEA,IAAA2L,EAAAC,EAAA5L,EAIA,MAAA,QAAAyV,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAAH,EAAA,KClUA9Z,MAAAma,YASAna,MAAAma,SAAAC,QAAA,SAAAC,EAAAtZ,GAEA,GAAAuZ,GAAAD,EAAAE,UACAA,EAAAxZ,EAAAyZ,aAAAF,EAEA,OAAAA,KAAAvZ,GAAA0Z,MAEAF,EAAAG,WAAAC,MAAA5Z,EAAA0Z,MAAAH,IAIAC,EAAAK,gBAKA5a,MAAAma,SAAAC,QAAAD,UAAA,EAQAna,MAAAma,SAAAU,SAAA,SAAAC,EAAAC,GAGA,GAAA/a,MAAAgb,WAAAF,GAEA,MAAAA,EAGA,IAAAG,GAAA,SAAAZ,EAAAtZ,GAEA,GAAAuZ,GAAAD,EAAAE,UACAA,EAAAxZ,EAAAyZ,aAAAF,GACAY,EAAAX,EAAAG,WACAN,EAAA,IAgBA,OAZAA,GAFAE,IAAAvZ,GAAA0Z,MAEAS,EAAAP,MAAA5Z,EAAA0Z,MAAAH,IAIAC,EAAAK,eAGAG,IAEAX,EAAAc,EAAAC,IAAAf,EAAAW,IAGAG,EAAAE,IAAAhB,EAAAU,GAUA,OANAG,GAAAd,UAAA,EAGAc,EAAAH,eAAAA,EACAG,EAAAF,KAAAA,EAEAE,GAaAjb,MAAAma,SAAA7T,OAAA,SAAA+U,GAEA,GAAAC,GAAA,IAEA,IAAAtb,MAAAY,QAAAya,GAEAC,EAAA,SAAAjB,EAAAtZ,GAEA,GAAAuZ,GAAAD,EAAAE,UACAA,EAAAxZ,EAAAyZ,aAAAF,GACAY,EAAAX,EAAAG,WACAa,EAAAF,EAAA9V,KAAAC,MAAAD,KAAAe,SAAA+U,EAAAva,QAEA,OAAAoa,GAAA9K,MAAAmL,EAAAL,EAAAM,WAGA,IAAAxb,MAAA6C,SAAAwY,IAAAA,YAAArb,OAAAyb,KAEAH,EAAA,SAAAjB,EAAAtZ,GAEA,GAAAuZ,GAAAD,EAAAE,UACAA,EAAAxZ,EAAAyZ,aAAAF,GACAY,EAAAX,EAAAG,UAEA,OAAAW,GAAAK,QAAAR,EAAAS,SAAApW,KAAAe,eAGA,CAAA,KAAAtG,MAAA6C,SAAAwY,IAAArb,MAAAoC,UAAAiZ,EAAAlW,MAAAnF,MAAAoC,UAAAiZ,EAAApU,MAiBA,KAAA,yBAAAoU,CAfAC,GAAA,SAAAjB,EAAAtZ,GAEA,GAAAuZ,GAAAD,EAAAE,UACAA,EAAAxZ,EAAAyZ,aAAAF,GACAY,EAAAX,EAAAG,WACAkB,EAAA5b,MAAA8G,QAAAuU,EAAAlW,KACA0W,EAAA7b,MAAA8G,QAAAuU,EAAApU,KACA9B,EAAA+V,EAAA9K,MAAAwL,EAAAV,EAAAM,MACAvU,EAAAiU,EAAA9K,MAAAyL,EAAAX,EAAAM,KAEA,OAAAN,GAAA5U,OAAA4U,EAAAS,SAAAxW,EAAA8B,IAcA,MALAqU,GAAAnB,UAAA,EAGAmB,EAAAD,gBAAAA,EAEAC,GAQAtb,MAAAgb,WAAA,SAAA3Y,GAEA,MAAArC,OAAAsC,WAAAD,IAAAA,EAAA8X,UC/IAna,MAAA0a,WAAA,SAAAQ,GAEA,MAAAA,aAAAlb,OAAA8b,WAEAZ,EAEAlb,MAAA2C,SAAAuY,IAAAA,IAAAlb,OAAA0a,WAEA1a,MAAA0a,WAAAQ,GAGAlb,MAAA0a,WAAA1a,YAMAA,MAAA8b,WAAA,aAKA9b,MAAA8b,WAAAvY,WAOAwY,gBAAA,WAEAzU,KAAAkU,KAAAlU,KAAAqU,SACArU,KAAA0U,IAAA1U,KAAA8I,MAAA,EAAA9I,KAAAkU,MACAlU,KAAA2U,SAAA3U,KAAA8I,MAAAtK,OAAAC,kBAAAuB,KAAAkU,OASApL,MAAA,WAEA,KAAA,oCASAvM,KAAA,WAEA,KAAA,mCAQA8W,MAAA,SAAA3W,GAEA,MAAAsD,MAAAzD,KAAAyD,KAAAqU,SAAA3X,IAOA2X,OAAA,WAEA,KAAA,qCASAna,MAAA,SAAAwC,EAAAxC,GAEA,MAAA8F,MAAA4U,KAAAlY,EAAAA,EAAAxC,EAAA,IAQA4Z,IAAA,SAAApX,EAAAmY,GAEA,MAAA7U,MAAA4U,KAAAlY,EAAAmY,EAAA,IAUAD,KAAA,WAEA,KAAA,mCASAE,IAAA,SAAApY,EAAAmY,GAEA,MAAA7U,MAAA4U,KAAAlY,EAAAmY,EAAA,KASAhB,IAAA,WAEA,KAAA,kCAWAkB,YAAA,SAAArY,EAAAsY,EAAAC,EAAAC,GAKA,MAHAxY,GAAAsD,KAAAmV,KAAAzY,GACAA,EAAAsD,KAAA4U,KAAAlY,EAAAsY,EAAA,EAAAE,GACAxY,EAAAsD,KAAA4U,KAAAlY,EAAAuY,EAAAC,IAYAlW,OAAA,SAAAtC,EAAAmB,EAAA8B,GAEA,MAAAK,MAAA+U,YAAArY,EAAAmB,EAAA8B,EAAA1B,KAAAe,WASAoW,SAAA,SAAArY,EAAAC,GAEA,MAAAiB,MAAAuI,KAAAxG,KAAAqV,WAAAtY,EAAAC,KASAqY,WAAA,WAEA,KAAA,yCAQAC,QAAA,WAEA,KAAA,sCAQAnW,MAAA,WAEA,KAAA,oCASAoW,OAAA,WAEA,KAAA,qCAUAC,QAAA,WAEA,KAAA,sCAUA3X,IAAA,WAEA,KAAA,kCAUA8B,IAAA,WAEA,KAAA,kCAUAF,MAAA,SAAA/C,EAAAmB,EAAA8B,GAEA,GAAA8V,GAAAzV,KAAAqV,WAAA3Y,EAAAsD,KAAAkU,KAEA,OAAArW,GAAAA,EAAA4X,EAEAzV,KAAA9F,MAAAwC,EAAAmB,EAAAI,KAAAuI,KAAAiP,IAEAA,EAAA9V,EAAAA,EAEAK,KAAA9F,MAAAwC,EAAAiD,EAAA1B,KAAAuI,KAAAiP,IAGA/Y,GAQAgZ,WAAA,SAAA3a,GAEA,MAAArC,OAAA2C,SAAAN,KAAA,MAAAA,EAAA,IAAA,MAAAA,EAAA,KAQA4a,kBAAA,SAAA5a,GAEA,GAAA6a,GAAAvX,WAAAtD,EAEA,OAAAoE,OAAAyW,IAAA,EAAAA,IC3SAld,MAAAmd,iBAAA,WAEA7V,KAAAyU,mBAGA/b,MAAAmE,SAAAnE,MAAAmd,iBAAA5Z,UAAA,GAAAvD,OAAA8b,YAQA1L,MAAA,SAAA/N,EAAA+a,GAGA,GAAApd,MAAAsC,WAAAD,GAEA,MAAAA,EAGA,IAAAA,KAAA,EAEA,MAAArC,OAAAma,SAAAC,OAGA,IAAApa,MAAA0C,SAAAL,GAEA,MAAAA,EAGA,IAAArC,MAAA2C,SAAAN,GACA,CACA,GAAA8Z,GAAA7U,KAAA2V,kBAAA5a,EAEA,IAAA8Z,KAAA,EAEA,MAAA7U,MAAA0V,WAAA3a,GAEArC,MAAAma,SAAAU,SAAAsB,GAIAA,EAKA,MAAAiB,IAEAvZ,KAAA,SAAAG,EAAAH,GAEA,MAAAA,IAEA8X,OAAA,WAEA,MAAA,IAEAc,KAAA,WAEA,MAAA,IAEAP,KAAA,SAAAlY,EAAAmY,EAAAkB,GAEA,MAAArZ,IAAAmY,EAAAkB,GAEAlC,IAAA,SAAAnX,EAAAxC,GAEA,MAAAwC,IAAAxC,GAEAmb,WAAA,SAAAtY,EAAAC,GAEA,GAAAgZ,GAAAjZ,EAAAC,CACA,OAAAgZ,GAAAA,GAEAV,QAAA,SAAAvY,GAEA,MAAA,gBAAAA,IAEAoC,MAAA,SAAApC,GAEA,MAAAoC,OAAApC,IAEAwY,OAAA,SAAAxY,EAAAkZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,GAAAkZ,GAEAT,QAAA,SAAAzY,EAAAC,EAAAiZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,EAAAC,GAAAiZ,GAEApY,IAAA,SAAAnB,EAAAK,EAAAC,GAEA,MAAAiB,MAAAJ,IAAAd,EAAAC,IAEA2C,IAAA,SAAAjD,EAAAK,EAAAC,GAEA,MAAAiB,MAAA0B,IAAA5C,EAAAC,MAOAtE,MAAA0a,WAAA,WAAA1a,MAAA0a,WAAA,OAAA,GAAA1a,OAAAmd,iBCxGAnd,MAAAwd,kBAAA,WAEAlW,KAAAyU,mBAGA/b,MAAAmE,SAAAnE,MAAAwd,kBAAAja,UAAA,GAAAvD,OAAA8b,YAQA1L,MAAA,SAAA/N,EAAA+a,GAGA,GAAApd,MAAAsC,WAAAD,GAEA,MAAAA,EAGA,IAAAA,KAAA,EAEA,MAAArC,OAAAma,SAAAC,OAGA,IAAApa,MAAA0C,SAAAL,GAEA,OACAA,EAAAA,EACAob,EAAApb,EAIA,IAAArC,MAAA6C,SAAAR,GACA,CACA,GAAAqb,GAAA1d,MAAAoE,SAAA/B,EAAAA,EAAA+a,EAAA/a,GACAsb,EAAA3d,MAAAoE,SAAA/B,EAAAob,EAAAL,EAAAK,GACAG,EAAAtW,KAAA2V,kBAAAS,GACAG,EAAAvW,KAAA2V,kBAAAU,EAEA,IAAAC,KAAA,GAAAC,KAAA,EACA,CACA,GAAApY,IAAApD,EAAAub,EAAAH,EAAAI,GACAC,EAAAxW,KAAA0V,WAAAU,GACAK,EAAAzW,KAAA0V,WAAAW,EAEA,IAAAG,GAAAC,EACA,CACA,GAAAhD,IACA1Y,EAAAyb,EAAA,EAAA,EACAL,EAAAM,EAAA,EAAA,EAGA,OAAA/d,OAAAma,SAAAU,SAAApV,EAAAsV,GAGA,MAAAtV,IAIA,GAAAzF,MAAA2C,SAAAN,GACA,CAEA,GAAAiF,KAAA0V,WAAA3a,GACA,CACA,GAAAub,GAAAtW,KAAA2V,kBAAA5a,EAEA,IAAAub,KAAA,EAEA,MAAA5d,OAAAma,SAAAU,UAAAxY,EAAAub,EAAAH,EAAAG,IAIA,GAAAI,IACAC,KAAA,EACAC,MAAA,IACAC,OAAA,GACAC,OAAA,GACAC,IAAA,EACAC,OAAA,IAGA,IAAA,KAAAjc,EAAA+H,QAAA,KACA,CACA,GAAAmU,GAAA5Y,WAAAtD,EAEA,KAAAoE,MAAA8X,IAAAlc,IAAA2b,GAEA,OACA3b,EAAAA,IAAA2b,GAAAA,EAAA3b,GAAAkc,EACAd,EAAApb,IAAA2b,GAAAA,EAAA3b,GAAAkc,OAKA,CACA,GAAA1S,GAAAxJ,EAAA+F,MAAA,KACAmW,EAAA5Y,WAAAkG,EAAA,IACA2S,EAAA7Y,WAAAkG,EAAA,GAEA,MAAApF,MAAA8X,IAAA1S,EAAA,IAAAmS,OAAAvX,MAAA+X,IAAA3S,EAAA,IAAAmS,IAEA,OACA3b,EAAAwJ,EAAA,IAAAmS,GAAAA,EAAAnS,EAAA,IAAA0S,EACAd,EAAA5R,EAAA,IAAAmS,GAAAA,EAAAnS,EAAA,IAAA2S,IAOA,MAAAxe,OAAAoC,UAAAgb,GAEA9V,KAAAqT,MAAAyC,IAGA,GAEAvZ,KAAA,SAAAG,EAAAH,GAIA,MAFAG,GAAA3B,EAAAwB,EAAAxB,EACA2B,EAAAyZ,EAAA5Z,EAAA4Z,EACAzZ,GAEA2X,OAAA,WAEA,OAAAtZ,EAAA,EAAAob,EAAA,IAEAhB,KAAA,SAAAzY,GAIA,MAFAA,GAAA3B,EAAA,EACA2B,EAAAyZ,EAAA,EACAzZ,GAEAkY,KAAA,SAAAlY,EAAAmY,EAAAkB,GAIA,MAFArZ,GAAA3B,GAAA8Z,EAAA9Z,EAAAgb,EACArZ,EAAAyZ,GAAAtB,EAAAsB,EAAAJ,EACArZ,GAEAmX,IAAA,SAAAnX,EAAAxC,GAIA,MAFAwC,GAAA3B,GAAAb,EAAAa,EACA2B,EAAAyZ,GAAAjc,EAAAic,EACAzZ,GAEA2Y,WAAA,SAAAtY,EAAAC,GAEA,GAAAma,GAAApa,EAAAhC,EAAAiC,EAAAjC,EACAqc,EAAAra,EAAAoZ,EAAAnZ,EAAAmZ,CACA,OAAAgB,GAAAA,EAAAC,EAAAA,GAEA9B,QAAA,SAAAvY,GAEA,MAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,IAEAoC,MAAA,SAAApC,GAEA,MAAAoC,OAAApC,EAAAhC,IAAAoE,MAAApC,EAAAoZ,IAEAZ,OAAA,SAAAxY,EAAAkZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,EAAAhC,GAAAkb,GACAhY,KAAA8H,IAAAhJ,EAAAoZ,GAAAF,GAEAT,QAAA,SAAAzY,EAAAC,EAAAiZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,EAAAhC,EAAAiC,EAAAjC,GAAAkb,GACAhY,KAAA8H,IAAAhJ,EAAAoZ,EAAAnZ,EAAAmZ,GAAAF,GAEApY,IAAA,SAAAnB,EAAAK,EAAAC,GAIA,MAFAN,GAAA3B,EAAAkD,KAAAJ,IAAAd,EAAAhC,EAAAiC,EAAAjC,GACA2B,EAAAyZ,EAAAlY,KAAAJ,IAAAd,EAAAoZ,EAAAnZ,EAAAmZ,GACAzZ,GAEAiD,IAAA,SAAAjD,EAAAK,EAAAC,GAIA,MAFAN,GAAA3B,EAAAkD,KAAA0B,IAAA5C,EAAAhC,EAAAiC,EAAAjC,GACA2B,EAAAyZ,EAAAlY,KAAA0B,IAAA5C,EAAAoZ,EAAAnZ,EAAAmZ,GACAzZ,GAEAsC,OAAA,SAAAtC,EAAAmB,EAAA8B,GAIA,MAFAjD,GAAA3B,GAAA4E,EAAA5E,EAAA8C,EAAA9C,GAAAkD,KAAAe,SAAAnB,EAAA9C,EACA2B,EAAAyZ,GAAAxW,EAAAwW,EAAAtY,EAAAsY,GAAAlY,KAAAe,SAAAnB,EAAAsY,EACAzZ,KAOAhE,MAAA0a,WAAA,MAAA,GAAA1a,OAAAwd,kBClMAxd,MAAA2e,kBAAA,WAEArX,KAAAyU,mBAGA/b,MAAAmE,SAAAnE,MAAA2e,kBAAApb,UAAA,GAAAvD,OAAA8b,YAEA1L,MAAA,SAAA/N,EAAA+a,GAGA,GAAApd,MAAAsC,WAAAD,GAEA,MAAAA,EAGA,IAAAA,KAAA,EAEA,MAAArC,OAAAma,SAAAC,OAGA,IAAApa,MAAA0C,SAAAL,GAEA,OACAA,EAAAA,EACAob,EAAApb,EACA6a,EAAA7a,EAIA,IAAArC,MAAA6C,SAAAR,GACA,CACA,GAAAqb,GAAA1d,MAAAoE,SAAA/B,EAAAA,EAAA+a,EAAA/a,GACAsb,EAAA3d,MAAAoE,SAAA/B,EAAAob,EAAAL,EAAAK,GACAmB,EAAA5e,MAAAoE,SAAA/B,EAAA6a,EAAAE,EAAAF,GACAU,EAAAtW,KAAA2V,kBAAAS,GACAG,EAAAvW,KAAA2V,kBAAAU,GACAkB,EAAAvX,KAAA2V,kBAAA2B,EAEA,IAAAhB,KAAA,GAAAC,KAAA,GAAAgB,KAAA,EACA,CACA,GAAApZ,IAAApD,EAAAub,EAAAH,EAAAI,EAAAX,EAAA2B,GACAf,EAAAxW,KAAA0V,WAAAU,GACAK,EAAAzW,KAAA0V,WAAAW,GACAmB,EAAAxX,KAAA0V,WAAA4B,EAEA,IAAAd,GAAAC,GAAAe,EACA,CACA,GAAA/D,IACA1Y,EAAAyb,EAAA,EAAA,EACAL,EAAAM,EAAA,EAAA,EACAb,EAAA4B,EAAA,EAAA,EAGA,OAAA9e,OAAAma,SAAAU,SAAApV,EAAAsV,GAGA,MAAAtV,IAIA,GAAA6B,KAAA0V,WAAA3a,GACA,CACA,GAAAub,GAAAtW,KAAA2V,kBAAA5a,EAEA,IAAAub,KAAA,EAEA,MAAA5d,OAAAma,SAAAU,UAAAxY,EAAAub,EAAAH,EAAAG,EAAAV,EAAAU,IAKA,MAAA5d,OAAAoC,UAAAgb,GAEA9V,KAAAqT,MAAAyC,IAGA,GAEAvZ,KAAA,SAAAG,EAAAH,GAKA,MAHAG,GAAA3B,EAAAwB,EAAAxB,EACA2B,EAAAyZ,EAAA5Z,EAAA4Z,EACAzZ,EAAAkZ,EAAArZ,EAAAqZ,EACAlZ,GAEA2X,OAAA,WAEA,OAAAtZ,EAAA,EAAAob,EAAA,EAAAP,EAAA,IAEAT,KAAA,SAAAzY,GAKA,MAHAA,GAAA3B,EAAA,EACA2B,EAAAyZ,EAAA,EACAzZ,EAAAkZ,EAAA,EACAlZ,GAEAkY,KAAA,SAAAlY,EAAAmY,EAAAkB,GAKA,MAHArZ,GAAA3B,GAAA8Z,EAAA9Z,EAAAgb,EACArZ,EAAAyZ,GAAAtB,EAAAsB,EAAAJ,EACArZ,EAAAkZ,GAAAf,EAAAe,EAAAG,EACArZ,GAEAmX,IAAA,SAAAnX,EAAAxC,GAKA,MAHAwC,GAAA3B,GAAAb,EAAAa,EACA2B,EAAAyZ,GAAAjc,EAAAic,EACAzZ,EAAAkZ,GAAA1b,EAAA0b,EACAlZ,GAEA2Y,WAAA,SAAAtY,EAAAC,GAEA,GAAAma,GAAApa,EAAAhC,EAAAiC,EAAAjC,EACAqc,EAAAra,EAAAoZ,EAAAnZ,EAAAmZ,EACAsB,EAAA1a,EAAA6Y,EAAA5Y,EAAA4Y,CACA,OAAAuB,GAAAA,EAAAC,EAAAA,EAAAK,EAAAA,GAEAnC,QAAA,SAAAvY,GAEA,MAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,IAAA,KAAAA,IAEAoC,MAAA,SAAApC,GAEA,MAAAoC,OAAApC,EAAAhC,IAAAoE,MAAApC,EAAAoZ,IAAAhX,MAAApC,EAAA6Y,IAEAL,OAAA,SAAAxY,EAAAkZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,EAAAhC,GAAAkb,GACAhY,KAAA8H,IAAAhJ,EAAAoZ,GAAAF,GAAAhY,KAAA8H,IAAAhJ,EAAA6Y,GAAAK,GAEAT,QAAA,SAAAzY,EAAAC,EAAAiZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,EAAAhC,EAAAiC,EAAAjC,GAAAkb,GACAhY,KAAA8H,IAAAhJ,EAAAoZ,EAAAnZ,EAAAmZ,GAAAF,GACAhY,KAAA8H,IAAAhJ,EAAA6Y,EAAA5Y,EAAA4Y,GAAAK,GAEApY,IAAA,SAAAnB,EAAAK,EAAAC,GAKA,MAHAN,GAAA3B,EAAAkD,KAAAJ,IAAAd,EAAAhC,EAAAiC,EAAAjC,GACA2B,EAAAyZ,EAAAlY,KAAAJ,IAAAd,EAAAoZ,EAAAnZ,EAAAmZ,GACAzZ,EAAAkZ,EAAA3X,KAAAJ,IAAAd,EAAA6Y,EAAA5Y,EAAA4Y,GACAlZ,GAEAiD,IAAA,SAAAjD,EAAAK,EAAAC,GAKA,MAHAN,GAAA3B,EAAAkD,KAAA0B,IAAA5C,EAAAhC,EAAAiC,EAAAjC,GACA2B,EAAAyZ,EAAAlY,KAAA0B,IAAA5C,EAAAoZ,EAAAnZ,EAAAmZ,GACAzZ,EAAAkZ,EAAA3X,KAAA0B,IAAA5C,EAAA6Y,EAAA5Y,EAAA4Y,GACAlZ,GAEAsC,OAAA,SAAAtC,EAAAmB,EAAA8B,GAKA,MAHAjD,GAAA3B,GAAA4E,EAAA5E,EAAA8C,EAAA9C,GAAAkD,KAAAe,SAAAnB,EAAA9C,EACA2B,EAAAyZ,GAAAxW,EAAAwW,EAAAtY,EAAAsY,GAAAlY,KAAAe,SAAAnB,EAAAsY,EACAzZ,EAAAkZ,GAAAjW,EAAAiW,EAAA/X,EAAA+X,GAAA3X,KAAAe,SAAAnB,EAAA+X,EACAlZ,KAOAhE,MAAA0a,WAAA,MAAA,GAAA1a,OAAA2e,kBClKA3e,MAAAgf,qBAAA,WAEA1X,KAAAyU,mBAGA/b,MAAAmE,SAAAnE,MAAAgf,qBAAAzb,UAAA,GAAAvD,OAAA8b,YAQA1L,MAAA,SAAA/N,EAAA+a,GAGA,GAAApd,MAAAsC,WAAAD,GAEA,MAAAA,EAGA,IAAAA,KAAA,EAEA,MAAArC,OAAAma,SAAAC,OAGA,IAAApa,MAAA0C,SAAAL,GAEA,OACAA,EAAA,EACAob,EAAA,EACAP,EAAA,EACA+B,MAAA5c,EAIA,IAAArC,MAAA6C,SAAAR,GACA,CACA,GAAAqb,GAAA1d,MAAAoE,SAAA/B,EAAAA,EAAA+a,EAAA/a,GACAsb,EAAA3d,MAAAoE,SAAA/B,EAAAob,EAAAL,EAAAK,GACAmB,EAAA5e,MAAAoE,SAAA/B,EAAA6a,EAAAE,EAAAF,GACApD,EAAA9Z,MAAAoE,SAAA/B,EAAA4c,MAAA7B,EAAA6B,OACArB,EAAAtW,KAAA2V,kBAAAS,GACAG,EAAAvW,KAAA2V,kBAAAU,GACAkB,EAAAvX,KAAA2V,kBAAA2B,GACAM,EAAA5X,KAAA2V,kBAAAnD,EAEA,IAAA8D,KAAA,GAAAC,KAAA,GAAAgB,KAAA,GAAAK,KAAA,EACA,CACA,GAAAzZ,IAAApD,EAAAub,EAAAH,EAAAI,EAAAX,EAAA2B,EAAAI,MAAAC,GACApB,EAAAxW,KAAA0V,WAAAU,GACAK,EAAAzW,KAAA0V,WAAAW,GACAmB,EAAAxX,KAAA0V,WAAA4B,GACAO,EAAA7X,KAAA0V,WAAAlD,EAEA,IAAAgE,GAAAC,GAAAe,GAAAK,EACA,CAQA,MAAAnf,OAAAma,SAAAU,SAAApV,GAGA,MAAAA,IAIA,GAAA6B,KAAA0V,WAAA3a,GACA,CACA,GAAAub,GAAAtW,KAAA2V,kBAAA5a,EAEA,IAAAub,KAAA,EAEA,MAAA5d,OAAAma,SAAAU,UAAAxY,EAAA,EAAAob,EAAA,EAAAP,EAAA,EAAA+B,MAAArB,IAAAvb,EAAA,EAAAob,EAAA,EAAAP,EAAA,EAAA+B,MAAA,IAKA,MAAAjf,OAAAoC,UAAAgb,GAEA9V,KAAAqT,MAAAyC,IAGA,GAEAvZ,KAAA,SAAAG,EAAAH,GAMA,MAJAG,GAAA3B,EAAAwB,EAAAxB,EACA2B,EAAAyZ,EAAA5Z,EAAA4Z,EACAzZ,EAAAkZ,EAAArZ,EAAAqZ,EACAlZ,EAAAib,MAAApb,EAAAob,MACAjb,GAEA2X,OAAA,WAEA,OAAAtZ,EAAA,EAAAob,EAAA,EAAAP,EAAA,EAAA+B,MAAA,IAEAxC,KAAA,SAAAzY,GAMA,MAJAA,GAAA3B,EAAA,EACA2B,EAAAyZ,EAAA,EACAzZ,EAAAkZ,EAAA,EACAlZ,EAAAib,MAAA,EACAjb,GAEAkY,KAAA,SAAAlY,EAAAmY,EAAAkB,GAMA,MAJArZ,GAAA3B,GAAA8Z,EAAA9Z,EAAAgb,EACArZ,EAAAyZ,GAAAtB,EAAAsB,EAAAJ,EACArZ,EAAAkZ,GAAAf,EAAAe,EAAAG,EACArZ,EAAAib,OAAA9C,EAAA8C,MAAA5B,EACArZ,GAEAmX,IAAA,SAAAnX,EAAAxC,GAMA,MAJAwC,GAAA3B,GAAAb,EAAAa,EACA2B,EAAAyZ,GAAAjc,EAAAic,EACAzZ,EAAAkZ,GAAA1b,EAAA0b,EACAlZ,EAAAib,OAAAzd,EAAAyd,MACAjb,GAEA2Y,WAAA,SAAAtY,EAAAC,GAEA,GAAAma,GAAApa,EAAAhC,EAAAiC,EAAAjC,EACAqc,EAAAra,EAAAoZ,EAAAnZ,EAAAmZ,EACAsB,EAAA1a,EAAA6Y,EAAA5Y,EAAA4Y,EACAkC,EAAA/a,EAAA4a,MAAA3a,EAAA2a,KACA,OAAAR,GAAAA,EAAAC,EAAAA,EAAAK,EAAAA,EAAAK,EAAAA,GAEAxC,QAAA,SAAAvY,GAEA,MAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,IAAA,KAAAA,IAAA,SAAAA,IAEAoC,MAAA,SAAApC,GAEA,MAAAoC,OAAApC,EAAAhC,IAAAoE,MAAApC,EAAAoZ,IAAAhX,MAAApC,EAAA6Y,IAAAzW,MAAApC,EAAA4a,QAEApC,OAAA,SAAAxY,EAAAkZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,EAAAhC,GAAAkb,GACAhY,KAAA8H,IAAAhJ,EAAAoZ,GAAAF,GACAhY,KAAA8H,IAAAhJ,EAAA6Y,GAAAK,GACAhY,KAAA8H,IAAAhJ,EAAA4a,OAAA1B,GAEAT,QAAA,SAAAzY,EAAAC,EAAAiZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,EAAAhC,EAAAiC,EAAAjC,GAAAkb,GACAhY,KAAA8H,IAAAhJ,EAAAoZ,EAAAnZ,EAAAmZ,GAAAF,GACAhY,KAAA8H,IAAAhJ,EAAA6Y,EAAA5Y,EAAA4Y,GAAAK,GACAhY,KAAA8H,IAAAhJ,EAAA4a,MAAA3a,EAAA2a,OAAA1B,GAEApY,IAAA,SAAAnB,EAAAK,EAAAC,GAMA,MAJAN,GAAA3B,EAAAkD,KAAAJ,IAAAd,EAAAhC,EAAAiC,EAAAjC,GACA2B,EAAAyZ,EAAAlY,KAAAJ,IAAAd,EAAAoZ,EAAAnZ,EAAAmZ,GACAzZ,EAAAkZ,EAAA3X,KAAAJ,IAAAd,EAAA6Y,EAAA5Y,EAAA4Y,GACAlZ,EAAAib,MAAA1Z,KAAAJ,IAAAd,EAAA4a,MAAA3a,EAAA2a,OACAjb,GAEAiD,IAAA,SAAAjD,EAAAK,EAAAC,GAMA,MAJAN,GAAA3B,EAAAkD,KAAA0B,IAAA5C,EAAAhC,EAAAiC,EAAAjC,GACA2B,EAAAyZ,EAAAlY,KAAA0B,IAAA5C,EAAAoZ,EAAAnZ,EAAAmZ,GACAzZ,EAAAkZ,EAAA3X,KAAA0B,IAAA5C,EAAA6Y,EAAA5Y,EAAA4Y,GACAlZ,EAAAib,MAAA1Z,KAAA0B,IAAA5C,EAAA4a,MAAA3a,EAAA2a,OACAjb,GAEAsC,OAAA,SAAAtC,EAAAmB,EAAA8B,GAMA,MAJAjD,GAAA3B,GAAA4E,EAAA5E,EAAA8C,EAAA9C,GAAAkD,KAAAe,SAAAnB,EAAA9C,EACA2B,EAAAyZ,GAAAxW,EAAAwW,EAAAtY,EAAAsY,GAAAlY,KAAAe,SAAAnB,EAAAsY,EACAzZ,EAAAkZ,GAAAjW,EAAAiW,EAAA/X,EAAA+X,GAAA3X,KAAAe,SAAAnB,EAAA+X,EACAlZ,EAAAib,OAAAhY,EAAAgY,MAAA9Z,EAAA8Z,OAAA1Z,KAAAe,SAAAnB,EAAA8Z,MACAjb,KAQAhE,MAAA0a,WAAA,WAAA,GAAA1a,OAAAgf,qBCzLAhf,MAAAqf,cAAA,WAEA/X,KAAAyU,mBAGA/b,MAAAmE,SAAAnE,MAAAqf,cAAA9b,UAAA,GAAAvD,OAAA8b,YAQA1L,MAAA,SAAA/N,EAAA+a,GAGA,GAAApd,MAAAsC,WAAAD,GAEA,MAAAA,EAGA,IAAAA,KAAA,EAEA,MAAArC,OAAAma,SAAAC,OAGA,IAAApa,MAAA0C,SAAAL,GAEA,OACA4N,EAAA5N,EACA6N,EAAA7N,EACAiC,EAAAjC,EAIA,IAAArC,MAAA6C,SAAAR,GACA,CACA,GAAA0X,GAAA/Z,MAAAoE,SAAA/B,EAAA4N,EAAAmN,EAAAnN,GACA+J,EAAAha,MAAAoE,SAAA/B,EAAA6N,EAAAkN,EAAAlN,GACA+J,EAAAja,MAAAoE,SAAA/B,EAAAiC,EAAA8Y,EAAA9Y,GACAgb,EAAAhY,KAAA2V,kBAAAlD,GACAwF,EAAAjY,KAAA2V,kBAAAjD,GACAwF,EAAAlY,KAAA2V,kBAAAhD,EAEA,IAAAqF,KAAA,GAAAC,KAAA,GAAAC,KAAA,EACA,CACA,GAAA/Z,IAAAwK,EAAAqP,EAAApP,EAAAqP,EAAAjb,EAAAkb,GACAC,EAAAnY,KAAA0V,WAAAjD,GACA2F,EAAApY,KAAA0V,WAAAhD,GACA2F,EAAArY,KAAA0V,WAAA/C,EAEA,IAAAwF,GAAAC,GAAAC,EACA,CACA,GAAA5E,IACA9K,EAAAwP,EAAA,EAAA,EACAvP,EAAAwP,EAAA,EAAA,EACApb,EAAAqb,EAAA,EAAA,EAGA,OAAA3f,OAAAma,SAAAU,SAAApV,EAAAsV,GAGA,MAAAtV,IAIA,GAAA6B,KAAA0V,WAAA3a,GACA,CACA,GAAAub,GAAAtW,KAAA2V,kBAAA5a,EAEA,IAAAub,KAAA,EAEA,MAAA5d,OAAAma,SAAAU,UAAA5K,EAAA2N,EAAA1N,EAAA0N,EAAAtZ,EAAAsZ,IAKA,GAAAnY,GAAAzF,MAAAgQ,MAAAI,MAAA/N,EAEA,OAAAoD,MAAA,EAEAA,EAIAzF,MAAAoC,UAAAgb,GAEA9V,KAAAqT,MAAAyC,IAGA,GAEAvZ,KAAA,SAAAG,EAAAH,GAKA,MAHAG,GAAAiM,EAAApM,EAAAoM,EACAjM,EAAAkM,EAAArM,EAAAqM,EACAlM,EAAAM,EAAAT,EAAAS,EACAN,GAEA2X,OAAA,WAEA,OAAA1L,EAAA,EAAAC,EAAA,EAAA5L,EAAA,IAEAmY,KAAA,SAAAzY,GAKA,MAHAA,GAAAiM,EAAA,EACAjM,EAAAkM,EAAA,EACAlM,EAAAM,EAAA,EACAN,GAEAkY,KAAA,SAAAlY,EAAAmY,EAAAkB,GAKA,MAHArZ,GAAAiM,GAAAkM,EAAAlM,EAAAoN,EACArZ,EAAAkM,GAAAiM,EAAAjM,EAAAmN,EACArZ,EAAAM,GAAA6X,EAAA7X,EAAA+Y,EACArZ,GAEAmX,IAAA,SAAAnX,EAAAxC,GAKA,MAHAwC,GAAAiM,GAAAzO,EAAAyO,EACAjM,EAAAkM,GAAA1O,EAAA0O,EACAlM,EAAAM,GAAA9C,EAAA8C,EACAN,GAEA2Y,WAAA,SAAAtY,EAAAC,GAEA,GAAAsb,GAAAvb,EAAA4L,EAAA3L,EAAA2L,EACA4P,EAAAxb,EAAA6L,EAAA5L,EAAA4L,EACA4P,EAAAzb,EAAAC,EAAAA,EAAAA,CACA,OAAAsb,GAAAA,EAAAC,EAAAA,EAAAC,EAAAA,GAEAlD,QAAA,SAAAvY,GAEA,MAAArE,OAAA6C,SAAAwB,IAAA,KAAAA,IAAA,KAAAA,IAAA,KAAAA,IAEAoC,MAAA,SAAApC,GAEA,MAAAoC,OAAApC,EAAA4L,IAAAxJ,MAAApC,EAAA6L,IAAAzJ,MAAApC,EAAAC,IAEAuY,OAAA,SAAAxY,EAAAkZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,EAAA4L,GAAAsN,GACAhY,KAAA8H,IAAAhJ,EAAA6L,GAAAqN,GACAhY,KAAA8H,IAAAhJ,EAAAC,GAAAiZ,GAEAT,QAAA,SAAAzY,EAAAC,EAAAiZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,EAAA4L,EAAA3L,EAAA2L,GAAAsN,GACAhY,KAAA8H,IAAAhJ,EAAA6L,EAAA5L,EAAA4L,GAAAqN,GACAhY,KAAA8H,IAAAhJ,EAAAC,EAAAA,EAAAA,GAAAiZ,GAEApY,IAAA,SAAAnB,EAAAK,EAAAC,GAKA,MAHAN,GAAAiM,EAAA1K,KAAAJ,IAAAd,EAAA4L,EAAA3L,EAAA2L,GACAjM,EAAAkM,EAAA3K,KAAAJ,IAAAd,EAAA6L,EAAA5L,EAAA4L,GACAlM,EAAAM,EAAAiB,KAAAJ,IAAAd,EAAAC,EAAAA,EAAAA,GACAN,GAEAiD,IAAA,SAAAjD,EAAAK,EAAAC,GAKA,MAHAN,GAAAiM,EAAA1K,KAAA0B,IAAA5C,EAAA4L,EAAA3L,EAAA2L,GACAjM,EAAAkM,EAAA3K,KAAA0B,IAAA5C,EAAA6L,EAAA5L,EAAA4L,GACAlM,EAAAM,EAAAiB,KAAA0B,IAAA5C,EAAAC,EAAAA,EAAAA,GACAN,GAEAsC,OAAA,SAAAtC,EAAAmB,EAAA8B,GAKA,MAHAjD,GAAAiM,GAAAhJ,EAAAgJ,EAAA9K,EAAA8K,GAAA1K,KAAAe,SAAAnB,EAAA8K,EACAjM,EAAAkM,GAAAjJ,EAAAiJ,EAAA/K,EAAA+K,GAAA3K,KAAAe,SAAAnB,EAAA+K,EACAlM,EAAAM,GAAA2C,EAAA3C,EAAAa,EAAAb,GAAAiB,KAAAe,SAAAnB,EAAAb,EACAN,KAOAhE,MAAA0a,WAAA,IAAA,GAAA1a,OAAAqf,cC/KArf,MAAA+f,eAAA,WAEAzY,KAAAyU,mBAGA/b,MAAAmE,SAAAnE,MAAA+f,eAAAxc,UAAA,GAAAvD,OAAA8b,YAQA1L,MAAA,SAAA/N,EAAA+a,GAGA,GAAApd,MAAAsC,WAAAD,GAEA,MAAAA,EAGA,IAAAA,KAAA,EAEA,MAAArC,OAAAma,SAAAC,OAGA,IAAApa,MAAA0C,SAAAL,GAEA,OACA4N,EAAA5N,EACA6N,EAAA7N,EACAiC,EAAAjC,EACAgC,EAAA,EAIA,IAAArE,MAAA6C,SAAAR,GACA,CACA,GAAA0X,GAAA/Z,MAAAoE,SAAA/B,EAAA4N,EAAAmN,EAAAnN,GACA+J,EAAAha,MAAAoE,SAAA/B,EAAA6N,EAAAkN,EAAAlN,GACA+J,EAAAja,MAAAoE,SAAA/B,EAAAiC,EAAA8Y,EAAA9Y,GACAwV,EAAA9Z,MAAAoE,SAAA/B,EAAAgC,EAAA+Y,EAAA/Y,GACAib,EAAAhY,KAAA2V,kBAAAlD,GACAwF,EAAAjY,KAAA2V,kBAAAjD,GACAwF,EAAAlY,KAAA2V,kBAAAhD,GACAiF,EAAA5X,KAAA2V,kBAAAnD,EAEA,IAAAwF,KAAA,GAAAC,KAAA,GAAAC,KAAA,GAAAN,KAAA,EACA,CACA,GAAAzZ,IAAAwK,EAAAqP,EAAApP,EAAAqP,EAAAjb,EAAAkb,EAAAnb,EAAA6a,GACAO,EAAAnY,KAAA0V,WAAAjD,GACA2F,EAAApY,KAAA0V,WAAAhD,GACA2F,EAAArY,KAAA0V,WAAA/C,GACAkF,EAAA7X,KAAA0V,WAAAlD,EAEA,IAAA2F,GAAAC,GAAAC,GAAAR,EACA,CACA,GAAApE,IACA9K,EAAAwP,EAAA,EAAA,EACAvP,EAAAwP,EAAA,EAAA,EACApb,EAAAqb,EAAA,EAAA,EACAtb,EAAA8a,EAAA,EAAA,EAGA,OAAAnf,OAAAma,SAAAU,SAAApV,EAAAsV,GAGA,MAAAtV,IAIA,GAAA6B,KAAA0V,WAAA3a,GACA,CACA,GAAAub,GAAAtW,KAAA2V,kBAAA5a,EAEA,IAAAub,KAAA,EAEA,MAAA5d,OAAAma,SAAAU,UAAA5K,EAAA2N,EAAA1N,EAAA0N,EAAAtZ,EAAAsZ,EAAAvZ,EAAA,IAKA,GAAAoB,GAAAzF,MAAAgQ,MAAAI,MAAA/N,EAEA,OAAAoD,MAAA,EAEAA,EAIAzF,MAAAoC,UAAAgb,GAEA9V,KAAAqT,MAAAyC,IAGA,GAEAvZ,KAAA,SAAAG,EAAAH,GAMA,MAJAG,GAAAiM,EAAApM,EAAAoM,EACAjM,EAAAkM,EAAArM,EAAAqM,EACAlM,EAAAM,EAAAT,EAAAS,EACAN,EAAAK,EAAAR,EAAAQ,EACAL,GAEA2X,OAAA,WAEA,OAAA1L,EAAA,EAAAC,EAAA,EAAA5L,EAAA,EAAAD,EAAA,IAEAoY,KAAA,SAAAzY,GAMA,MAJAA,GAAAiM,EAAA,EACAjM,EAAAkM,EAAA,EACAlM,EAAAM,EAAA,EACAN,EAAAK,EAAA,EACAL,GAEAkY,KAAA,SAAAlY,EAAAmY,EAAAkB,GAMA,MAJArZ,GAAAiM,GAAAkM,EAAAlM,EAAAoN,EACArZ,EAAAkM,GAAAiM,EAAAjM,EAAAmN,EACArZ,EAAAM,GAAA6X,EAAA7X,EAAA+Y,EACArZ,EAAAK,GAAA8X,EAAA9X,EAAAgZ,EACArZ,GAEAmX,IAAA,SAAAnX,EAAAxC,GAMA,MAJAwC,GAAAiM,GAAAzO,EAAAyO,EACAjM,EAAAkM,GAAA1O,EAAA0O,EACAlM,EAAAM,GAAA9C,EAAA8C,EACAN,EAAAK,GAAA7C,EAAA6C,EACAL,GAEA2Y,WAAA,SAAAtY,EAAAC,GAEA,GAAAsb,GAAAvb,EAAA4L,EAAA3L,EAAA2L,EACA4P,EAAAxb,EAAA6L,EAAA5L,EAAA4L,EACA4P,EAAAzb,EAAAC,EAAAA,EAAAA,EACA8a,EAAA/a,EAAAA,EAAAC,EAAAD,CACA,OAAAub,GAAAA,EAAAC,EAAAA,EAAAC,EAAAA,EAAAV,EAAAA,GAEAxC,QAAA,SAAAvY,GAEA,MAAArE,OAAA6C,SAAAwB,IAAA,KAAAA,IAAA,KAAAA,IAAA,KAAAA,IAAA,KAAAA,IAEAoC,MAAA,SAAApC,GAEA,MAAAoC,OAAApC,EAAA4L,IAAAxJ,MAAApC,EAAA6L,IAAAzJ,MAAApC,EAAAC,IAAAmC,MAAApC,EAAAA,IAEAwY,OAAA,SAAAxY,EAAAkZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,EAAA4L,GAAAsN,GACAhY,KAAA8H,IAAAhJ,EAAA6L,GAAAqN,GACAhY,KAAA8H,IAAAhJ,EAAAC,GAAAiZ,GACAhY,KAAA8H,IAAAhJ,EAAAA,GAAAkZ,GAEAT,QAAA,SAAAzY,EAAAC,EAAAiZ,GAEA,MAAAhY,MAAA8H,IAAAhJ,EAAA4L,EAAA3L,EAAA2L,GAAAsN,GACAhY,KAAA8H,IAAAhJ,EAAA6L,EAAA5L,EAAA4L,GAAAqN,GACAhY,KAAA8H,IAAAhJ,EAAAC,EAAAA,EAAAA,GAAAiZ,GACAhY,KAAA8H,IAAAhJ,EAAAA,EAAAC,EAAAD,GAAAkZ,GAEApY,IAAA,SAAAnB,EAAAK,EAAAC,GAMA,MAJAN,GAAAiM,EAAA1K,KAAAJ,IAAAd,EAAA4L,EAAA3L,EAAA2L,GACAjM,EAAAkM,EAAA3K,KAAAJ,IAAAd,EAAA6L,EAAA5L,EAAA4L,GACAlM,EAAAM,EAAAiB,KAAAJ,IAAAd,EAAAC,EAAAA,EAAAA,GACAN,EAAAK,EAAAkB,KAAAJ,IAAAd,EAAAA,EAAAC,EAAAD,GACAL,GAEAiD,IAAA,SAAAjD,EAAAK,EAAAC,GAMA,MAJAN,GAAAiM,EAAA1K,KAAA0B,IAAA5C,EAAA4L,EAAA3L,EAAA2L,GACAjM,EAAAkM,EAAA3K,KAAA0B,IAAA5C,EAAA6L,EAAA5L,EAAA4L,GACAlM,EAAAM,EAAAiB,KAAA0B,IAAA5C,EAAAC,EAAAA,EAAAA,GACAN,EAAAK,EAAAkB,KAAA0B,IAAA5C,EAAAA,EAAAC,EAAAD,GACAL,GAEAsC,OAAA,SAAAtC,EAAAmB,EAAA8B,GAMA,MAJAjD,GAAAiM,GAAAhJ,EAAAgJ,EAAA9K,EAAA8K,GAAA1K,KAAAe,SAAAnB,EAAA8K,EACAjM,EAAAkM,GAAAjJ,EAAAiJ,EAAA/K,EAAA+K,GAAA3K,KAAAe,SAAAnB,EAAA+K,EACAlM,EAAAM,GAAA2C,EAAA3C,EAAAa,EAAAb,GAAAiB,KAAAe,SAAAnB,EAAAb,EACAN,EAAAK,GAAA4C,EAAA5C,EAAAc,EAAAd,GAAAkB,KAAAe,SAAAnB,EAAAd,EACAL,KAOAhE,MAAA0a,WAAA,KAAA,GAAA1a,OAAA+f,eChMA/f,MAAAggB,KAAA,SAAAA,GAEA,MAAAA,aAAAhgB,OAAAyb,KAEAuE,EAEAhgB,MAAA2C,SAAAqd,IAAAA,IAAAhgB,OAAAggB,KAEAhgB,MAAAggB,KAAAC,QAEAjgB,MAAA6C,SAAAmd,IAAAA,EAAAE,OAAAlgB,OAAAggB,KAEAhgB,MAAAggB,KAAAA,EAAAE,MAAAF,IAGA,GAMAhgB,MAAAyb,KAAA,aAIAzb,MAAAyb,KAAAlY,WASA+F,MAAA,SAAA6W,EAAAzF,EAAA0F,GAEA9Y,KAAA6Y,KAAAA,EACA7Y,KAAAoT,WAAA1a,MAAA0a,WAAAA,GACApT,KAAA8Y,OAAAA,EACA9Y,KAAA6S,SAAA7S,KAAA+Y;EASA3E,QAAA,WAEA,KAAA,gCAOA2E,YAAA,WAIA,IAAA,GAFAC,GAAAhZ,KAAA8Y,OAEAvf,EAAA,EAAAA,EAAAyf,EAAAxf,OAAAD,IAEA,GAAAb,MAAAgb,WAAAsF,EAAAzf,IAEA,OAAA,CAIA,QAAA,GAOA0f,UAAA,WAEA,MAAAjZ,MAAAkZ,MAAAlZ,KAAAzD,OAAAyD,MAOAmZ,KAAA,WAEA,MAAAnZ,MAAA8Y,OAAA9Y,KAAA8Y,OAAAtf,OAAA,IAOA4f,MAAA,WAEA,MAAApZ,MAAA8Y,OAAA,IAQAO,MAAA,SAAA9f,GAEA,MAAAyG,MAAA8Y,OAAAvf,IAOA+f,gBAAA,SAAApY,EAAAzH,GAKA,IAAA,GAHA4Z,GAAArT,KAAAzD,OACAyc,EAAA3F,EAAAyF,OAEAvf,EAAA,EAAAA,EAAAyf,EAAAxf,OAAAD,IAEAb,MAAAgb,WAAAsF,EAAAzf,MAEAyf,EAAAzf,GAAAyf,EAAAzf,GAAA2H,EAAAzH,GAIA,OAAA4Z,IAQAkG,aAAA,SAAAhgB,GAEA,GAAAiD,GAAAwD,KAAA8Y,OAAAvf,EAOA,OALAb,OAAAsC,WAAAwB,KAEAA,EAAAA,KAGAA,GAUAgd,SAAA,WAEA,OAAA,GAQAhgB,OAAA,SAAAigB,GAEA,GAAArE,GAAA,EACAxB,EAAA5T,KAAAoT,UAEA,IAAApT,KAAAwZ,WAIA,IAAA,GAFAE,GAAA1Z,KAAAuZ,aAAA,GAEAhgB,EAAA,EAAAA,EAAAyG,KAAA8Y,OAAAtf,OAAAD,IACA,CACA,GAAA+K,GAAAtE,KAAAuZ,aAAAhgB,EAEA6b,IAAAxB,EAAAwB,SAAAsE,EAAApV,GAEAoV,EAAApV,MAUA,KAAA,GAJA4Q,GAAAA,EACAwE,EAAA9F,EAAAP,MAAArT,KAAAuZ,aAAA,IACAI,EAAA/F,EAAAS,SAEA9a,EAAA,EAAAkgB,GAAAlgB,EAAAA,IACA,CACA,GAAA+K,GAAAtE,KAAAoU,QAAAuF,EAAAzE,EAEAE,IAAAxB,EAAAwB,SAAAsE,EAAApV,GAEAqV,EAAAD,EACAA,EAAApV,EAIA,MAAA8Q,KCrMA1c,MAAAkhB,MAAA,SAAAf,EAAAzF,EAAA4B,EAAAC,GAEAjV,KAAAgC,MAAA6W,EAAAzF,GAAA4B,EAAAC,KAGAvc,MAAAmE,SAAAnE,MAAAkhB,MAAA3d,UAAA,GAAAvD,OAAAyb,MAQAC,QAAA,SAAA1X,EAAAwY,GAEA,MAAAlV,MAAAoT,WAAA2B,YAAArY,EAAAsD,KAAAuZ,aAAA,GAAAvZ,KAAAuZ,aAAA,GAAArE,IAOA3Y,KAAA,WAEA,MAAA,IAAA7D,OAAAkhB,MAAA5Z,KAAA6Y,KAAA7Y,KAAAoT,WAAApT,KAAA8Y,OAAA,GAAA9Y,KAAA8Y,OAAA,OAUApgB,MAAAggB,KAAA,MAAA,SAAAA,GAEA,GAAA9E,GAAAlb,MAAA0a,WAAAsF,EAAAtF,WAEA,OAAA,IAAA1a,OAAAkhB,MACAlB,EAAAG,KACAjF,EACAA,EAAA9K,MAAA4P,EAAA1D,MAAApB,EAAAM,MACAN,EAAA9K,MAAA4P,EAAAzD,IAAArB,EAAAM,QCxCAxb,MAAAmhB,UAAA,SAAAhB,EAAAzF,EAAA0G,EAAAC,EAAAC,EAAAC,GAEAja,KAAAgC,MAAA6W,EAAAzF,GAAA0G,EAAAC,EAAAC,EAAAC,KAGAvhB,MAAAmE,SAAAnE,MAAAmhB,UAAA5d,UAAA,GAAAvD,OAAAyb,MAQAC,QAAA,SAAA1X,EAAAwd,GAEA,GAAAtG,GAAA5T,KAAAoT,WACA+G,EAAAD,EAAAA,EACAE,EAAAF,EAAAC,EACAE,EAAA,EAAAH,EACAlV,EAAAqV,EAAAA,EACAC,EAAAD,EAAArV,CAQA,OANAtI,GAAAkX,EAAArX,KAAAG,EAAAsD,KAAAuZ,aAAA,IACA7c,EAAAkX,EAAA1Z,MAAAwC,EAAA4d,GACA5d,EAAAkX,EAAAgB,KAAAlY,EAAAsD,KAAAuZ,aAAA,GAAA,EAAAvU,EAAAkV,GACAxd,EAAAkX,EAAAgB,KAAAlY,EAAAsD,KAAAuZ,aAAA,GAAA,EAAAc,EAAAF,GACAzd,EAAAkX,EAAAgB,KAAAlY,EAAAsD,KAAAuZ,aAAA,GAAAa,IASA7d,KAAA,WAEA,MAAA,IAAA7D,OAAAmhB,UAAA7Z,KAAA6Y,KAAA7Y,KAAAoT,WAAApT,KAAA8Y,OAAA,GAAA9Y,KAAA8Y,OAAA,GAAA9Y,KAAA8Y,OAAA,GAAA9Y,KAAA8Y,OAAA,KAQAU,SAAA,WAEA,OAAA,KAUA9gB,MAAAggB,KAAA,MAAA,SAAAA,GAEA,GAAA9E,GAAAlb,MAAA0a,WAAAsF,EAAAtF,WAEA,OAAA,IAAA1a,OAAAmhB,UACAnB,EAAAG,KACAjF,EACAA,EAAA9K,MAAA4P,EAAAoB,IACAlG,EAAA9K,MAAA4P,EAAAqB,IACAnG,EAAA9K,MAAA4P,EAAAsB,IACApG,EAAA9K,MAAA4P,EAAAuB,MCpEAvhB,MAAA6hB,cAAA,SAAA1B,EAAAzF,EAAA0G,EAAAC,EAAAC,GAEAha,KAAAgC,MAAA6W,EAAAzF,GAAA0G,EAAAC,EAAAC,KAGAthB,MAAAmE,SAAAnE,MAAA6hB,cAAAte,UAAA,GAAAvD,OAAAyb,MAQAC,QAAA,SAAA1X,EAAAwd,GAEA,GAAAtG,GAAA5T,KAAAoT,WACA+G,EAAAD,EAAAA,EACAG,EAAA,EAAAH,EACAlV,EAAAqV,EAAAA,CAOA,OALA3d,GAAAkX,EAAArX,KAAAG,EAAAsD,KAAAuZ,aAAA,IACA7c,EAAAkX,EAAA1Z,MAAAwC,EAAAsI,GACAtI,EAAAkX,EAAAgB,KAAAlY,EAAAsD,KAAAuZ,aAAA,GAAA,EAAAc,EAAAH,GACAxd,EAAAkX,EAAAgB,KAAAlY,EAAAsD,KAAAuZ,aAAA,GAAAY,IASA5d,KAAA,WAEA,MAAA,IAAA7D,OAAA6hB,cAAAva,KAAA6Y,KAAA7Y,KAAAoT,WAAApT,KAAA8Y,OAAA,GAAA9Y,KAAA8Y,OAAA,GAAA9Y,KAAA8Y,OAAA,KAQAU,SAAA,WAEA,OAAA,KAUA9gB,MAAAggB,KAAA,UAAA,SAAAA,GAEA,GAAA9E,GAAAlb,MAAA0a,WAAAsF,EAAAtF,WAEA,OAAA,IAAA1a,OAAA6hB,cACA7B,EAAAG,KACAjF,EACAA,EAAA9K,MAAA4P,EAAAoB,IACAlG,EAAA9K,MAAA4P,EAAAqB,IACAnG,EAAA9K,MAAA4P,EAAAsB,MChEAthB,MAAA8hB,UAAA,SAAA3B,EAAAzF,EAAA0F,EAAA2B,GAEAza,KAAAgC,MAAA6W,EAAAzF,EAAA0F,GACA9Y,KAAAya,OAAAA,GAGA/hB,MAAAmE,SAAAnE,MAAA8hB,UAAAve,UAAA,GAAAvD,OAAAyb,MAQAC,QAAA,SAAA1X,EAAAwY,GAKA,IAHA,GAAAwF,GAAA1a,KAAAya,OACAxF,EAAAyF,EAAAlhB,OAAA,EACAD,EAAA,EACAmhB,EAAAnhB,EAAA,GAAA2b,GAAAD,EAAA1b,GAAAA,GACA,IAAAohB,GAAAD,EAAAnhB,GACA2gB,EAAAQ,EAAAnhB,EAAA,GACAqhB,GAAA1F,EAAAyF,IAAAT,EAAAS,GACAb,EAAA9Z,KAAAuZ,aAAAhgB,GACAwgB,EAAA/Z,KAAAuZ,aAAAhgB,EAAA,EAEA,OAAAyG,MAAAoT,WAAA2B,YAAArY,EAAAod,EAAAC,EAAAa,IAOAre,KAAA,WAEA,MAAA,IAAA7D,OAAA8hB,UAAAxa,KAAA6Y,KAAAngB,MAAA6D,KAAAyD,KAAA8Y,QAAApgB,MAAA6D,KAAAyD,KAAAya,QAAAza,KAAAoT,eAUA1a,MAAAggB,KAAA,MAAA,SAAAA,GAEA,GAAA9E,GAAAlb,MAAA0a,WAAAsF,EAAAtF,WAEA,KAAAsF,EAAA+B,OACA,CACA/B,EAAA+B,SAEA,KAAA,GAAAlhB,GAAA,EAAAA,EAAAmf,EAAAI,OAAAtf,OAAAD,IAEAmf,EAAA+B,OAAAlhB,GAAAA,GAAAmf,EAAAI,OAAAtf,OAAA,GAIA,IAAA,GAAAD,GAAA,EAAAA,EAAAmf,EAAAI,OAAAtf,OAAAD,IAEAmf,EAAAI,OAAAvf,GAAAqa,EAAA9K,MAAA4P,EAAAI,OAAAvf,GAGA,OAAA,IAAAb,OAAA8hB,UACA9B,EAAAG,KACAjF,EACA8E,EAAAI,OACAJ,EAAA+B,SCrEA/hB,MAAAmiB,SAAA,SAAAhC,EAAAzF,EAAA0F,GAEA9Y,KAAAgC,MAAA6W,EAAAzF,EAAA0F,IAGApgB,MAAAmE,SAAAnE,MAAAmiB,SAAA5e,UAAA,GAAAvD,OAAAyb,MAQAC,QAAA,SAAA1X,EAAAwY,GAEA,GAAAnY,GAAAkB,KAAAC,MAAAgX,EAAAlV,KAAA8Y,OAAAtf,QACAkJ,EAAAzE,KAAAJ,IAAAd,EAAAiD,KAAA8Y,OAAAtf,OAAA,EAEA,OAAAwG,MAAAoT,WAAA7W,KAAAG,EAAAsD,KAAAuZ,aAAA7W,KAOAnG,KAAA,WAEA,MAAA,IAAA7D,OAAAmiB,SAAA7a,KAAA6Y,KAAA7Y,KAAAoT,WAAA1a,MAAA6D,KAAAyD,KAAA8Y,YAUApgB,MAAAggB,KAAA,KAAA,SAAAA,GAIA,IAAA,GAFA9E,GAAAlb,MAAA0a,WAAAsF,EAAAtF,YAEA7Z,EAAA,EAAAA,EAAAmf,EAAAI,OAAAtf,OAAAD,IAEAmf,EAAAI,OAAAvf,GAAAqa,EAAA9K,MAAA4P,EAAAI,OAAAvf,GAGA,OAAA,IAAAb,OAAAmiB,SACAnC,EAAAG,KACAjF,EACA8E,EAAAI,SCjDApgB,MAAAoiB,aAAA,SAAAjC,EAAAH,EAAAqC,GAKA,IAAA,GAHAnH,GAAA8E,EAAAtF,WACA0F,KAEAvf,EAAA,EAAAwhB,EAAAxhB,EAAAA,IAEAuf,EAAApf,KAAAgf,EAAAtE,QAAAR,EAAAS,SAAA9a,GAAAwhB,EAAA,IAGA/a,MAAAgC,MAAA6W,EAAAjF,EAAAkF,IAGApgB,MAAAmE,SAAAnE,MAAAoiB,aAAA7e,UAAA,GAAAvD,OAAAyb,MAQAC,QAAA,SAAA1X,EAAAwY,GAEA,GAAAnY,GAAAkB,KAAAC,MAAAgX,EAAAlV,KAAA8Y,OAAAtf,QACAkJ,EAAAzE,KAAAJ,IAAAd,EAAAiD,KAAA8Y,OAAAtf,OAAA,EAEA,OAAAwG,MAAAoT,WAAA7W,KAAAG,EAAAsD,KAAAuZ,aAAA7W,KAOAnG,KAAA,WAEA,MAAA,IAAA7D,OAAAoiB,aAAA9a,KAAA6Y,KAAA7Y,KAAAA,KAAA8Y,OAAAtf,WAUAd,MAAAggB,KAAA,SAAA,SAAAA,GAEA,MAAA,IAAAhgB,OAAAoiB,aACApC,EAAAG,KACAngB,MAAAggB,KAAAA,EAAAA,MACAA,EAAAqC,aChDAriB,MAAAsiB,aAAA,SAAAnC,EAAAzF,EAAA0F,EAAA2B,EAAAQ,GAEAjb,KAAAgC,MAAA6W,EAAAzF,EAAA0F,GACA9Y,KAAAya,OAAAA,EACAza,KAAAib,QAAAA,GAGAviB,MAAAmE,SAAAnE,MAAAsiB,aAAA/e,UAAA,GAAAvD,OAAAyb,MAQAC,QAAA,SAAA1X,EAAAwY,GAEA,GAAAwF,GAAA1a,KAAAya,OACAxF,EAAAyF,EAAAlhB,OAAA,CAEA,IAAA0b,EAAAwF,EAAA,GACA,OAAA,CAGA,IAAAxF,EAAAwF,EAAAA,EAAAlhB,OAAA,GACA,MAAAwG,MAAA8Y,OAAA4B,EAAAlhB,OAAA,EAIA,KADA,GAAAD,GAAA,EACAmhB,EAAAnhB,EAAA,GAAA2b,GAAAD,EAAA1b,GAAAA,GACA,IAAAohB,GAAAD,EAAAnhB,GACA2gB,EAAAQ,EAAAnhB,EAAA,GACAqhB,GAAA1F,EAAAyF,IAAAT,EAAAS,GACAb,EAAA9Z,KAAAuZ,aAAAhgB,GACAwgB,EAAA/Z,KAAAuZ,aAAAhgB,EAAA,GACA2hB,EAAAlb,KAAAib,QAAA1hB,EAEA,OAAAyG,MAAAoT,WAAA2B,YAAArY,EAAAod,EAAAC,EAAAmB,EAAAN,KAOAre,KAAA,WAEA,MAAA,IAAA7D,OAAAsiB,aAAAhb,KAAA6Y,KAAA7Y,KAAAoT,WAAA1a,MAAA6D,KAAAyD,KAAA8Y,QAAApgB,MAAA6D,KAAAyD,KAAAya,QAAA/hB,MAAA6D,KAAAyD,KAAAib,aAUAviB,MAAAggB,KAAA,SAAA,WAEA,GAAA9E,GAAAlb,MAAA0a,WAAAsF,KAAAtF,WAEA,KAAAsF,KAAA+B,OACA,CACA/B,KAAA+B,SAEA,KAAA,GAAAlhB,GAAA,EAAAA,EAAAmf,KAAAI,OAAAtf,OAAAD,IAEAmf,KAAA+B,OAAAlhB,GAAAA,GAAAmf,KAAAI,OAAAtf,OAAA,GAIA,GAAA2hB,GAAAziB,MAAAmB,OAAA6e,KAAAuC,QAAA,KAEA,KAAAviB,MAAAoC,UAAA4d,KAAAuC,WAAAviB,MAAAY,QAAAof,KAAAuC,UAAA,OAAAE,EACA,CACAzC,KAAAuC,UAEA,KAAA,GAAA1hB,GAAA,EAAAA,EAAAmf,KAAAI,OAAAtf,OAAAD,IAEAmf,KAAAuC,QAAA1hB,GAAA4hB,EAIA,IAAA,GAAA5hB,GAAA,EAAAA,EAAAmf,KAAAuC,QAAAzhB,OAAAD,IAEAmf,KAAAuC,QAAA1hB,GAAAb,MAAAmB,OAAA6e,KAAAuC,QAAA1hB,GAGA,KAAA,GAAAA,GAAA,EAAAA,EAAAmf,KAAAI,OAAAtf,OAAAD,IAEAmf,KAAAI,OAAAvf,GAAAqa,EAAA9K,MAAA4P,KAAAI,OAAAvf,GAGA,OAAA,IAAAb,OAAAsiB,aACAtC,KAAAG,KACAjF,EACA8E,KAAAI,OACAJ,KAAA+B,OACA/B,KAAAuC,UCnGAviB,MAAA0iB,UAAA,SAAAvC,EAAAzF,EAAAiG,GAEArZ,KAAAgC,MAAA6W,EAAAzF,GAAAiG,KAGA3gB,MAAAmE,SAAAnE,MAAA0iB,UAAAnf,UAAA,GAAAvD,OAAAyb,MAQAC,QAAA,SAAA1X,GAEA,MAAAsD,MAAAoT,WAAA7W,KAAAG,EAAAsD,KAAAuZ,aAAA,KAOAhd,KAAA,WAEA,MAAA,IAAA7D,OAAA0iB,UAAApb,KAAA6Y,KAAA7Y,KAAAoT,WAAApT,KAAA8Y,OAAA,OAUApgB,MAAAggB,KAAA,MAAA,SAAAA,GAEA,GAAA9E,GAAAlb,MAAA0a,WAAAsF,EAAAtF,WAEA,OAAA,IAAA1a,OAAA0iB,UACA1C,EAAAG,KACAjF,EACAA,EAAA9K,MAAA4P,EAAAW,SC5CA3gB,MAAA2iB,WAAA,aAKA3iB,MAAA2iB,WAAApf,WASA+F,MAAA,SAAAiR,EAAAqI,EAAAhX,GAEAtE,KAAAiT,UAAAA,EACAjT,KAAAsb,OAAAA,EACAtb,KAAAsE,KAAAA,EAEAtE,KAAAub,UAAA,EACAvb,KAAAwb,UAAA,EACAxb,KAAAyb,QAAA,EACAzb,KAAA0b,SAAAld,OAAAC,kBACAuB,KAAA2b,QAAA,EACA3b,KAAA4b,MAAA,EACA5b,KAAAjG,MAAA,GAWAib,MAAA,SAAApZ,GAEAoE,KAAAub,UAAA3f,EACAoE,KAAAyb,QAAA,GASAI,WAAA,WAEA,OAAA,GAYAC,QAAA,SAAAlgB,EAAAuX,GAEA,GAAAnT,KAAA2b,OAEA,OAAA,CAGA,IAAAI,IAAA,EACAN,EAAA7f,EAAAoE,KAAAub,UACAQ,GAAA,CAaA,OAXAN,GAAAzb,KAAA0b,SAEAK,EAAA/b,KAAAgc,OAAA7I,GAEAsI,GAAAzb,KAAAjG,QAEAgiB,EAAA/b,KAAAic,OAAAR,EAAAtI,IAGAnT,KAAAyb,QAAAA,EAEAM,GAQAE,OAAA,WAEA,KAAA,qCAQAC,WAAA,WAEA,MAAAlc,MAAAyb,SAQAU,OAAA,SAAAC,GAEApc,KAAA0b,SAAA1b,KAAAkc,aAAAE,GASAC,QAAA,WAEA,OAAA,GAQAC,UAAA,WAEA,MAAAtc,MAAA0b,UAQAa,cAAA,WAEA,MAAAvc,MAAAsc,YAAAtc,KAAAyb,SAAAzb,KAAAsE,KAAAtE,KAAAsE,KAAAiY,gBAAA,IAQAlJ,MAAA,WAEA,KAAA,2CASA0F,YAAA,WAEA,OAAA,GAQAyD,WAAA,WAEA,MAAAxc,MAAA0b,WAAAld,OAAAC,mBAOAge,MAAA,WAEAzc,KAAA2b,SAEA3b,KAAAwb,UAAA9iB,MAAAkD,MACAoE,KAAA2b,QAAA,IAQAe,OAAA,WAEA1c,KAAA2b,SAEA3b,KAAAub,WAAA7iB,MAAAkD,MAAAoE,KAAAwb,UACAxb,KAAA2b,QAAA,IAQAgB,SAAA,WAEA,MAAA3c,MAAA2b,QASAK,OAAA,WAEA,OAAA,GAOAY,WAAA,WAEA,OAAA,GAQAC,UAAA,WAEA,MAAA7c,MAAAsb,QAQAwB,MAAA,SAAAxY,GAEAtE,KAAAsE,KAEAtE,KAAAsE,KAAAwY,MAAAxY,GAIAtE,KAAAsE,KAAAA,IClQA5L,MAAAqkB,cAAA,WAEA/c,KAAAgC,SAGAtJ,MAAAmE,SAAAnE,MAAAqkB,cAAA9gB,UAAA,GAAAvD,OAAAoJ,SAQAgb,MAAA,SAAA/J,GAEA,GAAAC,GAAAD,EAAAE,SAEAjT,MAAA+C,IAAAiQ,GAEAhT,KAAAuC,IAAAyQ,GAAA8J,MAAA/J,GAIA/S,KAAAkC,IAAA8Q,EAAAD,IAWAiK,SAAA,SAAAjb,EAAAkb,EAAApc,GAKA,IAAA,GAHAqc,GAAAld,KAAAuc,gBACAY,EAAApb,EAAAI,OAEA5I,EAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAwZ,GAAAoK,EAAA5jB,GACAyZ,EAAAD,EAAAE,UACAmK,EAAApd,KAAAuC,IAAAyQ,EAEAoK,IAEAA,EAAAZ,aAEAY,EAAAjB,OAAApJ,EAAAhZ,MAAAmjB,GAIAnK,EAAAhZ,OAAAmjB,EAAAE,EAAAb,gBAGAa,EAAAN,MAAA/J,KAIAA,EAAAhZ,OAAAmjB,EAEAld,KAAAkC,IAAA8Q,EAAAD,GAEAra,MAAAsC,WAAAiiB,IAEAA,EAAA/hB,KAAA2F,GAAAb,KAAA+S,IAKA,MAAA/S,OAQAqd,UAAA,SAAA3a,GAEA,GAAAoQ,GAAA9S,KAAAmC,OAAAO,EAEAoQ,GAAAxO,KAEAtE,KAAAmC,OAAAO,GAAAoQ,EAAAxO,KAIAtE,KAAAyC,SAAAC,IAQA2Q,MAAA,WAMA,IAAA,GAJAlR,GAAAnC,KAAAmC,OACAC,EAAApC,KAAAoC,KACAiR,EAAA,GAAA3a,OAAAqkB,cAEAxjB,EAAA4I,EAAA3I,OAAA,EAAAD,GAAA,EAAAA,IAEA8Z,EAAAlR,OAAA5I,GAAA4I,EAAA5I,GAAA8Z,QACAA,EAAAjR,KAAA7I,GAAA6I,EAAA7I,GACA8Z,EAAAhR,QAAAD,EAAA7I,IAAAA,CAGA,OAAA8Z,IAOAkJ,cAAA,WAKA,IAAA,GAHAe,GAAA,EACAnb,EAAAnC,KAAAmC,OAEA5I,EAAA4I,EAAA3I,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAwZ,GAAA5Q,EAAA5I,EAEAwZ,GAAAyJ,eAEAc,EAAArf,KAAA0B,IAAA2d,EAAAvK,EAAAwJ,kBAIA,MAAAe,IAQAC,WAAA,SAAAC,GAKA,IAHA,GAAAC,GAAAzd,KAAAmC,OACAub,EAAA,KAEAD,EAAAjkB,QACA,CACAkkB,IAEA,KAAA,GAAAnkB,GAAAkkB,EAAAjkB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAwZ,GAAA0K,EAAAlkB,EAEAwZ,GAAA6I,MAAA4B,EAEAzK,EAAAzO,MAEAoZ,EAAAhkB,KAAAqZ,EAAAzO,MAIAoZ,EAAAlkB,QAEAgkB,IAGAC,EAAAC,EAGA,MAAAF,MCxKA9kB,MAAAilB,YAEAC,QAAA,EACAC,QAAA,EACAC,UAAA,EACAC,SAAA,EACAC,OAAA,EACAC,SAAA,IAkBAvlB,MAAAwlB,MAAA,SAAAjL,EAAAyF,EAAA9e,EAAAC,EAAAE,EAAAC,EAAAC,EAAAC,EAAAikB,EAAAC,EAAA9C,EAAAhX,GAEAtE,KAAAgC,MAAAiR,EAAAqI,EAAAhX,GAEAtE,KAAA0Y,KAAAA,EACA1Y,KAAAnG,OAAAnB,MAAAmB,OAAAA,GACAmG,KAAAjG,MAAArB,MAAAqB,MAAAA,GACAiG,KAAApG,SAAAlB,MAAAkB,SAAAA,GACAoG,KAAAhG,MAAAtB,MAAAsB,MAAAA,GACAgG,KAAA/F,OAAAvB,MAAAuB,OAAAA,GACA+F,KAAA9F,MAAAxB,MAAAwB,MAAAA,GACA8F,KAAAme,UAAAzF,EAAAtF,WAAAtK,MAAAqV,EAAAzF,EAAAtF,WAAAc,MACAlU,KAAAoe,gBAAA1lB,MAAAoE,SAAAshB,GAAA,IAGA1lB,MAAAmE,SAAAnE,MAAAwlB,MAAAjiB,UAAA,GAAAvD,OAAA2iB,YAWArG,MAAA,SAAApZ,EAAAnC,GAEAuG,KAAAub,UAAA3f,EACAoE,KAAAyb,QAAA,EACAzb,KAAAqe,MAAAre,KAAAjG,MAAArB,MAAAilB,WAAAE,QAAAnlB,MAAAilB,WAAAG,UAEA9d,KAAA+Y,gBAEA/Y,KAAA0Y,KAAA1Y,KAAA0Y,KAAAY,gBAAAtZ,KAAAvG,KAUAoiB,WAAA,SAAA1I,GAEA,MAAAnT,MAAAoe,gBAEApe,KAAAse,WAAAnL,EAAAA,EAAAnT,KAAAiT,WAAA,IAGA,GASAgJ,OAAA,SAAAR,EAAAtI,GAEA,GAAA4I,IAAA,EACAhiB,EAAAiG,KAAAjG,MACAH,EAAAoG,KAAApG,SACAI,EAAAgG,KAAAhG,MACAC,EAAA+F,KAAA/F,OACAskB,EAAAve,KAAAqe,MACAG,EAAAxe,KAAAqe,MACAnJ,EAAA,CAEAuG,IAAA1hB,CAEA,IAAA6hB,GAAAhiB,EAAAI,EACAykB,EAAAxgB,KAAAC,OAAAud,EAAAzhB,GAAA4hB,EAgCA,OA9BA6C,IAAAxkB,GAEAukB,EAAA9lB,MAAAilB,WAAAM,SACA/I,EAAA,IAIAuG,GAAAgD,EAAA7C,EAEAH,EAAA7hB,GAEA4kB,EAAA9lB,MAAAilB,WAAAI,SACA7I,EAAA,IAIAsJ,EAAA9lB,MAAAilB,WAAAG,UACA5I,EAAAuG,EAAA7hB,KAIA4kB,IAAA9lB,MAAAilB,WAAAG,WACAU,IAAA9lB,MAAAilB,WAAAG,WAAAS,IAAA7lB,MAAAilB,WAAAG,aAEA9d,KAAAse,WAAAnL,EAAAA,EAAAnT,KAAAiT,WAAAiC,GACA6G,GAAA,GAGA/b,KAAAqe,MAAAG,EAEAzC,GAYAM,QAAA,SAAAlf,EAAAT,GAEA,GAAAS,EAAA6C,KAAAjG,QAAAiG,KAAAoe,gBAEA,OAAA,CAGA,IAAAlJ,GAAA,CAOA,OALA/X,IAAA6C,KAAAjG,QAEAmb,EAAAjX,KAAA0B,IAAA,GAAAxC,EAAA6C,KAAAjG,QAAAiG,KAAApG,SAAAoG,KAAAhG,OAAAgG,KAAApG,WAGAoG,KAAA0e,aAAAhiB,EAAAwY,IASAwJ,aAAA,SAAAC,EAAAzJ,GAEA,GAAA7V,GAAAW,KAAA0Y,KAAAtE,QAAAuK,EAAA3e,KAAAnG,OAAAqb,GAEA,IAAA7V,KAAA,GAAA,IAAAW,KAAA9F,MACA,CACA,GAAA0Z,GAAA5T,KAAA0Y,KAAAtF,WACAuL,EAAA/K,EAAAP,MAAArT,KAAAme,WACA/I,EAAAxB,EAAAkB,IAAA6J,EAAAtf,EAEAA,GAAAuU,EAAAgB,KAAAvV,EAAA+V,GAAApV,KAAA9F,OAGA,MAAAmF,IAQA2c,OAAA,SAAA7I,GAEAnT,KAAAse,WAAAnL,EAAAnT,KAAA0Y,KAAAtF,WAAAiB,SAAA,GACArU,KAAAqe,MAAA3lB,MAAAilB,WAAAM,UAUAK,WAAA,SAAAnL,EAAAwL,EAAAzJ,GAEA,GAAA7V,GAAAW,KAAA0e,aAAAC,EAAAzJ,EAOA,OALA7V,MAAA,IAEA8T,EAAAnT,KAAAiT,WAAA5T,GAGAA,GAQAid,UAAA,WAEA,MAAAre,MAAAJ,IAAAmC,KAAA0b,SAAA1b,KAAAjG,MAAAiG,KAAA/F,OAAA+F,KAAApG,UAAAoG,KAAA/F,OAAA,GAAA+F,KAAAhG,QAOAqZ,MAAA,WAEA,MAAA,IAAA3a,OAAAwlB,MAAAle,KAAAiT,UAAAjT,KAAA0Y,KAAA1Y,KAAApG,SAAAoG,KAAAnG,OAAAmG,KAAAjG,MAAAiG,KAAAhG,MAAAgG,KAAA/F,OAAA+F,KAAA9F,MAAA8F,KAAAme,UAAAne,KAAAoe,gBAAApe,KAAAsb,OAAAtb,KAAAsE,KAAAtE,KAAAsE,KAAA+O,QAAA,OASA0F,YAAA,WAEA,MAAA/Y,MAAA0Y,KAAA7F,UAOA2J,WAAA,WAEA,MAAAxc,MAAA/F,SAAAuE,OAAAC,mBAAAuB,KAAA0b,WAAAld,OAAAC,mBAOAme,WAAA,WAEA,MAAA5c,MAAAqe,QAAA3lB,MAAAilB,WAAAM,YC/PAvlB,MAAAigB,OAAA,SAAAA,GAEA,MAAAA,aAAAjgB,OAAAkmB,OAEAjG,EAEAjgB,MAAA2C,SAAAsd,IAAAA,IAAAjgB,OAAAigB,OAEAjgB,MAAAigB,OAAAA,GAEAjgB,MAAA6C,SAAAod,IAAAA,EAAAC,OAAAlgB,OAAAigB,OAEAjgB,MAAAigB,OAAAA,EAAAC,MAAAD,IAGA,GAQAjgB,MAAAkmB,OAAA,aAIAlmB,MAAAmE,SAAAnE,MAAAkmB,OAAA3iB,UAAA,GAAAvD,OAAA2iB,YAWAwD,IAAA,SAAA5L,EAAAG,EAAA0L,EAAAC,EAAAC,EAAAC,EAAAC,GAEAlf,KAAAgC,MAAAiR,EAAA,KAAA,MAEAjT,KAAAoT,WAAAA,EACApT,KAAA8e,KAAAA,EACA9e,KAAA+e,SAAAA,EACA/e,KAAAif,QAAAA,EACAjf,KAAAgf,SAAAA,EACAhf,KAAAkf,aAAAA,GASAlK,MAAA,SAAApZ,EAAAnC,GAEAuG,KAAAub,UAAA3f,EACAoE,KAAAyb,QAAA,EACAzb,KAAAmf,UAAA,CAEA,IAAAlM,GAAAxZ,EAAAyZ,aAAAlT,KAAAiT,WACAW,EAAAlb,MAAA0a,WAAA1a,MAAAoE,SAAAkD,KAAAoT,WAAAH,EAAAG,YAEApT,MAAAoT,WAAAQ,EACA5T,KAAA8e,KAAA9e,KAAAof,WAAA3lB,EAAAuG,KAAA8e,KAAA7L,EAAA6C,cACA9V,KAAA+e,SAAA/e,KAAAof,WAAA3lB,EAAAuG,KAAA+e,SAAA9L,EAAA6C,cACA9V,KAAAif,QAAAjf,KAAAof,WAAA3lB,EAAAuG,KAAAif,QAAArL,EAAAM,MACAlU,KAAAgf,SAAAhf,KAAAof,WAAA3lB,EAAAuG,KAAAgf,SAAApL,EAAAM,OASA6E,YAAA,WAEA,MAAArgB,OAAAgb,WAAA1T,KAAA8e,OACApmB,MAAAgb,WAAA1T,KAAA+e,WACArmB,MAAAgb,WAAA1T,KAAAif,UACAvmB,MAAAgb,WAAA1T,KAAAgf,WAUAI,WAAA,SAAA3lB,EAAA4F,EAAAyW,GAEA,GAAA3X,GAAA6B,KAAAoT,WAAAtK,MAAAzJ,EAAAyW,EAOA,OALApd,OAAAsC,WAAAmD,IAAAA,EAAA0U,WAEA1U,EAAAA,EAAA6B,KAAAvG,IAGA0E,GAUA8d,OAAA,SAAAR,EAAAtI,GAEA,GAAAS,GAAA5T,KAAAoT,WAGAiM,EAAAphB,KAAAJ,IAAA,MAAA4d,EAAAzb,KAAAyb,SAAA/iB,MAAAkmB,OAAAU,QAGAC,EAAA3L,EAAAP,MAAArT,KAAA+e,SAGA/e,MAAAwf,eAAAH,GACArf,KAAAgf,SAAApL,EAAAgB,KAAA5U,KAAAgf,SAAAhf,KAAAif,QAAAI,GACArf,KAAA+e,SAAAnL,EAAAgB,KAAA5U,KAAA+e,SAAA/e,KAAAgf,SAAAK,EAGA,IAAAtD,IAAAnI,EAAA4B,QAAA+J,EAAAvf,KAAA+e,SAAArmB,MAAAkmB,OAAAa,QAWA,OATA1D,GAEA5I,EAAAnT,KAAAiT,WAAAjT,KAAA+e,SAEA/e,KAAAkf,cAAAtL,EAAA2B,OAAAvV,KAAAgf,YAEAhf,KAAAmf,UAAA,GAGApD,GAMA2D,YAAA,WAEA,MAAAhnB,OAAA8G,QAAAQ,KAAA8e,OAQAU,eAAA,WAEA,KAAA,yCASAxD,OAAA,WAIA,MAFAhc,MAAAmf,UAAA,GAEA,GAOAvC,WAAA,WAEA,MAAA5c,MAAAmf,YASAzmB,MAAAkmB,OAAAU,OAAA,GAKA5mB,MAAAkmB,OAAAa,QAAA,KC7LA/mB,MAAAinB,aAAA,SAAA1M,EAAAG,EAAA2L,EAAAD,EAAAc,EAAAC,EAAAb,EAAAC,EAAAC,GAEAlf,KAAA6e,IAAA5L,EAAAG,EAAA0L,EAAAC,EAAAC,EAAAC,EAAAC,GAEAlf,KAAA4f,QAAAA,EACA5f,KAAA6f,UAAAA,EACA7f,KAAA8f,MAAA,KACA9f,KAAA+f,MAAA,MAGArnB,MAAAmE,SAAAnE,MAAAinB,aAAA1jB,UAAA,GAAAvD,OAAAkmB,QASA5J,MAAA,SAAApZ,EAAAnC,GAEAf,MAAAkmB,OAAA3iB,UAAA+Y,MAAA7Z,MAAA6E,KAAArD,UAEA,IAAAsW,GAAAxZ,EAAAyZ,aAAAlT,KAAAiT,WACAW,EAAA5T,KAAAoT,UAEApT,MAAA4f,QAAA5f,KAAAof,WAAA3lB,EAAAuG,KAAA4f,QAAA3M,EAAA6C,cACA9V,KAAA6f,UAAA7f,KAAAof,WAAA3lB,EAAAuG,KAAA6f,UAAA5M,EAAA6C,cACA9V,KAAA8f,MAAAlM,EAAAS,SACArU,KAAA+f,MAAAnM,EAAAS,UAOAhB,MAAA,WAEA,MAAA,IAAA3a,OAAAinB,aAAA3f,KAAAiT,UAAAjT,KAAAoT,WAAApT,KAAA+e,SAAA/e,KAAA8e,KAAA9e,KAAA4f,QAAA5f,KAAA6f,UAAA7f,KAAAgf,SAAAhf,KAAAif,QAAAjf,KAAAkf,eASAnG,YAAA,WAEA,MAAArgB,OAAAgb,WAAA1T,KAAA8e,OACApmB,MAAAgb,WAAA1T,KAAA+e,WACArmB,MAAAgb,WAAA1T,KAAAif,UACAvmB,MAAAgb,WAAA1T,KAAAgf,WACAtmB,MAAAgb,WAAA1T,KAAA4f,UACAlnB,MAAAgb,WAAA1T,KAAA6f,YAGAL,eAAA,SAAAH,GAKA,GAAAzL,GAAA5T,KAAAoT,UAEApT,MAAA+f,MAAAnM,EAAArX,KAAAyD,KAAA+f,MAAA/f,KAAA4f,SACA5f,KAAA+f,MAAAnM,EAAAC,IAAA7T,KAAA+f,MAAA/f,KAAAgf,UAEAhf,KAAA8f,MAAAlM,EAAArX,KAAAyD,KAAA8f,MAAA9f,KAAA+e,UACA/e,KAAA8f,MAAAlM,EAAAkB,IAAA9U,KAAA8f,MAAA9f,KAAA0f,eACA1f,KAAA8f,MAAAlM,EAAAC,IAAA7T,KAAA8f,MAAA9f,KAAA6f,WACA7f,KAAA8f,MAAAlM,EAAAkB,IAAA9U,KAAA8f,MAAA9f,KAAA+f,OAEA/f,KAAAgf,SAAApL,EAAAgB,KAAA5U,KAAAgf,SAAAhf,KAAA8f,MAAAT,MAWA3mB,MAAAigB,OAAA,OAAA,SAAAA,GAEA,MAAA,IAAAjgB,OAAAinB,aACAhH,EAAA1F,UACA0F,EAAAvF,WACA1a,MAAAoE,SAAA6b,EAAAoG,UAAA,GACArmB,MAAAoE,SAAA6b,EAAAmG,MAAA,GACAnG,EAAAiH,QACAjH,EAAAkH,UACAlH,EAAAqG,SACArG,EAAAsG,QACAtG,EAAAuG,eC7FAxmB,MAAAsnB,eAAA,SAAA/M,EAAAG,EAAA2L,EAAAD,EAAA1J,EAAAwK,EAAAC,EAAAb,EAAAC,EAAAC,GAEAlf,KAAA6e,IAAA5L,EAAAG,EAAA0L,EAAAC,EAAAC,EAAAC,EAAAC,GAEAlf,KAAAoV,SAAAA,EACApV,KAAA4f,QAAAA,EACA5f,KAAA6f,UAAAA,EACA7f,KAAA2Z,KAAA,MAGAjhB,MAAAmE,SAAAnE,MAAAsnB,eAAA/jB,UAAA,GAAAvD,OAAAkmB,QASA5J,MAAA,WAEAtc,MAAAkmB,OAAA3iB,UAAA+Y,MAAA7Z,MAAA6E,KAAArD,WAEAqD,KAAA2Z,KAAA3Z,KAAAoT,WAAAiB,UAOAhB,MAAA,WAEA,MAAA,IAAA3a,OAAAsnB,eAAAhgB,KAAAiT,UAAAjT,KAAAoT,WAAApT,KAAA+e,SAAA/e,KAAA8e,KAAA9e,KAAAoV,SAAApV,KAAA4f,QAAA5f,KAAA6f,UAAA7f,KAAAgf,SAAAhf,KAAAif,QAAAjf,KAAAkf,eAGAM,eAAA,SAAAH,GAMA,GAAAzL,GAAA5T,KAAAoT,WACA0L,EAAA9e,KAAA0f,cAEAxiB,EAAA0W,EAAAwB,SAAApV,KAAA+e,SAAAD,EAEA9e,MAAA2Z,KAAA/F,EAAArX,KAAAyD,KAAA2Z,KAAA3Z,KAAA+e,UACA/e,KAAA2Z,KAAA/F,EAAAkB,IAAA9U,KAAA2Z,KAAAmF,GAEA,IAAA5hB,IAEA8C,KAAA2Z,KAAA/F,EAAA1Z,MAAA8F,KAAA2Z,KAAA,EAAAzc,GACA8C,KAAA2Z,KAAA/F,EAAA1Z,MAAA8F,KAAA2Z,MAAAzc,EAAA8C,KAAAoV,UAAApV,KAAA6f,YAGA7f,KAAA2Z,KAAA/F,EAAAgB,KAAA5U,KAAA2Z,KAAA3Z,KAAAgf,UAAAhf,KAAA4f,SAEA5f,KAAAgf,SAAApL,EAAAgB,KAAA5U,KAAAgf,SAAAhf,KAAA2Z,KAAA0F,MAUA3mB,MAAAigB,OAAA,SAAA,SAAAA,GAEA,MAAA,IAAAjgB,OAAAsnB,eACArH,EAAA1F,UACA0F,EAAAvF,WACA1a,MAAAoE,SAAA6b,EAAAoG,UAAA,GACArmB,MAAAoE,SAAA6b,EAAAmG,MAAA,GACAnG,EAAAvD,SACAuD,EAAAiH,QACAjH,EAAAkH,UACAlH,EAAAqG,SACArG,EAAAsG,QACAtG,EAAAuG,eCvFAxmB,MAAAunB,QAAA,SAAAhN,EAAAqI,EAAAlI,EAAA2L,EAAAC,EAAAkB,EAAAC,EAAAzE,GAEA1b,KAAAgC,MAAAiR,EAAAqI,EAAA,MAEAtb,KAAAoT,WAAAA,EACApT,KAAA+e,SAAAA,EACA/e,KAAAgf,SAAAA,EACAhf,KAAAkgB,aAAAA,EACAlgB,KAAAmgB,SAAAznB,MAAA0G,OAAA+gB,EAAA3hB,OAAAC,mBACAuB,KAAA0b,SAAAhjB,MAAAyE,KAAAue,EAAAld,OAAAC,mBACAuB,KAAAmf,UAAA,GAGAzmB,MAAAmE,SAAAnE,MAAAunB,QAAAhkB,UAAA,GAAAvD,OAAA2iB,YAWArG,MAAA,SAAApZ,EAAAnC,GAEAuG,KAAAub,UAAA3f,EACAoE,KAAAyb,QAAA,EACAzb,KAAAmf,UAAA,CAEA,IAAAlM,GAAAxZ,EAAAyZ,aAAAlT,KAAAiT,WACAW,EAAAlb,MAAA0a,WAAA1a,MAAAoE,SAAAkD,KAAAoT,WAAAH,EAAAG,YAEApT,MAAAoT,WAAAQ,EACA5T,KAAA+e,SAAA/e,KAAAof,WAAA3lB,EAAAuG,KAAA+e,SAAA9L,EAAA6C,cACA9V,KAAAogB,eAAAxM,EAAAP,MAAArT,KAAA+e,UACA/e,KAAAgf,SAAAhf,KAAAof,WAAA3lB,EAAAuG,KAAAgf,SAAApL,EAAAM,MACAlU,KAAAkgB,aAAAlgB,KAAAof,WAAA3lB,EAAAuG,KAAAkgB,aAAAtM,EAAAM,MACAlU,KAAA2Z,KAAA/F,EAAAS,UASA0E,YAAA,WAEA,MAAArgB,OAAAgb,WAAA1T,KAAA+e,WACArmB,MAAAgb,WAAA1T,KAAAgf,WACAtmB,MAAAgb,WAAA1T,KAAAkgB,eAUAd,WAAA,SAAA3lB,EAAA4F,EAAAyW,GAEA,GAAA3X,GAAA6B,KAAAoT,WAAAtK,MAAAzJ,EAAAyW,EAOA,OALApd,OAAAsC,WAAAmD,IAAAA,EAAA0U,WAEA1U,EAAAA,EAAA6B,KAAAvG,IAGA0E,GASA8d,OAAA,SAAAR,EAAAtI,GAEA,GAAA9T,GAAAW,KAAAqc,QAAAZ,GAAA,EAEA,IAAApc,KAAA,EAIA,MAFA8T,GAAAnT,KAAAiT,WAAAjT,KAAA+e,SAAA1f,GAEA,CAGA,IAAAuU,GAAA5T,KAAAoT,WACAiM,EAAAphB,KAAAJ,IAAA,MAAA4d,EAAAzb,KAAAyb,SAAA/iB,MAAAunB,QAAAX,QACAe,EAAAzM,EAAArX,KAAAyD,KAAA2Z,KAAA3Z,KAAAsgB,mBACAC,EAAAvgB,KAAAwgB,sBACAC,EAAAzgB,KAAA+e,QAoBA,OAlBAsB,GAAAzM,EAAAgB,KAAAyL,EAAAE,EAAAlB,GAEArf,KAAAmgB,WAAA3hB,OAAAC,oBAEA4hB,EAAAzM,EAAAnU,MAAA4gB,EAAA,EAAArgB,KAAAmgB,WAGAM,EAAA7M,EAAAgB,KAAA6L,EAAAJ,EAAAhB,GAEArf,KAAA+e,SAAA0B,EAEA/nB,MAAAsC,WAAAgF,KAAAgf,YAEAhf,KAAAgf,SAAApL,EAAArX,KAAAyD,KAAAgf,SAAAqB,IAGAlN,EAAAnT,KAAAiT,WAAAwN,GAEA,GAOAH,gBAAA,WAEA,MAAA5nB,OAAA8G,QAAAQ,KAAAgf,WAOAwB,oBAAA,WAEA,MAAA9nB,OAAA8G,QAAAQ,KAAAkgB,eASA7D,QAAA,SAAAlf,EAAAujB,GAEA,GAAAhoB,MAAAsC,WAAAgF,KAAAgf,WAAAtmB,MAAAsC,WAAAgF,KAAAkgB,eAAAlgB,KAAAmgB,WAAA3hB,OAAAC,kBAEA,OAAA,CAGAtB,IAAA6C,KAAAjG,MACAoD,GAAA,IAEA,IAAAyW,GAAA5T,KAAAoT,WACA/T,EAAAqhB,EAAA9M,EAAArX,KAAAyD,KAAA+e,SAAA/e,KAAAogB,gBAAAxM,EAAAP,MAAArT,KAAAogB,eAIA,OAHA/gB,GAAAuU,EAAAgB,KAAAvV,EAAAW,KAAAgf,SAAA7hB,GACAkC,EAAAuU,EAAAgB,KAAAvV,EAAAW,KAAAkgB,aAAA/iB,EAAAA,IAUAkW,MAAA,WAEA,MAAA,IAAA3a,OAAAunB,QAAAjgB,KAAAiT,UAAAjT,KAAAsb,OAAAtb,KAAAoT,WAAApT,KAAA+e,SAAA/e,KAAAgf,SAAAhf,KAAAkgB,aAAAlgB,KAAAmgB,SAAAngB,KAAA0b,WASAM,OAAA,WAIA,MAFAhc,MAAAmf,UAAA,GAEA,GAOAvC,WAAA,WAEA,MAAA5c,MAAAmf,YASAzmB,MAAAunB,QAAAX,OAAA,GC9LA5mB,MAAAioB,UAAA,SAAAA,EAAAC,EAAApmB,GAEA,GAAAmmB,YAAAjoB,OAAAmoB,UAEA,MAAAF,EAEA,IAAAjoB,MAAA2C,SAAAslB,GACA,CACA,GAAAre,GAAAqe,EAAA1hB,aAEA,IAAAqD,IAAA5J,OAAAioB,UAEA,MAAAjoB,OAAAioB,UAAAre,EAOA,KAAA,GAJAwe,GAAAH,EAAA7f,MAAA,KACAigB,GAAA,EACA5H,GAAA,EAEA/X,EAAA,EAAAA,EAAA0f,EAAAtnB,OAAA4H,IACA,CACA,GAAAN,GAAApI,MAAAqD,KAAA+kB,EAAA1f,GAAAnC,eAAA6B,MAAA,KACAkgB,EAAAtoB,MAAAioB,UAAA7f,EAAA,IACAmgB,EAAAvoB,MAAAkoB,QAAA9f,EAAAc,MAAA,GAEA,KAAAof,EAaA,KAAAA,GAAA,iCAAAF,EAAA1f,GAAA,GATA+X,GAFA4H,KAAA,EAEAA,EAAAC,EAAAvkB,OAAAwkB,GAAA,GAIA9H,EAAA7U,KAAA0c,EAAAvkB,OAAAwkB,GAAA,GAgBA,MAPAvoB,OAAAoE,SAAAtC,EAAA9B,MAAAiB,SAAAa,QAAA9B,MAAA4D,QAAAskB,KAEAG,EAAAlI,KAAA8H,EAEAjoB,MAAAioB,UAAAre,GAAAye,GAGAA,EAEA,GAAAroB,MAAA6C,SAAAolB,GACA,CACA,GAAAO,GAAA,GAAAxoB,OAAAqkB,cACA6D,EAAAloB,MAAAkoB,QAAAA,GACAO,EAAA,GAAAzoB,OAAA0oB,aAAAT,EAAAC,EAEA,KAAA,GAAAS,KAAAV,GACA,CACA,GAAArF,GAAA5iB,MAAA4iB,OAAA+F,EAEA/F,MAAA,GAEAA,EAAAxS,MAAA6X,EAAAC,EAAAM,EAAAC,GAIA,GAAAD,EAAA9kB,OAEA,MAAA,IAAA1D,OAAAmoB,WAAA,EAAAF,EAAAC,EAAAM,EAIA,MAAA,sDAIA,OAAA,GAWAxoB,MAAA4oB,KAAA,SAAAzI,EAAA8H,EAAAC,GAEA,GAAAD,GAAAjoB,MAAAioB,UAAAA,EAAAC,GACAte,EAAAuW,EAAA5Z,aAEA0hB,GAAA9H,KAAAA,EAEAngB,MAAAioB,UAAAre,GAAAqe,GAcAjoB,MAAAmoB,UAAA,SAAAhI,EAAA9P,EAAA6X,EAAAzD,GAEAnd,KAAA6Y,KAAAA,EACA7Y,KAAA+I,MAAAA,EACA/I,KAAA4gB,QAAAA,EACA5gB,KAAAmd,YAAAA,EACAnd,KAAAsE,KAAA,MAGA5L,MAAAmoB,UAAA5kB,WAOAslB,QAAA,WAEA,MAAAvhB,MAAA6Y,QAAA,GAQA2I,eAAA,WAEA,MAAAxhB,MAAAmd,YAAA9J,SAWAoO,MAAA,SAAAb,EAAAM,GAEA,GAAAC,GAAA,GAAAzoB,OAAA0oB,aAAAphB,KAAA+I,MAAA/I,KAAA4gB,QAAAA,EAEA,KAAA,GAAAS,KAAArhB,MAAA+I,MACA,CACA,GAAAuS,GAAA5iB,MAAA4iB,OAAA+F,EAEA/F,MAAA,GAEAA,EAAAmG,MAAAzhB,KAAA+I,MAAA6X,EAAA5gB,KAAA4gB,QAAAM,EAAAC,GAIA,MAAAD,IAQAzkB,OAAA,SAAAmkB,EAAAc,GAEA,GAAAhpB,MAAA4D,QAAAskB,KAAAc,EAEA,MAAA1hB,KAGA,IAAAkhB,GAAAlhB,KAAAwhB,gBAMA,OAJAxhB,MAAAyhB,MAAAb,EAAAM,GAEAxoB,MAAA+D,OAAAmkB,EAAA5gB,KAAA4gB,SAEA,GAAAloB,OAAAmoB,WAAA,EAAA7gB,KAAA+I,MAAA6X,EAAAM,KChLAxoB,MAAAipB,WAAA,SAAAA,EAAAnnB,GAMA,GAAAonB,GAAAD,CAEA,IAAAjpB,MAAA2C,SAAAsmB,GACA,CACA,GAAAA,IAAAjpB,OAAAipB,WAEA,MAAAjpB,OAAAipB,WAAAA,EAGAA,GAAAA,EAAA1iB,cAAA6B,MAAA,KAGA,GAAApI,MAAAY,QAAAqoB,GACA,CACA,GAAAE,GAAAF,CAEAA,KAEA,KAAA,GAAApoB,GAAA,EAAAA,EAAAsoB,EAAAroB,OAAAD,IACA,CACA,GAAAuoB,GAAAD,EAAAtoB,GACA6f,EAAA0I,EAAAC,OAAA,EAGA,IAAA,MAAA3I,EACA,CACA,GAAA4I,GAAAtpB,MAAAyE,KAAA2kB,EAAAG,UAAA,IAAA,EAEA9iB,OAAA6iB,KAEAL,EAAAK,MAAAA,OAIA,IAAA,MAAA5I,EACA,CACA,GAAA8I,GAAAxpB,MAAAyE,KAAA2kB,EAAAG,UAAA,IAAA,EAEA9iB,OAAA+iB,KAEAP,EAAAO,MAAAA,OAIA,IAAA,MAAA9I,EACA,CACA,GAAAK,GAAA/gB,MAAA0G,OAAA0iB,EAAAG,UAAA,IAAA,EAEAxI,MAAA,IAEAkI,EAAAlI,YAAAA,OAIA,CAEA,GAAA5f,GAAAnB,MAAAmB,OAAAioB,GAAA,EAEAjoB,MAAA,IAEA8nB,EAAA9nB,OAAAA,EAIA,IAAAsD,GAAAzE,MAAAyE,KAAA2kB,GAAA,EAEA3kB,MAAA,IAEAwkB,EAAAxkB,KAAAA,KAMA,MAAAzE,OAAA6C,SAAAomB,IAEAA,EAAAxkB,KAAAzE,MAAAyE,KAAAwkB,EAAAxkB,KAAAzE,MAAAiB,SAAAQ,gBACAwnB,EAAAO,MAAAxpB,MAAAyE,KAAAwkB,EAAAO,MAAAxpB,MAAAiB,SAAAS,iBACAunB,EAAAK,MAAAtpB,MAAAyE,KAAAwkB,EAAAK,MAAAtpB,MAAAiB,SAAAU,iBACAsnB,EAAA9nB,OAAAnB,MAAAmB,OAAAnB,MAAAoE,SAAA6kB,EAAA9nB,OAAAnB,MAAAiB,SAAAW,mBACAqnB,EAAAlI,YAAA/gB,MAAA0G,OAAAuiB,EAAAlI,YAAA/gB,MAAAiB,SAAAY,uBAEA7B,MAAA2C,SAAAumB,IAAAlpB,MAAAoE,SAAAtC,EAAA9B,MAAAiB,SAAAe,oBAEAhC,MAAAipB,WAAAC,GAAAD,GAGAA,GAGAjpB,MAAAiB,SAAAiB,cChGAlC,MAAAkoB,QAAA,WAEA,QAAAuB,GAAApZ,EAAArM,EAAAuM,EAAAvI,EAAA0hB,EAAAC,GAEA,GAAAjJ,GAAArQ,EAAAgZ,OAAA,EAEA,IAAA,MAAA3I,EAEAjb,EAAAzF,MAAA0G,OAAA2J,EAAAkZ,UAAA,IAAA,GAEA9jB,KAAA,IAEAzB,EAAA2lB,GAAAlkB,OAIA,EACA,MAAAib,GAAA,MAAAA,KAEA1Y,EAAA0hB,EACArZ,EAAAA,EAAAkZ,UAAA,GAGA,IAAA9jB,GAAA8K,EAAAF,GAAA,EAEA5K,MAAA,IAEAzB,EAAAgE,GAAAvC,GAIA,MAAAA,GAGA,MAAA,UAAAyiB,EAAApmB,GAEA,GAAAonB,GAAAhB,CAEA,IAAAloB,MAAA2C,SAAAulB,GACA,CACA,GAAAA,IAAAloB,OAAAkoB,QAEA,MAAAloB,OAAAkoB,QAAAA,EAGAA,GAAAA,EAAA3hB,cAAA6B,MAAA,KAGA,GAAApI,MAAAY,QAAAsnB,GACA,CAGA,IAAA,GAFAziB,MAEA5E,EAAA,EAAAA,EAAAqnB,EAAApnB,OAAAD,IACA,CACA,GAAAuoB,GAAAlB,EAAArnB,GACA6f,EAAA0I,EAAAC,OAAA,EAGA,IAAA,MAAA3I,EAEA+I,EAAAL,EAAAG,UAAA,GAAA9jB,EAAAzF,MAAAuB,OAAA,SAAA,YAAA,mBAGA,IAAA,MAAAmf,EAEA+I,EAAAL,EAAAG,UAAA,GAAA9jB,EAAAzF,MAAAyE,KAAA,QAAA,WAAA,kBAGA,IAAA,MAAAic,EAEA+I,EAAAL,EAAAG,UAAA,GAAA9jB,EAAAzF,MAAAyE,KAAA,QAAA,WAAA,kBAGA,IAAA,MAAAic,EAEA+I,EAAAL,EAAAG,UAAA,GAAA9jB,EAAAzF,MAAA0G,OAAA,QAAA,WAAA,kBAGA,CAEA,GAAAvF,GAAAnB,MAAAmB,OAAAioB,GAAA,EAEAjoB,MAAA,IAEAsE,EAAAtE,OAAAA,EAIA,IAAAD,GAAAuoB,EAAAL,EAAA3jB,EAAAzF,MAAAyE,KAAA,WAAA,cAAA,gBAEAvD,MAAA,GAGAuoB,EAAAL,EAAA3jB,EAAAzF,MAAAuB,OAAA,SAAA,YAAA,gBAUA,MALAvB,OAAA2C,SAAAumB,IAAAlpB,MAAAoE,SAAAtC,EAAA9B,MAAAiB,SAAAc,gBAEA/B,MAAAkoB,QAAAgB,GAAAzjB,GAGAA,EAGA,MAAAzF,OAAA6C,SAAAqlB,GAEAA,EAGAloB,MAAAiB,SAAAgB,cC3HAjC,MAAAE,SAAA,SAAA4L,GAEAxE,KAAAgC,MAAAwC,IAGA9L,MAAA4pB,GAAA5pB,MAAAE,SAAAqD,WAOA+F,MAAA,SAAArJ,GAcA,MAZAqH,MAAArH,QAAAA,EACAqH,KAAAmd,YAAA,GAAAzkB,OAAAqkB,cACA/c,KAAAuiB,oBACAviB,KAAAmT,SACAnT,KAAA+b,WACA/b,KAAAmf,UAAA,EACAnf,KAAAnH,QAAA,KACAmH,KAAAwiB,QAAA,EACAxiB,KAAAyiB,aAAA,EACAziB,KAAA0iB,UAAA,EACA1iB,KAAA2iB,WAAA,EAEA3iB,MASA4iB,SAAA,SAAAzF,GAaA,MAXAnd,MAAA0iB,YAEAvF,YAAAzkB,OAAAqkB,cAEA/c,KAAA0iB,UAAAvF,EAAAI,WAAAvd,KAAA0iB,WAEAvF,YAAAzkB,OAAA2iB,aAEA8B,EAAAvB,MAAA5b,KAAA0iB,WAGA1iB,MASA6iB,kBAAA,WAKA,IAAA,GAHAjH,GAAA5b,KAAAyiB,aACAtF,EAAAnd,KAAAmd,YAAAhb,OAEA5I,EAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAwZ,GAAAoK,EAAA5jB,GACAyZ,EAAAD,EAAAE,SAEAF,GAAA6I,QAAAA,IAEA5b,KAAA+b,QAAA/I,GAAAD,EAAA8I,WAAA7b,KAAAmT,UAAA,GAAAnT,KAAA+b,QAAA/I,IAIA,MAAAhT,OAOA8iB,gBAAA,WAEA9iB,KAAAyiB,aAAAziB,KAAA2iB,aAEA3iB,KAAA2iB,WAAA3iB,KAAAyiB,aACAziB,KAAA6B,QAAA,YAAA7B,KAAAyiB,aAAAziB,KAAAyiB,gBASAvP,aAAA,SAAAF,GAEA,MAAAhT,MAAAnH,QAAAoa,UAAAD,IAOA+P,QAAA,WAEA,MAAA/iB,OAOAgjB,UAAA,SAAApnB,GAMA,GAAAqnB,GAAAjjB,KAAAuiB,gBACA,IAAAU,EAAAzpB,OACA,CACA,IAAA,GAAAD,GAAA,EAAAA,EAAA0pB,EAAAzpB,OAAAD,IACA,CACA,GAAAwZ,GAAAkQ,EAAA1pB,EAEAyG,MAAAkjB,WAAAnQ,EAAAE,WAEAF,EAAAiC,MAAApZ,EAAAoE,MAGAijB,EAAAzpB,OAAA,EAKA,MAFAwG,MAAA6B,QAAA,aAEA7B,MAQAkjB,WAAA,SAAAlQ,GAEAA,IAAAhT,MAAAmT,QAEAnT,KAAAmT,MAAAH,GAAAhT,KAAAkT,aAAAF,GAAAM,iBAUA2I,OAAA,SAAArgB,GAEAoE,KAAAmjB,YAAAnjB,KAAAmf,SACAnf,KAAAmf,UAAA,CAKA,KAAA,GAHAhC,GAAAnd,KAAAmd,YAAAhb,OACAihB,EAAApjB,KAAA0iB,UAEAnpB,EAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAwZ,GAAAoK,EAAA5jB,GACAyZ,EAAAD,EAAAE,SAEAjT,MAAA+b,QAAA/I,GAAAD,EAAA+I,QAAAlgB,EAAAoE,KAAAmT,OAEAnT,KAAAmf,SAAAnf,KAAAmf,UAAApM,EAAA6J,aAEAwG,EAAAnlB,KAAAJ,IAAAulB,EAAArQ,EAAA6I,OAGA,GAAA5b,KAAAyiB,aAAAW,EACA,CACA,KAAApjB,KAAAyiB,aAAAW,GAEApjB,KAAA8iB,kBACA9iB,KAAAyiB,cAGAziB,MAAAyiB,aAAAW,EACApjB,KAAA6iB,oBACA7iB,KAAA6B,QAAA,cAAA7B,KAAAyiB,aAAAziB,KAAAyiB,cAUA,OAPAziB,KAAAmjB,aAAAnjB,KAAAmf,UAEAnf,KAAA8iB,kBAGA9iB,KAAA6B,QAAA,UAEA7B,MAUAqjB,gBAAA,SAAAtQ,GAEA,GAAAC,GAAAD,EAAAE,SAEAjT,MAAAmd,YAAAjb,IAAA8Q,EAAAD,GACA/S,KAAAuiB,iBAAA7oB,KAAAqZ,GAEA/S,KAAAmf,UAAA,GAOAhkB,MAAA,WAEA,IAAA,GAAA6X,KAAAhT,MAAAmT,MAEAnT,KAAA+b,QAAA/I,KAEAhT,KAAArH,QAAAqa,GAAAhT,KAAAmT,MAAAH,GACAhT,KAAA+b,QAAA/I,IAAA,EAQA,OAJAhT,MAAA6B,QAAA,SAEA7B,KAAAsjB,kBAEAtjB,MAOAsjB,gBAAA,WAIA,IAAA,GAFAnG,GAAAnd,KAAAmd,YAAAhb,OAEA5I,EAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAwZ,GAAAoK,EAAA5jB,EAEAwZ,GAAA6J,eAEA7J,EAAAzO,KAEAtE,KAAAqjB,gBAAAtQ,EAAAzO,MAIAtE,KAAAmd,YAAA1a,SAAAlJ,KAKAyG,KAAAmjB,aAAAnjB,KAAAmf,UAEAnf,KAAA6B,QAAA,WAAA7B,OAUAX,MAAA,SAAA2T,GAEA,MAAAhT,MAAAmT,MAAAH,IAQAuQ,SAAA,WAIA,MAFA7qB,OAAAob,IAAA9T,MAEAA,MAOAwjB,WAAA,WAEAxjB,KAAA6B,QAAA,aAAA7B,OAQAyjB,QAAA,WAEAzjB,KAAAmf,UAAA,EAEAnf,KAAAnH,QAAA4qB,QAAAzjB,MAEAA,KAAA6B,QAAA,cAUA6hB,kBAAA,SAAA/C,EAAAC,EAAApmB,GAEA,GAAAomB,GAAAloB,MAAAkoB,QAAAA,GACAD,EAAAjoB,MAAAioB,UAAAA,EAAAC,EAAApmB,EAEA,IAAAmmB,KAAA,EAEA,OAAA,CAGA,IAAAxD,GAAAwD,EAAAa,gBASA,KAPAb,EAAAY,YAAA7oB,MAAA4D,QAAAskB,IAEAD,EAAAc,MAAAb,EAAAzD,GAGAnd,KAAA2jB,YAAAhD,EAAAC,EAAAzD,GAEA,OAAAwD,EAAArc,MACA,CACAqc,EAAAA,EAAArc,IAEA,IAAAsf,GAAAjD,EAAAa,gBAEAxhB,MAAA2jB,YAAAhD,EAAAC,EAAAgD,GAEAzG,EAAAH,SAAA4G,GAGA,MAAAzG,IAUAwG,YAAA,aAWAhL,OAAA,SAAAA,GAEA,GAAAA,GAAAjgB,MAAAigB,OAAAA,EAEA,OAAAA,MAAA,GAEA,GAGA3Y,KAAA4iB,SAAAjK,GACA3Y,KAAAqjB,gBAAA1K,GAEA3Y,KAAAujB,WAEA5K,IAYAkL,KAAA,SAAAlD,EAAAC,EAAAkD,EAAAtpB,GAEA,GAAA0mB,GAAAlhB,KAAA0jB,kBAAA/C,EAAAC,EAAApmB,EAEA,OAAA0mB,MAAA,GAEA,GAGAlhB,KAAA4iB,SAAA1B,GACAlhB,KAAA+jB,gBAAA7C,EAAA4C,GAEA9jB,KAAAujB,aAYAQ,gBAAA,SAAA7C,EAAA4C,GAEA,GAAAA,EAIA,IAAA,GAFA3G,GAAAnd,KAAAmd,YAAAhb,OAEA5I,EAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAwZ,GAAAoK,EAAA5jB,EAEA2nB,GAAAne,IAAAgQ,EAAAE,YAEAF,EAAAiJ,OAAAhc,KAAAmT,OAOA,IAAA,GAFAgK,GAAA+D,EAAA/e,OAEA5I,EAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IAEAyG,KAAAqjB,gBAAAlG,EAAA5jB,GAGA,OAAAyG,OAUA8c,MAAA,SAAA6D,EAAAC,EAAApmB,GAEA,GAAA0mB,GAAAlhB,KAAA0jB,kBAAA/C,EAAAC,EAAApmB,EAEA,OAAA0mB,MAAA,GAEA,GAGAlhB,KAAA4iB,SAAA1B,GACAlhB,KAAA4jB,iBAAA1C,GAEAlhB,KAAAujB,aAWAK,iBAAA,SAAA1C,GAIA,MAFAlhB,MAAAmd,YAAAH,SAAAkE,EAAAlhB,KAAAqjB,gBAAArjB,MAEAA,MAcA2hB,WAAA,SAAAA,EAAAhB,EAAAC,EAAAkD,EAAAtpB,GAEA,GAAAmnB,GAAAjpB,MAAAipB,WAAAA,GACAT,EAAAlhB,KAAA0jB,kBAAA/C,EAAAC,EAAApmB,EAEA,OAAA0mB,MAAA,GAEA,GAGAlhB,KAAA4iB,SAAA1B,GACAlhB,KAAAgkB,sBAAArC,EAAAT,EAAA4C,GAEA9jB,KAAAujB,aAaAS,sBAAA,SAAArC,EAAAT,GASA,GAAApO,GAAA9S,KAAAmd,YACAA,EAAA+D,EAAA/e,MAGA,IAAA2Q,EAAA9P,WAAAke,GAEA,IAAA,GAAA3nB,GAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAA0qB,GAAA9G,EAAA5jB,GACAyZ,EAAAiR,EAAAhR,SAEA,IAAAH,EAAA/P,IAAAiQ,GACA,CACA,GAAAC,GAAAjT,KAAAkT,aAAAF,GACAkR,EAAApR,EAAAvQ,IAAAyQ,GAEA8G,EAAA7G,EAAAG,WAAAC,MAAArT,KAAAmT,MAAAH,IACA+G,EAAAmK,EAAAC,UAAAxC,EAAAyC,YACApK,EAAAiK,EAAAI,SAAA,GAEAC,EAAA,GAAA5rB,OAAA6hB,cAAAvH,EAAAC,EAAAG,WAAA0G,EAAAC,EAAAC,GACAuK,EAAA,GAAA7rB,OAAAwlB,MAAAlL,EAAAsR,EAAA3C,EAAAxkB,KAAAwkB,EAAA9nB,OAAA,EAAA,EAAA,GAAA2qB,aAEAD,GAAAjgB,KAAA2f,EAEAjkB,KAAAqjB,gBAAAkB,OAIAN,GAAAlqB,OAAA4nB,EAAAxkB,KAEA6C,KAAAqjB,gBAAAY,OAOA,KAAA,GAAA1qB,GAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IAEAyG,KAAAqjB,gBAAAlG,EAAA5jB,GAIA,OAAAyG,OAqHAykB,QAAA,SAAAzR,EAAA0R,EAAA9D,GAEA,GAAAA,GAAAloB,MAAAkoB,QAAAA,GACA3N,EAAAjT,KAAAkT,aAAAF,GACAiC,EAAAhC,EAAAnK,MAAA4b,GACAhM,EAAA,GAAAhgB,OAAAkhB,MAAA5G,EAAAC,EAAAG,WAAA1a,MAAAma,SAAAC,QAAAmC,GACA/T,EAAA,GAAAxI,OAAAwlB,MAAAlL,EAAA0F,EAAAkI,EAAAhnB,SAAAgnB,EAAA/mB,OAAA+mB,EAAA7mB,MAAA6mB,EAAA5mB,MAAA4mB,EAAA3mB,OAAA2mB,EAAA1mB,MAAA0mB,EAAAzC,UAKA,OAHAne,MAAA4iB,SAAA1hB,GACAlB,KAAAqjB,gBAAAniB,GAEAlB,KAAAujB,YAeAoB,YAAA,SAAAC,EAAAhE,GAEA,GAAAA,GAAAloB,MAAAkoB,QAAAA,EAEA5gB,MAAA4iB,UAEA,KAAA,GAAA5P,KAAA4R,GACA,CACA,GAAA3R,GAAAjT,KAAAkT,aAAAF,GACAiC,EAAAhC,EAAAnK,MAAA8b,EAAA5R,IACA0F,EAAA,GAAAhgB,OAAAkhB,MAAA5G,EAAAC,EAAAG,WAAA1a,MAAAma,SAAAC,QAAAmC,GACA/T,EAAA,GAAAxI,OAAAwlB,MAAAlL,EAAA0F,EAAAkI,EAAAhnB,SAAAgnB,EAAA/mB,OAAA+mB,EAAA7mB,MAAA6mB,EAAA5mB,MAAA4mB,EAAA3mB,OAAA2mB,EAAA1mB,MAAA0mB,EAAAzC,UAEAjd,GAAA0a,MAAA5b,KAAA0iB,UACA1iB,KAAAqjB,gBAAAniB,GAGA,MAAAlB,MAAAujB,YAiBAsB,MAAA,SAAA7R,EAAA8R,EAAAC,EAAAnE,GAEA,GAAAA,GAAAloB,MAAAkoB,QAAAA,GACA3N,EAAAjT,KAAAkT,aAAAF,GACAgC,EAAA/B,EAAAnK,MAAAgc,GACA7P,EAAAhC,EAAAnK,MAAAic,GACArM,EAAA,GAAAhgB,OAAAkhB,MAAA5G,EAAAC,EAAAG,WAAA4B,EAAAC,GACA/T,EAAA,GAAAxI,OAAAwlB,MAAAlL,EAAA0F,EAAAkI,EAAAhnB,SAAAgnB,EAAA/mB,OAAA+mB,EAAA7mB,MAAA6mB,EAAA5mB,MAAA4mB,EAAA3mB,OAAA2mB,EAAA1mB,MAAA0mB,EAAAzC,UAKA,OAHAne,MAAA4iB,SAAA1hB,GACAlB,KAAAqjB,gBAAAniB,GAEAlB,KAAAujB,YAgBAyB,UAAA,SAAAF,EAAAC,EAAAnE,GAEA,GAAAA,GAAAloB,MAAAkoB,QAAAA,EAEA5gB,MAAA4iB,UAEA,KAAA,GAAA5P,KAAA8R,GACA,CACA,GAAA7R,GAAAjT,KAAAkT,aAAAF,GACAgC,EAAA/B,EAAAnK,MAAAgc,EAAA9R,IACAiC,EAAAhC,EAAAnK,MAAAic,EAAA/R,IACA0F,EAAA,GAAAhgB,OAAAkhB,MAAA5G,EAAAC,EAAAG,WAAA4B,EAAAC,GACA/T,EAAA,GAAAxI,OAAAwlB,MAAAlL,EAAA0F,EAAAkI,EAAAhnB,SAAAgnB,EAAA/mB,OAAA+mB,EAAA7mB,MAAA6mB,EAAA5mB,MAAA4mB,EAAA3mB,OAAA2mB,EAAA1mB,MAAA0mB,EAAAzC,UAEAjd,GAAA0a,MAAA5b,KAAA0iB,UACA1iB,KAAAqjB,gBAAAniB,GAGA,MAAAlB,MAAAujB,YAQA0B,IAAA,SAAAjS,GAEA,GAAAvZ,GAAAuG,KACAiT,EAAAjT,KAAAkT,aAAAF,GACAkS,IAEA,OAAA,YAEA,GAAAlS,IAAAvZ,GAAA0Z,MAEA,MAAA1Z,GAAA0Z,MAAAH,EAGAkS,GAAAlS,IAAA,CAEA,IAAAF,GAAArZ,EAAA8I,IAAA2iB,EAEA,OAAAxsB,OAAAoC,UAAAgY,EAAAE,IAEAF,EAAAE,GAGAC,EAAA6C,eAgBAqP,OAAA,SAAAlS,EAAAyF,EAAAkI,GAEA,GAAAA,GAAAloB,MAAAkoB,QAAAA,GACAlI,EAAAhgB,MAAAggB,KAAAA,GAEAxX,EAAA,GAAAxI,OAAAwlB,MACAjL,EACAyF,EACAkI,EAAAhnB,SACAgnB,EAAA/mB,OACA+mB,EAAA7mB,MACA6mB,EAAA5mB,MACA4mB,EAAA3mB,OACA2mB,EAAA1mB,MACA0mB,EAAAzC,UAMA,OAHAne,MAAA4iB,SAAA1hB,GACAlB,KAAAqjB,gBAAAniB,GAEAlB,KAAAujB,YAWA6B,eAAA,SAAAC,EAAAzkB,GAEAlI,MAAA2C,SAAAgqB,KAEAA,EAAAA,EAAAvkB,MAAA,KAGA,IAAAogB,GAAAlhB,KAAAmd,YACAmI,GAAA5sB,MAAAsC,WAAA4F,GACAV,IAEA,IAAAxH,MAAAY,QAAA+rB,GAEA,IAAA,GAAA9rB,GAAA,EAAAA,EAAA8rB,EAAA7rB,OAAAD,IACA,CACA,GAAAyZ,GAAAqS,EAAA9rB,GACAwZ,EAAAmO,EAAA3e,IAAAyQ,EAEAD,KAEAuS,EAEAplB,EAAAxG,KAAAqZ,GAIAnS,EAAA1F,KAAA8E,KAAA+S,EAAAC,QASA,KAAA,GAFAmK,GAAA+D,EAAA/e,OAEA5I,EAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAwZ,GAAAoK,EAAA5jB,EAEA+rB,GAEAplB,EAAAxG,KAAAqZ,GAIAnS,EAAA1F,KAAA8E,KAAA+S,EAAAA,EAAAE,WAKA,MAAAqS,GAAAplB,EAAAF,MASAulB,KAAA,SAAAF,GAEA,MAAArlB,MAAAolB,eAAAC,EAAA,SAAAtS,EAAAC,GAEAhT,KAAAmd,YAAA3a,OAAAwQ,MAWAiC,IAAA,SAAAoQ,GAEA,MAAArlB,MAAAolB,eAAAC,EAAA,SAAAtS,GAEA,KAAAA,EAAAzO,MAEAyO,EAAAA,EAAAzO,IAGAyO,GAAAiJ,OAAAhc,KAAAmT,UAUA6I,OAAA,SAAAqJ,GAEA,MAAArlB,MAAAolB,eAAAC,EAAA,SAAAtS,GAEAA,EAAAiJ,OAAAhc,KAAAmT,UAUAsJ,MAAA,SAAA4I,GAEA,MAAArlB,MAAAolB,eAAAC,EAAA,SAAAtS,GAEAA,EAAA0J,WAUAC,OAAA,SAAA2I,GAEA,MAAArlB,MAAAolB,eAAAC,EAAA,SAAAtS,GAEAA,EAAA2J,YASAmC,IAAA,SAAAwG,GAEA,IAAA,GAAArS,KAAAqS,GAEArlB,KAAAmT,MAAAH,GAAAqS,EAAArS,GACAhT,KAAA+b,QAAA/I,IAAA,CAKA,OAFAhT,MAAA7E,QAEA6E,MAUAwlB,MAAA,SAAAH,GAEA,GAAA3sB,MAAA2C,SAAAgqB,GAEArlB,KAAAmd,YAAA3a,OAAA6iB,SACArlB,MAAAmT,MAAAkS,OAEA,IAAA3sB,MAAAY,QAAA+rB,GAEA,IAAA,GAAA9rB,GAAA,EAAAA,EAAA8rB,EAAA7rB,OAAAD,IAEAyG,KAAAwlB,MAAAH,EAAA9rB,QAGA,IAAAb,MAAA6C,SAAA8pB,GAEA,IAAA,GAAArS,KAAAqS,GAEArlB,KAAAwlB,MAAAxS,EAIA,OAAAhT,OASAuC,IAAA,SAAA8iB,GAEA,GAAA3oB,KAEA,KAAA,GAAAsW,KAAAqS,GAEA3oB,EAAAsW,GAAAhT,KAAAmT,MAAAH,EAGA,OAAAtW,IAOA6f,cAAA,WAEA,MAAAvc,MAAAmd,YAAAZ,iBAMAkJ,eAAA,WAEA,MAAAzlB,MAAAmd,YAAA/gB,OAAA,GASAspB,WAAA,SAAAC,GAEA,GAAAhtB,GAAAqH,KAAArH,OAOA,OALAD,OAAAsC,WAAA2qB,KAEAhtB,EAAAgtB,EAAAhtB,IAGAA,GAWAitB,OAAA,SAAAC,EAAAhlB,EAAAilB,GAEAptB,MAAAsC,WAAA6qB,IAEAA,EAAA1qB,MAAA0F,GAAAb,KAAA8lB,QAYAzhB,MAAA,SAAAb,EAAAtC,EAAAN,GAEA,MAAA,IAAAlI,OAAAqtB,cAAA/lB,KAAAA,KAAAwD,EAAAtC,EAAAN,IASAolB,aAAA,SAAAplB,EAAAC,GAEAb,KAAApB,KAAA,cAAAoB,KAAA0iB,UAAA9hB,EAAAC,IASAolB,WAAA,SAAArlB,EAAAC,GAEAb,KAAApB,KAAA,YAAAoB,KAAA0iB,UAAA9hB,EAAAC,KAQAnI,MAAA4H,SAAA5H,MAAAE,SAAAqD,WAKAvD,MAAAqtB,cAAA,SAAAtsB,EAAA8J,EAAAC,EAAAtC,GAEAlB,KAAAqD,OAAA5J,EAAA8J,EAAAC,EAAAtC,IAMAxI,MAAAqtB,cAAA9pB,UAAA,GAAAvD,OAAAuK,MAAAvK,MAAAqtB,eAEA,UAAA,kBAAA,YAAA,SAAA,QAAA,kBACA,WAAA,aAAA,UAAA,SAAA,OAAA,kBAAA,QACA,mBAAA,aAAA,wBAAA,QAAA,UACA,YAAA,cAAA,SAAA,OAAA,MAAA,SAAA,QAAA,SACA,MAAA,QAAA,MAAA,WClqCArtB,MAAAW,UAAA,SAAA0P,GAEArQ,MAAAY,QAAAyP,IAEA/I,KAAAkmB,KAAAnd,IAOArQ,MAAAmE,SAAA5D,OAAAqpB,GAAA5pB,MAAAW,UAAA4C,UAAA,GAAAX,QAOA6qB,KAAA,SAAAC,EAAAvlB,GAEA,IAAA,GAAAtH,GAAA,EAAAA,EAAAyG,KAAAxG,QAEA4sB,EAAAlrB,KAAA2F,GAAAb,KAAAzG,GAAAyG,KAAAzG,GAAAA,MAAA,EAFAA,KAQA,MAAAyG,OAQAkmB,KAAA,SAAA/sB,GAEA,IAAA,GAAAI,GAAA,EAAAA,EAAAJ,EAAAK,OAAAD,IAEAyG,KAAAtG,KAAAP,EAAAI,GAGA,OAAAyG,OAQAqmB,OAAA,SAAAC,GAIA,IAAA,GAFAC,GAAA,EAEAhtB,EAAA,EAAAA,EAAAyG,KAAAxG,OAAAD,IACA,CACA,GAAAiJ,GAAA8jB,EAAAtmB,KAAAzG,GAEAiJ,KAEAxC,KAAAumB,KAAAvmB,KAAAzG,IAMA,MAFAyG,MAAAxG,OAAA+sB,EAEAvmB,MASAwmB,YAAA,SAAAb,GAIA,IAAA,GAFAzsB,MAEAK,EAAA,EAAAA,EAAAyG,KAAAxG,OAAAD,IAEAL,EAAAQ,KAAAsG,KAAAzG,GAAAZ,QAQA,OALAD,OAAAsC,WAAA2qB,KAEAzsB,EAAAysB,EAAAzsB,IAGAA,GAMAkgB,MAAA,WAEA,MAAApZ,MAAA,IAMAmI,QAAA,WAKA,IAAA,GAHAgR,GAAAnZ,KAAAxG,OAAA,EACAitB,EAAAxoB,KAAAC,MAAA8B,KAAAxG,OAAA,GAEAD,EAAA,EAAAktB,EAAAltB,EAAAA,IACA,CACA,GAAAmtB,GAAA1mB,KAAAzG,GACAotB,EAAA3mB,KAAAmZ,EAAA5f,EAEAyG,MAAAzG,GAAAotB,EACA3mB,KAAAmZ,EAAA5f,GAAAmtB,EAGA,MAAA1mB,OAQAujB,SAAA,WAEA,IAAA,GAAAhqB,GAAA,EAAAA,EAAAyG,KAAAxG,OAAAD,IACA,CACA,GAAAE,GAAAuG,KAAAzG,EAEAE,GAAA+oB,SAEA/oB,EAAA+oB,QAAA,EACA9pB,MAAAkuB,UAAAltB,KAAAD,IAWA,MAPAf,OAAAmuB,UAEAnuB,MAAAmuB,SAAA,EACAnuB,MAAAmJ,QAAA,YACAnJ,MAAAouB,WAAApuB,MAAAquB,MAGA/mB,MAMAgnB,SAAA,SAAAjtB,EAAAF,GAEA,MAAA,IAAAnB,OAAAuuB,SAAAjnB,KAAAjG,EAAAF,IAOA0iB,cAAA,WAIA,IAAA,GAFAW,GAAA,EAEA3jB,EAAA,EAAAA,EAAAyG,KAAAxG,OAAAD,IAEA2jB,EAAAjf,KAAA0B,IAAAud,EAAAld,KAAAzG,GAAAgjB,gBAGA,OAAAW,IAMA6F,QAAArqB,MAAAkH,SAAA,UAAAlH,MAAAkH,SAAAG,aACAsjB,gBAAA3qB,MAAAkH,SAAA,kBAAAlH,MAAAkH,SAAAG,aACAijB,UAAAtqB,MAAAkH,SAAA,YAAAlH,MAAAkH,SAAAG,aACAkc,OAAAvjB,MAAAkH,SAAA,SAAAlH,MAAAkH,SAAAG,aACA5E,MAAAzC,MAAAkH,SAAA,QAAAlH,MAAAkH,SAAAG,aACAujB,gBAAA5qB,MAAAkH,SAAA,kBAAAlH,MAAAkH,SAAAG,aACAwjB,SAAA7qB,MAAAkH,SAAA,WAAAlH,MAAAkH,SAAAG,aACAyjB,WAAA9qB,MAAAkH,SAAA,aAAAlH,MAAAkH,SAAAG,aACA0jB,QAAA/qB,MAAAkH,SAAA,UAAAlH,MAAAkH,SAAAG,aACA4Y,OAAAjgB,MAAAkH,SAAA,SAAAlH,MAAAkH,SAAAK,gBACA4jB,KAAAnrB,MAAAkH,SAAA,OAAAlH,MAAAkH,SAAAG,aACAgkB,gBAAArrB,MAAAkH,SAAA,kBAAAlH,MAAAkH,SAAAG,aACA+c,MAAApkB,MAAAkH,SAAA,QAAAlH,MAAAkH,SAAAG,aACA6jB,iBAAAlrB,MAAAkH,SAAA,mBAAAlH,MAAAkH,SAAAG,aACA4hB,WAAAjpB,MAAAkH,SAAA,aAAAlH,MAAAkH,SAAAG,aACAikB,sBAAAtrB,MAAAkH,SAAA,wBAAAlH,MAAAkH,SAAAG,aACA8kB,MAAAnsB,MAAAkH,SAAA,QAAAlH,MAAAkH,SAAAG,aACA0kB,QAAA/rB,MAAAkH,SAAA,UAAAlH,MAAAkH,SAAAG,aACAilB,UAAAtsB,MAAAkH,SAAA,YAAAlH,MAAAkH,SAAAG,aACA4kB,YAAAjsB,MAAAkH,SAAA,cAAAlH,MAAAkH,SAAAG,aACAolB,OAAAzsB,MAAAkH,SAAA,SAAAlH,MAAAkH,SAAAG,aACAqlB,eAAA1sB,MAAAkH,SAAA,iBAAAlH,MAAAkH,SAAAK,gBACAslB,KAAA7sB,MAAAkH,SAAA,OAAAlH,MAAAkH,SAAAG,aACAkV,IAAAvc,MAAAkH,SAAA,MAAAlH,MAAAkH,SAAAG,aACAic,OAAAtjB,MAAAkH,SAAA,SAAAlH,MAAAkH,SAAAG,aACA0c,MAAA/jB,MAAAkH,SAAA,QAAAlH,MAAAkH,SAAAG,aACA2c,OAAAhkB,MAAAkH,SAAA,SAAAlH,MAAAkH,SAAAG,aACA8e,IAAAnmB,MAAAkH,SAAA,MAAAlH,MAAAkH,SAAAG,aACAylB,MAAA9sB,MAAAkH,SAAA,QAAAlH,MAAAkH,SAAAG,aACAwC,IAAA7J,MAAAkH,SAAA,MAAAlH,MAAAkH,SAAAO,cACAslB,eAAA/sB,MAAAkH,SAAA,iBAAAlH,MAAAkH,SAAAS,aACAulB,OAAAltB,MAAAkH,SAAA,SAAAlH,MAAAkH,SAAAG,aACAgB,GAAArI,MAAAkH,SAAA,KAAAlH,MAAAkH,SAAAG,aACAnB,KAAAlG,MAAAkH,SAAA,OAAAlH,MAAAkH,SAAAG,aACAuB,IAAA5I,MAAAkH,SAAA,MAAAlH,MAAAkH,SAAAG,aACA8B,QAAAnJ,MAAAkH,SAAA,UAAAlH,MAAAkH,SAAAG,eC9MArH,MAAAmuB,SAAA,EASAnuB,MAAAwuB,MAAA,EAKAxuB,MAAAkuB,UAAA,GAAAluB,OAAAW,UAOAX,MAAAouB,WAAA,WAKA,IAAA,GAHAK,IAAA,KAAA,MAAA,SAAA,KACAC,EAAAje,OAAAke,sBAEAtsB,EAAA,EAAAA,EAAAosB,EAAA3tB,SAAA4tB,IAAArsB,EAEAqsB,EAAAje,OAAAge,EAAApsB,GAAA,wBAGA;IAAAqsB,EACA,CACA,GAAAE,GAAA,CAEA,OAAA,UAAA1mB,GAEA,GACA2mB,IADA7uB,MAAAkD,MACAqC,KAAA0B,IAAA,EAAA,IAAA6nB,SAAAF,KACAG,EAAAte,OAAAue,WAAA,WAAA9mB,EAAA4mB,SAAAD,IAAAA,EAEA,OADAD,GAAAE,SAAAD,EACAE,GAIA,MAAA,UAAA7mB,GAEAwmB,EAAAxmB,OAWAlI,MAAAob,IAAA,SAAAra,GAEAA,EAAA+oB,SAEA9pB,MAAAkuB,UAAAltB,KAAAD,GAEAA,EAAA+oB,QAAA,GAGA9pB,MAAAmuB,UAEAnuB,MAAAmuB,SAAA,EACAnuB,MAAAmJ,QAAA,YACAnJ,MAAAouB,WAAApuB,MAAAquB,OAYAruB,MAAAquB,IAAA,WAEAruB,MAAAmJ,QAAA,QAEA,IAAAjG,GAAAlD,MAAAkD,KAGAlD,OAAAkuB,UAAAT,KAAA,SAAA1sB,GAEAA,EAAAupB,UAAApnB,KAIAlD,MAAAkuB,UAAAT,KAAA,SAAA1sB,GAEAA,EAAAwiB,OAAArgB,KAIAlD,MAAAkuB,UAAAT,KAAA,SAAA1sB,GAEAA,EAAA0B,UAIAzC,MAAAkuB,UAAAP,OAAA,SAAA5sB,GAQA,MANAA,GAAA0lB,WAEA1lB,EAAA+pB,aACA/pB,EAAA+oB,QAAA,GAGA/oB,EAAA0lB,WAGAzmB,MAAAmJ,QAAA,OAGAnJ,MAAAkuB,UAAAptB,QAAAd,MAAAwuB,KAEAxuB,MAAAouB,WAAApuB,MAAAquB,MAIAruB,MAAAmuB,SAAA,EACAnuB,MAAAmJ,QAAA,cAOAnJ,MAAA4H,SAAA5H,OC3IAA,MAAAuuB,SAAA,SAAA9tB,EAAAY,EAAAF,GAEAmG,KAAA7G,UAAAA,EACA6G,KAAAjG,MAAArB,MAAAqB,MAAAA,GACAiG,KAAAnG,OAAAnB,MAAAmB,OAAAA,IAGAnB,MAAAuuB,SAAAhrB,WAMA0rB,SAAA,WAEA,MAAA3nB,MAAAjG,OAAAiG,KAAA7G,UAAAK,OAAA,IAUAkqB,kBAAA,SAAA/C,EAAAC,EAAArnB,GAOA,IAAA,GALA2nB,GAAAP,EAAAa,iBACArE,EAAA+D,EAAA/e,OACA+S,EAAA3b,GAAAyG,KAAA7G,UAAAK,OAAA,GACAouB,EAAA5nB,KAAAnG,OAAAqb,GAAAlV,KAAA2nB,WAEAvmB,EAAA+b,EAAA3jB,OAAA,EAAA4H,GAAA,EAAAA,IAEA+b,EAAA/b,GAAArH,OAAA6tB,CAKA,OAFAjH,GAAAc,MAAAb,EAAAM,GAEAA,GAOA/Y,QAAA,WAIA,MAFAnI,MAAA7G,UAAAgP,UAEAnI,MAWA6jB,KAAA,SAAAlD,EAAAC,EAAAkD,EAAAtpB,GAEA,GAAAomB,GAAAloB,MAAAkoB,QAAAA,GACAG,EAAAroB,MAAAioB,UAAAA,EAAAC,EAAApmB,EAEA,IAAAumB,KAAA,EAEA,MAAA/gB,KAGA,IAAAgnB,GAAAhnB,IASA,OAPAA,MAAA7G,UAAAgtB,KAAA,SAAA1sB,EAAAF,GAEA,GAAA4jB,GAAA6J,EAAAtD,kBAAA3C,EAAAH,EAAArnB,EACAE,GAAAmpB,SAAAzF,GACA1jB,EAAAsqB,gBAAA5G,EAAA2G,KAGA9jB,KAAA8T,OAUAgJ,MAAA,SAAA6D,EAAAC,EAAApmB,GAEA,GAAAomB,GAAAloB,MAAAkoB,QAAAA,GACAG,EAAAroB,MAAAioB,UAAAA,EAAAC,EAAApmB,EAEA,IAAAumB,KAAA,EAEA,MAAA/gB,KAGA,IAAAgnB,GAAAhnB,KACAkd,EAAA,EACAI,IAuBA,OArBAtd,MAAA7G,UAAAgtB,KAAA,SAAA1sB,EAAAF,GAEA+jB,EAAA/jB,GAAAE,EAAA8iB,gBACAW,EAAAjf,KAAA0B,IAAAud,EAAAI,EAAA/jB,MAGAyG,KAAA7G,UAAAgtB,KAAA,SAAA1sB,EAAAF,GAMA,IAAA,GAJAquB,GAAA1K,EAAAI,EAAA/jB,GACA2nB,EAAA8F,EAAAtD,kBAAA3C,EAAAH,EAAArnB,GACA4jB,EAAA+D,EAAA/e,OAEAf,EAAA+b,EAAA3jB,OAAA,EAAA4H,GAAA,EAAAA,IAEA+b,EAAA/b,GAAArH,OAAA6tB,CAGAnuB,GAAAmpB,SAAA1B,GACAznB,EAAAmqB,iBAAA1C,KAGAlhB,KAAA8T,OAcA6N,WAAA,SAAAA,EAAAhB,EAAAC,EAAAkD,EAAAtpB,GAEA,GAAAmnB,GAAAjpB,MAAAipB,WAAAA,GACAf,EAAAloB,MAAAkoB,QAAAA,GACAG,EAAAroB,MAAAioB,UAAAA,EAAAC,EAAApmB,EAEA,IAAAumB,KAAA,EAEA,MAAA/gB,KAGA,IAAAgnB,GAAAhnB,IASA,OAPAA,MAAA7G,UAAAgtB,KAAA,SAAA1sB,EAAAF,GAEA,GAAA4jB,GAAA6J,EAAAtD,kBAAA3C,EAAAH,EAAArnB,EACAE,GAAAmpB,SAAAzF,GACA1jB,EAAAuqB,sBAAArC,EAAAxE,EAAA2G,KAGA9jB,KAAA8T,OAMAA,IAAA,WAIA,MAFA9T,MAAA7G,UAAAoqB,WAEAvjB,OCxKAtH,MAAA4iB,OAAA,SAAAA,GAEA,MAAAA,aAAA5iB,OAAAmvB,OAEAvM,EAEA5iB,MAAA2C,SAAAigB,IAAAA,IAAA5iB,OAAA4iB,OAEA5iB,MAAA4iB,OAAAA,IAGA,GAMA5iB,MAAAmvB,OAAA,aAKAnvB,MAAAmvB,OAAA5rB,WAYA6M,MAAA,WAEA,KAAA,gCAkBA2Y,MAAA,SAAAd,EAAAmH,EAAAC,EAAA7G,EAAAC,GAKA,IAAA,GAHAtoB,GAAAH,MAAAG,QAAA8nB,EAAA9nB,SACAskB,EAAA+D,EAAA/e,OAEA5I,EAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAiL,GAAA2Y,EAAA5jB,GACAyZ,EAAAxO,EAAAyO,SAEAzO,GAAAqY,cAAA7c,OAKAwE,EAAA3K,OAAAsnB,EAAA6G,YAAAhV,EAAAxO,EAAA3K,QACA2K,EAAAvK,OAAAknB,EAAA8G,YAAAjV,EAAAxO,EAAAvK,QACAuK,EAAAzK,MAAAonB,EAAA+G,WAAAlV,EAAAxO,EAAAzK,OACAyK,EAAAxK,MAAAmnB,EAAAgH,WAAAnV,EAAAxO,EAAAxK,OACAwK,EAAA5K,SAAAunB,EAAAiH,cAAApV,EAAAxO,EAAA5K,UACA4K,EAAAtK,MAAAinB,EAAAkH,WAAArV,EAAAxO,EAAAtK,OACAsK,EAAA2Z,UAAAgD,EAAAmH,eAAAtV,EAAAxO,EAAA2Z,UAAAtlB,OAYAH,MAAA0oB,aAAA,SAAArY,EAAAgf,EAAAD,GAEA9nB,KAAA+I,MAAAA,EACA/I,KAAA+nB,WAAAA,MACA/nB,KAAA8nB,WAAAA,MAEA9nB,KAAAuoB,iBAAA,WACAvoB,KAAAuoB,iBAAA,WACAvoB,KAAAuoB,iBAAA,UACAvoB,KAAAuoB,iBAAA,UACAvoB,KAAAuoB,iBAAA,aACAvoB,KAAAuoB,iBAAA,UACAvoB,KAAAuoB,iBAAA,eAGA7vB,MAAA0oB,aAAAnlB,WAQAssB,iBAAA,SAAAC,GAEA9vB,MAAA6C,SAAAyE,KAAA+I,MAAAyf,MAEAxoB,KAAA+I,MAAAyf,QAWAC,YAAA,SAAAzV,GAEA,MAAAhT,MAAA0oB,WAAA1V,EAAA,SAAA,YAQA2V,YAAA,SAAA3V,GAEA,MAAAhT,MAAA4oB,YAAA5V,EAAAta,MAAAuB,OAAAvB,MAAAuB,OAAA,SAAA,YAAA,cAAA,YAQA4uB,WAAA,SAAA7V,GAEA,MAAAhT,MAAA4oB,YAAA5V,EAAAta,MAAAqB,MAAArB,MAAAyE,KAAA,QAAA,WAAA,aAAA,WAQA2rB,WAAA,SAAA9V,GAEA,MAAAhT,MAAA4oB,YAAA5V,EAAAta,MAAAsB,MAAAtB,MAAAyE,KAAA,QAAA,WAAA,aAAA,WAQA4rB,cAAA,SAAA/V,GAEA,MAAAhT,MAAA4oB,YAAA5V,EAAAta,MAAAkB,SAAAlB,MAAAyE,KAAA,WAAA,cAAA,gBAAA,cAQA6rB,WAAA,SAAAhW,GAEA,MAAAhT,MAAA4oB,YAAA5V,EAAAta,MAAAwB,MAAAxB,MAAA0G,OAAA,QAAA,WAAA,aAAA,WAQA6pB,eAAA,SAAAjW,GAEA,MAAAhT,MAAA0oB,WAAA1V,EAAA,YAAA,eAUA0V,WAAA,SAAA1V,EAAAkW,EAAAV,GAEA,MAAA9vB,OAAAoE,SAAAkD,KAAA+I,MAAAyf,GAAAxV,GAAAhT,KAAA+nB,WAAAmB,KAWAC,WAAA,SAAAnW,EAAA0F,EAAA4C,EAAA8C,GAEA,GAAAxkB,GAAAoG,KAAA+oB,cAAA/V,GACAnZ,EAAAmG,KAAAyoB,YAAAzV,GACAjZ,EAAAiG,KAAA6oB,WAAA7V,GACAhZ,EAAAgG,KAAA8oB,WAAA9V,GACA/Y,EAAA+F,KAAA2oB,YAAA3V,GACA9Y,EAAA8F,KAAAgpB,WAAAhW,GACAmL,EAAAne,KAAAipB,eAAAjW,GACA9R,EAAA,GAAAxI,OAAAwlB,MAAAlL,EAAA0F,EAAA9e,EAAAC,EAAAE,EAAAC,EAAAC,EAAAC,EAAAikB,EAAAC,EAAA9C,EAEA,OAAApa,IAcA0nB,YAAA,SAAA5V,EAAA/J,EAAAmgB,EAAAF,EAAAG,EAAAC,EAAAd,GAEA,GAAAe,GAAA7wB,MAAAoE,SAAAkD,KAAA+I,MAAAyf,GAAAxV,GAAAhT,KAAA+nB,WAAAmB,IACAM,EAAAvgB,EAAAsgB,GACAzV,EAAAsV,EAAAppB,KAAA+nB,WAAAsB,GAAA,GACAnvB,EAAAxB,MAAAoE,SAAAkD,KAAA+nB,WAAAuB,GAAA,EAEA,OAAA,KAAAxV,GAAA,IAAA5Z,EAAAqvB,GAAAC,EAAA1V,GAAA5Z,GAWA8tB,YAAA,SAAAhV,EAAAF,GAEA,MAAA9S,MAAAypB,WAAAzW,EAAAF,EAAApa,MAAAmB,OAAA,SAAA,YASAouB,YAAA,SAAAjV,EAAAF,GAEA,MAAA9S,MAAA0pB,YAAA1W,EAAAF,EAAApa,MAAAuB,OAAA,SAAA,YAAA,cAAA,YASAiuB,WAAA,SAAAlV,EAAAF,GAEA,MAAA9S,MAAA0pB,YAAA1W,EAAAF,EAAApa,MAAAyE,KAAA,QAAA,WAAA,aAAA,WASAgrB,WAAA,SAAAnV,EAAAF,GAEA,MAAA9S,MAAA0pB,YAAA1W,EAAAF,EAAApa,MAAAyE,KAAA,QAAA,WAAA,aAAA,WASAirB,cAAA,SAAApV,EAAAF,GAEA,MAAA9S,MAAA0pB,YAAA1W,EAAAF,EAAApa,MAAAyE,KAAA,WAAA,cAAA,gBAAA,cASAkrB,WAAA,SAAArV,EAAAF,GAEA,MAAA9S,MAAA0pB,YAAA1W,EAAAF,EAAApa,MAAA0G,OAAA,QAAA,WAAA,aAAA,WAUAkpB,eAAA,SAAAtV,EAAAF,EAAAja,GAEA,GAAA+a,GAAA/a,EAAAoa,UAAAD,GAAAI,WACAnK,EAAA,SAAA5J,EAAAyW,GACA,MAAAlC,GAAA9K,MAAAzJ,EAAAyW,GAGA,OAAA9V,MAAAypB,WAAAzW,EAAAF,EAAA7J,EAAA,YAAA,eAYAwgB,WAAA,SAAAzW,EAAAF,EAAAsW,EAAAF,EAAAV,GAEA,MAAAY,GAAA1wB,MAAAoE,SAAAkD,KAAA+I,MAAAyf,GAAAxV,GAAAhT,KAAA8nB,WAAAoB,GAAAlpB,KAAA+nB,WAAAmB,IAAApW,IAcA4W,YAAA,SAAA1W,EAAAF,EAAAsW,EAAAF,EAAAG,EAAAC,EAAAd,GAEA,GAAAe,GAAA7wB,MAAAoE,SAAAkD,KAAA+I,MAAAyf,GAAAxV,GAAAhT,KAAA8nB,WAAAoB,GAAAlpB,KAAA+nB,WAAAmB,IACAM,EAAAJ,EAAAG,EAAAzW,GACAgB,EAAAsV,EAAA1wB,MAAAoE,SAAAkD,KAAA8nB,WAAAuB,GAAArpB,KAAA+nB,WAAAsB,IAAA,GACAnvB,EAAAxB,MAAAoE,SAAAkD,KAAA8nB,WAAAwB,GAAAtpB,KAAA+nB,WAAAuB,GAAA,EAEA,QAAAE,EAAA1V,GAAA5Z,IC9WAxB,MAAAixB,aAAA,aAMAjxB,MAAAmE,SAAAnE,MAAAixB,aAAA1tB,UAAA,GAAAvD,OAAAmvB,QAYA/e,MAAA,SAAA6X,EAAAC,EAAAM,EAAAC,GAMA,GAAAtoB,GAAAH,MAAAG,QAAA8nB,EAAA9nB,SACA4hB,EAAAkG,EAAAlG,OACAtY,EAAAwe,EAAAxe,MAEA,KAAAzJ,MAAAoC,UAAA2f,GACA,CACA,GAAAmP,GAAA,CAEA,KAAA,GAAA5W,KAAA7Q,GAEAynB,GAGAnP,KAEA,KAAA,GAAAlhB,GAAA,EAAAqwB,EAAArwB,EAAAA,IAEAkhB,EAAAlhB,GAAAA,GAAAqwB,EAAA,GAGA,GAAAlxB,MAAAY,QAAAmhB,GACA,CACA,GAAAoP,KAEA,KAAA,GAAA7W,KAAA7Q,GAEA0nB,EAAA7W,GAAAyH,CAGAA,GAAAoP,EAGA,IAAA,GAAA7W,KAAA7Q,GACA,CAIA,IAAA,GAHA9C,GAAA8C,EAAA6Q,GACAC,EAAApa,EAAAoa,UAAAD,GAEA5R,EAAA,EAAAA,EAAA/B,EAAA7F,OAAA4H,IAEA/B,EAAA+B,GAAA6R,EAAAnK,MAAAzJ,EAAA+B,GAGA,IAAAsX,GAAA,GAAAhgB,OAAA8hB,UAAAxH,EAAAC,EAAAG,WAAAjR,EAAA6Q,GAAAyH,EAAAzH,IACA9R,EAAAigB,EAAAgI,WAAAnW,EAAA0F,EAAA1Y,MAAA,EAEAkhB,GAAAhf,IAAA8Q,EAAA9R,OASAxI,MAAA4iB,OAAA,OAAA,GAAA5iB,OAAAixB,aC9EAjxB,MAAAoxB,YAAA,aAMApxB,MAAAmE,SAAAnE,MAAAoxB,YAAA7tB,UAAA,GAAAvD,OAAAmvB,QAYA/e,MAAA,SAAA6X,EAAAC,EAAAM,EAAAC,GAIA,GAAAtoB,GAAAH,MAAAG,QAAA8nB,EAAA9nB,SACAsJ,EAAAwe,EAAAA,QAEA,KAAA,GAAA3N,KAAA7Q,GACA,CACA,GAAA8Q,GAAApa,EAAAoa,UAAAD,GACA3T,EAAA4T,EAAAnK,MAAA3G,EAAA6Q,IACAjZ,EAAArB,MAAAqB,MAAAonB,EAAA0H,WAAA7V,IACApZ,EAAAlB,MAAAkB,SAAAunB,EAAA4H,cAAA/V,IACA9Y,EAAAinB,EAAA6H,WAAAhW,GACAmL,EAAAgD,EAAA8H,eAAAjW,GACA0F,EAAA,GAAAhgB,OAAA0iB,UAAApI,EAAAC,EAAAG,WAAA/T,GACA6B,EAAA,GAAAxI,OAAAwlB,MAAAlL,EAAA0F,EAAA,EAAAhgB,MAAAmB,OAAAnB,WAAAqB,EAAAH,EAAA,EAAA,EAAAM,EAAAikB,GAAA,EAAAne,KAEAkhB,GAAAhf,IAAA8Q,EAAA9R,KAmBAugB,MAAA,SAAAd,EAAAmH,EAAAC,EAAA7G,EAAAC,GAKA,IAAA,GAHAtoB,GAAAH,MAAAG,QAAA8nB,EAAA9nB,SACAskB,EAAA+D,EAAA/e,OAEA5I,EAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAiL,GAAA2Y,EAAA5jB,GACAyZ,EAAAxO,EAAAyO,SAEAzO,GAAAqY,cAAA7c,OAKAwE,EAAAzK,MAAAonB,EAAA+G,WAAAlV,EAAAxO,EAAAzK,OAAAonB,EAAAiH,cAAApV,EAAAxO,EAAA5K,UACA4K,EAAAtK,MAAAinB,EAAAkH,WAAArV,EAAAxO,EAAAtK,OACAsK,EAAA2Z,UAAAgD,EAAAmH,eAAAtV,EAAAxO,EAAA2Z,UAAAtlB,QASAH,MAAA4iB,OAAA,SAAA,GAAA5iB,OAAAoxB,YCjFApxB,MAAAqxB,cAAA,aAMArxB,MAAAmE,SAAAnE,MAAAqxB,cAAA9tB,UAAA,GAAAvD,OAAAmvB,QAYA/e,MAAA,SAAA6X,EAAAC,EAAAM,EAAAC,GAIA,GAAAtoB,GAAAH,MAAAG,QAAA8nB,EAAA9nB,SACAsJ,EAAAwe,EAAAqJ,OAEA,KAAA,GAAAhX,KAAA7Q,GACA,CACA,GAAA8Q,GAAApa,EAAAoa,UAAAD,GACA3T,EAAA4T,EAAAnK,MAAA3G,EAAA6Q,IACAjZ,EAAAonB,EAAA0H,WAAA7V,GACA9Y,EAAAinB,EAAA6H,WAAAhW,GACAmL,EAAAgD,EAAA8H,eAAAjW,GACA0F,EAAA,GAAAhgB,OAAA0iB,UAAApI,EAAAC,EAAAG,WAAA/T,GACA6B,EAAA,GAAAxI,OAAAwlB,MAAAlL,EAAA0F,EAAA,EAAAhgB,MAAAmB,OAAAnB,WAAAqB,EAAA,EAAA,EAAAG,EAAAikB,GAAA,EAAAne,KAEAkhB,GAAAhf,IAAA8Q,EAAA9R,KAmBAugB,MAAA,SAAAd,EAAAmH,EAAAC,EAAA7G,EAAAC,GAKA,IAAA,GAHAtoB,GAAAH,MAAAG,QAAA8nB,EAAA9nB,SACAskB,EAAA+D,EAAA/e,OAEA5I,EAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAiL,GAAA2Y,EAAA5jB,GACAyZ,EAAAxO,EAAAyO,SAEAzO,GAAAqY,cAAA7c,OAKAwE,EAAAzK,MAAAonB,EAAA+G,WAAAlV,EAAAxO,EAAAzK,OACAyK,EAAAtK,MAAAinB,EAAAkH,WAAArV,EAAAxO,EAAAtK,OACAsK,EAAA2Z,UAAAgD,EAAAmH,eAAAtV,EAAAxO,EAAA2Z,UAAAtlB,QASAH,MAAA4iB,OAAA,QAAA,GAAA5iB,OAAAqxB,cChFArxB,MAAAuxB,eAAA,aAMAvxB,MAAAmE,SAAAnE,MAAAuxB,eAAAhuB,UAAA,GAAAvD,OAAAmvB,QAYA/e,MAAA,SAAA6X,EAAAC,EAAAM,EAAAC,GASA,GAAAtoB,GAAAH,MAAAG,QAAA8nB,EAAA9nB,SACAqxB,EAAAvJ,EAAAwJ,SACAlP,EAAA0F,EAAA1F,YACAnhB,EAAApB,MAAAmB,OAAAnB,MAAAoE,SAAA8jB,EAAA9mB,QAAApB,MAAAiB,SAAAG,UAEAswB,GAAA,EAEA1T,GACA2T,KAAA,IACArV,MAAA,IACAgV,QAAA,IACA5Q,MAAA,IACAkR,KAAA,KACAzT,OAAA,KACA0T,GAAA,MACAtV,IAAA,MACAkE,KAAA,MAIA,KAAA,GAAAhc,KAAA+sB,GAEA,GAAA/sB,IAAAuZ,GAEAwT,EAAAxT,EAAAvZ,IAAA+sB,EAAA/sB,SAEA+sB,GAAA/sB,OAEA,IAAA,KAAAA,EAAA2F,QAAA,KACA,CAGA,IAAA,GAFA0nB,GAAArtB,EAAA2D,MAAA,KAEAvH,EAAA,EAAAA,EAAAixB,EAAAhxB,OAAAD,IAEA2wB,EAAAM,EAAAjxB,IAAA2wB,EAAA/sB,SAGA+sB,GAAA/sB,GAEAitB,GAAA,EAIA,GAAAI,MAGAlD,EAAA,EACAmD,EAAA,CAEA,KAAA,GAAAttB,KAAA+sB,GACA,CACA,GAAAzlB,GAAApG,WAAAlB,EAEAgC,OAAAsF,SAEAylB,GAAA/sB,IAIAmqB,EAAA7iB,IAEA2lB,GAAA,GAGAI,EAAA9wB,MACAgxB,MAAAjmB,EACAnC,IAAAnF,EACAkC,MAAA6qB,EAAA/sB,KAGAmqB,EAAA7iB,EAEAgmB,EAAAxsB,KAAA0B,IAAA8qB,EAAAhmB,IAKA,GAAA2lB,EACA,CACAI,EAAAJ,KAAA,SAAArtB,EAAAC,GAEA,MAAAD,GAAA2tB,MAAA1tB,EAAA0tB,QAGAR,IAEA,KAAA,GAAA3wB,GAAA,EAAAA,EAAAixB,EAAAhxB,OAAAD,IAEA2wB,EAAAM,EAAAjxB,GAAA+I,KAAAkoB,EAAAjxB,GAAA8F,MAUA,IAAA,GALAob,MACAtY,KACAwoB,KACAtF,KAEA9rB,EAAA,EAAAA,EAAAixB,EAAAhxB,OAAAD,IACA,CACA,GAAA4Z,GAAAqX,EAAAjxB,GACAM,EAAAnB,MAAAoE,SAAAqW,EAAA9T,MAAAxF,OAAA+mB,EAAA/mB,cAEAsZ,GAAA9T,MAAAxF,MAEA,KAAA,GAAAmZ,KAAAG,GAAA9T,MAEA2T,IAAAyH,KAEAA,EAAAzH,MACA7Q,EAAA6Q,MACA2X,EAAA3X,MACAqS,EAAArS,GAAAna,EAAAoa,UAAAD,IAGAyH,EAAAzH,GAAAtZ,KAAAyZ,EAAAuX,MAAAD,GACAtoB,EAAA6Q,GAAAtZ,KAAA2rB,EAAArS,GAAAlK,MAAAqK,EAAA9T,MAAA2T,KACA2X,EAAA3X,GAAAtZ,KAAAhB,MAAAmB,OAAAnB,MAAAoE,SAAAme,EAAAjI,GAAAnZ,KAKA,IAAA,GAAAmZ,KAAAyH,GACA,CACA,GAAA7gB,GAAAunB,EAAA4H,cAAA/V,GACAjZ,EAAAonB,EAAA0H,WAAA7V,GACAhZ,EAAAmnB,EAAA2H,WAAA9V,GACA/Y,EAAAknB,EAAAwH,YAAA3V,GACA9Y,EAAAinB,EAAA6H,WAAAhW,GACAmL,EAAAgD,EAAA8H,eAAAjW,GACA0F,EAAA,GAAAhgB,OAAAsiB,aAAAhI,EAAAqS,EAAArS,GAAAI,WAAAjR,EAAA6Q,GAAAyH,EAAAzH,GAAA2X,EAAA3X,IACA9R,EAAA,GAAAxI,OAAAwlB,MAAAlL,EAAA0F,EAAA9e,EAAAE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAikB,GAAA,EAAAne,KAEAkhB,GAAAhf,IAAA8Q,EAAA9R,OAQAxI,MAAA4iB,OAAA,SAAA,GAAA5iB,OAAAuxB,eCxKAvxB,MAAAkyB,cAAA,aAMAlyB,MAAAmE,SAAAnE,MAAAkyB,cAAA3uB,UAAA,GAAAvD,OAAAmvB,QAYA/e,MAAA,SAAA6X,EAAAC,EAAAM,EAAAC,GAIA,GAAAtoB,GAAAH,MAAAG,QAAA8nB,EAAA9nB,SACA4rB,EAAA9D,EAAA8D,OAEA,KAAA,GAAAzR,KAAAyR,GACA,CACA,GAAAxR,GAAApa,EAAAoa,UAAAD,GACA3T,EAAA4T,EAAAnK,MAAA2b,EAAAzR,IACA0F,EAAA,GAAAhgB,OAAAkhB,MAAA5G,EAAAC,EAAAG,WAAA1a,MAAAma,SAAAC,QAAAzT,GACA6B,EAAAigB,EAAAgI,WAAAnW,EAAA0F,EAAA1Y,MAAA,EAEAkhB,GAAAhf,IAAA8Q,EAAA9R,OAQAxI,MAAA4iB,OAAA,QAAA,GAAA5iB,OAAAkyB,cCxCAlyB,MAAAmyB,gBAAA,aAMAnyB,MAAAmE,SAAAnE,MAAAmyB,gBAAA5uB,UAAA,GAAAvD,OAAAmvB,QAYA/e,MAAA,SAAA6X,EAAAC,EAAAM,EAAAC,GAIA,GAAAtoB,GAAAH,MAAAG,QAAA8nB,EAAA9nB,SACAiyB,EAAAnK,EAAAmK,SAEA,KAAA,GAAA9X,KAAA8X,GACA,CACA,GAAA7X,GAAApa,EAAAoa,UAAAD,GACA3T,EAAA4T,EAAAnK,MAAAgiB,EAAA9X,IACA0F,EAAA,GAAAhgB,OAAAkhB,MAAA5G,EAAAC,EAAAG,WAAA/T,EAAA3G,MAAAma,SAAAC,SACA5R,EAAAigB,EAAAgI,WAAAnW,EAAA0F,EAAA1Y,MAAA,EAEAkhB,GAAAhf,IAAA8Q,EAAA9R,OAQAxI,MAAA4iB,OAAA,UAAA,GAAA5iB,OAAAmyB,gBCxCAnyB,MAAAqyB,WAAA,aAMAryB,MAAAmE,SAAAnE,MAAAqyB,WAAA9uB,UAAA,GAAAvD,OAAAmvB,QAYA/e,MAAA,SAAA6X,EAAAC,EAAAM,EAAAC,GAIA,GAAAtoB,GAAAH,MAAAG,QAAA8nB,EAAA9nB,SACAmyB,EAAArK,EAAAqK,IAEA,KAAA,GAAAhY,KAAAgY,GACA,CACA,GAAA/X,GAAApa,EAAAoa,UAAAD,GACA3T,EAAA4T,EAAAnK,MAAAkiB,EAAAhY,IACA0F,EAAA,GAAAhgB,OAAAkhB,MAAA5G,EAAAC,EAAAG,WAAA1a,MAAAma,SAAAC,QAAApa,MAAAma,SAAAU,SAAAlU,IACA6B,EAAAigB,EAAAgI,WAAAnW,EAAA0F,EAAA1Y,MAAA,EAEAkhB,GAAAhf,IAAA8Q,EAAA9R,OAQAxI,MAAA4iB,OAAA,KAAA,GAAA5iB,OAAAqyB,WCxCAryB,MAAAuyB,YAAA,aAMAvyB,MAAAmE,SAAAnE,MAAAuyB,YAAAhvB,UAAA,GAAAvD,OAAAmvB,QAYA/e,MAAA,SAAA6X,EAAAC,EAAAM,GAEA,GACAgK,IADAxyB,MAAAG,QAAA8nB,EAAA9nB,SACA8nB,EAAAuK,QAEA,KAAA,GAAAlY,KAAAkY,GACA,CACA,GAAAvS,GAAAuS,EAAAlY,EAEAta,OAAAoC,UAAA6d,EAAA1F,aAEA0F,EAAA1F,UAAAD,EAGA,IAAA7U,GAAAzF,MAAAigB,OAAAA,EAEAxa,MAAA,IAEAA,EAAAmd,OAAAtb,KAEAkhB,EAAAhf,IAAA8Q,EAAA7U,QASAzF,MAAA4iB,OAAA,QAAA,GAAA5iB,OAAAuyB,YC/CAvyB,MAAAyyB,aAAA,aAMAzyB,MAAAmE,SAAAnE,MAAAyyB,aAAAlvB,UAAA,GAAAvD,OAAAmvB,QAYA/e,MAAA,SAAA6X,EAAAC,EAAAM,GAEA,GACAkK,IADA1yB,MAAAG,QAAA8nB,EAAA9nB,SACA8nB,EAAAyK,QAEA,KAAA,GAAApY,KAAAoY,GACA,CACA,GAAAC,GAAAD,EAAApY,GAEAD,EAAA,GAAAra,OAAAunB,QACAjN,EACAhT,KACAqrB,EAAAjY,WACA1a,MAAAoE,SAAAuuB,EAAAtM,UAAA,GACAsM,EAAArM,SACAqM,EAAAnL,aACAmL,EAAAlL,SACAkL,EAAAC,OAGApK,GAAAhf,IAAA8Q,EAAAD,OAQAra,MAAA4iB,OAAA,QAAA,GAAA5iB,OAAAyyB,aC9CAzyB,MAAA6yB,aAAA,aAMA7yB,MAAAmE,SAAAnE,MAAA6yB,aAAAtvB,UAAA,GAAAvD,OAAAmvB,QAYA/e,MAAA,SAAA6X,EAAAC,EAAAM,GAIA,GAAAroB,GAAAH,MAAAG,QAAA8nB,EAAA9nB,SACA2yB,EAAA7K,EAAA6K,OAWAC,EAAA,SAAA5W,EAAA6P,EAAAzO,EAAAyV,GAEA,GAAAC,GAAA,SAAA5Y,EAAAtZ,GAEA,GAAAwZ,GAAAxZ,EAAAyZ,aAAAH,EAAAE,WACAW,EAAAX,EAAAG,WACAwY,EAAAlzB,MAAAgb,WAAAgR,GAAAA,EAAA3R,EAAAtZ,GAAAirB,EACA/K,EAAA/F,EAAAS,QAEA,OAAA,YAEA,GAAA0K,GAAAhM,EAAAgM,SACAjM,EAAAc,EAAArX,KAAAod,EAAAjhB,MAAA8G,QAAAosB,IACAC,EAAAjY,EAAAkB,IAAAhC,EAAAiM,GACA3J,EAAAxB,EAAAwB,SAAAyW,EAAAjY,EAAAM,KAgBA,OAdA+B,GAAAb,EAEArC,EAAAoJ,OAAA,GAIA0P,EAAAjY,EAAA1Z,MAAA2xB,EAAAhX,EAAAO,GAGAsW,IAEAG,EAAAjY,EAAAkB,IAAA+W,EAAA9Y,EAAAuN,oBAGAuL,GAMA,OAFAF,GAAA9Y,UAAA,EAEA8Y,EAGA,KAAA,GAAA3Y,KAAAwY,GACA,CACA,GAAAM,GAAAN,EAAAxY,GACAC,EAAApa,EAAAoa,UAAAD,GACAqX,EAAApX,EAAAnK,MAAApQ,MAAAoE,SAAAgvB,EAAAzB,MAAA,IACAE,EAAAtX,EAAAnK,MAAApQ,MAAAoE,SAAAgvB,EAAAvB,IAAA,IACAvL,EAAAtmB,MAAA0G,OAAA0sB,EAAA9M,SAAA,GACAkB,EAAAxnB,MAAA0G,OAAA0sB,EAAA5L,aAAA,GACAC,EAAAznB,MAAA0G,OAAA1G,MAAAoE,SAAAgvB,EAAA3L,SAAA2L,EAAA9M,UAAAxgB,OAAAC,mBACAwX,EAAAvd,MAAA0G,OAAA0sB,EAAA7V,QAAA,KAEA,KAAAiK,IAEAA,EAAAuL,EAAAvL,EAAAqK,EAAAtU,GAAA,IAGA,IAAA+I,IAEAA,EAAAyM,EAAAzM,EAAAuL,EAAAtU,GAAA,GAGA,IAAA8V,GAAA,GAAArzB,OAAAunB,QACAjN,EACAhT,KACAiT,EAAAG,WACAiX,EACArL,EACAkB,EACAC,EAGAe,GAAAhf,IAAA8Q,EAAA+Y,OAQArzB,MAAA4iB,OAAA,OAAA,GAAA5iB,OAAA6yB,aC7GA7yB,MAAAI,WAAA,SAAAH,EAAAoP,GAEA,GAAAikB,IAAA,CAEA,KAAA,GAAAC,KAAAvzB,OAAAG,QACA,CACA,GAAAA,GAAAH,MAAAG,QAAAozB,EAEApzB,GAAAqzB,GAAAvzB,KAAAqzB,KAAA,GAAAA,EAAAG,SAAAtzB,EAAAszB,YAEAH,EAAAnzB,GAIA,GAAAmzB,EAEA,MAAAA,EAGA,IAAAjkB,EAEA,OAAA,CAGA,MAAA,iCAAApP,GASAD,MAAAG,QAAA,SAAAA,GAEA,MAAAA,aAAAH,OAAA0zB,QAEAvzB,EAEAH,MAAA2C,SAAAxC,IAAAA,IAAAH,OAAAG,QAEAH,MAAAG,QAAAA,GAGAH,MAAAG,QAAAH,YAMAA,MAAA0zB,QAAA,WAEApsB,KAAAmsB,SAAA,GAGAzzB,MAAA0zB,QAAAnwB,WASAiwB,GAAA,WAEA,KAAA,8BASAnzB,YAAA,WAEA,KAAA,uCAUAK,aAAA,SAAAT,EAAAQ,GAEAA,EAAAO,KAAAsG,KAAAjH,YAAAJ,KASA8qB,QAAA,aAWAxQ,UAAA,WAEA,KAAA,sCClHAva,MAAA2zB,cAAA,WAEArsB,KAAAmsB,SAAA,EACAnsB,KAAAqlB,eAGA3sB,MAAAmE,SAAAnE,MAAA2zB,cAAApwB,UAAA,GAAAvD,OAAA0zB,SAQAF,GAAA,SAAAvzB,GAEA,MAAAD,OAAA6C,SAAA5C,KAAAD,MAAA8C,UAAA7C,KAAAD,MAAAY,QAAAX,IASAI,YAAA,SAAAJ,GAEA,GAAAc,GAAAd,EAAA2zB,SAUA,OARA7yB,KAEAA,EAAA,GAAAf,OAAAE,SAAAD,GACAc,EAAAZ,QAAAmH,KAEArH,EAAA2zB,UAAA7yB,GAGAA,GASAgqB,QAAA,SAAAhqB,SAEAA,GAAAd,QAAA2zB,WASArZ,UAAA,SAAAD,GAEA,GAAAC,GAAAjT,KAAAqlB,WAAArS,EAEA,KAAAC,EACA,CACAA,EAAAjT,KAAAqlB,WAAArS,GAAAta,MAAA6H,OAAA0S,UAAAD,EAEA,IAAAuZ,GAAAtZ,EAAAG,WACAA,EAAA1a,MAAA0a,WAAAmZ,GACAzW,EAAA1C,EAAAtK,MAAAmK,EAAA6C,aAAA1C,EAAAc,KAEAjB,GAAAsZ,eAAAA,EACAtZ,EAAAG,WAAAA,EACAH,EAAA6C,aAAAA,EACA7C,EAAA4F,KAAA7F,EACAC,EAAAnK,MAAA,SAAAzJ,GACA,MAAAW,MAAAoT,WAAAtK,MAAAzJ,EAAAW,KAAA8V,eAEA7C,EAAAK,aAAA,WACA,MAAAtT,MAAAoT,WAAAC,MAAArT,KAAA8V,eAIA,MAAA7C,MAQAva,MAAAG,QAAA,WAAAH,MAAAG,QAAA,OAAA,GAAAH,OAAA2zB,cAOA3zB,MAAA6H,UASA7H,MAAA6H,OAAA0S,UAAA,SAAAD,GAEA,MAAAta,OAAA6C,SAAAyX,IAAAta,MAAAoC,UAAAkY,EAAA8C,cAEA9C,EAEAta,MAAA2C,SAAA2X,IAAAA,IAAAta,OAAA8zB,IAAAvZ,UAEAva,MAAA6H,OAAA0S,UAAAD,GAGAta,MAAA6H,OAAA0S,UAAAva,YAMAA,MAAA6H,OAAA0S,UAAA,YAAA6C,aAAA,GC1HApd,MAAA+zB,WAAA,WAEAzsB,KAAA0sB,UACA1sB,KAAA2sB,IAAA,EACA3sB,KAAA4sB,iBAAA,QACA5sB,KAAAmsB,SAAA,EACAnsB,KAAAqlB,eAGA3sB,MAAAmE,SAAAnE,MAAA+zB,WAAAxwB,UAAA,GAAAvD,OAAA0zB,SASAF,GAAA,SAAAvzB,GAEA,MAAAD,OAAA8C,UAAA7C,IASAI,YAAA,SAAAJ,GAEA,GAAAk0B,GAAAl0B,EAAAua,aAAAlT,KAAA4sB,iBAEA,MAAAC,IAAA7sB,MAAA0sB,QACA,CACA,GAAAjzB,GAAA,GAAAf,OAAAo0B,YAAAn0B,EAEAA,GAAAo0B,aAAA/sB,KAAA4sB,iBAAAC,EAAApzB,EAAAguB,KAAAznB,KAAA2sB,KAEAlzB,EAAAZ,QAAAmH,KAEAA,KAAA0sB,OAAAG,GAAApzB,EAGA,MAAAuG,MAAA0sB,OAAAG,IASApJ,QAAA,SAAAhqB,SAEAuG,MAAA0sB,OAAAjzB,EAAAguB,KASAxU,UAAA,SAAAD,GAEA,GAAAC,GAAAjT,KAAAqlB,WAAArS,EAEA,KAAAC,EACA,CACAA,EAAAjT,KAAAqlB,WAAArS,GAAAta,MAAA8zB,IAAAvZ,UAAAD,EAEA,IAAAuZ,GAAAtZ,EAAAG,WACAA,EAAA1a,MAAA0a,WAAAmZ,GACAzW,EAAA1C,EAAAtK,MAAAmK,EAAA6C,aAAA1C,EAAAc,MACA8Y,EAAAt0B,MAAAoE,SAAAmW,EAAAvS,SAAAsS,GACAtS,EAAAhI,MAAA8zB,IAAA9rB,SAAAssB,GACAC,EAAAha,EAAAga,aAAA,EAEAha,GAAAsZ,eAAAA,EACAtZ,EAAAG,WAAAA,EACAH,EAAA6C,aAAAA,EACA7C,EAAA4F,KAAA7F,EACAC,EAAA+Z,aAAAA,EACA/Z,EAAAvS,SAAAA,EACAuS,EAAAga,YAAAA,EACAha,EAAAnK,MAAA,SAAAzJ,GACA,MAAAW,MAAAoT,WAAAtK,MAAAzJ,EAAAW,KAAA8V,eAEA7C,EAAAK,aAAA,WACA,MAAAtT,MAAAoT,WAAAC,MAAArT,KAAA8V,eAIA,MAAA7C,MAQAva,MAAAG,QAAA,WAAAH,MAAAG,QAAA,IAAA,GAAAH,OAAA+zB,WAOA/zB,MAAA8zB,OAcA9zB,MAAA8zB,IAAA9rB,SAAA,SAAArE,GAEA,GAAA3D,MAAA6C,SAAAc,IAAA3D,MAAAsC,WAAAqB,EAAAkG,MAAA7J,MAAAsC,WAAAqB,EAAAwiB,KAEA,MAAAxiB,EAEA,IAAA3D,MAAA2C,SAAAgB,IAAAA,IAAA3D,OAAA8zB,IAAA9rB,SAEA,MAAAhI,OAAA8zB,IAAA9rB,SAAArE,EAGA,MAAAA,GAAA,4BAOA3D,MAAA8zB,IAAAU,MAAA,WAEA,GAAAC,MAEAC,EAAA,SAAAC,GAEA,GAAAA,IAAAF,GAEA,MAAAA,GAAAE,EAGA,IAAA/qB,GAAA+qB,CAaA,OAXAA,GAAAA,EAAAnxB,QAAA,cAAA,SAAAmxB,GAEA,MAAAA,GAAA,GAAA,IAAAA,EAAA,GAAApuB,gBAGAouB,EAAAA,EAAAnxB,QAAA,UAAA,WACAmxB,EAAAA,EAAAnxB,QAAA,OAAA,QACAmxB,EAAAA,EAAAnxB,QAAA,MAAA,OACAmxB,EAAAA,EAAAnxB,QAAA,KAAA,MACAmxB,EAAAA,EAAAnxB,QAAA,SAAA,UAEAixB,EAAA7qB,GAAA+qB,EAGA,OAAA,UAAA7oB,EAAA0oB,GAEA,MAAA1oB,GAAA8oB,aAEA9oB,EAAA8oB,aAAAJ,GAEAK,SAAAC,aAAAD,SAAAC,YAAAC,iBAEAF,SAAAC,YAAAC,iBAAAjpB,EAAA,MAAAkpB,iBAAAN,EAAAF,IAIA1oB,EAAA0oB,MAAAA,OASAx0B,MAAA8zB,IAAAmB,OAAA,WAEA,GAAA5wB,GAAAwwB,SAAAK,cAAA,IAEA,OAAA,UAAAC,GAEA,IAAA,GAAAt0B,GAAA,EAAAA,EAAAs0B,EAAAr0B,OAAAD,IAEA,GAAAb,MAAAoC,UAAAiC,EAAAmwB,MAAAW,EAAAt0B,KAEA,MAAAs0B,GAAAt0B,EAGA,QAAA,MAUAb,MAAA8zB,IAAApN,WAAA,WAEA,GAAAhiB,GAAA,6DAEA,OAAA,UAAArC,GAEA,GAAAoD,GAAAf,EAAAgB,KAAArD,EAEA,OAAAoD,IAGAkB,MAAAhB,WAAAF,EAAA,IACAG,KAAAH,EAAA,KAIA,MAgBAzF,MAAA8zB,IAAAsB,QAAA,WAQA,GAAAC,GAAA,SAAApP,EAAAqP,EAAAC,GAEA,GAAAV,SAAAW,KACA,CACA,GAAAC,GAAAZ,SAAAK,cAAA,MACAL,UAAAW,KAAAE,YAAAD,GACAA,EAAAjB,MAAAmB,MAAA1P,EAAAqP,CACA,IAAAM,GAAAH,EAAAI,YAAA5P,CAEA,OADA4O,UAAAW,KAAAM,YAAAL,GACAG,GAAAL,EAGA,MAAAA,IAGAQ,EAAA,SAAAjqB,EAAAkqB,GAEA,GAAAC,GAAAj2B,MAAA8zB,IAAAU,MAAA1oB,EAAA,YACArG,EAAAzF,MAAA8zB,IAAApN,WAAAuP,EAEA,OAAAxwB,IAAAA,EAAAG,OAAAowB,EAKA,OAAAvwB,EAAAG,KAEAH,EAAAkB,MAGAuvB,EAAApqB,EAAAnH,EAAAc,EAAAG,MAAAuwB,GAAAC,YARA,IAWAC,IAEAA,GAAAC,YAAA,SAAAxqB,GAEA,MAAAA,GAAAyqB,WAAAC,aAEAH,EAAAI,aAAA,SAAA3qB,GAEA,MAAAA,GAAAyqB,WAAAG,cAEAL,EAAAV,MAAA,SAAA7pB,GAEA,MAAAA,GAAA+pB,aAEAQ,EAAAM,OAAA,SAAA7qB,GAEA,MAAAA,GAAA8qB,cAEAP,EAAAJ,SAAA,SAAAnqB,GAEA,MAAAiqB,GAAAjqB,EAAA,MAEAuqB,EAAAQ,eAAA,SAAA/qB,GAEA,MAAAiqB,GAAAjqB,EAAAyqB,WAAA,MAEAF,EAAAS,aAAA,WAEA,GAAAC,GAAAlC,SAAAmC,qBAAA,QAAA,EAEA,OAAAjB,GAAAgB,EAAA,KAGA,IAAApyB,KAEAA,GAAAsyB,IAAAd,GAAAd,EAAA,IAAA,OACA1wB,EAAAA,OAAAwxB,GAAAd,EAAA,IAAA,OACA1wB,EAAAuyB,IAAAf,GAAAd,EAAA,IAAA,OACA1wB,EAAAwyB,IAAAhB,GAAAd,EAAA,IAAA,OACA1wB,EAAAyyB,IAAAjB,GAAAd,EAAA,IAAA,OACA1wB,EAAA0yB,KAAAC,IAAA/xB,KAAAgyB,GAAA,KAEA5yB,EAAA6yB,IAEArB,GAAA,SAAArqB,GAEA,MAAAiqB,GAAAjqB,EAAA,QAIAnH,EAAA8yB,KAEAtB,GAAA,WAEA,GAAAY,GAAAlC,SAAAmC,qBAAA,QAAA,EAEA,OAAAjB,GAAAgB,EAAA,SAIApyB,EAAA,MAEAwxB,GAAA,SAAArqB,EAAAsqB,GAEA,MAAAp2B,OAAA0C,SAAA0zB,GAEAA,EAEAA,IAAAC,GAEAA,EAAAD,GAAAtqB,GAAA,IAGA,GAKA,KAAA,GAAAlG,KAAAjB,GAEA,IAAA,GAAAktB,KAAAltB,GAAAiB,GAOA,GALAisB,IAAAltB,KAEAA,EAAAktB,SAGAjsB,IAAAjB,GAAAktB,IACA,CACA,GAAA6F,GAAA/yB,EAAAiB,GAAAisB,EAEA7xB,OAAA0C,SAAAg1B,KAEA/yB,EAAAktB,GAAAjsB,GAAA,EAAA8xB,GAEA13B,MAAAsC,WAAAo1B,KAEA/yB,EAAAktB,GAAAjsB,GAAA,SAAA+xB,GAEA,MAAA,UAAA7rB,EAAAsqB,GAEA,MAAA,GAAAuB,EAAA7rB,EAAAsqB,KAEAsB,IAOA,GAAAxB,GAAA,SAAApqB,EAAA6rB,EAAAvB,GAEA,MAAAp2B,OAAA0C,SAAAi1B,GAEAA,EAEA33B,MAAAsC,WAAAq1B,GAEAA,EAAA7rB,EAAAsqB,GAGA,EAGA,OAAA,UAAAtqB,EAAA6lB,EAAAiG,EAAAxB,GAEA,GAAAp2B,MAAA0C,SAAAivB,GAEA,MAAAA,EAGA,IAAAlsB,GAAAzF,MAAA8zB,IAAApN,WAAAiL,EAEA,KAAAlsB,EAEA,OAAA,CAGA,IAAAkB,GAAAlB,EAAAkB,MACAkxB,EAAApyB,EAAAG,IAEA,KAAAiyB,GAAAA,IAAAD,EAEA,MAAAjxB,EAIA,IAAAkxB,IAAAlzB,IAAAizB,IAAAjzB,GAAAkzB,GACA,CACA,GAAAF,GAAAhzB,EAAAkzB,GAAAD,EAEAjxB,IAAAuvB,EAAApqB,EAAA6rB,EAAAvB,OAGA,IAAAyB,IAAAlzB,IAAAA,EAAAkzB,GAAA1B,IAAAyB,IAAAjzB,GAAAwxB,GACA,CACA,GAAA2B,GAAAnzB,EAAAkzB,GAAA1B,GACA4B,EAAApzB,EAAAwxB,GAAAyB,EAEAjxB,IAAAuvB,EAAApqB,EAAAgsB,EAAA1B,GACAzvB,GAAAuvB,EAAApqB,EAAAisB,EAAA3B,GAGA,MAAAzvB,OCncA3G,MAAA8zB,IAAA9rB,SAAA7H,QAAA,SAAA63B,EAAA5B,GAEA,OAEAvsB,IAAA,SAAAiC,EAAAuc,GAEA,GAAAA,EAAA6F,UAAA8J,MAAA,EACA,CACA,GAAAxD,GAAAx0B,MAAA8zB,IAAAU,MAAA1oB,EAAAksB,GACAC,EAAAj4B,MAAA8zB,IAAAsB,QAAAtpB,EAAA0oB,EAAAnM,EAAA6P,MAAAF,GAAA5B,EAEA6B,MAAA,IAEA5P,EAAA5N,MAAAud,GAAAC,EACA5P,EAAA6F,UAAA8J,IAAA,KAIA7R,IAAA,SAAAra,EAAAuc,GAEAA,EAAA8P,OAAAH,GAAA3P,EAAA1hB,MAAAqxB,IAEAlL,MAAA,SAAAhhB,GAEAA,EAAA0oB,MAAAwD,GAAA,QAKAh4B,MAAA8zB,IAAA9rB,SAAAowB,iBAAA,SAAAJ,EAAA5B,EAAAiC,GAEA,OAEAxuB,IAAA,SAAAiC,EAAAuc,GAEA,GAAAA,EAAA6F,UAAA8J,MAAA,EACA,CACA,GAAAxD,GAAAx0B,MAAA8zB,IAAAU,MAAA1oB,EAAAksB,GACAC,EAAAj4B,MAAA8zB,IAAAsB,QAAAtpB,EAAA0oB,EAAAnM,EAAA6P,MAAAF,GAAA5B,EAEA6B,MAAA,GAEA5P,EAAA5N,MAAAud,GAAAC,EACA5P,EAAA6F,UAAA8J,IAAA,GAEAh4B,MAAAsC,WAAA+1B,KAEAJ,EAAAj4B,MAAA8zB,IAAAsB,QAAAtpB,EAAAusB,EAAAvsB,GAAAuc,EAAA6P,MAAAF,GAAA5B,GAEA6B,KAAA,IAEA5P,EAAA5N,MAAAud,GAAAC,EACA5P,EAAA6F,UAAA8J,IAAA,MAKA7R,IAAA,SAAAra,EAAAuc,GAEAA,EAAA8P,OAAAH,GAAA3P,EAAA1hB,MAAAqxB,IAEAlL,MAAA,SAAAhhB,GAEAA,EAAA0oB,MAAAwD,GAAA,QAKAh4B,MAAA8zB,IAAA9rB,SAAAswB,aAAA,SAAAN,GAEA,OAEAnuB,IAAA,SAAAiC,EAAAuc,GAEA,GAAAA,EAAA6F,UAAA8J,MAAA,EACA,CACA,GAAAvyB,GAAAzF,MAAAgQ,MAAAI,MAAAtE,EAAA0oB,MAAAwD,GAEAvyB,MAAA,IAEA4iB,EAAA5N,MAAAud,GAAAvyB,EACA4iB,EAAA6F,UAAA8J,IAAA,KAIA7R,IAAA,SAAAra,EAAAuc,GAEAA,EAAA8P,OAAAH,GAAAh4B,MAAAgQ,MAAA6J,OAAAwO,EAAA5N,MAAAud,KAEAlL,MAAA,SAAAhhB,GAEAA,EAAA0oB,MAAAwD,GAAA,QAKAh4B,MAAA8zB,IAAA9rB,SAAAuwB,QAAAv4B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,UAAA,eACAH,MAAA8zB,IAAA9rB,SAAAwwB,WAAAx4B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,aAAA,eACAH,MAAA8zB,IAAA9rB,SAAAywB,aAAAz4B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,eAAA,eACAH,MAAA8zB,IAAA9rB,SAAA0wB,cAAA14B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,gBAAA,eACAH,MAAA8zB,IAAA9rB,SAAA2wB,YAAA34B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,cAAA,eAEAH,MAAA8zB,IAAA9rB,SAAA4wB,OAAA54B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,SAAA,eACAH,MAAA8zB,IAAA9rB,SAAA6wB,UAAA74B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,YAAA,eACAH,MAAA8zB,IAAA9rB,SAAA8wB,YAAA94B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,cAAA,eACAH,MAAA8zB,IAAA9rB,SAAA+wB,aAAA/4B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,eAAA,eACAH,MAAA8zB,IAAA9rB,SAAAgxB,WAAAh5B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,aAAA,eAEAH,MAAA8zB,IAAA9rB,SAAAixB,aAAAj5B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,eAAA,SACAH,MAAA8zB,IAAA9rB,SAAAkxB,oBAAAl5B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,sBAAA,SACAH,MAAA8zB,IAAA9rB,SAAAmxB,qBAAAn5B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,uBAAA,SACAH,MAAA8zB,IAAA9rB,SAAAoxB,uBAAAp5B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,yBAAA,SACAH,MAAA8zB,IAAA9rB,SAAAqxB,wBAAAr5B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,0BAAA,SAEAH,MAAA8zB,IAAA9rB,SAAAsxB,YAAAt5B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,eACAH,MAAA8zB,IAAA9rB,SAAAuxB,eAAAv5B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,kBACAH,MAAA8zB,IAAA9rB,SAAAwxB,iBAAAx5B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,oBACAH,MAAA8zB,IAAA9rB,SAAAyxB,kBAAAz5B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,qBACAH,MAAA8zB,IAAA9rB,SAAA0xB,gBAAA15B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,mBAEAH,MAAA8zB,IAAA9rB,SAAA2xB,aAAA35B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,gBACAH,MAAA8zB,IAAA9rB,SAAA4xB,WAAA55B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,aAAA,eACAH,MAAA8zB,IAAA9rB,SAAA6xB,cAAA75B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,iBACAH,MAAA8zB,IAAA9rB,SAAAiuB,SAAAj2B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,WAAA,kBACAH,MAAA8zB,IAAA9rB,SAAA8xB,WAAA95B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,aAAA,YACAH,MAAA8zB,IAAA9rB,SAAA+xB,OAAA/5B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,UAEAH,MAAA8zB,IAAA9rB,SAAAgI,MAAAhQ,MAAA8zB,IAAA9rB,SAAAswB,aAAA,SACAt4B,MAAA8zB,IAAA9rB,SAAAgyB,gBAAAh6B,MAAA8zB,IAAA9rB,SAAAswB,aAAA,mBACAt4B,MAAA8zB,IAAA9rB,SAAAiyB,eAAAj6B,MAAA8zB,IAAA9rB,SAAAswB,aAAA,kBACAt4B,MAAA8zB,IAAA9rB,SAAAkyB,iBAAAl6B,MAAA8zB,IAAA9rB,SAAAswB,aAAA,oBACAt4B,MAAA8zB,IAAA9rB,SAAAmyB,kBAAAn6B,MAAA8zB,IAAA9rB,SAAAswB,aAAA,qBACAt4B,MAAA8zB,IAAA9rB,SAAAoyB,gBAAAp6B,MAAA8zB,IAAA9rB,SAAAswB,aAAA,mBACAt4B,MAAA8zB,IAAA9rB,SAAAqyB,aAAAr6B,MAAA8zB,IAAA9rB,SAAAswB,aAAA,gBAEAt4B,MAAA8zB,IAAA9rB,SAAAsyB,SAAAt6B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,WAAA,eACAH,MAAA8zB,IAAA9rB,SAAAuyB,SAAAv6B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,WAAA,eACAH,MAAA8zB,IAAA9rB,SAAAwyB,UAAAx6B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,YAAA,gBACAH,MAAA8zB,IAAA9rB,SAAAyyB,UAAAz6B,MAAA8zB,IAAA9rB,SAAA7H,QAAA,YAAA,gBAEAH,MAAA8zB,IAAA9rB,SAAA2tB,MAAA31B,MAAA8zB,IAAA9rB,SAAAowB,iBAAA,QAAA,cAAA,SAAAtsB,GAAA,MAAAA,GAAA+pB,YAAA,OACA71B,MAAA8zB,IAAA9rB,SAAA2uB,OAAA32B,MAAA8zB,IAAA9rB,SAAAowB,iBAAA,SAAA,eAAA,SAAAtsB,GAAA,MAAAA,GAAA8qB,aAAA,OAEA52B,MAAA8zB,IAAA9rB,SAAAqW,IAAAre,MAAA8zB,IAAA9rB,SAAAowB,iBAAA,MAAA,eAAA,SAAAtsB,GAAA,MAAAA,GAAA4uB,UAAA,OACA16B,MAAA8zB,IAAA9rB,SAAAkW,MAAAle,MAAA8zB,IAAA9rB,SAAAowB,iBAAA,QAAA,cAAA,SAAAtsB,GAAA,MAAAA,GAAAyqB,WAAAC,aAAA1qB,EAAA6uB,WAAA7uB,EAAA+pB,aAAA,OACA71B,MAAA8zB,IAAA9rB,SAAAsW,OAAAte,MAAA8zB,IAAA9rB,SAAAowB,iBAAA,SAAA,eAAA,SAAAtsB,GAAA,MAAAA,GAAAyqB,WAAAG,cAAA5qB,EAAA4uB,UAAA5uB,EAAA8qB,cAAA,OACA52B,MAAA8zB,IAAA9rB,SAAAiW,KAAAje,MAAA8zB,IAAA9rB,SAAAowB,iBAAA,OAAA,cAAA,SAAAtsB,GAAA,MAAAA,GAAA6uB,WAAA,OAEA36B,MAAA8zB,IAAA9rB,SAAA4yB,YAEA/wB,IAAA,SAAAiC,EAAAuc,GAEA,GAAAA,EAAA6F,UAAA0M,cAAA,EACA,CACA,GAAApG,GAAAx0B,MAAA8zB,IAAAU,MAAA1oB,EAAA,aACAuc,GAAA5N,MAAAmgB,WAAA,WAAApG,EAAA,EAAA,EACAnM,EAAA6F,WAAA,IAGA/H,IAAA,SAAAra,EAAAuc,GAEAA,EAAA8P,OAAAyC,WAAAvS,EAAA5N,MAAAmgB,WAAA,GAAA,SAAA,WAEA9N,MAAA,SAAAhhB,GAEAA,EAAA0oB,MAAAoG,WAAA,OAIA56B,MAAA8zB,IAAA9rB,SAAA6yB,SAAA,WAEA,GAAAC,GAAA96B,MAAA8zB,IAAAmB,QAAA,2BAAA,wBAAA,uBAAA,sBAEA,OAAA6F,IAOAjxB,IAAA,SAAAiC,EAAAuc,GAEA,GAAAA,EAAA6F,UAAA2M,YAAA,EACA,CACA,GAAArG,GAAAx0B,MAAA8zB,IAAAU,MAAA1oB,EAAAgvB,EAEAzS,GAAA5N,MAAAogB,SAAA,YAAArG,EAAA,EAAA,EACAnM,EAAA6F,UAAA2M,UAAA,IAGA1U,IAAA,SAAAra,EAAAuc,GAEAA,EAAA8P,OAAA2C,GAAAzS,EAAA5N,MAAAogB,SAAA,GAAA,OAAA,WAEA/N,MAAA,SAAAhhB,GAEAA,EAAA0oB,MAAAsG,GAAA,QArBA,KA4BA96B,MAAA8zB,IAAA9rB,SAAA+yB,gBAAA,WAEA,GAAAD,GAAA96B,MAAA8zB,IAAAmB,QAAA,wBAAA,qBAAA,mBAAA,oBAAA,mBAEA,KAAA6F,EAEA,OAAA,CAGA,IAAAE,IAEA/c,KAAA,KACAG,OAAA,MACAF,MAAA,OACAG,IAAA,KACAC,OAAA,QAGA2c,EAAA,SAAAnvB,EAAAnF,EAAA0hB,EAAA/N,EAAA8b,GAEA,GAAA/N,EAAA6F,UAAA5T,MAAA,EACA,CACA3T,IAAAq0B,KAEAr0B,EAAAq0B,EAAAr0B,GAGA,IAAAsxB,GAAAj4B,MAAA8zB,IAAAsB,QAAAtpB,EAAAnF,EAAA0hB,EAAA6P,MAAA5d,GAAA8b,EAEA6B,MAAA,IAEA5P,EAAA5N,MAAAH,GAAA2d,EACA5P,EAAA6F,UAAA5T,IAAA,KAKA4gB,EAAA,SAAApvB,EAAA1D,EAAAigB,GAEAA,EAAA6F,UAAAiN,UAAA,IAEA,IAAA/yB,EAAAtH,QACA,IAAAsH,EAAAtH,QAAAsH,EAAA,KAAAA,EAAA,IACA,IAAAA,EAAAtH,QAAAsH,EAAA,KAAAA,EAAA,IAAAA,EAAA,KAAAA,EAAA,KAEA6yB,EAAAnvB,EAAA1D,EAAA,GAAAigB,EAAA,SAAA,SAKA,QAEAxe,IAAA,SAAAiC,EAAAuc,GAEA,GAAAmM,GAAAx0B,MAAA8zB,IAAAU,MAAA1oB,EAAAgvB,EAEA,IAAAtG,EACA,CACA,GAAA2G,GAAA3G,EAAAjuB,cACA6B,EAAA+yB,EAAA/yB,MAAA,IAEA,QAAAA,EAAAtH,QAEA,IAAA,GACAm6B,EAAAnvB,EAAA1D,EAAA,GAAAigB,EAAA,UAAA,SACA4S,EAAAnvB,EAAA1D,EAAA,GAAAigB,EAAA,UAAA,UACA4S,EAAAnvB,EAAA1D,EAAA,GAAAigB,EAAA,WACA6S,EAAApvB,EAAA1D,EAAAigB,EACA,MACA,KAAA,GACA4S,EAAAnvB,EAAA1D,EAAA,GAAAigB,EAAA,UAAA,SACA4S,EAAAnvB,EAAA1D,EAAA,GAAAigB,EAAA,UAAA,UACA6S,EAAApvB,EAAA1D,EAAAigB,EACA,MACA,KAAA,GACA4S,EAAAnvB,EAAA1D,EAAA,GAAAigB,EAAA,UAAA,SACA4S,EAAAnvB,EAAA1D,EAAA,GAAAigB,EAAA,UAAA,UACA6S,EAAApvB,EAAA1D,EAAAigB,MAKAlC,IAAA,SAAAra,EAAAuc,GAEA,GAAAmM,GAAA,IAIAA,GAFAx0B,MAAAoC,UAAAimB,EAAA5N,MAAA2gB,SAEA/S,EAAAgT,QAAA,UAAA,SAAA,KAAA,IAAAhT,EAAAgT,QAAA,UAAA,SAAA,KAAA,IAAAhT,EAAAgT,QAAA,UAAA,SAAA,KAIAhT,EAAAgT,QAAA,UAAA,SAAA,KAAA,IAAAhT,EAAAgT,QAAA,UAAA,SAAA,KAGAhT,EAAA8P,OAAA2C,GAAAtG,GAEA1H,MAAA,SAAAhhB,GAEAA,EAAA0oB,MAAAsG,GAAA,UAMA96B,MAAA8zB,IAAA9rB,SAAAszB,UAAA,WAEA,GAAAR,GAAA96B,MAAA8zB,IAAAmB,QAAA,kBAAA,eAAA,aAAA,cAAA,aAEA,KAAA6F,EAEA,OAAA,CAGA,IAAA1qB,GAAA,SAAAtE,EAAAnF,EAAA0hB,EAAA/N,EAAA8b,GAEA,GAAAmF,GAAAlT,EAAA6P,MAAA5d,GACA2d,EAAAj4B,MAAA8zB,IAAAsB,QAAAtpB,EAAAnF,EAAA40B,EAAAnF,EAEA,OAAA6B,MAAA,EAEAA,EAIA5P,EAAA7N,aAAAF,GAAA8C,cAGAoe,EAAA,SAAA1vB,EAAAuc,EAAA5iB,EAAA6U,GAEA,MAAAlK,GAAAtE,EAAArG,EAAA,GAAA4iB,EAAA/N,EAAA,UAEAmhB,EAAA,SAAA3vB,EAAAuc,EAAA5iB,EAAA6U,GAEA,OACAjY,EAAA+N,EAAAtE,EAAArG,EAAA,GAAA4iB,EAAA/N,EAAA,SACAmD,EAAArN,EAAAtE,EAAArG,EAAA,GAAA4iB,EAAA/N,EAAA,YAGAohB,EAAA,SAAA5vB,EAAAuc,EAAA5iB,EAAA6U,GAEA,OACAjY,EAAA+N,EAAAtE,EAAArG,EAAA,GAAA4iB,EAAA/N,EAAA,SACAmD,EAAArN,EAAAtE,EAAArG,EAAA,GAAA4iB,EAAA/N,EAAA,UACA4C,EAAA9M,EAAAtE,EAAArG,EAAA,GAAA4iB,EAAA/N,KAGAqhB,EAAA,SAAA7vB,EAAAuc,EAAA5iB,EAAA6U,GAEA,OACAjY,EAAA+N,EAAAtE,EAAArG,EAAA,GAAA4iB,EAAA/N,EAAA,SACAmD,EAAArN,EAAAtE,EAAArG,EAAA,GAAA4iB,EAAA/N,EAAA,UACA4C,EAAA9M,EAAAtE,EAAArG,EAAA,GAAA4iB,EAAA/N,GACA2E,MAAA7O,EAAAtE,EAAArG,EAAA,GAAA4iB,EAAA/N,KAIAshB,EAAA,SAAAthB,EAAA3T,EAAAf,GAEA,MAAA0U,GAAA,IAAA3T,EAAAf,EAAA,KAEAi2B,EAAA,SAAAvhB,EAAA3T,EAAAf,GAEA,MAAA0U,GAAA,IAAA3T,EAAAtE,EAAAuD,EAAA,IAAAe,EAAA8W,EAAA7X,EAAA,KAEAk2B,EAAA,SAAAxhB,EAAA3T,EAAAf,GAEA,MAAA0U,GAAA,IAAA3T,EAAAtE,EAAAuD,EAAA,IAAAe,EAAA8W,EAAA7X,EAAA,IAAAe,EAAAuW,EAAAtX,EAAA,KAEAm2B,EAAA,SAAAzhB,EAAA3T,EAAAf,GAEA,MAAA0U,GAAA,IAAA3T,EAAAtE,EAAA,IAAAsE,EAAA8W,EAAA,IAAA9W,EAAAuW,EAAA,IAAAvW,EAAAsY,MAAArZ,EAAA,KAGAo2B,GAEAC,UAAA,uCACAC,YAAA,uDACAC,WAAA,0BACAC,WAAA,0BACAC,WAAA,0BACA76B,MAAA,mCACA86B,QAAA,mDACAC,OAAA,sBACAC,OAAA,sBACAC,OAAA,sBACAC,OAAA,sBACAC,SAAA,kEACAC,QAAA,uBACAC,QAAA,uBACAC,QAAA,uBACAC,KAAA,kCACAC,MAAA,qBACAC,MAAA,sBAGAC,GAEAjB,UAAAR,EACAS,YAAAR,EACAS,WAAAX,EACAY,WAAAZ,EACAa,WAAAb,EACAh6B,MAAAi6B,EACAa,QAAAZ,EACAa,OAAAf,EACAgB,OAAAhB,EACAiB,OAAAjB,EACAkB,OAAAlB,EACAmB,SAAAhB,EACAiB,QAAApB,EACAqB,QAAArB,EACAsB,QAAAtB,EACAuB,KAAAtB,EACAuB,MAAAxB,EACAyB,MAAAzB,GAGA2B,GAEAlB,UAAAJ,EACAK,YAAAJ,EACAK,WAAAP,EACAQ,WAAAR,EACAS,WAAAT,EACAp6B,MAAAq6B,EACAS,QAAAR,EACAS,OAAAX,EACAY,OAAAZ,EACAa,OAAAb,EACAc,OAAAd,EACAe,SAAAZ,EACAa,QAAAhB,EACAiB,QAAAjB,EACAkB,QAAAlB,EACAmB,KAAAlB,EACAmB,MAAApB,EACAqB,MAAArB,GAGAwB,EAAA,GAAAp9B,OAAAoJ,QAAA4yB,GACAt3B,EAAA04B,EAAA3zB,OACA4zB,EAAAD,EAAA1zB,IACA0zB,GAAAD,WACAC,EAAAF,UAEA,KAAA,GAAAv5B,KAAAu5B,GACA,CACA,GAAAr8B,GAAAu8B,EAAAhzB,QAAAzG,EAEAy5B,GAAAF,QAAAr8B,GAAAq8B,EAAAv5B,GACAy5B,EAAAD,QAAAt8B,GAAAs8B,EAAAx5B,GAGA,OAEAkG,IAAA,SAAAiC,EAAAuc,GAEA,GAAAmM,GAAAx0B,MAAA8zB,IAAAU,MAAA1oB,EAAAgvB,EAEA,KAAA,GAAAxgB,KAAA+N,GAAA6F,UACA,CACA,GAAArtB,GAAAu8B,EAAAhzB,QAAAkQ,EAEA,IAAA,KAAAzZ,GAAAwnB,EAAA6F,UAAA5T,MAAA,EACA,CACA,GAAA7U,GAAAf,EAAA7D,GAAA6E,KAAA8uB,EAEA/uB,KAEA4iB,EAAA5N,MAAAH,GAAA8iB,EAAAF,QAAAr8B,GAAAiL,EAAAuc,EAAA5iB,EAAA6U,GACA+N,EAAA6F,UAAA5T,IAAA,MAKA6L,IAAA,SAAAra,EAAAuc,GAIA,IAAA,GAFAiV,MAEAz8B,EAAA,EAAAA,EAAA6D,EAAA5D,OAAAD,IACA,CACA,GAAAyZ,GAAA+iB,EAAAx8B,EAEAyZ,KAAA+N,GAAA5N,OAEA6iB,EAAAt8B,KAAAo8B,EAAAD,QAAAt8B,GAAAyZ,EAAA+N,EAAA5N,MAAAH,GAAA+N,EAAA6P,MAAA5d,KAIAgjB,EAAAx8B,SAEAunB,EAAA8P,OAAA2C,GAAAwC,EAAAC,KAAA,OAGAzQ,MAAA,SAAAhhB,GAEAA,EAAA0oB,MAAAsG,GAAA,UAMA96B,MAAA8zB,IAAA9rB,SAAAw1B,QAAA,WAEA,GAAA1C,GAAA96B,MAAA8zB,IAAAmB,QAAA,gBAAA,aAAA,eAAA,WAEA,OAAA6F,IAOAjxB,IAAA,SAAAiC,EAAAuc,GAEA,GAAAA,EAAA6F,UAAAsP,WAAA,EACA,CACA,GAAAhJ,GAAAx0B,MAAA8zB,IAAAU,MAAA1oB,EAAAgvB,GACA0C,EAAA73B,WAAA6uB,EAEA/tB,OAAA+2B,KAEAnV,EAAA5N,MAAA+iB,QAAAA,EACAnV,EAAA6F,UAAAsP,SAAA,KAIArX,IAAA,SAAAra,EAAAuc,GAEAA,EAAA8P,OAAA2C,GAAA96B,MAAA+G,MAAAshB,EAAA5N,MAAA+iB,QAAA,EAAA,IAEA1Q,MAAA,SAAAhhB,GAEAA,EAAA0oB,MAAAsG,GAAA,QAzBA,KA+BA96B,MAAA8zB,IAAA9rB,SAAA2lB,OAAA,WAEA,GAAAmN,GAAA96B,MAAA8zB,IAAAmB,QAAA,eAAA,YAAA,UAAA,WAAA,UAEA,KAAA6F,EAEA,OAAA,CAGA,IAAAtwB,IAEAizB,UAAA,YACAC,MAAA,QACAC,SAAA,WACAC,UAAA,aACAC,OAAA,SACAC,WAAA,aACAC,SAAA,WACAC,KAAA,QAGAC,IAEA,KAAA,GAAA3jB,KAAA9P,GAEAyzB,EAAA3jB,GAAA,GAAA4jB,QAAA1zB,EAAA8P,GAAA,YAAA,IAGA,QAEAzQ,IAAA,SAAAiC,EAAAuc,GAEA,GAAAmM,GAAAx0B,MAAA8zB,IAAAU,MAAA1oB,EAAAgvB,EAEA,KAAA,GAAAxgB,KAAA2jB,GAEA,GAAA5V,EAAA6F,UAAA5T,MAAA,EACA,CACA,GAAA7U,GAAAw4B,EAAA3jB,GAAA5U,KAAA8uB,EAEA,IAAA/uB,KAAA,EACA,CACA,GAAAwyB,GAAAj4B,MAAA8zB,IAAAsB,QAAAtpB,EAAArG,EAAA,GAAA4iB,EAAA6P,MAAA5d,GAEA2d,MAAA,IAEA5P,EAAA5N,MAAAH,GAAA2d,EACA5P,EAAA6F,UAAA5T,IAAA,MAMA6L,IAAA,SAAAra,EAAAuc,GAIA,GAAA8V,KAEA,KAAA,GAAA7jB,KAAA9P,GAEA8P,IAAA+N,GAAA5N,OAEA0jB,EAAAn9B,KAAAwJ,EAAA8P,GAAA,IAAA+N,EAAA1hB,MAAA2T,GAAA,IAIA6jB,GAAAr9B,SAEAunB,EAAA8P,OAAA2C,GAAAqD,EAAAZ,KAAA,OAGAzQ,MAAA,SAAAhhB,GAEAA,EAAA0oB,MAAAsG,GAAA,UAMA96B,MAAA8zB,IAAA9rB,SAAAoW,QAEAvU,IAAA,SAAAiC,EAAAuc,GAEA,GAAA3K,GAAA5R,EAAA6uB,WAAA,GAAA7uB,EAAA+pB,YAAA,KACAlY,EAAA7R,EAAA4uB,UAAA,GAAA5uB,EAAA8qB,aAAA,IAEA,IAAAvO,EAAA6F,UAAA9P,UAAA,EACA,CACA,GAAAmd,GAAAlT,EAAA6P,MAAA9Z,OACAggB,EAAAp+B,MAAA8zB,IAAAsB,QAAAtpB,EAAA4R,EAAA6d,EAAA,eACA8C,EAAAr+B,MAAA8zB,IAAAsB,QAAAtpB,EAAA6R,EAAA4d,EAAA,eAEA6C,MAAA,GAAAC,KAAA,IAEAhW,EAAA5N,MAAA2D,QACA/b,EAAA+7B,EACA3gB,EAAA4gB,GAEAhW,EAAA6F,UAAA9P,QAAA,GAGA,GAAAiK,EAAA6F,UAAAoQ,WAAA,EACA,CACA,GAAA/C,GAAAlT,EAAA6P,MAAAoG,QACAF,EAAAp+B,MAAA8zB,IAAAsB,QAAAtpB,EAAA4R,EAAA6d,EAAA,cAEA6C,MAAA,IAEA/V,EAAA5N,MAAA6jB,QAAAF,EACA/V,EAAA6F,UAAAoQ,SAAA,GAGA,GAAAjW,EAAA6F,UAAAqQ,WAAA,EACA,CACA,GAAAhD,GAAAlT,EAAA6P,MAAAqG,QACAF,EAAAr+B,MAAA8zB,IAAAsB,QAAAtpB,EAAA6R,EAAA4d,EAAA,eAEA8C,MAAA,IAEAhW,EAAA5N,MAAA8jB,QAAAF,EACAhW,EAAA6F,UAAAqQ,SAAA,KAIAC,OAAA,SAAA1yB,EAAAuc,GAEAA,EAAA2L,OAAA2B,MAAA31B,MAAA8zB,IAAAsB,QAAAtpB,EAAAA,EAAA+pB,YAAA,KAAAxN,EAAA6P,MAAAoG,SAAAjW,EAAA6P,MAAA9Z,OAAA,eACAiK,EAAA2L,OAAA2C,OAAA32B,MAAA8zB,IAAAsB,QAAAtpB,EAAAA,EAAA8qB,aAAA,KAAAvO,EAAA6P,MAAAqG,SAAAlW,EAAA6P,MAAA9Z,OAAA,iBAEA+H,IAAA,SAAAra,EAAAuc,GAEA,GAAAoW,GAAA,GAAApW,EAAA2L,OAAA2B,MACA+I,EAAA,GAAArW,EAAA2L,OAAA2C,MAEAtO,GAAAhF,QAAAjF,SAEAiK,EAAA8P,OAAAla,KAAAoK,EAAA5N,MAAA2D,OAAA/b,EAAAo8B,EAAApW,EAAA6P,MAAA9Z,OACAiK,EAAA8P,OAAA9Z,IAAAgK,EAAA5N,MAAA2D,OAAAX,EAAAihB,EAAArW,EAAA6P,MAAA9Z,QAEAiK,EAAAhF,QAAAib,UAEAjW,EAAA8P,OAAAla,KAAAoK,EAAA5N,MAAA6jB,QAAAG,EAAApW,EAAA6P,MAAAoG,SAEAjW,EAAAhF,QAAAkb,UAEAlW,EAAA8P,OAAA9Z,IAAAgK,EAAA5N,MAAA8jB,QAAAG,EAAArW,EAAA6P,MAAAqG,WAKAv+B,MAAA8zB,IAAA9rB,SAAA22B,OAEAC,iBAAAr5B,KAAAgyB,GAAA,IAEAsH,iBAAA,IAAAt5B,KAAAgyB,GAEA1tB,IAAA,SAAAiC,EAAAuc,GAEA,GAAAyW,GAAA,GAAAhzB,EAAAyqB,WAAAC,YACAuI,EAAA,GAAAjzB,EAAAyqB,WAAAG,aACAhZ,EAAA5R,EAAA6uB,WAAA,GAAA7uB,EAAA+pB,YACAlY,EAAA7R,EAAA4uB,UAAA,GAAA5uB,EAAA8qB,aACAnY,EAAAf,EAAAohB,EACApgB,EAAAf,EAAAohB,CAEA,IAAA1W,EAAA6F,UAAA8Q,eAAA,EACA,CACA,GAAAC,GAAA5W,EAAA6P,MAAA8G,YACAE,EAAAl/B,MAAA8zB,IAAAsB,QAAAtpB,EAAAgzB,EAAA,KAAAG,EAAA,eACAE,EAAAn/B,MAAA8zB,IAAAsB,QAAAtpB,EAAAizB,EAAA,KAAAE,EAAA,eAEAC,MAAA,GAAAC,KAAA,IAEA9W,EAAA5N,MAAAukB,aACA38B,EAAA68B,EACAzhB,EAAA0hB,GAEA9W,EAAA6F,UAAA8Q,aAAA,GAIA3W,EAAA6F,UAAAxR,YAAA,IAEA2L,EAAA5N,MAAAiC,SAAAnX,KAAAuI,KAAA2Q,EAAAA,EAAAC,EAAAA,GACA2J,EAAA6F,UAAAxR,UAAA,GAGA2L,EAAA6F,UAAAjP,SAAA,IAEAoJ,EAAA5N,MAAAwE,MAAA1Z,KAAA65B,MAAA1gB,EAAAD,GAAAnX,KAAAu3B,iBACAxW,EAAA6F,UAAAjP,OAAA,IAIAuf,OAAA,SAAA1yB,EAAAuc,GAEAA,EAAA2L,OAAAsC,YAAAxqB,EAAAyqB,WAAAC,YACAnO,EAAA2L,OAAAyC,aAAA3qB,EAAAyqB,WAAAG,aACArO,EAAA2L,OAAA2B,MAAA7pB,EAAA+pB,YACAxN,EAAA2L,OAAA2C,OAAA7qB,EAAA8qB,cAGAzQ,IAAA,SAAAra,EAAAuc,GAGA,GAAA4W,GAAA5W,EAAA6P,MAAA8G,aAAA,IACAK,EAAAhX,EAAA5N,MAAAukB,YAAA3W,EAAA5N,MAAAukB,YAAA38B,EAAA,GACAi9B,EAAAjX,EAAA5N,MAAAukB,YAAA3W,EAAA5N,MAAAukB,YAAAvhB,EAAA,GAEA8hB,EAAAlX,EAAA6P,MAAAiD,QAAA,IACAqE,EAAAnX,EAAA5N,MAAA0gB,OAAA9S,EAAA5N,MAAA0gB,OAAA94B,EAAA,GACAo9B,EAAApX,EAAA5N,MAAA0gB,OAAA9S,EAAA5N,MAAA0gB,OAAA1d,EAAA,GAEAyhB,EAAAl/B,MAAA8zB,IAAAsB,QAAAtpB,EAAAuzB,EAAAJ,EAAA,KAAA5W,EAAA2L,OAAAsC,YAAA,KACA6I,EAAAn/B,MAAA8zB,IAAAsB,QAAAtpB,EAAAwzB,EAAAL,EAAA,KAAA5W,EAAA2L,OAAAyC,aAAA,KAEAqI,EAAA9+B,MAAA8zB,IAAAsB,QAAAtpB,EAAA0zB,EAAAD,EAAA,KAAAlX,EAAA2L,OAAA2B,MAAA,KACAoJ,EAAA/+B,MAAA8zB,IAAAsB,QAAAtpB,EAAA2zB,EAAAF,EAAA,KAAAlX,EAAA2L,OAAA2C,OAAA,KAEA1X,GAAAoJ,EAAA5N,MAAAwE,OAAA,GAAA3X,KAAAs3B,iBACAliB,EAAA2L,EAAA5N,MAAAiC,UAAA,EAEAnP,EAAAhI,KAAAgI,IAAA0R,GAAAvC,EACA1P,EAAAzH,KAAAyH,IAAAiS,GAAAvC,CAEA2L,GAAA8P,OAAAla,KAAAihB,EAAA3xB,EAAAuxB,EAAA,KACAzW,EAAA8P,OAAA9Z,IAAA8gB,EAAAnyB,EAAA+xB,EAAA,OC3vBA/+B,MAAA8zB,IAAAvZ,UAAA,SAAAD,GAEA,MAAAta,OAAA6C,SAAAyX,IAAAta,MAAAoC,UAAAkY,EAAA8C,cAEA9C,EAEAta,MAAA2C,SAAA2X,IAAAA,IAAAta,OAAA8zB,IAAAvZ,UAEAva,MAAA8zB,IAAAvZ,UAAAD,GAGAta,MAAA8zB,IAAAvZ,UAAAva,YAMAA,MAAA8zB,IAAAvZ,UAAAva,YAAAod,aAAA,GAMApd,MAAA8zB,IAAAvZ,UAAAge,SAAAnb,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAie,YAAApb,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAke,cAAArb,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAme,eAAAtb,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAoe,aAAAvb,aAAA,EAAAmX,YAAA,MAEAv0B,MAAA8zB,IAAAvZ,UAAAqe,QAAAxb,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAse,WAAAzb,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAue,aAAA1b,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAwe,cAAA3b,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAye,YAAA5b,aAAA,EAAAmX,YAAA,MAEAv0B,MAAA8zB,IAAAvZ,UAAA0e,cAAA7b,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA2e,qBAAA9b,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA4e,sBAAA/b,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA6e,wBAAAhc,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA8e,yBAAAjc,aAAA,EAAAmX,YAAA,MAEAv0B,MAAA8zB,IAAAvZ,UAAA+e,aAAAlc,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAgf,gBAAAnc,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAif,kBAAApc,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAkf,mBAAArc,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAmf,iBAAAtc,aAAA,EAAAmX,YAAA,MAEAv0B,MAAA8zB,IAAAvZ,UAAAof,cAAAvc,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAmlB,eAAAtiB,aAAA,GACApd,MAAA8zB,IAAAvZ,UAAAqf,YAAAxc,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAsf,eAAAzc,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA0b,UAAA7Y,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAuf,YAAA1c,aAAA,EAAAmX,YAAA,MAEAv0B,MAAA8zB,IAAAvZ,UAAA4gB,QAAA/d,cAAA/a,EAAA,GAAAob,EAAA,IAAA8W,YAAA,IAAAvsB,SAAA,kBAAA0S,WAAA,MACA1a,MAAA8zB,IAAAvZ,UAAAilB,SAAApiB,aAAA,GAAAmX,YAAA,IAAAvsB,SAAA,mBACAhI,MAAA8zB,IAAAvZ,UAAAklB,SAAAriB,aAAA,GAAAmX,YAAA,IAAAvsB,SAAA,mBAEAhI,MAAA8zB,IAAAvZ,UAAAijB,SAAApgB,aAAA,GACApd,MAAA8zB,IAAAvZ,UAAAwf,QAAA3c,aAAA,GAEApd,MAAA8zB,IAAAvZ,UAAAob,OAAAvY,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA+f,UAAAld,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAggB,UAAAnd,aAAA,EAAAmX,YAAA,MAEAv0B,MAAA8zB,IAAAvZ,UAAAoc,QAAAvZ,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAigB,WAAApd,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAkgB,WAAArd,aAAA,EAAAmX,YAAA,MAEAv0B,MAAA8zB,IAAAvZ,UAAA0E,OAAA7B,aAAA,EAAApV,SAAA,SACAhI,MAAA8zB,IAAAvZ,UAAAmC,UAAAU,aAAA,EAAApV,SAAA,SACAhI,MAAA8zB,IAAAvZ,UAAAykB,aAAA5hB,cAAA/a,EAAA,GAAAob,EAAA,IAAA8W,YAAA,IAAAvsB,SAAA,cAAA0S,WAAA,MAEA1a,MAAA8zB,IAAAvZ,UAAA8D,KAAAjB,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA2D,OAAAd,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA+D,QAAAlB,aAAA,EAAAmX,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA0D,MAAAb,aAAA,EAAAmX,YAAA,MAEAv0B,MAAA8zB,IAAAvZ,UAAA6D,QAAAhB,cAAA/a,EAAA,EAAAob,EAAA,GAAA8W,YAAA,KAAAvsB,SAAA,SAAA0S,WAAA,MACA1a,MAAA8zB,IAAAvZ,UAAA+jB,SAAAlhB,aAAA,EAAAmX,YAAA,KAAAvsB,SAAA,UACAhI,MAAA8zB,IAAAvZ,UAAAgkB,SAAAnhB,aAAA,EAAAmX,YAAA,KAAAvsB,SAAA,UAEAhI,MAAA8zB,IAAAvZ,UAAAyjB,MAAA5gB,aAAA,EAAApV,SAAA,SAAAusB,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAAmjB,OAAAtgB,aAAA,EAAApV,SAAA,SAAAusB,YAAA,KACAv0B,MAAA8zB,IAAAvZ,UAAAujB,YAAA1gB,aAAA,EAAApV,SAAA,SAAAusB,YAAA,KACAv0B,MAAA8zB,IAAAvZ,UAAAkjB,WAAArgB,aAAA,EAAApV,SAAA,SAAAusB,YAAA,KACAv0B,MAAA8zB,IAAAvZ,UAAAwjB,UAAA3gB,aAAA,EAAApV,SAAA,SAAAusB,YAAA,KACAv0B,MAAA8zB,IAAAvZ,UAAAsjB,QAAAzgB,aAAA,EAAApV,SAAA,SAAAusB,YAAA,KACAv0B,MAAA8zB,IAAAvZ,UAAAolB,YAAAviB,aAAA,EAAApV,SAAA,SAAAusB,YAAA,KACAv0B,MAAA8zB,IAAAvZ,UAAAqjB,WAAAxgB,aAAA,EAAApV,SAAA,SAAAusB,YAAA,OAEAv0B,MAAA8zB,IAAAvZ,UAAAmiB,QAAAtf,aAAA,EAAApV,SAAA,YAAAusB,YAAA,OACAv0B,MAAA8zB,IAAAvZ,UAAAoiB,UAAAvf,cAAA/a,EAAA,EAAAob,EAAA,EAAAP,EAAA,EAAA+B,MAAA,GAAAjX,SAAA,YAAA0S,WAAA,aAAA6Z,YAAA,OAEAv0B,MAAA8zB,IAAAvZ,UAAA0hB,WAAA7e,cAAA/a,EAAA,EAAAob,EAAA,GAAAzV,SAAA,YAAA0S,WAAA,KAAA6Z,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA4hB,YAAA/e,aAAA,EAAApV,SAAA,YAAAusB,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA6hB,YAAAhf,aAAA,EAAApV,SAAA,YAAAusB,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA8hB,YAAAjf,aAAA,EAAApV,SAAA,YAAAusB,YAAA,MACAv0B,MAAA8zB,IAAAvZ,UAAA2hB,aAAA9e,cAAA/a,EAAA,EAAAob,EAAA,EAAAP,EAAA,GAAAlV,SAAA,YAAA0S,WAAA,KAAA6Z,YAAA,MAEAv0B,MAAA8zB,IAAAvZ,UAAA/Y,OAAA4b,cAAA/a,EAAA,EAAAob,EAAA,GAAAzV,SAAA,YAAA0S,WAAA,MACA1a,MAAA8zB,IAAAvZ,UAAAgiB,QAAAnf,aAAA,EAAApV,SAAA,aACAhI,MAAA8zB,IAAAvZ,UAAAiiB,QAAApf,aAAA,EAAApV,SAAA,aACAhI,MAAA8zB,IAAAvZ,UAAAkiB,QAAArf,aAAA,EAAApV,SAAA,aACAhI,MAAA8zB,IAAAvZ,UAAA+hB,SAAAlf,cAAA/a,EAAA,EAAAob,EAAA,EAAAP,EAAA,GAAAlV,SAAA,YAAA0S,WAAA,MAEA1a,MAAA8zB,IAAAvZ,UAAAwiB,MAAA3f,cAAA/a,EAAA,EAAAob,EAAA,GAAA8W,YAAA,MAAAvsB,SAAA,YAAA0S,WAAA,MACA1a,MAAA8zB,IAAAvZ,UAAAyiB,OAAA5f,aAAA,EAAAmX,YAAA,MAAAvsB,SAAA,aACAhI,MAAA8zB,IAAAvZ,UAAA0iB,OAAA7f,aAAA,EAAAmX,YAAA,MAAAvsB,SAAA,aAEAhI,MAAA8zB,IAAAvZ,UAAAsgB,UAAAzd,aAAA,GACApd,MAAA8zB,IAAAvZ,UAAAqgB,YAAAxd,aAAA,GAEApd,MAAA8zB,IAAAvZ,UAAAyf,iBAAA5c,aAAApd,MAAAgQ,QAAA0K,WAAA,QACA1a,MAAA8zB,IAAAvZ,UAAAvK,OAAAoN,aAAApd,MAAAgQ,QAAA0K,WAAA,QACA1a,MAAA8zB,IAAAvZ,UAAA0f,gBAAA7c,aAAApd,MAAAgQ,QAAA0K,WAAA,QACA1a,MAAA8zB,IAAAvZ,UAAA2f,kBAAA9c,aAAApd,MAAAgQ,QAAA0K,WAAA,QACA1a,MAAA8zB,IAAAvZ,UAAA4f,mBAAA/c,aAAApd,MAAAgQ,QAAA0K,WAAA,QACA1a,MAAA8zB,IAAAvZ,UAAA6f,iBAAAhd,aAAApd,MAAAgQ,QAAA0K,WAAA,QACA1a,MAAA8zB,IAAAvZ,UAAA8f,cAAAjd,aAAApd,MAAAgQ,QAAA0K,WAAA,QCzHA1a,MAAAo0B,YAAA,SAAAtoB,GAEAxE,KAAAgC,MAAAwC,GACAxE,KAAAs4B,WAAA,GAAA5/B,OAAAoJ,QACA9B,KAAAu4B,iBAAA,GAAA7/B,OAAAoJ,QACA9B,KAAAw4B,uBACAx4B,KAAA4mB,aACA5mB,KAAA0sB,UACA1sB,KAAA4wB,SACA5wB,KAAA6wB,UACA7wB,KAAAy4B,QAAA,EACAz4B,KAAA04B,eAAA;EAMAhgC,MAAAmE,SAAAnE,MAAAo0B,YAAA7wB,UAAA,GAAAvD,OAAAE,UASAoqB,UAAA,WAIA,GAAAC,GAAAjjB,KAAAuiB,gBACA,IAAAU,EAAAzpB,OACA,CAGA,IAAA,GAFA8+B,MAEA/+B,EAAA0pB,EAAAzpB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAwZ,GAAAkQ,EAAA1pB,GACAyZ,EAAAD,EAAAE,SAEAD,KAAAhT,MAAAmT,QAAAJ,EAAAgG,gBAEAuf,EAAAt4B,KAAAw4B,oBAAAxlB,KAAA,EAEAhT,KAAA4mB,UAAA5T,IAAA,GAIA,IAAA,GAAA3W,KAAAi8B,GAEAt4B,KAAAs4B,WAAA/1B,IAAAlG,GAAAkG,IAAAvC,KAAArH,QAAAqH,MAOA,IAAA,GADA24B,GAAA34B,KAAAu4B,iBAAAp2B,OACA5I,EAAAo/B,EAAAn/B,OAAA,EAAAD,GAAA,EAAAA,IAEAo/B,EAAAp/B,GAAA29B,OAAAl3B,KAAArH,QAAAqH,KAMA,OAFAtH,OAAAE,SAAAqD,UAAA+mB,UAAA7nB,MAAA6E,KAAArD,WAEAqD,MASAic,OAAA,WAOA,MALAvjB,OAAAE,SAAAqD,UAAAggB,OAAA9gB,MAAA6E,KAAArD,WAEAqD,KAAA44B,YACA54B,KAAA04B,eAAA,EAEA14B,MAUA2jB,YAAA,SAAAhD,EAAAC,EAAAM,GAEA,GAAAP,EAAA5X,MAAA6nB,MAIA,IAAA,GAFAzT,GAAA+D,EAAA/e,OAEA5I,EAAA4jB,EAAA3jB,OAAA,EAAAD,GAAA,EAAAA,IACA,CACA,GAAAwZ,GAAAoK,EAAA5jB,GACAyZ,EAAAD,EAAAE,SAEAD,KAAA2N,GAAA5X,MAAA6nB,QAEA7d,EAAAzU,KAAAqiB,EAAA5X,MAAA6nB,MAAA5d,MASA4lB,UAAA,WAEA54B,KAAA6wB,SAEA,IAAAgI,KAEA,KAAA,GAAA7lB,KAAAhT,MAAAmT,MAEA,GAAAnT,KAAA+b,QAAA/I,GACA,CACA,GAAA3W,GAAA2D,KAAAw4B,oBAAAxlB,EAEAhT,MAAAs4B,WAAAv1B,IAAA1G,KAEAw8B,EAAAx8B,IAAA,GAKA,IAAA,GAAAA,KAAAw8B,GAEA74B,KAAAs4B,WAAA/1B,IAAAlG,GAAAwiB,IAAA7e,KAAArH,QAAAqH,MAEAA,KAAAy4B,QAAA,GAQAt9B,MAAA,WAOA,GALA6E,KAAAy4B,QAAAz4B,KAAA04B,eAEA14B,KAAA44B,YAGA54B,KAAAy4B,OACA,CACA,IAAA,GAAAp8B,KAAA2D,MAAA6wB,OAEA7wB,KAAArH,QAAAu0B,MAAA7wB,GAAA2D,KAAA6wB,OAAAx0B,EAGA,KAAA,GAAA2W,KAAAhT,MAAAmT,MAEAnT,KAAA+b,QAAA/I,IAAA,CAGAhT,MAAAy4B,QAAA,EASA,MANAz4B,MAAA04B,eAAA,EAEA14B,KAAA6B,QAAA,SAEA7B,KAAAsjB,kBAEAtjB,MASAqjB,gBAAA,SAAAtQ,GAEAra,MAAAE,SAAAqD,UAAAonB,gBAAAloB,MAAA6E,KAAArD,UAEA,IAAAqW,GAAAD,EAAAE,UACAA,EAAAjT,KAAAkT,aAAAF,GACAga,EAAA/Z,EAAA+Z,aACAtsB,EAAAuS,EAAAvS,QAYA,OAVAV,MAAAs4B,WAAAp2B,IAAA8qB,EAAAtsB,GAEAV,KAAAw4B,oBAAAxlB,GAAAga,EACAhtB,KAAA4wB,MAAA5d,GAAAD,EAAAzU,MAAA2U,EAAAga,YAEAv0B,MAAAsC,WAAA0F,EAAAw2B,SAEAl3B,KAAAu4B,iBAAAr2B,IAAA8qB,EAAAtsB,GAGAV,MAOA+iB,QAAA,WAGA,IAAA,GADA+S,GAAA91B,KAAAs4B,WAAAn2B,OACA5I,EAAAu8B,EAAAt8B,OAAA,EAAAD,GAAA,EAAAA,IAEAu8B,EAAAv8B,GAAAisB,MAAAxlB,KAAArH,QAAAqH,KAKA,OAFAA,MAAAmT,SAEAnT,MAQA6e,IAAA,SAAAwG,GAEA,GAAAyQ,MACA/Z,KACA6U,KACAC,IAEA,KAAA,GAAA7d,KAAAqS,GACA,CACA,GAAApS,GAAAjT,KAAAkT,aAAAF,GACA3T,EAAAgmB,EAAArS,EAIA,IAFA4d,EAAA5d,GAAAC,EAAAga,YAEAv0B,MAAA2C,SAAAgE,GACA,CACA,GAAAlB,GAAAzF,MAAA8zB,IAAApN,WAAA/f,EAAA4T,EAAAga,YAEA9uB,MAAA,IAEAyyB,EAAA5d,GAAA7U,EAAAG,MAAA2U,EAAAga,YACA5tB,EAAAlB,EAAAkB,OAIA,GAAAlB,GAAA8U,EAAAnK,MAAAzJ,EAEAlB,MAAA,IAEA23B,EAAA7iB,EAAA+Z,cAAA/Z,EAAAvS,SACA2kB,EAAArS,GAAA7U,EACA4d,EAAA/I,IAAA,GAIA,GAAA8lB,IAEAlI,MAAAA,EAEAzd,MAAAkS,EAEAtJ,QAAAA,EAEA8U,OAAAA,EAEAnE,UAEArtB,MAAA,SAAA2T,GAEA,MAAAqS,GAAArS,GAAA4d,EAAA5d,IAGA+gB,QAAA,SAAA/gB,EAAA+lB,EAAAC,GAEA,GAAA35B,GAAAgmB,EAAArS,EAYA,OAVAta,OAAAoC,UAAAuE,KAEAA,EAAAgmB,EAAArS,EAAA+lB,GAEArgC,MAAAoC,UAAAk+B,KAEA35B,EAAAA,EAAA25B,KAIA35B,EAAAuxB,EAAA5d,IAIA,KAAA,GAAA3W,KAAAy5B,GACA,CACA,GAAAp1B,GAAAo1B,EAAAz5B,EAEA3D,OAAAsC,WAAA0F,EAAAw2B,SAEApB,EAAAz5B,GAAA66B,OAAAl3B,KAAArH,QAAAmgC,GAIA,IAAA,GAAAz8B,KAAAy5B,GAEAA,EAAAz5B,GAAAwiB,IAAA7e,KAAArH,QAAAmgC,EAGA,KAAA,GAAAz8B,KAAAw0B,GAEA7wB,KAAArH,QAAAu0B,MAAA7wB,GAAAw0B,EAAAx0B,EAGA,OAAA2D,OASAuC,IAAA,SAAA8iB,GAEA,GAAAyQ,MACAlP,KACAgK,KACAl0B,IAEA,KAAA,GAAAsW,KAAAqS,GACA,CACA,GAAApS,GAAAjT,KAAAkT,aAAAF,EAEA4T,GAAA5T,IAAA,EACA4d,EAAA5d,GAAAqS,EAAArS,IAAAC,EAAAga,YACA6I,EAAA7iB,EAAA+Z,cAAA/Z,EAAAvS,SACAhE,EAAAsW,GAAAC,EAAAK,eAGA,GAAAwlB,IAEAlI,MAAAA,EAEAzd,MAAAzW,EAEAkqB,UAAAA,EAEAtoB,KAAA,SAAA0U,GAEA,MAAA4d,GAAA5d,IAIA,KAAA,GAAA3W,KAAAy5B,GAEAA,EAAAz5B,GAAAkG,IAAAvC,KAAArH,QAAAmgC,EAGA,OAAAp8B,IAQAuoB,IAAA,SAAAhS,EAAAghB,EAAAnF,GAEA,GAAAr1B,GAAAuG,KACAklB,IAEA,OAAA,YAEA,GAAAjS,IAAAxZ,GAAA0Z,OAAAza,MAAA0C,SAAA3B,EAAA0Z,MAAAF,IAEA,MAAAva,OAAA8zB,IAAAsB,QAAAr0B,EAAA+K,EAAA/K,EAAA4F,MAAA4T,GAAAghB,EAAAnF,EAGA5J,GAAAjS,GAAAghB,CAEA,IAAAnhB,GAAArZ,EAAA8I,IAAA2iB,EAEA,OAAAxsB,OAAAoC,UAAAgY,EAAAG,IAEAH,EAAAG,GAGAxZ,EAAAyZ,aAAAD,GAAA6C,eASAzW,MAAA,SAAA2T,GAEA,MAAAhT,MAAAmT,MAAAH,GAAAhT,KAAA4wB,MAAA5d,IAYA+gB,QAAA,SAAA/gB,EAAA+lB,EAAAC,GAEA,GAAA35B,GAAAW,KAAAmT,MAAAH,EAYA,OAVAta,OAAAoC,UAAAuE,KAEAA,EAAAW,KAAAmT,MAAAH,EAAA+lB,GAEArgC,MAAAoC,UAAAk+B,KAEA35B,EAAAA,EAAA25B,KAIA35B,EAAAW,KAAA4wB,MAAA5d","file":"anim8js-dom.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {array} subject\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   * \n   * @type {number}\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @type {string|function}\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @type {string|function}\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @type {number}\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @type {number}\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @type {number}\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @type {number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @type {number}\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition delta.\n   * \n   * @type {number}\n   */\n  transitionOutro:100,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {number}\n   */\n  transitionIntro: 100,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {string|function}\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * The default transition granularity. This is used for smooth transitions to\n   * provide a smooth transition from the outro velocity to the intro velocity,\n   * the cubic or quadratic path between the two is a curve with unknown length\n   * so the length needs to be calculated using a maximum number of points to\n   * calculate along the path - summing the distances between the consecutive points.\n   * \n   * @type {Number}\n   */\n  transitionGranularity: 0,\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * @type {boolean}\n   * @see  anim8.animation\n   */\n  cache: false,\n\n  /**\n   * Whether parsed options are cached whenever possible. Options that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see  anim8.options\n   */\n  cacheOptions: false,\n\n  /**\n   * Whether parsed transitions are cached whenever possible. Transitions that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see  anim8.transition\n   */\n  cacheTransitions: false,\n\n  /**\n   * The value to return when options could not be parsed from input.\n   * \n   * @type {Object}\n   */\n  noOptions: {},\n\n  /**\n   * The value to return when a transition could not be parsed from input.\n   * @type {Object}\n   */\n  noTransition: {}\n\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * [description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.trim = (function()\n{ \n  if (String.prototype.trim) {\n    return function(x) {\n      return x.trim();\n    };\n  }\n  return function(x) {\n    return x.replace(/^([\\s]*)|([\\s]*)$/g, '');\n  };\n})();\n\n/**\n * If the user is interested in seeing warnings they can override this by specifying\n * a function which accepts a text argument providing a generc message, a second argument\n * which has the input that caused the warning, and a third agument with the object\n * throwing the warning. Most warnings that are thrown occur when an animation is\n * trying to be parsed an the user provided an invalid animation, time, easing, etc.\n *\n * @param {string} message\n * @param {any} source\n */\nanim8.log = false;\n\n/**\n * Returns the size of the variable. The size of a variable is dependent on the variable\n * type. For arrays and strings their length is returned. If it's an object the number of\n * enumerable properties is returned. If it's a number, the number is returned. Otherwise\n * zero is returned.\n *\n * @param {any} x\n */\n anim8.size = function(x)\n {\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length;\n  }\n  else if ( x === null )\n  {\n    return 0;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var size = 0;\n\n    for (var prop in x)\n    {\n      size++;\n    }\n\n    return size;\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n};\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding overriding any existing properties.\n * \n * @param  {object} out\n * @return {object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding existing properties where necessary.\n * \n * @param  {object}\n * @return {object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses a number from the given input and if the input isn't a valid number\n * then returnOnInvalid is returned.\n * \n * @param  {any} value\n * @param  {any} returnOnInvalid\n * @return {any}\n */\nanim8.number = function(value, returnOnInvalid)\n{\n  var parsed = parseFloat( value );\n\n  return isNaN( parsed ) ? returnOnInvalid : parsed;\n};\n\n/**\n * Parses scale from a string or number.\n * \n * @param  {string|number}\n * @return {number}\n */\nanim8.scale = function(scale, returnOnInvalid)\n{\n  return anim8.number( scale, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Resolves the given variable. If the variable is a function the result is returned.\n * \n * @param  {any}\n * @return {any}\n */\nanim8.resolve = function(variable)\n{\n  return anim8.isFunction( variable ) ? variable() : variable;\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n * \n * @param  {number} v\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n     \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n          delete listeners[ event ];\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an array.\n * This is especially beneficial when most of the time the contents of the structure need to be iterated and order\n * doesn't matter (since removal performs a swap which breaks insertion order).\n */\nanim8.FastMap = function(map)\n{\n  this.reset();\n\n  if ( map instanceof anim8.FastMap )\n  {\n    this.putMap( map );\n  }\n  else if ( anim8.isObject( map ) )\n  {\n    for (var prop in map)\n    {\n      this.put( prop, map[ prop ] );\n    }\n  }\n};\n\nanim8.FastMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {this}\n   */\n  reset: function()\n  {\n    this.values = [];\n    this.keys = [];\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   * \n   * @param  {string} key\n   * @param  {any} value\n   * @return {this}\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   * \n   * @param  {anim8.FastMap}\n   * @return {this}\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   * \n   * @param  {string} key\n   * @return {any}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   * \n   * @param  {string} key\n   * @return {this}\n   */\n  remove: function(key)\n  {\n    if ( key in this.indices )\n    {\n      this.removeAt( this.indices[ key ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   * \n   * @param  {Number}\n   * @return {this}\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   * \n   * @param  {string} key\n   * @return {number}\n   */\n  indexOf: function(key)\n  {\n    return anim8.coalesce( this.indices[ key ], -1 );\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   * \n   * @param  {string}\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns whether the given input has overlap with keys in this map.\n   * \n   * @param  {anim8.FastMap|object}\n   * @return {Boolean}\n   */\n  hasOverlap: function(map)\n  {\n    var keys = this.keys;\n    var indices = map.indices;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      if ( keys[i] in indices )\n      {\n        return true;\n      }\n    }\n   \n    return false;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   * \n   * @return {number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Clears all keys & values from the map.\n   * \n   * @return {this}\n   */\n  clear: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  }\n\n};","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n    \n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * [bezier description]\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\n/**\n * [default description]\n * @type {[type]}\n */\nanim8.easing.default      = anim8.easing.ease;\n","\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\n/**\n * Plays the animation forward normally.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn easing( x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum halfway.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } \n\t  else \n\t  {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\n/**\n * Plays the aninmation forwards with the given easing, and backwards with the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.yoyo = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x );\n\t  } \n\t  else \n\t  {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n/**\n * Plays the animation forwards with the given easing, and backwards reflecting the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.mirror = function(easing)\n{\n\treturn function(x)\n\t{\n\t\tif ( x < 0.5 )\n\t\t{\n\t\t\treturn easing( 2.0 * x );\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1.0 - easing( 2.0 - 2.0 * x );\n\t\t}\n\t};\n};\n\n/**\n * Plays the animation backwards with using the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.reverse = function(easing)\n{\n\treturn easing( 1.0 - x );\n};\n\n/**\n * Plays the animation backwards by flipping the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.flip = function(easing)\n{\n\treturn 1.0 - easing( x );\n};\n","\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * [computed description]\n * @type {Object}\n */\nanim8.computed = {};\n\n/**\n * Calculates the current value for an animator.\n * \n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.current = function(attrimator, animator)\n{\n  var attr = attrimator.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currenrtly in the animator.\n * \n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.relative = function(relativeAmount, mask)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( anim8.isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(attrimator, animator)\n  { \n    var attr = attrimator.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = attribute.cloneDefault();\n    }\n\n    if ( mask )\n    {\n      current = calc.mul( current, mask );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  relativeFunction.relativeAmount = relativeAmount;\n  relativeFunction.mask = mask;\n\n  return relativeFunction;\n};\n\n/**\n * Returns a random value based on the given random selection.\n * \n * 1. If an array is given an item is randomly chosen from that array.\n * 2. If an instance of anim8.Path is given a point is randomly computed and returned.\n * 3. If an object with min & max values is given a random value between them is returned.\n * \n * @param  {any} randomSelection\n * @return {function}\n */\nanim8.computed.random = function(randomSelection)\n{\n  var randomFunction = null;\n\n  if ( anim8.isArray( randomSelection ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var selected = randomSelection[ Math.floor( Math.random() * randomSelection.length ) ];\n\n      return calc.parse( selected, calc.ZERO );\n    };\n  }\n  else if ( anim8.isObject( randomSelection ) && randomSelection instanceof anim8.Path )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n\n      return randomSelection.compute( calc.create(), Math.random() );\n    };\n  }\n  else if ( anim8.isObject( randomSelection ) && anim8.isDefined( randomSelection.min ) && anim8.isDefined( randomSelection.max ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var resolvedMin = anim8.resolve( randomSelection.min );\n      var resolvedMax = anim8.resolve( randomSelection.max );\n      var min = calc.parse( resolvedMin, calc.ZERO );\n      var max = calc.parse( resolvedMax, calc.ZERO );\n\n      return calc.random( calc.create(), min, max );\n    };\n  }\n  else\n  {\n    throw 'Invalid random input: ' + randomSelection;\n  }\n\n  // Marks the function as computed which is a signal to paths & events.\n  randomFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  randomFunction.randomSelection = randomSelection;\n\n  return randomFunction;\n};\n\n/**\n * [isComputed description]\n * @param  {[type]}\n * @return {Boolean}\n */\nanim8.isComputed = function(x)\n{\n  return anim8.isFunction( x ) && x.computed;\n};","/**\n * Calculators perform math and basic operations for a specific data structure.\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Instantiates a new Calculator instance.\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n\n  /**\n   * [createConstants description]\n   * @return {[type]}\n   */\n  createConstants: function()\n  {\n    this.ZERO = this.create();\n    this.ONE = this.parse( 1.0, this.ZERO );\n    this.INFINITY = this.parse( Number.POSITIVE_INFINITY, this.ZERO );\n  },\n\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * [copy description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * [clone description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clone: function(out) \n  {\n    return this.copy( this.create(), out );\n  },\n\n  /**\n   * [create description]\n   * @return {[type]}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * [scale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * [add description]\n   * @param {[type]}\n   * @param {[type]}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * [adds description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * [sub description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * [mul description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * [interpolate description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * Returns a random value between the given min and max.\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  random: function(out, min, max)\n  {\n    return this.interpolate( out, min, max, Math.random() );\n  },\n\n  /**\n   * [distance description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * [distanceSq description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * [isValid description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * [isNaN description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * [isZero description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * [isEqual description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * [min description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  min: function(out, a, b)\n  {\n    throw 'Calculator.min not implemented';\n  },\n\n  /**\n   * [max description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  max: function(out, a, b)\n  {\n    throw 'Calculator.max not implemented';\n  },\n\n  /**\n   * [clamp description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clamp: function(out, min, max)\n  {\n    var distSq = this.distanceSq( out, this.ZERO );\n\n    if ( distSq < min * min )\n    {\n      return this.scale( out, min / Math.sqrt( distSq ) );\n    }\n    else if ( distSq > max * max )\n    {\n      return this.scale( out, max / Math.sqrt( distSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * [isRelative description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * [relativeAmount description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n */\nanim8.NumberCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.NumberCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    return Math.min( a, b );\n  },\n  max: function(out, a, b)\n  {\n    return Math.max( a, b );\n  }\n});\n\n/**\n * Register the calculators.\n */\nanim8.calculator['default'] = anim8.calculator['number'] = new anim8.NumberCalculator();\n","\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.Point2dCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Point2dCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n\n        if ( ix || iy )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    return out;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    return out;\n  }\n});\n\n/**\n * Register all calculators.\n */\nanim8.calculator['2d'] = new anim8.Point2dCalculator();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.Point3dCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Point3dCalculator.prototype = new anim8.Calculator(), \n{\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n\n        if ( ix || iy || iz )\n        { \n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    return out;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['3d'] = new anim8.Point3dCalculator();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.QuaternionCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.QuaternionCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n        var ia = this.isRelative( ca );\n\n        if ( ix || iy || iz || ia )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0,\n            angle: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx }, { x:0, y:0, z:0, angle:1 } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    out.angle = Math.min(a.angle, b.angle);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    out.angle = Math.max(a.angle, b.angle);\n    return out;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    out.angle = (max.angle - min.angle) * Math.random() + min.angle;\n    return out;\n  }\n});\n\n\n/**\n * Register the calculator.\n */\nanim8.calculator['quaternion'] = new anim8.QuaternionCalculator();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.RGBCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.RGBCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n\n        if ( ir || ig || ib )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n\t\t\n    // Try to parse the color.\n\t\tvar parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    return out;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgb'] = new anim8.RGBCalculator();\n","\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.RGBACalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.RGBACalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n        var ia = this.isRelative( ca );\n\n        if ( ir || ig || ib || ia )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0,\n            a: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    out.a = Math.min(a.a, b.a);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    out.a = Math.max(a.a, b.a);\n    return out;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    out.a = (max.a - min.a) * Math.random() + min.a;\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgba'] = new anim8.RGBACalculator();\n","\n/**\n * [path description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n/**\n * [Path description]\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * [reset description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n\t{\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * [reference description]\n   * @return {[type]}\n   */\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n\n  /**\n   * [last description]\n   * @return {[type]}\n   */\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n\n  /**\n   * [first description]\n   * @return {[type]}\n   */\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n\n  /**\n   * [point description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n\n  /**\n   * [replaceComputed description]\n   * @return {[type]}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * [resolvePoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  },\n\n  /**\n   * Returns whether the path is linear. Linear paths go directly from point to\n   * point where curved paths do not. Linear paths can have their length calculated\n   * fairly easily however curves you must compute length with a given granularity.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return true;\n  },\n\n  /**\n   * Computes the length of the Path with a given granularity. Granularity\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  length: function(granularity)\n  {\n    var distance = 0;\n    var calc = this.calculator;\n\n    if ( this.isLinear() )\n    {\n      var prev = this.resolvePoint( 0 );\n\n      for (var i = 1; i < this.points.length; i++)\n      {\n        var next = this.resolvePoint( i );\n\n        distance += calc.distance( prev, next );\n\n        prev = next;\n      }\n    }\n    else\n    {\n      var deltadelta = 1.0 / granularity;\n      var delta = delta;\n      var prev = calc.clone( this.resolvePoint( 0 ) );\n      var temp = calc.create();\n\n      for (var i = 1; i <= granularity; i++)\n      {\n        var next = this.compute( temp, delta );\n\n        distance += calc.distance( prev, next );\n\n        temp = prev;\n        prev = next;\n      }\n    }\n\n    return distance;\n  }\n\n};\n","\n/**\n * [Tween description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n\n});\n\n/**\n * [tween description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['tween'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, calc.ZERO ),\n    calc.parse( path.end, calc.ZERO )\n  );\n};\n","\n/**\n * [CubicPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.CubicPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  },\n\n  /**\n   * CubicPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [cubic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['cubic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * [QuadraticPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.QuadraticPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  },\n\n  /**\n   * QuadraticPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [quadratic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['quadratic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * [DeltaPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.DeltaPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n      return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n\n});\n\n/**\n * [delta description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['delta'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * [JumpPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.JumpPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n  }\n\n});\n\n/**\n * [jump description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['jump'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * [CompiledPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.CompiledPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CompiledPath( this.name, this, this.points.length );\n  }\n\n});\n\n/**\n * [compiled description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['compiled'] = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * [KeyframePath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.KeyframePath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n\n});\n\n/**\n * [keyframe description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['keyframe'] = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * [PointPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.override( anim8.PointPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.copy( out, this.resolvePoint( 0 ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n  }\n\n});\n\n/**\n * [point description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['point'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n","\n/**\n * Animates a single attribute over any period of time.\n */\nanim8.Attrimator = function()\n{\n\n};\n\nanim8.Attrimator.prototype =\n{\n\n  /**\n   * Resets this animator for the given attribute created by the given parser.\n   * \n   * @param  {attribute} string\n   * @param  {anim8.Parser} parser\n   */\n  reset: function(attribute, parser, next)\n  {\n    this.attribute = attribute;\n    this.parser = parser;\n    this.next = next;\n\n    this.startTime = 0;\n    this.pauseTime = 0;\n    this.elapsed = 0;\n    this.stopTime = Number.POSITIVE_INFINITY;\n    this.paused = false;\n    this.cycle = 0;\n    this.delay = 0;\n  },\n\n  /**\n   * Prepares this attribute animator for animation on the given subject animator.\n   * This is called once in anim8.Animator.preupdate before the first time this\n   * animator is updated.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n  },\n\n  /**\n   * [startCycle description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  startCycle: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Updates this attribute animator given a time to animate to and the frame to\n   * provide with a new value. This method will return true if the attribute\n   * this is animating has been updated and needs to be applied to the subject.\n   * \n   * @param  {Number} now\n   * @param  {Object} frame\n   * @return {Boolean}\n   */\n  setTime: function(now, frame)\n  {\n    if ( this.paused )\n    {\n      return false;\n    }\n\n    var updated = false;\n    var elapsed = now - this.startTime;\n    var updated = false;\n\n    if ( elapsed > this.stopTime )\n    {\n      updated = this.finish( frame );\n    }\n    else if ( elapsed >= this.delay )\n    {\n      updated = this.update( elapsed, frame );\n    }\n\n    this.elapsed = elapsed;\n\n    return updated;\n  },\n\n  /**\n   * [update description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(elapsed, frame)\n  {\n    throw 'Attrimator.update not implemented';\n  },\n\n  /**\n   * Returns the amount of time that has elapsed in milliseconds.\n   * \n   * @return {Number}\n   */\n  getElapsed: function()\n  {\n    return this.elapsed;\n  },\n\n  /**\n   * [stopIn description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  stopIn: function(milliseconds)\n  {\n    this.stopTime = this.getElapsed() + milliseconds;\n  },\n\n  /**\n   * Returns the value at the given time.\n   * \n   * @param  {Number} time\n   * @return {any}\n   */\n  valueAt: function(time)\n  {\n    return false;\n  },\n\n  /**\n   * The total amount of time this animator will take. This may be an infinite number.\n   * \n   * @return {Number}\n   */\n  totalTime: function()\n  {\n    return this.stopTime;\n  },\n\n  /**\n   * The time remaining before this animator and any following will be finished.\n   * \n   * @return {Number}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * Clones this animator.\n   * \n   * @return {anim8.AttributeAnimator}\n   */\n  clone: function()\n  {\n    throw 'AttributeAnimator.clone not implemented';\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return false;\n  },\n\n  /**\n   * Determines whether this animator will run infinitely.\n   * \n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [pause description]\n   * @return {[type]}\n   */\n  pause: function()\n  {\n    if ( !this.paused )\n    {\n      this.pauseTime = anim8.now();\n      this.paused = true;\n    }\n  },\n\n  /**\n   * [resume description]\n   * @return {[type]}\n   */\n  resume: function()\n  {\n    if ( this.paused )\n    {\n      this.startTime += anim8.now() - this.pauseTime;\n      this.paused = false;\n    }\n  },\n\n  /**\n   * [isPaused description]\n   * @return {Boolean}\n   */\n  isPaused: function()\n  {\n    return this.paused;\n  },\n\n  /**\n   * Sets the final state of the animator to the frame if one exists.\n   * \n   * @param  {Object}\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return false;\n  },\n\n  /**\n   * Returns the parser that created this animator (if any).\n   * \n   * @return {anim8.Parser}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * \n   * @param  {Function}\n   * @return {[type]}\n   */\n  queue: function(next)\n  {\n    if ( this.next )\n    {\n      this.next.queue( next );\n    }\n    else\n    {\n      this.next = next;\n    }\n  }\n\n};","\n/**\n * [AttributeMap description]\n */\nanim8.AttrimatorMap = function()\n{\n  this.reset();\n};\n\nanim8.override( anim8.AttrimatorMap.prototype = new anim8.FastMap(),\n{\n\n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n\n    if ( this.has( attr ) )\n    {\n      this.get( attr ).queue( attrimator );\n    }\n    else\n    {\n      this.put( attr, attrimator );\n    }\n  },\n\n  /**\n   * [queueMap description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queueMap: function(map, onNewAttribute, context)\n  {\n    var maxRemaining = this.timeRemaining();\n    var attrimators = map.values;\n    \n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n      var existing = this.get( attr );\n\n      if ( existing )\n      {\n        if ( existing.isInfinite() )\n        {\n          existing.stopIn( attrimator.delay + maxRemaining );\n        }\n        else\n        {\n          attrimator.delay += (maxRemaining - existing.timeRemaining());\n        }\n\n        existing.queue( attrimator );\n      }\n      else\n      {\n        attrimator.delay += maxRemaining;\n\n        this.put( attr, attrimator );\n\n        if ( anim8.isFunction( onNewAttribute ) )\n        {\n          onNewAttribute.call( context || this, attrimator );\n        }\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * [unqueue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  unqueueAt: function(index)\n  {\n    var current = this.values[ index ];\n\n    if ( current.next )\n    {\n      this.values[ index ] = current.next;\n    }\n    else\n    {\n      this.removeAt( index );\n    }\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    var values = this.values;\n    var keys = this.keys;\n    var clone = new anim8.AttrimatorMap();\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      clone.values[i] = values[i].clone();\n      clone.keys[i] = keys[i];\n      clone.indices[ keys[i] ] = i;\n    }\n\n    return clone;\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function()\n  {\n    var remaining = 0;\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n\n      if ( !attrimator.isInfinite() )\n      {\n        remaining = Math.max( remaining, attrimator.timeRemaining() );\n      }\n    }\n\n    return remaining;\n  },\n\n  /**\n   * [applyCycle description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  applyCycle: function(nextCycle)\n  {\n    var currentDepth = this.values;\n    var nextDepth = null;\n\n    while ( currentDepth.length )\n    {\n      nextDepth = [];\n\n      for (var i = currentDepth.length - 1; i >= 0; i--)\n      {\n        var attrimator = currentDepth[ i ];\n\n        attrimator.cycle = nextCycle;\n\n        if ( attrimator.next )\n        {\n          nextDepth.push( attrimator.next );\n        }\n      }\n\n      if ( nextDepth.length )\n      {\n        nextCycle++;\n      }\n\n      currentDepth = nextDepth;\n    }\n\n    return nextCycle;\n  },\n\n});","\n/**\n * [EventState description]\n * @type {[type]}\n */\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\n/**\n * [Event description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {Boolean}\n * @param {[type]}\n * @param {Function}\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  this.reset( attribute, parser, next )\n\n  this.path             = path;\n  this.easing           = anim8.easing( easing );\n  this.delay            = anim8.delay( delay );\n  this.duration         = anim8.duration( duration );\n  this.sleep            = anim8.sleep( sleep );\n  this.repeat           = anim8.repeat( repeat );\n  this.scale            = anim8.scale( scale );\n  this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.ZERO );\n  this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n};\n\nanim8.override( anim8.Event.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Prepares this attribute animator for animation on the given subject animator.\n   * This is called once in anim8.Animator.preupdate before the first time this\n   * animator is updated.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n    this.state = this.delay ? anim8.EventState.DELAYED : anim8.EventState.ANIMATING;\n\n    if ( this.hasComputed() )\n    {\n      this.path = this.path.replaceComputed( this, animator );\n    }\n  },\n\n  /**\n   * [startCycle description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  startCycle: function(frame)\n  {\n    if ( this.hasInitialState )\n    {\n      return this.applyValue( frame, frame[ this.attribute ], 0 );\n    }\n\n    return false;\n  },\n\n  /**\n   * [update description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(elapsed, frame)\n  {\n    var updated = false;\n    var delay = this.delay;\n    var duration = this.duration;\n    var sleep = this.sleep;\n    var repeat = this.repeat;\n    var oldState = this.state;\n    var newState = this.state;\n    var delta = 0;\n\n    elapsed -= delay;\n\n    var cycle = duration + sleep;\n    var iteration = Math.floor( ( elapsed + sleep ) / cycle );\n\n    if (iteration >= repeat)\n    {\n      newState = anim8.EventState.FINISHED;\n      delta = 1;\n    }\n    else\n    {\n      elapsed -= iteration * cycle;\n\n      if ( elapsed > duration )\n      {\n        newState = anim8.EventState.SLEEPING;\n        delta = 1;\n      }\n      else\n      {\n        newState = anim8.EventState.ANIMATING;\n        delta = elapsed / duration;\n      }\n    }\n    \n    if ( newState === anim8.EventState.ANIMATING || \n       ( newState !== anim8.EventState.ANIMATING && oldState === anim8.EventState.ANIMATING ) )\n    {\n      this.applyValue( frame, frame[ this.attribute ], delta );\n      updated = true;\n    }\n\n    this.state = newState;\n\n    return updated;\n  },\n\n  /**\n   * Computes the value at the given time. The only time when a value won't be\n   * returned is if the time is before the delay and the event doesn't have an\n   * initial state.\n   * \n   * @param  {Number} time\n   * @param  {any} out\n   * @return {any}\n   */\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay && !this.hasInitialState )\n    {\n      return false;\n    }\n\n    var delta = 0;\n\n    if ( time >= this.delay )\n    {\n      delta = Math.max( 1.0, ((time - this.delay) % (this.duration + this.sleep)) / this.duration );\n    }\n\n    return this.computeValue( out, delta );\n  },\n\n  /**\n   * [computeValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * [finish description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n  },\n\n  /**\n   * [applyValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[ this.attribute ] = value;\n    }\n\n    return value;\n  },\n\n  /**\n   * The total amount of time this animator will take. This may be an infinite number.\n   * \n   * @return {Number}\n   */\n\ttotalTime: function()\n\t{\n\t\treturn Math.min( this.stopTime, this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep) );\n\t},\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n\n  /**\n   * [isInfinite description]\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY) && (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return (this.state === anim8.EventState.FINISHED);\n  }\n\n});\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.override( anim8.Spring.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  set: function(attribute, calculator, rest, position, velocity, gravity, finishOnRest)\n  { \n    this.reset( attribute, null, null );\n\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = velocity;\n    this.finishOnRest = finishOnRest;\n  },\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n    this.finished = false;\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.ZERO );\n    this.velocity   = this.parseValue( animator, this.velocity, calc.ZERO );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity );\n  },\n\n  /**\n   * [parseValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isFunction( parsed ) && parsed.computed )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} elapsed\n   * @param {object} frame\n   */\n  update: function(elapsed, frame)\n  {\n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.clone( this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    else if ( this.finishOnRest && calc.isZero( this.velocity ) )\n    {\n      this.finished = true;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.resolve( this.rest );\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  },\n\n  /**\n   * Sets the final state of the animator to the frame if one exists.\n   * \n   * @param  {Object}\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return this.finished;\n  }\n\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * [LinearSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.LinearSpring.prototype = new anim8.Spring(), \n{\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.LinearSpring( this.attribute, this.calculator, this.position, this.rest, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.damping ) || \n           anim8.isComputed( this.stiffness );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['linear'] = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * [DistanceSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.DistanceSpring.prototype = new anim8.Spring(), \n{\n\n  /**\n   * [start description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.DistanceSpring( this.attribute, this.calculator, this.position, this.rest, this.distance, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['distance'] = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Animates a single attribute over any period of time.\n */\nanim8.Physics = function( attribute, parser, calculator, position, velocity, acceleration, terminal, stopTime )\n{\n  this.reset( attribute, parser, null );\n\n  this.calculator   = calculator;\n  this.position     = position;\n  this.velocity     = velocity;\n  this.acceleration = acceleration;\n  this.terminal     = anim8.number( terminal, Number.POSITIVE_INFINITY );\n  this.stopTime     = anim8.time( stopTime, Number.POSITIVE_INFINITY );\n  this.finished     = false;\n};\n\nanim8.override( anim8.Physics.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Prepares this attribute animator for animation on the given subject animator.\n   * This is called once in anim8.Animator.preupdate before the first time this\n   * animator is updated.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n    this.finished = false;\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator     = calc;\n    this.position       = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.initalPosition = calc.clone( this.position );\n    this.velocity       = this.parseValue( animator, this.velocity, calc.ZERO );\n    this.acceleration   = this.parseValue( animator, this.acceleration, calc.ZERO );\n    this.temp           = calc.create();\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.position ) || \n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.acceleration );\n  },\n\n  /**\n   * [parseValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isFunction( parsed ) && parsed.computed )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n\n  /**\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(elapsed, frame)\n  {\n    var value = this.valueAt( elapsed, true );\n\n    if ( value !== false )\n    {\n      frame[ this.attribute ] = this.position = value;\n\n      return true;\n    }\n\n    var calc = this.calculator;\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Physics.MAX_DT );\n    var vel = calc.copy( this.temp, this.resolveVelocity() );\n    var acc = this.resolveAcceleration();\n    var pos = this.position;\n\n    vel = calc.adds( vel, acc, dt );\n\n    if ( this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      vel = calc.clamp( vel, 0, this.terminal );\n    }\n\n    pos = calc.adds( pos, vel, dt );\n    \n    this.position = pos;\n\n    if ( !anim8.isFunction( this.velocity ) )\n    {\n      this.velocity = calc.copy( this.velocity, vel );\n    }\n\n    frame[ this.attribute ] = pos;\n\n    return true;\n  },\n\n  /**\n   * [resolveVelocity description]\n   * @return {[type]}\n   */\n  resolveVelocity: function()\n  {\n    return anim8.resolve( this.velocity );\n  },\n\n  /**\n   * [resolveAcceleration description]\n   * @return {[type]}\n   */\n  resolveAcceleration: function()\n  {\n    return anim8.resolve( this.acceleration );\n  },\n\n  /**\n   * Returns the value at the given time.\n   * \n   * @param  {Number} time\n   * @return {any}\n   */\n  valueAt: function(time, usePosition)\n  {\n    if ( anim8.isFunction( this.velocity ) || anim8.isFunction( this.acceleration ) || this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      return false;\n    }\n\n    time -= this.delay;\n    time *= 0.001;\n\n    var calc = this.calculator;\n    var value = usePosition ? calc.copy( this.position, this.initalPosition ) : calc.clone( this.initalPosition );\n    value = calc.adds( value, this.velocity, time );\n    value = calc.adds( value, this.acceleration, time * time );\n\n    return value;\n  },\n\n  /**\n   * Clones this animator.\n   * \n   * @return {anim8.AttributeAnimator}\n   */\n  clone: function()\n  {\n    return new anim8.Physics( this.attribute, this.parser, this.calculator, this.position, this.velocity, this.acceleration, this.terminal, this.stopTime );\n  },\n\n  /**\n   * Sets the final state of the animator to the frame if one exists.\n   * \n   * @param  {Object}\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return this.finished;\n  }\n\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Physics.MAX_DT = 0.1;","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n * @param [boolean] cache\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) )\n\t{\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationStrings = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationStrings.length; k++)\n    {\n      var split = anim8.trim( animationStrings[ k ].toLowerCase() ).split(' ');\n      var parsedAnimation = anim8.animation[ split[ 0 ] ];\n      var parsedOptions = anim8.options( split.slice( 1 ) );\n\n      if ( parsedAnimation )\n      {\n        if ( anim === false )\n        {\n          last = anim = parsedAnimation.extend( parsedOptions, true );\n        }\n        else\n        {\n          last = last.next = parsedAnimation.extend( parsedOptions, true );\n        }\n      }\n      else\n      {\n        throw parsedAnimation + ' is not a valid animation in \"' + animationStrings[ k ] + '\"';\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n    var attrimatorMap = new anim8.AttrimatorMap();\n\t\tvar options = anim8.options( options );\n    var helper = new anim8.ParserHelper( animation, options );\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, attrimatorMap, helper );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (attrimatorMap.size())\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, attrimatorMap );\n\t\t}\n    else\n    {\n      throw 'Failed to create any attrimators in anim8.animation';\n    }\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the attrimators that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate attrimators, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} attrimators\n */\nanim8.Animation = function(name, input, options, attrimators)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.attrimators = attrimators;\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an map of event instances from the attrimators in this animation.\n   *\n   * @return {anim8.AttrimatorMap}\n   */\n  newAttrimators: function()\n  {\n    return this.attrimators.clone();\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {object} options\n   * @param  {anim8.AttrimatorMap} attrimatorMap\n   * @return {[type]}\n   */\n  merge: function(options, attrimatorMap)\n  {\n    var helper = new anim8.ParserHelper( this.input, this.options, options );\n\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, attrimatorMap, helper );\n      }\n    }\n\n    return attrimatorMap;\n  },\n\n  /**\n   * Extends this animation and returns an animation modified with the given options. \n   *\n   * @param {object} options\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var attrimatorMap = this.newAttrimators();\n\n    this.merge( options, attrimatorMap );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, attrimatorMap );\n  }\n\n};","\n/**\n * Parses a value into a transition object. If the given input is a string it's\n * expected to be in a similar format to:\n *\n * [time] [easing[-easingType]] >[outro] <[intro] /[granularity]\n * \n * This is also a registry of transitions, you can add your own transitions that\n * can be used later with syntax like:\n *\n * anim8.transition['myTransition'] = anim8.transition('50ms 0.05 linear');\n *\n * So you can use 'myTransition' as the transition input.\n * \n * @param {object|string|array} options\n * @param {boolean} cache\n * @return {object}\n */\nanim8.transition = function(transition, cache) \n{\n  // 1. If it's a string, convert it into an array.\n  // 2. If it's an array, parse it and convert it into an object.\n  // 3. If it's an object, fill in any missing values with the defaults.\n\n  var originalInput = transition;\n\n  if ( anim8.isString( transition ) )\n  {\n    if ( transition in anim8.transition )\n    {\n      return anim8.transition[ transition ];\n    }\n\n    transition = transition.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( transition ) )\n  {\n    var transitionArray = transition;\n\n    transition = {};\n\n    for (var i = 0; i < transitionArray.length; i++)\n    {\n      var part = transitionArray[i];\n      var first = part.charAt( 0 );\n\n      // Introduction Time (into next event)\n      if ( first === '<' )\n      {\n        var intro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( intro ) )\n        {\n          transition.intro = intro;\n        }\n      }\n      // Outroduction Time (out of current event)\n      else if ( first === '>' )\n      {\n        var outro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( outro ) )\n        {\n          transition.outro = outro;\n        }\n      }\n      // Granularity (for smooth transitions)\n      else if ( first === '/' )\n      {\n        var granularity = anim8.number( part.substring(1), false );\n\n        if ( granularity !== false )\n        {\n          transition.granularity = granularity;\n        }\n      }\n      else\n      {\n        // Easing\n        var easing = anim8.easing( part, false );\n\n        if ( easing !== false )\n        {\n          transition.easing = easing;\n        }\n\n        // Time\n        var time = anim8.time( part, false );\n\n        if ( time !== false )\n        {\n          transition.time = time;\n        }\n      }\n    }\n  }\n\n  if ( anim8.isObject( transition ) )\n  {\n    transition.time        = anim8.time( transition.time, anim8.defaults.transitionTime );\n    transition.outro       = anim8.time( transition.outro, anim8.defaults.transitionOutro );\n    transition.intro       = anim8.time( transition.intro, anim8.defaults.transitionIntro );\n    transition.easing      = anim8.easing( anim8.coalesce( transition.easing, anim8.defaults.transitionEasing ) );\n    transition.granularity = anim8.number( transition.granularity, anim8.defaults.transitionGranularity );\n    \n    if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheTransitions ) )\n    {\n      anim8.transition[ originalInput ] = transition;\n    }\n\n    return transition;\n  }\n\n  return anim8.defaults.noTransition;\n};\n","\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n *\n * [duration] x[repeat] z[sleep] ~[delay] ![scale] [easing[-easingType]]\n *\n * This is also a registry of options, you can add your own options that\n * can be used later with syntax like:\n *\n * anim8.option['myOptions'] = anim8.option('1.5s x2 !2');\n *\n * So you can use 'myOptions' as the options input.\n * \n * @param {object|string|array} options\n * @param {boolean} cache\n * @return {object}\n */\nanim8.options = (function()\n{\n  function parseProperty(input, out, parseFunction, property, propertyAdd, propertyScale)\n  {\n    var first = input.charAt( 0 );\n\n    if ( first === '*' )\n    {\n      parsed = anim8.number( input.substring( 1 ), false );\n\n      if ( parsed !== false )\n      {\n        out[ propertyScale ] = parsed;\n      }\n    }\n    else\n    {\n      if ( first === '+' || first === '-' )\n      {\n        property = propertyAdd;\n        input = input.substring( 1 );\n      }\n\n      var parsed = parseFunction( input, false )\n\n      if ( parsed !== false )\n      {\n        out[ property ] = parsed;\n      }  \n    }\n\n    return parsed;\n  }\n\n  return function(options, cache)\n  {\n    var originalInput = options;\n\n    if ( anim8.isString( options ) )\n    {\n      if ( options in anim8.options )\n      {\n        return anim8.options[ options ];\n      }\n\n      options = options.toLowerCase().split(' ');\n    }\n\n    if ( anim8.isArray( options ) )\n    {\n      var parsed = {};\n\n      for (var i = 0; i < options.length; i++)\n      {\n        var part = options[i];\n        var first = part.charAt( 0 );\n\n        // Repeats\n        if ( first === 'x' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n        }\n        // Sleeping\n        else if ( first === 'z' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'sleep', 'sleepAdd', 'sleepScale' );\n        }\n        // Delay\n        else if ( first === '~' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'delay', 'delayAdd', 'delayScale' );\n        }\n        // Scaling\n        else if ( first === '!' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.number, 'scale', 'scaleAdd', 'scaleScale' );\n        }\n        else\n        {\n          // Easing?\n          var easing = anim8.easing( part, false );\n\n          if ( easing !== false )\n          {\n            parsed.easing = easing;\n          }\n\n          // Duration?\n          var duration = parseProperty( part, parsed, anim8.time, 'duration', 'durationAdd', 'durationScale' );\n\n          if ( duration === false )\n          {\n            // If not a duration, might be an alternative repeat? (doesn't start with x)\n            parseProperty( part, parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n          }\n        }\n      }\n\n      if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheOptions ) )\n      {\n        anim8.options[ originalInput ] = parsed;\n      }\n\n      return parsed; \n    }\n\n    if ( anim8.isObject( options ) )\n    {\n      return options;\n    }\n\n    return anim8.defaults.noOptions;\n  };\n\n})();","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(subject)\n\t{\n\t  this.subject = subject;\n    this.attrimators = new anim8.AttrimatorMap();\n    this.attrimatorsAdded = [];\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    this.cycleCurrent = 0;\n    this.cycleNext = 0;\n    this.cycleEnded = 0;\n    \n    return this;\n\t},\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are placed\n   * to group them together so we know when to apply their initial value.\n   * \n   * @return {this}\n   */\n  newCycle: function(attrimators)\n  {\n    this.cycleNext++;\n\n    if ( attrimators instanceof anim8.AttrimatorMap )\n    {\n      this.cycleNext = attrimators.applyCycle( this.cycleNext );\n    }\n    else if ( attrimators instanceof anim8.Attrimator )\n    {\n      attrimators.cycle = this.cycleNext;\n    }\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all events & springs with the same cycle\n   * identifier and applying their initial state.\n   * \n   * @return {this}\n   */\n  applyCurrentCycle: function()\n  {\n    var cycle = this.cycleCurrent;\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      if ( attrimator.cycle === cycle )\n      {\n        this.updated[ attr ] = (attrimator.startCycle( this.frame ) !== false) || this.updated[ attr ];\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * [endCurrentCycle description]\n   * @return {[type]}\n   */\n  endCurrentCycle: function()\n  {\n    if ( this.cycleCurrent > this.cycleEnded )\n    {\n      this.cycleEnded = this.cycleCurrent;\n      this.trigger( 'cycleEnd:' + this.cycleCurrent, this.cycleCurrent ); \n    }\n  },\n\n  /**\n   * Returns the attribute descriptor\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  { \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function(now)\n  {\n    // If there are attribute placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the attribute.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      for (var i = 0; i < aa.length; i++)\n      {\n        var attrimator = aa[ i ];\n\n        this.setDefault( attrimator.attribute );\n\n        attrimator.start( now, this );     \n      }\n\n      aa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this Animator if there's no value there.\n   * \n   * @param {[type]}\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    this.finished = true;\n\n    var attrimators = this.attrimators.values;\n    var minCycle = this.cycleNext;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      this.updated[ attr ] = attrimator.setTime( now, this.frame );\n\n      this.finished = this.finished && attrimator.isFinished();\n\n      minCycle = Math.min( minCycle, attrimator.cycle );\n    }\n\n    if ( this.cycleCurrent < minCycle )\n    {\n      while ( this.cycleCurrent < minCycle )\n      {\n        this.endCurrentCycle();\n        this.cycleCurrent++;\n      }\n      \n      this.cycleCurrent = minCycle;\n      this.applyCurrentCycle();\n      this.trigger( 'cycleStart:' + this.cycleCurrent, this.cycleCurrent );\n    }\n\n    if ( !this.wasFinished && this.finished )\n    {\n      this.endCurrentCycle();\n    }\n\n    this.trigger('update');\n    \n    return this;\n  },\n\n  /**\n   * Places the attribute animator in this animator replacing any existing animator\n   * for the same attribute. The next time the animator is updated the attribute\n   * animator will be started.\n   * \n   * @param  {anim8.Attrimator}\n   */\n  placeAttrimator: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n\n    this.attrimators.put( attr, attrimator );\n    this.attrimatorsAdded.push( attrimator );\n\n    this.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimAttrimators();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimAttrimators: function()\n  {\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( attrimator.isFinished() )\n      {\n        if ( attrimator.next )\n        {\n          this.placeAttrimator( attrimator.next );\n        }\n        else\n        {\n          this.attrimators.removeAt( i );\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there already.\n   * \n   * @return {[type]}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createAttrimators: function(animation, options, cache)\n  {\n    var options = anim8.options( options );    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var attrimators = animation.newAttrimators();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, attrimators );\n    }\n    \n    this.onAnimation( animation, options, attrimators );\n\n    while ( animation.next !== null )\n    {\n      animation = animation.next;\n\n      var queueAttrimators = animation.newAttrimators();\n\n      this.onAnimation( animation, options, queueAttrimators );\n\n      attrimators.queueMap( queueAttrimators );\n    }\n\n    return attrimators;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  onAnimation: function(animation, options, attrimatorMap)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.newCycle( spring );\n    this.placeAttrimator( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Existing events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   * @param [boolean] cache\n   */\n\tplay: function(animation, options, all, cache)\n\t{\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n    \n    this.newCycle( attrimatorMap );\n    this.playAttrimators( attrimatorMap, all );\n\n    return this.activate();\n\t},\n\n  /**\n   * Adds events to this Animator to be played (optionally finishing events for attributes not specified in the given \n   * attribute). Existing events will be replaced immediately. This method will not activate the Animator, that has\n   * to be done manually.\n   * \n   * @param  {anim8.AttributeMap} animatorMap\n   * @param  [boolean] all\n   * @return {this}\n   */\n  playAttrimators: function(attrimatorMap, all)\n  {\n    if ( all )\n    {\n      var attrimators = this.attrimators.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n\n        if ( !attrimatorMap.has( attrimator.attribute ) )\n        {\n          attrimator.finish( this.frame );\n        }\n      }\n    }\n\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      this.placeAttrimator( attrimators[i] );\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options, cache)\n\t{\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n        \n    this.newCycle( attrimatorMap );\n    this.queueAttrimators( attrimatorMap );\n\n    return this.activate();\n\t},\n\n  /**\n   * Queues an array of events on this Animator. The given events will be delayed to start at the same time - at the\n   * end of the events currently on the Animator. This method will not activate the Animator, that has to be done \n   * manually.\n   * \n   * @param  {array} events\n   * @return {this}\n   */\n  queueAttrimators: function(attrimatorMap)\n  {\n    this.attrimators.queueMap( attrimatorMap, this.placeAttrimator, this );\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {string|array|object} transition\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   * @param [Boolean] cache\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n\n    this.newCycle( attrimatorMap );\n    this.transitionAttrimators( transition, attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation. This method will not activate the \n   * Animator, that has to be done manually.\n   *\n   * @param {object} transition\n   * @param {anim8.AttrimatorMap} events\n   * @param [boolean] all\n   */\n  transitionAttrimators: function(transition, attrimatorMap, all)\n  {\n    // If intro & outro are 0, use Tween\n    // If intro is 0, use Quadratic Path between current value, outro point, and first point on new path.\n    // If outro is 0, use Quadratic Path between current value, first point on new path, and intro point.\n    // If intro & outro are not 0, use Cubic Path between current value, outro point, first point on new path, and intro point.\n    // If granularity is given > 1 then compile the path, compute intro & outro velocities, and compute deltas for new \n    //    compiled path based on interpolated velocity over the path (knowing it's length and transition time)\n    \n    var current = this.attrimators;\n    var attrimators = attrimatorMap.values;\n\n    // Only transition if we need to\n    if ( current.hasOverlap( attrimatorMap ) )\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var a1 = attrimators[ i ];\n        var attr = a1.attribute;\n\n        if ( current.has( attr ) )\n        {\n          var attribute = this.getAttribute( attr );\n          var a2 = current.get( attr );\n        \n          var p0 = attribute.calculator.clone( this.frame[attr] );\n          var p1 = a2.getFuture( transition.outroDelta );\n          var p2 = a1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, attribute.calculator, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transition.time, transition.easing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = a1;\n\n          this.placeAttrimator( transitionEvent );\n        }\n        else\n        {\n          a1.delay += transition.time;\n     \n          this.placeAttrimator( a1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        this.placeAttrimator( attrimators[ i ] );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   * /\n  transitionInto: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.transitionIntoEvents( transition, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation. This method will not activate the Animator, that has to be done \n   * manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {array} events\n   * @param [boolean] all\n   * /\n  transitionIntoEvents: function(transition, events, all)\n  {\n    // Check if we even need to transition\n    var transitionRequired = false;\n    \n    for (var i = 0; i < events.length && !transitionRequired; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transitionRequired = true;\n      }\n    }\n    \n    // Only transition if we need to\n    if ( transitionRequired )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transition.outroDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transition.introDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transition.time, transition.easing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transition.time;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n      \n    return this;\n  },\n  /**/\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {string} attr\n   * @param {any} target\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenTo: function(attr, target, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attribute to target values.\n   *\n   * @param {object} targets\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenManyTo: function(targets, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {string} attr\n   * @param {any} starts\n   * @param {any} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tween: function(attr, starts, ends, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {object} starts\n   * @param {object} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenMany: function(starts, ends, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n    \n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n      \n      request[ attr ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n      \n      return attribute.defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number|string] duration\n   * @param [number|string] delay\n   * @param [function|string] easing\n   * @param [number|string] repeat\n   * @param [number|string] sleep  \n   * @param [number] scale\n   */\n  follow: function(attribute, path, options)\n  {\n    var options = anim8.options( options );\n    var path = anim8.path( path );\n    \n    var event = new anim8.Event( \n      attribute, \n      path, \n      options.duration,\n      options.easing,\n      options.delay, \n      options.sleep,\n      options.repeat,\n      options.scale,\n      options.scaleBase\n    );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  attrimatorsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n   \n    var attrimatorMap = this.attrimators; \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        var attrimator = attrimatorMap.get( attr );\n        \n        if ( attrimator )\n        {\n          if ( resulting )\n          {\n            results.push( attrimator );\n          }\n          else\n          {\n            callback.call( this, attrimator, attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      var attrimators = attrimatorMap.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n\n        if ( resulting )\n        {\n          results.push( attrimator );\n        }\n        else\n        {\n          callback.call( this, attrimator, attrimator.attribute );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator, attr) \n\t\t{\n      this.attrimators.remove( attr );\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator) \n\t\t{\n\t\t\twhile (attrimator.next)\n\t\t\t{\n\t\t\t\tattrimator = attrimator.next;\n\t\t\t}\n\t\t\t\n\t\t\tattrimator.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attribtues. Unsetting involves removing all events,\n   * springs, and the current value in the frame.\n   * \n   * @param  {string|array|object}\n   * @return {this}\n   */\n  unset: function(attributes)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      this.attrimators.remove( attributes );\n      delete this.frame[ attributes ];\n    }\n    else if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        this.unset( attributes[ i ] );\n      }\n    }\n    else if ( anim8.isObject( attributes ) )\n    {\n      for (var attr in attributes)\n      {\n        this.unset( attr );\n      }\n    }\n\n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns the amount of finite time remaining before the animator is done\n   * animating. Attrimators that don't have a known end time aren't included.\n   */\n  timeRemaining: function()\n  {\n    return this.attrimators.timeRemaining();\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasAttrimators: function()\n  {\n    return this.attrimators.size() > 0;\n  },\n  \n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator if none is given. This is particularly\n   * useful for having a function be called on deferred statements.\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  invoke: function(func, context, args)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, args || [] );\n    }\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n   * @param [function] callback\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t},\n\n  /**\n   * [onStart description]\n   * @param  {Function}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  onCycleStart: function(callback, context)\n  {\n    this.once( 'cycleStart:' + this.cycleNext, callback, context );\n  },\n\n  /**\n   * [onEnd description]\n   * @param  {Function}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  onCycleEnd: function(callback, context)\n  {\n    this.once( 'cycleEnd:' + this.cycleNext, callback, context );\n  }\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'restore', 'placeAttrimator', 'preupdate', 'update', 'apply', 'trimAttrimators',\n  'activate', 'deactivate', 'destroy', 'spring', 'play', 'playAttrimators', 'queue',\n  'queueAttrimators', 'transition', 'transitionAttrimators', 'tween', 'tweenTo', \n  'tweenMany', 'tweenManyTo', 'follow', 'stop', 'end', 'finish', 'pause', 'resume',\n  'set', 'unset', 'get', 'invoke'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.override( anim8s.fn = anim8.Animators.prototype = new Array(),\n{\n  /**\n   * Invokes a callback for each element in the array.\n   * \n   * @param {function} iterator\n   */\n  each: function(iterator, context) \n  {\n    for (var i = 0; i < this.length; i++) \n    {\n      if ( iterator.call( context || this[i], this[i], i ) === false ) \n      {\n        break;\n      }\n    }\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @param {array} animators\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n   *\n   * @param {function} filterer\n   */\n  filter: function(filterer)\n  {\t\n  \tvar alive = 0;\n  \t\n  \tfor (var i = 0; i < this.length; i++)\n  \t{\n  \t\tvar remove = filterer( this[i] );\n  \t\t\n  \t\tif ( !remove )\n  \t\t{\n  \t\t\tthis[alive++] = this[i];\n  \t\t}\n  \t}\n  \t\n  \tthis.length = alive;\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubjects: function(wrapper)\n  {\n    var subjects = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      subjects.push( this[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   */\n  first: function()\n  {\n    return this[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   */\n  reverse: function()\n  {\n    var last = this.length - 1;\n    var mid = Math.floor( this.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = this[ i ];\n      var e1 = this[ last - i ];\n\n      this[ i ] = e1;\n      this[ last - i ] = e0;\n    }\n\n    return this;\n  },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   * \n   * @return {this}\n   */\n  activate: function()\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var animator = this[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function()\n  {\n    var maxRemaining = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      maxRemaining = Math.max( maxRemaining, this[ i ].timeRemaining() );\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Adds the following methods to make an array of Animators appear like a single Animator.\n   */\n  restore               : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n  placeAttrimator       : anim8.delegate( 'placeAttrimator', anim8.delegate.RETURN_THIS ),\n  preupdate             : anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS ),\n  update                : anim8.delegate( 'update', anim8.delegate.RETURN_THIS ),\n  apply                 : anim8.delegate( 'apply', anim8.delegate.RETURN_THIS ),\n  trimAttrimators       : anim8.delegate( 'trimAttrimators', anim8.delegate.RETURN_THIS ),\n  activate              : anim8.delegate( 'activate', anim8.delegate.RETURN_THIS ),\n  deactivate            : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n  destroy               : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n  spring                : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n  play                  : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n  playAttrimators       : anim8.delegate( 'playAttrimators', anim8.delegate.RETURN_THIS ),\n  queue                 : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n  queueAttrimators      : anim8.delegate( 'queueAttrimators', anim8.delegate.RETURN_THIS ),\n  transition            : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n  transitionAttrimators : anim8.delegate( 'transitionAttrimators', anim8.delegate.RETURN_THIS ),\n  tween                 : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n  tweenTo               : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n  tweenMany             : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n  tweenManyTo           : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n  follow                : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n  attrimatorsFor        : anim8.delegate( 'attrimatorsFor', anim8.delegate.RETURN_RESULTS ),\n  stop                  : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n  end                   : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n  finish                : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n  pause \t\t\t          : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n  resume \t\t\t          : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n  set                   : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n  unset                 : anim8.delegate( 'unset', anim8.delegate.RETURN_THIS ),\n  get                   : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n  hasAttrimators        : anim8.delegate( 'hasAttrimators', anim8.delegate.RETURN_TRUE ),\n  invoke                : anim8.delegate( 'invoke', anim8.delegate.RETURN_THIS ),\n  on\t\t\t              : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n  once\t\t              : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n  off\t\t\t              : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n  trigger               : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n});\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate( now );\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * [Sequence description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * [maxDelay description]\n   * @return {[type]}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  /**\n   * [createEvents description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  createAttrimators: function(animation, options, i)\n  {\n    var attrimatorMap = animation.newAttrimators();\n    var attrimators = attrimatorMap.values;\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = attrimators.length - 1; k >= 0; k--)\n    {\n      attrimators[ k ].delay += delayOffset;\n    }\n\n    animation.merge( options, attrimatorMap );\n    \n    return attrimatorMap;\n  },\n\n  /**\n   * [reverse description]\n   * @return {[type]}\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * [play description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  play: function(animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( anim, options, i );\n      animator.newCycle( attrimators );\n      animator.playAttrimators( attrimators, all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(animation, options, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var attrimatorMap = sequence.createAttrimators( anim, options, i );\n      var attrimators = attrimatorMap.values;\n\n      for (var k = attrimators.length - 1; k >= 0; k--)\n      {\n        attrimators[ k ].delay += delayOffset;\n      }\n      \n      animator.newCycle( attrimatorMap );\n      animator.queueAttrimators( attrimatorMap );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transition description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( anim, options, i );\n      animator.newCycle( attrimators );\n      animator.transitionAttrimators( transition, attrimators, all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [add description]\n   */\n  add: function()\n  {\n    this.animators.activate();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimatorMap to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  { \n    var factory = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[ i ];\n      var attr = e.attribute;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = helper.mergeEasing( attr, e.easing );\n      e.repeat    = helper.mergeRepeat( attr, e.repeat );\n      e.delay     = helper.mergeDelay( attr, e.delay );\n      e.sleep     = helper.mergeSleep( attr, e.sleep );\n      e.duration  = helper.mergeDuration( attr, e.duration );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n    }\n  }\n};\n\n\n/**\n * [ParserHelper description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.ParserHelper = function( input, oldOptions, newOptions )\n{\n  this.input = input;\n  this.oldOptions = oldOptions || {};\n  this.newOptions = newOptions || {};\n\n  this.prepareSpecifics( 'easings' );\n  this.prepareSpecifics( 'repeats' );\n  this.prepareSpecifics( 'delays' );\n  this.prepareSpecifics( 'sleeps' );\n  this.prepareSpecifics( 'durations' );\n  this.prepareSpecifics( 'scales' );\n  this.prepareSpecifics( 'scaleBases' );\n};\n\nanim8.ParserHelper.prototype = \n{\n\n  /**\n   * [prepareSpecifics description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  prepareSpecifics: function(specifics)\n  {\n    if ( !anim8.isObject( this.input[ specifics ] ) )\n    {\n      this.input[ specifics ] = {};\n    }\n  },\n\n  /* PARSING */\n\n  /**\n   * [parseEasing description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseEasing: function(attr)\n  {\n    return this.parseFirst( attr, 'easing', 'easings' );\n  },\n\n  /**\n   * [parseRepeat description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseRepeat: function(attr)\n  {\n    return this.parseNumber( attr, anim8.repeat, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * [parseDelay description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseDelay: function(attr)\n  {\n    return this.parseNumber( attr, anim8.delay, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * [parseSleep description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseSleep: function(attr)\n  {\n    return this.parseNumber( attr, anim8.sleep, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'sleeps' );\n  },\n\n  /**\n   * [parseDuration description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseDuration: function(attr)\n  {\n    return this.parseNumber( attr, anim8.duration, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * [parseScale description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseScale: function(attr)\n  {\n    return this.parseNumber( attr, anim8.scale, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * [parseScaleBase description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseScaleBase: function(attr)\n  {\n    return this.parseFirst( attr, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * [parseFirst description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseFirst: function(attr, option, specifics)\n  {\n    return anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n  },\n\n  /**\n   * [parseEvent description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {Boolean}\n   * @return {[type]}\n   */\n  parseEvent: function(attr, path, parser, hasInitialState)\n  {\n    var duration   = this.parseDuration( attr );\n    var easing     = this.parseEasing( attr );\n    var delay      = this.parseDelay( attr );\n    var sleep      = this.parseSleep( attr );\n    var repeat     = this.parseRepeat( attr );\n    var scale      = this.parseScale( attr );\n    var scaleBase  = this.parseScaleBase( attr );\n    var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser );\n\n    return event;\n  },\n\n  /**\n   * [parseNumber description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseNumber: function(attr, parseFunction, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n    var base = parseFunction( baseRaw );\n    var add = parseOptionFunction( this.oldOptions[ optionAdd ], 0 );\n    var scale = anim8.coalesce( this.oldOptions[ optionScale ], 1 );\n\n    return (add === 0 && scale === 1) ? baseRaw : (base + add) * scale;\n  },\n\n  /* MERGING */\n\n  /**\n   * [mergeEasing description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeEasing: function(attr, current)\n  {\n    return this.mergeFirst( attr, current, anim8.easing, 'easing', 'easings' );\n  },\n\n  /**\n   * [mergeRepeat description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeRepeat: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * [mergeDelay description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeDelay: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * [mergeSleep description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeSleep: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'scales' );\n  },\n\n  /**\n   * [mergeDuration description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeDuration: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * [mergeScale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeScale: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * [mergeScaleBase description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeScaleBase: function(attr, current, factory)\n  {\n    var calc = factory.attribute( attr ).calculator;\n    var parseFunction = function(value, defaultValue) {\n      return calc.parse( value, defaultValue );\n    };\n\n    return this.mergeFirst( attr, current, parseFunction, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * [mergeFirst description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeFirst: function(attr, current, parseOptionFunction, option, specifics)\n  {\n    return parseOptionFunction( anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] ), current );\n  },\n\n  /**\n   * [mergeNumber description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeNumber: function(attr, current, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] );\n    var base = parseOptionFunction( baseRaw, current );\n    var add = parseOptionFunction( anim8.coalesce( this.newOptions[ optionAdd ], this.oldOptions[ optionAdd ] ), 0 );\n    var scale = anim8.coalesce( this.newOptions[ optionScale ], this.oldOptions[ optionScale ], 1 );\n\n    return (base + add) * scale;\n  }\n\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar deltas = animation.deltas;\n  \tvar values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      var valueCount = 0;\n      \n  \t\tfor (var attr in values)\n  \t\t{\n        valueCount++; \n      }\n      \n      deltas = [];\n      \n      for (var i = 0; i < valueCount; i++)\n      {\n        deltas[i] = i / (valueCount - 1);\n      }\n    }\n  \tif ( anim8.isArray( deltas ) )\n  \t{\n  \t\tvar deltaObject = {};\n  \t\t\n  \t\tfor (var attr in values)\n  \t\t{\n  \t\t\tdeltaObject[attr] = deltas;\t\n  \t\t}\n  \t\t\n  \t\tdeltas = deltaObject;\n  \t}\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[ attr ];\n      var attribute = factory.attribute( attr );\n  \t\t\n  \t\tfor (var k = 0; k < value.length; k++)\n  \t\t{\n  \t\t\tvalue[k] = attribute.parse( value[k] );\n  \t\t}\n\n      var path      = new anim8.DeltaPath( attr, attribute.calculator, values[ attr ], deltas[ attr ] );\n      var event     = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n  \n});\n\n/**\n * Register the parser.\n */\nanim8.parser['values'] = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar values = animation.final;\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] );\n      var delay      = anim8.delay( helper.parseDelay( attr ) );\n      var duration   = anim8.duration( helper.parseDuration( attr ) );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, scale, scaleBase, false, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var factory = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n      var attr = e.attribute;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.delay     = helper.mergeDelay( attr, e.delay ) + helper.mergeDuration( attr, e.duration );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory ); \n    }\n  }\n\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['final'] = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays\n    \n    var factory    = anim8.factory( animation.factory );\n  \tvar values     = animation.initial;\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = helper.parseDelay( attr );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n      var attr = e.attribute;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      e.delay     = helper.mergeDelay( attr, e.delay );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n    }\n  }\n  \n});\n\n/**\n * Register the parser.\n */\nanim8.parser['initial'] = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    var easings = animation.easings || {};\n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) \n      {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n  \t\t\t\n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n  \t\n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = helper.parseDuration( attr );\n      var delay     = helper.parseDelay( attr );\n      var sleep     = helper.parseSleep( attr );\n      var repeat    = helper.parseRepeat( attr );\n      var scale     = helper.parseScale( attr );\n      var scaleBase = helper.parseScaleBase( attr );\n      var path      = new anim8.KeyframePath( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser['keyframe'] = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTweenTo = function()\n{\n  \n};\n\n// ParserTweenTo extends anim8.Parser()\nanim8.override( anim8.ParserTweenTo.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n\n  \tfor (var attr in tweenTo)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, value );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenTo'] = new anim8.ParserTweenTo();\n","\n/**\n * Instantiates a new parser for the 'tweenFrom' animation type.\n */\nanim8.ParserTweenFrom = function()\n{\n  \n};\n\n// ParserTweenFrom extends anim8.Parser()\nanim8.override( anim8.ParserTweenFrom.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenFrom  = animation.tweenFrom;\n\n  \tfor (var attr in tweenFrom)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenFrom[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, value, anim8.computed.current );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenFrom'] = new anim8.ParserTweenFrom();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParserMove = function()\n{\n  \n};\n\n// ParserMove extends anim8.Parser()\nanim8.override( anim8.ParserMove.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var move       = animation.move;\n\n  \tfor (var attr in move)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, anim8.computed.relative( value ) );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['move'] = new anim8.ParserMove();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParseSpring = function()\n{\n  \n};\n\n// ParseSpring extends anim8.Parser()\nanim8.override( anim8.ParseSpring.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var springs    = animation.springs;\n\n  \tfor (var attr in springs)\n  \t{\n      var spring     = springs[ attr ];\n\n      if ( !anim8.isDefined( spring.attribute ) )\n      {\n        spring.attribute = attr;\n      }\n\n      var parsed = anim8.spring( spring );\n      \n      if ( parsed !== false )\n      {\n        parsed.parser = this;\n\n        attrimatorMap.put( attr, parsed );  \n      }\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['springs'] = new anim8.ParseSpring();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParsePhysics = function()\n{\n  \n};\n\n// ParsePhysics extends anim8.Parser()\nanim8.override( anim8.ParsePhysics.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var physics    = animation.physics;\n\n  \tfor (var attr in physics)\n  \t{\n      var physic    = physics[ attr ];\n\n      var attrimator = new anim8.Physics(\n        attr, \n        this, \n        physic.calculator, \n        anim8.coalesce( physic.position, true ), \n        physic.velocity, \n        physic.acceleration, \n        physic.terminal,\n        physic.stopAt\n      );\n\n      attrimatorMap.put( attr, attrimator );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['physics'] = new anim8.ParsePhysics();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParserTravel = function()\n{\n  \n};\n\n// ParserTravel extends anim8.Parser()\nanim8.override( anim8.ParserTravel.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var travel     = animation.travel;\n\n    /**\n     * The computed function which returns a function which returns a value pointing\n     * to a given target given the current position of the animator.\n     * \n     * @param  {Number}\n     * @param  {any}\n     * @param  {Number}\n     * @return {Function}\n     */\n    var pointing = function(amount, target, epsilon, subtractVelocity)\n    {\n      var pointingFunction = function(attrimator, animator)\n      {\n        var attribute = animator.getAttribute( attrimator.attribute );\n        var calc = attribute.calculator;\n        var targetValue = anim8.isComputed( target ) ? target( attrimator, animator ) : target;\n        var temp = calc.create();\n\n        return function()\n        {\n          var position   = attrimator.position;\n          var current    = calc.copy( temp, anim8.resolve( targetValue ) );\n          var difference = calc.sub( current, position );\n          var distance   = calc.distance( difference, calc.ZERO );\n\n          if ( distance < epsilon )\n          {\n            attrimator.stopIn( 0 );\n          }\n          else\n          {\n            difference = calc.scale( difference, amount / distance );\n          }\n          \n          if ( subtractVelocity )\n          {\n            difference = calc.sub( difference, attrimator.resolveVelocity() );\n          }\n\n          return difference;\n        };\n      };\n\n      pointingFunction.computed = true;\n\n      return pointingFunction;\n    };\n\n  \tfor (var attr in travel)\n  \t{\n      var traveling     = travel[ attr ];\n      var attribute     = factory.attribute( attr );\n      var from          = attribute.parse( anim8.coalesce( traveling.from, true ) );\n      var to            = attribute.parse( anim8.coalesce( traveling.to, true ) );\n      var velocity      = anim8.number( traveling.velocity, 0 );\n      var acceleration  = anim8.number( traveling.acceleration, 0 );\n      var terminal      = anim8.number( anim8.coalesce( traveling.terminal, traveling.velocity ), Number.POSITIVE_INFINITY );\n      var epsilon       = anim8.number( traveling.epsilon, 0.001 );\n\n      if ( acceleration !== 0 )\n      {\n        acceleration = pointing( acceleration, to, epsilon, true );\n      }\n\n      if ( velocity !== 0 )\n      {\n        velocity = pointing( velocity, to, epsilon, false );\n      }\n\n      var traveler = new anim8.Physics(\n        attr,\n        this,\n        attribute.calculator,\n        from,\n        velocity,\n        acceleration,\n        terminal\n      );\n      \n      attrimatorMap.put( attr, traveler );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['travel'] = new anim8.ParserTravel();\n","\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n * \n * @param  [string|anim8.Factory]\n * @return {anim8.Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory.default;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n  this.priority = 0;\n  this.attributes = {};\n};\n\nanim8.override( anim8.ObjectFactory.prototype = new anim8.Factory(),\n{\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;\n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory['default'] = anim8.factory['object'] = new anim8.ObjectFactory();\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute['default']                 = {defaultValue: 0};\n","\n/**\n * A factory for HTML Elements\n */\nanim8.DomFactory = function()\n{\n  this.cached = {};\n  this.ids = 0;\n  this.elementAttribute = 'anim8';\n  this.priority = 5;\n  this.attributes = {};\n};\n\nanim8.override( anim8.DomFactory.prototype = new anim8.Factory(),\n{\n  \n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isElement( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animatorId = subject.getAttribute( this.elementAttribute );\n    \n    if (!(animatorId in this.cached)) \n    {\n      var animator = new anim8.DomAnimator( subject );\n      \n      subject.setAttribute( this.elementAttribute, animatorId = animator.id = ++this.ids );\n      \n      animator.factory = this;\n      \n      this.cached[animatorId] = animator;\n    }\n\n    return this.cached[ animatorId ];\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete this.cached[ animator.id ];\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.dom.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n      var propertyName = anim8.coalesce( attribute.property, attr );\n      var property = anim8.dom.property( propertyName );\n      var defaultUnit = attribute.defaultUnit || '';\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.propertyName = propertyName;\n      attribute.property = property;\n      attribute.defaultUnit = defaultUnit;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the DOM factory.\n */\nanim8.factory['default'] = anim8.factory['dom'] = new anim8.DomFactory();\n\n/* TODO don't apply styles if they're impercivable (convert value to pixels of applicable) */\n\n/**\n * All DOM related\n */\nanim8.dom = {};\n\n/* \n  anim8.dom.property[name] = {\n    get: function(e, anim) {\n      // based on anim.animating, gets one or more value from the entity and places it on anim.frame. this function should only do this for an attribute if\n      // anim.animating[attribute] === false. When it successfully gets a value anim.animating[attribute] should be set to true. This is called before an animation\n      // begins on attributes that will be animated based on the current value. \n    },\n    set: function(e, anim) {\n      // applies the applicable attributes in anim.frame to the entity, \n    }\n }\n*/\nanim8.dom.property = function(prop) \n{\n  if ( anim8.isObject( prop ) && anim8.isFunction( prop.get ) && anim8.isFunction( prop.set ) ) \n  {\n    return prop;\n  }\n  if ( anim8.isString( prop ) && prop in anim8.dom.property )\n  {\n\t  return anim8.dom.property[ prop ];\n  }\n\t\n  throw prop + ' is not a valid property';\n}\n\n/**\n * Computes the desired style of the given element and returns it as a string. The style\n * given must be in hyphenated format like so: anim8.dom.style( element, 'font-size' ) = '12px'\n */\nanim8.dom.style = (function()\n{\n  var hyphenated = {};\n\n  var hyphenize = function(str) \n\t{\n    if ( str in hyphenated )\n    {\n      return hyphenated[ str ];\n    }\n\n    var key = str;\n\n    str = str.replace(/[a-z][A-Z]/g, function(str, letter)\n    {\n     return str[0] + '-' + str[1].toLowerCase();\n    });\n    \n    str = str.replace(/^Webkit/, '-webkit');\n    str = str.replace(/^Moz/, '-moz');\n    str = str.replace(/^Ms/, '-ms');\n    str = str.replace(/^O/, '-o');\n    str = str.replace(/^Khtml/, '-khtml');\n    \n    return hyphenated[ key ] = str;\n  };\n\t\n\treturn function(e, style) \n\t{\n\t  if (e.currentStyle)\n\t\t{\n\t    return e.currentStyle[ style ];\n\t  } \n\t\telse if (document.defaultView && document.defaultView.getComputedStyle) \n\t\t{\n\t    return document.defaultView.getComputedStyle( e, null ).getPropertyValue( hyphenize( style ) );\n\t  } \n\t\telse \n\t\t{\n\t    return e.style[ style ]; \n\t  }\n\t};\n\t\n})();\n\n/**\n * Given an array of styles this will return the first one that is present on elements in the current browser.\n */\nanim8.dom.prefix = (function() \n{\n  var a = document.createElement('a');\n  \n  return function(prefixes) \n  {\n    for (var i = 0; i < prefixes.length; i++) \n    {\n      if ( anim8.isDefined( a.style[ prefixes[ i ] ] ) ) \n      {\n        return prefixes[i];\n      }\n    }\n    return false;\n  };\n  \n})();\n\n/**\n * Parses the string for a value and a unit.\n *\n * @param {string} value\n */\nanim8.dom.parseValue = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(px|em|%|vw|ex|cm|mm|in|pt|pc|deg|rad)?/;\n  \n  return function(x)\n  {\n    var parsed = regex.exec( x );\n    \n    if (parsed) \n    {      \n      return {\n        value: parseFloat( parsed[1] ),\n        unit: parsed[3]\n      }\n    }\n    \n    return false;\n  };\n})();\n\n\n/**\n * Converts one unit to another for a given element.\n *\n * For Example: anim8.dom.convert( element, '100px', '%', 'parentWidth' )\n *    returns how much percent 100px relativeTo parentWidth of the given element\n *\n * @param {HTMLElement} e\n * @param {string} from\n * @param {string} toUnit\n * @param {string} relativeTo\n */\nanim8.dom.convert = (function()\n{\n  /**\n   * Calculators how many pixels a given value & unit is.\n   * \n   * For Example: anim8.toPixels( 100, 'in' ) \n   *    returns how many pixels are in 1 inch, with up to 2 decimal points of accuracy.\n   */\n  var toPixels = function(baseValue, baseUnit, defaultRate)\n  {\n    if ( document.body )\n    {\n      var div = document.createElement('div');\n      document.body.appendChild( div );\n      div.style.width = baseValue + baseUnit;\n      var pixels = (div.offsetWidth / baseValue);\n      document.body.removeChild( div );\n      return pixels || defaultRate;\n    }\n    \n    return defaultRate;\n  };\n\n  var getFontSize = function(e, notUnit)\n  {\n    var fontSize = anim8.dom.style( e, 'fontSize' );\n    var parsed = anim8.dom.parseValue( fontSize );\n    \n    if ( !parsed || parsed.unit === notUnit )\n    {\n      return 12;\n    }\n    \n    if ( parsed.unit === 'px' ) \n    {\n      return parsed.value;\n    }\n    \n    return getConverterScale( e, conversions[ parsed.unit ].px, relativeTo );\n  };\n\n  var variables = {};\n  \n  variables.parentWidth = function(e)\n  {\n    return e.parentNode.scrollWidth;\n  };\n  variables.parentHeight = function(e)\n  {\n    return e.parentNode.scrollHeight;\n  };\n  variables.width = function(e)\n  {\n    return e.offsetWidth;\n  };\n  variables.height = function(e)\n  {\n    return e.offsetHeight;\n  };\n  variables.fontSize = function(e)\n  {\n    return getFontSize( e, '%' );\n  };\n  variables.parentFontSize = function(e)\n  {\n    return getFontSize( e.parentNode, '%' );\n  };\n  variables.htmlFontSize = function(e)\n  {\n    var htmlElement = document.getElementsByTagName(\"html\")[0];\n    \n    return getFontSize( htmlElement, '%' );\n  };\n  \n  var conversions = {};\n  \n  conversions.pt  = { px: toPixels(100, 'pt') };\n  conversions.in  = { px: toPixels(100, 'in') };\n  conversions.cm  = { px: toPixels(1000, 'cm') };\n  conversions.mm  = { px: toPixels(100000, 'mm') };\n  conversions.vw  = { px: toPixels(1000, 'vw') };\n  conversions.deg = { rad: Math.PI / 180.0};\n\n  conversions.em = \n  {\n    px: function(e, relativeTo) \n    {\n      return getFontSize( e, 'em' );\n    }\n  };\n  \n  conversions.rem = \n  {\n    px: function(e, relativeTo) \n    {\n      var htmlElement = document.getElementsByTagName(\"html\")[0];\n      \n      return getFontSize( htmlElement, 'rem' );\n    }\n  };\n  \n  conversions['%'] = \n  {\n    px: function(e, relativeTo) \n    {\n      if ( anim8.isNumber( relativeTo ) )\n      {\n        return relativeTo;\n      }\n      if ( relativeTo in variables )\n      {\n        return variables[ relativeTo ]( e ) / 100.0;\n      }\n      \n      return 1.0;\n    }\n  };\n  \n  // Populate conversions going other way.\n  for (var unit in conversions)\n  {\n    for (var to in conversions[ unit ])\n    {\n      if ( !(to in conversions) )\n      {\n        conversions[ to ] = {};\n      }\n      \n      if ( !(unit in conversions[ to ]) )\n      {\n        var given = conversions[ unit ][ to ];\n        \n        if ( anim8.isNumber( given ) )\n        {\n          conversions[ to ][ unit ] = 1.0 / given;  \n        }\n        if ( anim8.isFunction( given ) )\n        {\n          conversions[ to ][ unit ] = (function(converter) \n          {\n            return function(e, relativeTo) \n            {\n              return 1.0 / converter( e, relativeTo );\n            };\n          })( given );\n        }\n      }\n    }\n  }\n  \n  // Given an element, convert, and relativeTo - return the number we need to multiply by.\n  var getConverterScale = function(e, converter, relativeTo)\n  {\n    if ( anim8.isNumber( converter ) )\n    {\n      return converter;\n    }\n    else if ( anim8.isFunction( converter ) )\n    {\n      return converter( e, relativeTo );\n    }\n    \n    return 1.0;\n  };\n  \n  return function(e, from, toUnit, relativeTo)\n  {\n    if ( anim8.isNumber( from ) )\n    {\n      return from;\n    }\n    \n    var parsed = anim8.dom.parseValue( from );\n    \n    if ( !parsed )\n    {\n      return false;\n    }\n    \n    var value = parsed.value;\n    var fromUnit = parsed.unit;\n    \n    if ( !fromUnit || fromUnit === toUnit )\n    {\n      return value;\n    }\n    \n    // First see if we have a direct conversion available...\n    if ( fromUnit in conversions && toUnit in conversions[ fromUnit ] )\n    {\n      var converter = conversions[ fromUnit ][ toUnit ];\n      \n      value *= getConverterScale( e, converter, relativeTo );\n    }\n    // Otherwise convert it to px, then to the desired unit\n    else if ( fromUnit in conversions && conversions[ fromUnit ].px && toUnit in conversions.px )\n    {\n      var converter1 = conversions[ fromUnit ].px;\n      var converter2 = conversions.px[ toUnit ];\n      \n      value *= getConverterScale( e, converter1, relativeTo );\n      value *= getConverterScale( e, converter2, relativeTo );\n    }\n    \n    return value;\n  };\n  \n})();\n\n\n","\nanim8.dom.property.factory = function(nm, relativeTo) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryDerivable = function(nm, relativeTo, deriver) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n        else if ( anim8.isFunction( deriver ) )\n        {\n          converted = anim8.dom.convert( e, deriver( e ), anim.units[ nm ], relativeTo );\n          \n          if ( converted !== false )\n          {\n            anim.frame[nm] = converted;\n            anim.animating[nm] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryColor = function(nm) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var parsed = anim8.color.parse( e.style[nm] );\n        \n        if (parsed !== false) \n        {\n          anim.frame[nm] = parsed;\n          anim.animating[nm] = true;\n        }              \n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[nm] = anim8.color.format( anim.frame[nm] );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.padding                  = anim8.dom.property.factory( 'padding', 'parentWidth' );\nanim8.dom.property.paddingTop               = anim8.dom.property.factory( 'paddingTop', 'parentWidth' );\nanim8.dom.property.paddingRight             = anim8.dom.property.factory( 'paddingRight', 'parentWidth' );\nanim8.dom.property.paddingBottom            = anim8.dom.property.factory( 'paddingBottom', 'parentWidth' );\nanim8.dom.property.paddingLeft              = anim8.dom.property.factory( 'paddingLeft', 'parentWidth' );\n\nanim8.dom.property.margin                   = anim8.dom.property.factory( 'margin', 'parentWidth' );\nanim8.dom.property.marginTop                = anim8.dom.property.factory( 'marginTop', 'parentWidth' );\nanim8.dom.property.marginRight              = anim8.dom.property.factory( 'marginRight', 'parentWidth' );\nanim8.dom.property.marginBottom             = anim8.dom.property.factory( 'marginBottom', 'parentWidth' );\nanim8.dom.property.marginLeft               = anim8.dom.property.factory( 'marginLeft', 'parentWidth' );\n\nanim8.dom.property.borderRadius             = anim8.dom.property.factory( 'borderRadius', 'width' );\nanim8.dom.property.borderTopLeftRadius      = anim8.dom.property.factory( 'borderTopLeftRadius', 'width' );\nanim8.dom.property.borderTopRightRadius     = anim8.dom.property.factory( 'borderTopRightRadius', 'width' );\nanim8.dom.property.borderBottomLeftRadius   = anim8.dom.property.factory( 'borderBottomLeftRadius', 'width' );\nanim8.dom.property.borderBottomRightRadius  = anim8.dom.property.factory( 'borderBottomRightRadius', 'width' );\n\nanim8.dom.property.borderWidth              = anim8.dom.property.factory( 'borderWidth' );\nanim8.dom.property.borderTopWidth           = anim8.dom.property.factory( 'borderTopWidth' );\nanim8.dom.property.borderRightWidth         = anim8.dom.property.factory( 'borderRightWidth' );\nanim8.dom.property.borderBottomWidth        = anim8.dom.property.factory( 'borderBottomWidth' );\nanim8.dom.property.borderLeftWidth          = anim8.dom.property.factory( 'borderLeftWidth' );\n\nanim8.dom.property.outlineWidth             = anim8.dom.property.factory( 'outlineWidth' );\nanim8.dom.property.textIndent               = anim8.dom.property.factory( 'textIndent', 'parentWidth' );\nanim8.dom.property.borderSpacing            = anim8.dom.property.factory( 'borderSpacing' );\nanim8.dom.property.fontSize                 = anim8.dom.property.factory( 'fontSize', 'parentFontSize' );\nanim8.dom.property.lineHeight               = anim8.dom.property.factory( 'lineHeight', 'fontSize' );\nanim8.dom.property.zIndex                   = anim8.dom.property.factory( 'zIndex' );\n\nanim8.dom.property.color                    = anim8.dom.property.factoryColor( 'color' );\nanim8.dom.property.backgroundColor          = anim8.dom.property.factoryColor( 'backgroundColor' );\nanim8.dom.property.borderTopColor           = anim8.dom.property.factoryColor( 'borderTopColor' );\nanim8.dom.property.borderRightColor         = anim8.dom.property.factoryColor( 'borderRightColor' );\nanim8.dom.property.borderBottomColor        = anim8.dom.property.factoryColor( 'borderBottomColor' );\nanim8.dom.property.borderLeftColor          = anim8.dom.property.factoryColor( 'borderLeftColor' );\nanim8.dom.property.outlineColor             = anim8.dom.property.factoryColor( 'outlineColor' );\n\nanim8.dom.property.minWidth                 = anim8.dom.property.factory( 'minWidth', 'parentWidth' );\nanim8.dom.property.maxWidth                 = anim8.dom.property.factory( 'maxWidth', 'parentWidth' );\nanim8.dom.property.minHeight                = anim8.dom.property.factory( 'minHeight', 'parentHeight' );\nanim8.dom.property.maxHeight                = anim8.dom.property.factory( 'maxHeight', 'parentHeight' );\n\nanim8.dom.property.width                    = anim8.dom.property.factoryDerivable('width', 'parentWidth', function(e) { return e.offsetWidth + 'px'; });\nanim8.dom.property.height                   = anim8.dom.property.factoryDerivable('height', 'parentHeight', function(e) { return e.offsetHeight + 'px'; });\n\nanim8.dom.property.top                      = anim8.dom.property.factoryDerivable('top', 'parentHeight', function(e) { return e.offsetTop + 'px'; });\nanim8.dom.property.right                    = anim8.dom.property.factoryDerivable('right', 'parentWidth', function(e) { return (e.parentNode.scrollWidth - (e.offsetLeft + e.offsetWidth)) + 'px'; });\nanim8.dom.property.bottom                   = anim8.dom.property.factoryDerivable('bottom', 'parentHeight', function(e) { return (e.parentNode.scrollHeight - (e.offsetTop + e.offsetHeight)) + 'px'; });\nanim8.dom.property.left                     = anim8.dom.property.factoryDerivable('left', 'parentWidth', function(e) { return e.offsetLeft + 'px'; });\n\nanim8.dom.property.visibility = \n{\n  get: function(e, anim) \n  {\n    if (anim.animating.visibility === false) \n    {\n      var style = anim8.dom.style( e, 'visibility' );\n      anim.frame.visibility = style === 'hidden' ? 0.0 : 1.0;\n      anim.animating = true;\n    }\n  },\n  set: function(e, anim) \n  {\n    anim.styles.visibility = anim.frame.visibility < 0.5 ? 'hidden' : 'visible'\n  },\n  unset: function(e, anim)\n  {\n    e.style.visibility = null;\n  }\n}\n\nanim8.dom.property.backface = (function()\n{\n  var css = anim8.dom.prefix(['WebkitBackfaceVisibility', 'MozBackfaceVisibility', 'msBackfaceVisibility', 'BackfaceVisibility']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim)\n    {\n      if ( anim.animating.backface === false )\n      {\n        var style = anim8.dom.style( e, css ); \n        \n        anim.frame.backface = (style === 'visible') ? 1.0 : 0.0;\n        anim.animating.backface = true;\n      }\n    },\n    set: function(e, anim)\n    {\n      anim.styles[css] = anim.frame.backface < 0.5 ? 'none' : 'visible';\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n    \n  };\n  \n})();\n\nanim8.dom.property.transformOrigin = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransformOrigin', 'MozTransformOrigin', 'OTransformOrigin', 'msTransformOrigin', 'transformOrigin']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  var keywords = \n  {\n    'left':   '0%',\n    'center': '50%',\n    'right':  '100%',\n    'top':    '0%',\n    'bottom': '100%'\n  };\n  \n  var setOriginAttribute = function(e, value, anim, attr, relativeTo ) \n  {\n    if (anim.animating[attr] === false) \n    {\n      if ( value in keywords )\n      {        \n        value = keywords[ value ];\n      }\n\n      var converted = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n      \n      if ( converted !== false )\n      {\n        anim.frame[ attr ] = converted;\n        anim.animating[ attr ] = true;\n      }\n    }\n  };\n  \n  var setOrigin = function(e, split, anim) \n  {\n    if (anim.animating.origin === false) \n    {\n      if ((split.length === 1) || \n          (split.length === 2 && split[0] === split[1]) || \n          (split.length === 3 && split[0] === split[1] && split[1] === split[2])) \n      {     \n        setOriginAttribute( e, split[0], anim, 'origin', 'width' );\n      }            \n    }\n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      if (style) \n      {\n        var origin = style.toLowerCase();\n        var split = origin.split(' ');\n        \n        switch (split.length) \n        {\n        case 3:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOriginAttribute( e, split[2], anim, 'originZ' );\n          setOrigin( e, split, anim );\n          break;\n        case 2:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        case 1:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[0], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var style = null;\n      \n      if ( anim8.isDefined( anim.frame.originZ ) )\n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' ) + ' ' + anim.valueOr( 'originZ', 'origin', 'z' );\n      } \n      else \n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' );\n      }\n      \n      anim.styles[css] = style;\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.transform = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);\n   \n  if ( !css )\n  {\n    return false;\n  }\n  \n  var parse = function( e, value, anim, attr, relativeTo )\n  {\n    var desiredUnit = anim.units[ attr ];\n    var converted = anim8.dom.convert( e, value, desiredUnit, relativeTo );\n    \n    if ( converted !== false )\n    {\n      return converted;\n    }\n    \n    // TODO show convert this to desiredUnit, however defaultValue may be non-scalar.\n    return anim.getAttribute( attr ).defaultValue;    \n  };\n\n  var getter1d = function(e, anim, parsed, attr)\n  {\n    return parse( e, parsed[1], anim, attr, 'width' )\n  };\n  var getter2d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' )\n    };\n  };\n  var getter3d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' ),\n      z: parse( e, parsed[3], anim, attr )\n    };\n  };\n  var getter4d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' ),\n      z: parse( e, parsed[3], anim, attr ),\n      angle: parse( e, parsed[4], anim, attr )\n    };\n  };\n\n  var setter1d = function(attr, value, unit)\n  {\n    return attr + '(' + value + unit + ')';\n  };\n  var setter2d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + unit + ',' + value.y + unit + ')';\n  };\n  var setter3d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + unit + ',' + value.y + unit + ',' + value.z + unit + ')';\n  };\n  var setter4d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + ',' + value.y + ',' + value.z + ',' + value.angle + unit + ')';\n  };\n    \n  var regexes = \n  {\n    translate:    /translate\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translate3d:  /translate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translateX:   /translateX\\(([^\\)]+)\\)/i,\n    translateY:   /translateY\\(([^\\)]+)\\)/i,\n    translateZ:   /translateZ\\(([^\\)]+)\\)/i,\n    scale:        /scale\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scale3d:      /scale3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scaleX:       /scaleX\\(([^\\)]+)\\)/i,\n    scaleY:       /scaleY\\(([^\\)]+)\\)/i,\n    scaleZ:       /scaleZ\\(([^\\)]+)\\)/i,\n    rotate:       /rotate\\(([^\\)]+)\\)/i,\n    rotate3d:     /rotate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    rotateX:      /rotateX\\(([^\\)]+)\\)/i,\n    rotateY:      /rotateY\\(([^\\)]+)\\)/i,\n    rotateZ:      /rotateZ\\(([^\\)]+)\\)/i,\n    skew:         /skew\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    skewX:        /skewX\\(([^\\)]+)\\)/i,\n    skewY:        /skewY\\(([^\\)]+)\\)/i\n  };\n\n  var getters = \n  {\n    translate:    getter2d,\n    translate3d:  getter3d,\n    translateX:   getter1d,\n    translateY:   getter1d,\n    translateZ:   getter1d,\n    scale:        getter2d,\n    scale3d:      getter3d,\n    scaleX:       getter1d,\n    scaleY:       getter1d,\n    scaleZ:       getter1d,\n    rotate:       getter1d,\n    rotate3d:     getter4d,\n    rotateX:      getter1d,\n    rotateY:      getter1d,\n    rotateZ:      getter1d,\n    skew:         getter2d,\n    skewX:        getter1d,\n    skewY:        getter1d\n  };\n\n  var setters =\n  {\n    translate:    setter2d,\n    translate3d:  setter3d,\n    translateX:   setter1d,\n    translateY:   setter1d,\n    translateZ:   setter1d,\n    scale:        setter2d,\n    scale3d:      setter3d,\n    scaleX:       setter1d,\n    scaleY:       setter1d,\n    scaleZ:       setter1d,\n    rotate:       setter1d,\n    rotate3d:     setter4d,\n    rotateX:      setter1d,\n    rotateY:      setter1d,\n    rotateZ:      setter1d,\n    skew:         setter2d,\n    skewX:        setter1d,\n    skewY:        setter1d\n  };\n\n  var props = new anim8.FastMap( regexes );\n  var regex = props.values;\n  var attrs = props.keys;\n  props.setters = [];\n  props.getters = [];\n\n  for (var prop in getters)\n  {\n    var i = props.indexOf( prop );\n\n    props.getters[ i ] = getters[ prop ];\n    props.setters[ i ] = setters[ prop ];\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      for (var attr in anim.animating) \n      {\n        var i = props.indexOf( attr );\n\n        if ( i !== -1 && anim.animating[ attr ] === false ) \n        {\n          var parsed = regex[ i ].exec( style );\n\n          if ( parsed ) \n          {\n            anim.frame[ attr ] = props.getters[ i ]( e, anim, parsed, attr );\n            anim.animating[ attr ] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var transforms = [];\n      \n      for (var i = 0; i < regex.length; i++) \n      {\n        var attr = attrs[ i ];\n\n        if (attr in anim.frame) \n        {\n          transforms.push( props.setters[ i ]( attr, anim.frame[ attr ], anim.units[ attr ] ) );\n        }\n      }\n\t\t\t\n      if (transforms.length) \n      {\n        anim.styles[css] = transforms.join(' ');\n      }\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.opacity = (function() \n{\n  var css = anim8.dom.prefix(['WebkitOpacity', 'MozOpacity', 'KhtmlOpacity', 'opacity']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating.opacity === false) \n      {\n        var style = anim8.dom.style( e, css );\n        var opacity = parseFloat( style );\n        \n        if ( !isNaN(opacity) ) \n        {\n          anim.frame.opacity = opacity\n          anim.animating.opacity = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[ css ] = anim8.clamp( anim.frame.opacity, 0, 1 );\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.filter = (function() \n{\n  var css = anim8.dom.prefix(['WebkitFilter', 'MozFilter', 'OFilter', 'msFilter', 'filter']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n\tvar methods = \n  {\n\t\tgrayscale: \t'grayscale',\n\t\tsepia: \t\t\t'sepia',\n\t\tsaturate: \t'saturate',\n\t\thueRotate: \t'hue-rotate',\n\t\tinvert: \t\t'invert',\n\t\tbrightness: 'brightness',\n\t\tcontrast: \t'contrast',\n    blur:       'blur'\n\t};\n\t\n\tvar patterns = {};\n\t\n\tfor (var attr in methods) \n  {\n\t\tpatterns[attr] = new RegExp( methods[attr] + '\\(([^\\)]+)\\)', 'i');\n\t}\n  \n\treturn {\n    \n\t\tget: function(e, anim) \n    {\n\t\t\tvar style = anim8.dom.style( e, css );\n      \n\t\t\tfor (var attr in patterns) \n      {\n\t\t\t\tif ( anim.animating[attr] === false ) \n        {\n\t\t\t\t\tvar parsed = patterns[attr].exec( style );\n          \n\t\t\t\t\tif (parsed !== false) \n          {\n            var converted = anim8.dom.convert( e, parsed[1], anim.units[ attr ] );\n            \n            if ( converted !== false )\n            {\n              anim.frame[ attr ] = converted;\n              anim.animating[ attr ] = true;\n            }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\t\tset: function(e, anim) \n    {\n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n\t\t\tvar filters = [];\n      \n\t\t\tfor (var attr in methods) \n      {\n\t\t\t\tif ( attr in anim.frame ) \n        {\n          filters.push( methods[attr] + '(' + anim.value( attr ) + ')' );\n\t\t\t\t}\n\t\t\t}\n      \n\t\t\tif (filters.length) \n      {\n\t\t\t\tanim.styles[ css ] = filters.join(' ');\n\t\t\t}\n\t\t},\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n\t};\n\t\n})();\n\nanim8.dom.property.center = \n{\n  get: function(e, anim)\n  {\n    var cx = (e.offsetLeft + e.offsetWidth * 0.5) + 'px';\n    var cy = (e.offsetTop + e.offsetHeight * 0.5) + 'px';\n    \n    if ( anim.animating.center === false )\n    {\n      var desiredUnit = anim.units.center;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n    \n      if ( ccx !== false && ccy !== false )\n      {\n        anim.frame.center = {\n          x: ccx,\n          y: ccy\n        };\n        anim.animating.center = true;\n      }\n    }\n    if ( anim.animating.centerX === false )\n    {\n      var desiredUnit = anim.units.centerX;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      \n      if ( ccx !== false )\n      {\n        anim.frame.centerX = ccx;\n        anim.animating.centerX = true;\n      }\n    }\n    if ( anim.animating.centerY === false )\n    {\n      var desiredUnit = anim.units.centerY;\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n      \n      if ( ccy !== false )\n      {\n        anim.frame.centerY = ccy;\n        anim.animating.centerY = true;\n      }\n    }\n  },\n  preset: function(e, anim)\n  {\n    anim.cached.width  = anim8.dom.convert( e, e.offsetWidth + 'px', anim.units.centerX || anim.units.center, 'parentWidth' );\n    anim.cached.height = anim8.dom.convert( e, e.offsetHeight + 'px', anim.units.centerY || anim.units.center, 'parentHeight' );\n  },\n  set: function(e, anim)\n  {\n    var rw = anim.cached.width * 0.5;\n    var rh = anim.cached.height * 0.5;\n        \n    if ( anim.updated.center )\n    {\n      anim.styles.left = (anim.frame.center.x - rw) + anim.units.center;\n      anim.styles.top = (anim.frame.center.y - rh) + anim.units.center;\n    }\n    if ( anim.updated.centerX )\n    {\n      anim.styles.left = (anim.frame.centerX - rw) + anim.units.centerX;\n    }\n    if ( anim.updated.centerY )\n    {\n      anim.styles.top = (anim.frame.centerY - rh) + anim.units.centerY;\n    }\n  }\n};\n\nanim8.dom.property.orbit = \n{\n  DEGREE_TO_RADIAN: Math.PI / 180.0,\n  \n  RADIAN_TO_DEGREE: 180.0 / Math.PI,\n  \n  get: function(e, anim)\n  {\n    var ox = (e.parentNode.scrollWidth * 0.5);\n    var oy = (e.parentNode.scrollHeight * 0.5); \n    var cx = (e.offsetLeft + e.offsetWidth * 0.5);\n    var cy = (e.offsetTop + e.offsetHeight * 0.5);\n    var dx = cx - ox;\n    var dy = cy - oy;\n  \n    if ( anim.animating.orbitOffset === false )\n    {\n      var cunit = anim.units.orbitOffset;\n      var cox = anim8.dom.convert( e, ox + 'px', cunit, 'parentWidth' );\n      var coy = anim8.dom.convert( e, oy + 'px', cunit, 'parentHeight' );\n      \n      if ( cox !== false && coy !== false )\n      {\n        anim.frame.orbitOffset = {\n          x: cox,\n          y: coy\n        };\n        anim.animating.orbitOffset = false;\n      }\n    }\n    \n    if ( anim.animating.distance === false )\n    {\n      anim.frame.distance = Math.sqrt( dx * dx + dy * dy );\n      anim.animating.distance = true;\n    }\n    \n    if ( anim.animating.angle === false )\n    {\n      anim.frame.angle = Math.atan2( dy, dx ) * this.RADIAN_TO_DEGREE;\n      anim.animating.angle = true;\n    }\n  },\n  \n  preset: function(e, anim)\n  {  \n    anim.cached.parentWidth = e.parentNode.scrollWidth;\n    anim.cached.parentHeight = e.parentNode.scrollHeight;\n    anim.cached.width = e.offsetWidth;\n    anim.cached.height = e.offsetHeight;\n  },\n  \n  set: function(e, anim)\n  {\n    // TODO calculator this correctly\n    var cunit = anim.units.orbitOffset || '%';\n    var orbitX = anim.frame.orbitOffset ? anim.frame.orbitOffset.x : 50;\n    var orbitY = anim.frame.orbitOffset ? anim.frame.orbitOffset.y : 50;\n    \n    var originUnit = anim.units.origin || '%';\n    var originX = anim.frame.origin ? anim.frame.origin.x : 50;\n    var originY = anim.frame.origin ? anim.frame.origin.y : 50;\n    \n    var cox = anim8.dom.convert( e, orbitX + cunit, 'px', anim.cached.parentWidth / 100.0 );\n    var coy = anim8.dom.convert( e, orbitY + cunit, 'px', anim.cached.parentHeight / 100.0 );\n    \n    var ox = anim8.dom.convert( e, originX + originUnit, 'px', anim.cached.width / 100.0 );\n    var oy = anim8.dom.convert( e, originY + originUnit, 'px', anim.cached.height / 100.0 );\n    \n    var angle = (anim.frame.angle || 0.0) * this.DEGREE_TO_RADIAN;\n    var distance = anim.frame.distance || 0.0;\n        \n    var cos = Math.cos( angle ) * distance;\n    var sin = Math.sin( angle ) * distance;\n    \n    anim.styles.left = (cox + cos - ox) + 'px';\n    anim.styles.top = (coy + sin - oy) + 'px';\n  }\n};","\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.dom.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.dom.attribute[ attr ];\n  }\n  \n  return anim8.dom.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.dom.attribute.default                 = {defaultValue: 0};\n\n/**\n * All animatable attributes for DomAnimators & HTMLElements.\n */\n\nanim8.dom.attribute.padding                 = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingTop              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingRight            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingBottom           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingLeft             = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.margin                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginTop               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginRight             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginBottom            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginLeft              = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderRadius            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopLeftRadius     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopRightRadius    = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomLeftRadius  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomRightRadius = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderWidth             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopWidth          = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderRightWidth        = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomWidth       = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderLeftWidth         = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.outlineWidth\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.outlineOffset\t\t\t\t\t\t= {defaultValue: 0};\nanim8.dom.attribute.textIndent\t\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderSpacing\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.fontSize\t\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\nanim8.dom.attribute.lineHeight\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\n\nanim8.dom.attribute.origin                  = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'transformOrigin', calculator: '2d'};\nanim8.dom.attribute.originX                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\nanim8.dom.attribute.originY                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\n\nanim8.dom.attribute.opacity                 = {defaultValue: 1};\nanim8.dom.attribute.zIndex                  = {defaultValue: 1};\n\nanim8.dom.attribute.width                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minWidth                = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxWidth                = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.height                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minHeight               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxHeight               = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.angle                   = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.distance                = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.orbitOffset             = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'orbitOffset', calculator: '2d'};\n\nanim8.dom.attribute.top                     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.right                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.bottom                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.left                    = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.center                  = {defaultValue: {x:0, y:0}, defaultUnit: 'px', property: 'center', calculator: '2d'};\nanim8.dom.attribute.centerX                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\nanim8.dom.attribute.centerY                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\n\nanim8.dom.attribute.blur                    = {defaultValue: 0, property: 'filter', defaultUnit: 'px'};\nanim8.dom.attribute.sepia                   = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.brightness              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.grayscale               = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.contrast                = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.invert                  = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.saturation              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.hueRotate               = {defaultValue: 0, property: 'filter', defaultUnit: 'deg'};\n\nanim8.dom.attribute.rotate                  = {defaultValue: 0, property: 'transform', defaultUnit: 'deg'};\nanim8.dom.attribute.rotate3d                = {defaultValue: {x:0, y:0, z:1, angle:0}, property: 'transform', calculator: 'quaternion', defaultUnit: 'deg'};\n\nanim8.dom.attribute.translate               = {defaultValue: {x:0, y:0}, property: 'transform', calculator: '2d', defaultUnit: 'px'};\nanim8.dom.attribute.translateX              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateY              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateZ              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translate3d             = {defaultValue: {x:0, y:0, z:0}, property: 'transform', calculator: '3d', defaultUnit: 'px'};\n\nanim8.dom.attribute.scale                   = {defaultValue: {x:1, y:1}, property: 'transform', calculator: '2d'};\nanim8.dom.attribute.scaleX\t                = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleY  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleZ  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scale3d                 = {defaultValue: {x:1, y:1, z:1}, property: 'transform', calculator: '3d'};\n\nanim8.dom.attribute.skew                    = {defaultValue: {x:0, y:0}, defaultUnit: 'deg', property: 'transform', calculator: '2d'};\nanim8.dom.attribute.skewX                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\nanim8.dom.attribute.skewY                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\n\nanim8.dom.attribute.backface                = {defaultValue: 0};\nanim8.dom.attribute.visibility              = {defaultValue: 1};\n\nanim8.dom.attribute.backgroundColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.color                   = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderTopColor          = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderRightColor        = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderBottomColor       = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderLeftColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.outlineColor            = {defaultValue: anim8.color(), calculator: 'rgba'};\n","\n/**\n * Instantiates a new DomAnimator given a subject.\n * \n * @param {HTMLElement} e\n */\nanim8.DomAnimator = function(e)\n{\n\tthis.reset( e );\n  this.properties = new anim8.FastMap();\n  this.propertiesPreset = new anim8.FastMap();\n  this.attributeToProperty = {};\n  this.animating = {};\n  this.cached = {};\n  this.units = {};\n  this.styles = {};\n  this.styled = false;\n  this.stylesUpdated = false;\n};\n\n/**\n * Extends anim8.Animator\n */\nanim8.override( anim8.DomAnimator.prototype = new anim8.Animator(),\n{\n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   *\n   * If any events that were recently added have true values this is where we replace\n   * this true values with the values currently on the subject.\n   */\n  preupdate: function(now)\n  {\n    // If there are events with paths that contain computed values we should\n    // populate the frame directly from the HTML element.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      var properties = {};\n    \n      for (var i = aa.length - 1; i >= 0; i--)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        if ( !(attr in this.frame) && attrimator.hasComputed() )\n        {\n          properties[ this.attributeToProperty[ attr ] ] = true;\n      \n          this.animating[ attr ] = false; \n        }\n      }\n      \n      for (var prop in properties)\n      {\n        this.properties.get( prop ).get( this.subject, this );\n      }\n    }\n\n    // If a property currently being animated requires some heads up before it\n    // gets or sets a value, notify it. TODO removed dead properties.\n    var presets = this.propertiesPreset.values;\n    for (var i = presets.length - 1; i >= 0; i--)\n    {\n      presets[ i ].preset( this.subject, this );\n    }\n\n    // Finish updating computed events, filling in the frame, and triggering.\n    anim8.Animator.prototype.preupdate.apply( this, arguments );\n\n    return this;\n  },\n    \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now)\n  {\n    anim8.Animator.prototype.update.apply( this, arguments );\n      \n    this.getStyles();\n    this.stylesUpdated = true;\n\n    return this;\n  },\n\n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  onAnimation: function(animation, options, attrimatorMap)\n  {  \n    if ( animation.input.units )\n    {\n      var attrimators = attrimatorMap.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n        var attr = attrimator.attribute;\n      \n        if ( attr in animation.input.units )\n        {\n          attrimator.unit = animation.input.units[ attr ];\n        }\n      }  \n    }\n  },\n\n  /**\n   * Builds the styles map in preparation to be applied.\n   */\n  getStyles: function()\n  {\n    this.styles = {};\n    \n    var applyProperties = {};\n    \n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        var prop = this.attributeToProperty[ attr ];\n        \n        if ( this.properties.has( prop ) )\n        {\n          applyProperties[ prop ] = true; \n        }\n      }\n    }\n    \n    for (var prop in applyProperties)\n    {\n      this.properties.get( prop ).set( this.subject, this );  \n      \n      this.styled = true;\n    }\n  },\n\n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n  {\n    if ( !this.styled && !this.stylesUpdated )\n    {\n      this.getStyles();\n    }\n    \n    if ( this.styled )\n    {    \n      for (var prop in this.styles)\n      {\n         this.subject.style[ prop ] = this.styles[ prop ];\n      }\n      \n      for (var attr in this.frame)\n      {\n        this.updated[ attr ] = false;\n      }\n    \n      this.styled = false;\n    }\n    \n    this.stylesUpdated = false;\n    \n    this.trigger('apply');\n    \n    this.trimAttrimators();\n\n    return this;\n  },\n    \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeAttrimator: function( attrimator )\n  {\n    anim8.Animator.prototype.placeAttrimator.apply( this, arguments );\n    \n    var attr = attrimator.attribute;\n    var attribute = this.getAttribute( attr );\n    var propertyName = attribute.propertyName;\n    var property = attribute.property;\n\n    this.properties.put( propertyName, property );\n\n    this.attributeToProperty[ attr ] = propertyName;\n    this.units[ attr ] = attrimator.unit || attribute.defaultUnit;\n\n    if ( anim8.isFunction( property.preset ) )\n    {\n      this.propertiesPreset.put( propertyName, property );\n    }\n\n    return this;\n  },\n    \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  {\n    var props = this.properties.values;\n    for (var i = props.length - 1; i >= 0; i--)\n    {\n      props[ i ].unset( this.subject, this );\n    }\n    \n  \tthis.frame = {};\n\n    return this;\n  },\n\n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    var props = {};\n    var updated = {};\n    var units = {};\n    var styles = {};\n    \n    for (var attr in attributes)\n    {\n      var attribute = this.getAttribute( attr );\n      var value     = attributes[ attr ];\n      \n      units[ attr ] = attribute.defaultUnit;\n      \n      if ( anim8.isString( value ) )\n      {\n        var parsed = anim8.dom.parseValue( value, attribute.defaultUnit );\n        \n        if ( parsed !== false )\n        {\n          units[ attr ] = parsed.unit || attribute.defaultUnit;\n          value = parsed.value;\n        }  \n      }\n      \n      var parsed = attribute.parse( value );\n      \n      if ( parsed !== false )\n      {\n        props[ attribute.propertyName ] = attribute.property;\n        attributes[ attr ] = parsed;\n        updated[ attr ] = true;\n      }\n    }\n      \n    var flash = \n    {\n      units: units,\n       \n      frame: attributes,\n      \n      updated: updated,\n      \n      styles: styles,\n      \n      cached: {},\n      \n      value: function(attr)\n      {\n        return attributes[ attr ] + units[ attr ];\n      },\n      \n      valueOr: function(attr, other, subproperty)\n      {\n        var value = attributes[ attr ];\n        \n        if ( !anim8.isDefined( value ) )\n        {\n          value = attributes[ attr = other ];\n        \n          if ( anim8.isDefined( subproperty ) )\n          {\n            value = value[ subproperty ];\n          }\n        }\n    \n        return value + units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      var property = props[ prop ];\n      \n      if ( anim8.isFunction( property.preset ) )\n      {\n        props[ prop ].preset( this.subject, flash );\n      }\n    }\n    \n    for (var prop in props)\n    {\n      props[ prop ].set( this.subject, flash );\n    }\n    \n    for (var prop in styles)\n    {\n      this.subject.style[ prop ] = styles[ prop ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute and the value is the desired unit.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var props = {};\n    var animating = {};\n    var units = {};\n    var out = {};\n    \n    for (var attr in attributes)\n    {    \n      var attribute = this.getAttribute( attr );\n      \n      animating[ attr ] = false;    \n      units[ attr ] = attributes[ attr ] || attribute.defaultUnit;\n      props[ attribute.propertyName ] = attribute.property;\n      out[ attr ] = attribute.cloneDefault();\n    }\n    \n    var flash = \n    {    \n      units: units,\n      \n      frame: out,\n      \n      animating: animating,\n      \n      unit: function(attr)\n      {\n        return units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      props[ prop ].get( this.subject, flash );\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute, desiredUnit, relativeTo)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame && anim8.isNumber( animator.frame[ attribute ] ) )\n      {\n        return anim8.dom.convert( animator.e, animator.value( attribute ), desiredUnit, relativeTo );\n      }\n      \n      request[ attribute ] = desiredUnit;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return animator.getAttribute( attribute ).defaultValue;\n    };\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ] + this.units[ attr ];\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   * if the attribute doesn't exist a secondary one is looked up. If that value\n   * is an object and contains the given subproperty the value is resolved once again.\n   *\n   * @param {string} attr\n   * @param {string} other\n   * @param [string] subproperty\n   */\n  valueOr: function(attr, other, subproperty)\n  {\n    var value = this.frame[ attr ];\n      \n    if ( !anim8.isDefined( value ) )\n    {\n      value = this.frame[ attr = other ];\n      \n      if ( anim8.isDefined( subproperty ) )\n      {\n        value = value[ subproperty ];\n      }\n    }\n    \n    return value + this.units[ attr ];\n  }\n\n});\n"],"sourceRoot":"/source/"}