{"version":3,"sources":["anim8js-core.js","anim8js-fast-map.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-point.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-event.js","anim8js-event-instance.js","anim8js-animation.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tween.js","anim8js-parser-move.js","anim8js-factory.js","anim8js-object.js","anim8js-dom-core.js","anim8js-dom-property.js","anim8js-dom-attribute.js","anim8js-dom-animator.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","defaults","duration","easing","teasing","delay","sleep","repeat","scale","transitionTime","transitionOutroDelta","transitionIntoDelta","transitionEasing","transitionGranularity","cache","cacheOptions","cacheTransitions","noOptions","noTransition","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","log","size","prop","isEmpty","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","constant","variable","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","FastMap","values","keys","indices","prototype","put","key","value","putMap","map","get","remove","index","lastValue","pop","lastKey","indexOf","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","pair","e","t","easingType","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","yoyo","mirror","reverse","flip","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attr","attribute","getAttribute","frame","calculator","clone","cloneDefault","relative","relativeAmount","mask","isComputed","relativeFunction","calc","mul","add","Calculator","create","adds","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","isValid","isZero","isEqual","isRelative","getRelativeAmount","z","NumberCalculator","defaultValue","amountScale","ab","epsilon","Point2dCalculator","y","cx","cy","rx","ry","ix","iy","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Point3dCalculator","cz","rz","iz","dz","QuaternionCalculator","angle","ra","ia","da","RGBCalculator","rr","rg","rb","ir","ig","ib","dr","dg","db","RGBACalculator","path","Path","spring","type","reset","name","points","hasComputed","compute","ps","reference","trues","last","first","point","replaceComputed","resolvePoint","isLinear","granularity","prev","temp","Tween","CubicPath","p0","p1","p2","p3","d1","d2","d3","i1","i3","QuadraticPath","DeltaPath","deltas","ds","d0","pd","JumpPath","CompiledPath","pointCount","KeyframePath","easings","ea","defaultEasing","PointPath","Spring","rest","position","gravity","velocity","preupdate","parseValue","update","dt","MAX_DT","starting","updateVelocity","updated","EPSILON","resolveRest","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","scaleBase","hasInitialState","parser","newInstance","EventInstance","isInstance","getParser","totalTime","isInfinite","timeRemaining","queue","state","pauseTime","pauseState","elapsed","cycle","catchup","isAnimating","finish","progress","applyValue","isPaused","isDelayed","isSleeping","cycleCount","maxCycles","computeValue","baseValue","newState","getDelta","getPoint","getFuture","fdelta","getStart","getEnd","pause","resume","hasStarted","isFinished","hasStates","states","stateText","animation","options","Animation","animationStrings","anim","parsedAnimation","parsedOptions","parserName","save","transition","originalInput","transitionArray","part","charAt","introDelta","substring","outroDelta","transitionIntroDelta","isSaved","newEvents","instances","cloneEvents","merge","force","fn","eventsAdded","eventsComputed","springs","springsAdded","finished","active","cycleCurrent","cycleNext","newCycle","applyCurrentCycle","restore","ce","setDefault","sa","wasFinished","placeSpring","placeEvent","trimEvents","activate","deactivate","destroy","createEvents","onAnimation","eventMap","queueEvents","maxRemaining","existing","unspring","attributes","springsFor","play","all","playEvents","attrs","transitionEvents","transitionRequired","e1","e2","transitionPath","transitionEvent","transitionInto","transitionIntoEvents","tweenTo","target","tweenManyTo","targets","tween","starts","ends","tweenMany","applyInitialState","eventCount","eventsFor","remaining","ref","request","follow","objectsFor","objects","resulting","stop","set","unset","hasEvents","hasSprings","getSubject","wrapper","invoke","func","DeferAnimator","fill","each","iterator","filter","filterer","alive","getSubjects","mid","e0","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","Parser","newOptions","oldOptions","durations","delays","sleeps","repeats","scales","scaleBases","ParserDeltas","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","keyframe","sort","from","half","to","times","maxTime","order","pathEasings","ParserTween","ParserMove","move","highestPriorityFactory","factoryName","is","priority","Factory","ObjectFactory","$animator","calculatorName","dom","DomFactory","cached","ids","elementAttribute","animatorId","DomAnimator","setAttribute","propertyName","defaultUnit","style","hyphenated","hyphenize","str","replace","currentStyle","document","defaultView","getComputedStyle","getPropertyValue","prefix","createElement","prefixes","convert","toPixels","baseUnit","defaultRate","body","div","appendChild","width","pixels","offsetWidth","removeChild","getFontSize","notUnit","fontSize","getConverterScale","px","relativeTo","variables","parentWidth","parentNode","scrollWidth","parentHeight","scrollHeight","height","offsetHeight","parentFontSize","htmlFontSize","htmlElement","getElementsByTagName","pt","cm","mm","vw","deg","rad","PI","em","rem","given","converter","toUnit","fromUnit","converter1","converter2","nm","converted","units","styles","factoryDerivable","deriver","factoryColor","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","outlineWidth","textIndent","borderSpacing","lineHeight","zIndex","backgroundColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor","minWidth","maxWidth","minHeight","maxHeight","offsetTop","offsetLeft","visibility","backface","css","transformOrigin","keywords","setOriginAttribute","setOrigin","origin","originZ","valueOr","transform","translate","translate3d","scale3d","d4","rotate3d","translateX","translateY","translateZ","scaleX","scaleY","scaleZ","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY","desiredUnit","transforms","join","opacity","grayscale","sepia","saturate","hueRotate","invert","brightness","contrast","blur","patterns","RegExp","filters","ccx","ccy","centerX","centerY","preset","rw","rh","orbit","DEGREE_TO_RADIAN","RADIAN_TO_DEGREE","ox","oy","orbitOffset","cunit","cox","coy","atan2","orbitX","orbitY","originUnit","originX","originY","outlineOffset","saturation","properties","propertiesPreset","attributeToProperty","styled","stylesUpdated","getStyles","applyProperties","placeProperty","props","flash","other","subproperty"],"mappings":"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","file":"anim8js-dom.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {array} subject\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   * \n   * @type {number}\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @type {string|function}\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @type {string|function}\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @type {number}\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @type {number}\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @type {number}\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @type {number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @type {number}\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition delta.\n   * \n   * @type {number}\n   */\n  transitionOutroDelta: 0.1,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {number}\n   */\n  transitionIntoDelta: 0.1,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {string|function}\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * The default transition granularity. This is used for smooth transitions to\n   * provide a smooth transition from the outro velocity to the intro velocity,\n   * the cubic or quadratic path between the two is a curve with unknown length\n   * so the length needs to be calculated using a maximum number of points to\n   * calculate along the path - summing the distances between the consecutive points.\n   * \n   * @type {Number}\n   */\n  transitionGranularity: 50,\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * @type {boolean}\n   * @see  anim8.animation\n   */\n  cache: false,\n\n  /**\n   * Whether parsed options are cached whenever possible. Options that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see  anim8.options\n   */\n  cacheOptions: false,\n\n  /**\n   * Whether parsed transitions are cached whenever possible. Transitions that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see  anim8.transition\n   */\n  cacheTransitions: false,\n\n  /**\n   * The value to return when options could not be parsed from input.\n   * \n   * @type {Object}\n   */\n  noOptions: {},\n\n  /**\n   * The value to return when a transition could not be parsed from input.\n   * @type {Object}\n   */\n  noTransition: {}\n\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * If the user is interested in seeing warnings they can override this by specifying\n * a function which accepts a text argument providing a generc message, a second argument\n * which has the input that caused the warning, and a third agument with the object\n * throwing the warning. Most warnings that are thrown occur when an animation is\n * trying to be parsed an the user provided an invalid animation, time, easing, etc.\n *\n * @param {string} message\n * @param {any} source\n */\nanim8.log = false;\n\n/**\n * Returns the size of the variable. The size of a variable is dependent on the variable\n * type. For arrays and strings their length is returned. If it's an object the number of\n * enumerable properties is returned. If it's a number, the number is returned. Otherwise\n * zero is returned.\n *\n * @param {any} x\n */\n anim8.size = function(x)\n {\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length;\n  }\n  else if ( x === null )\n  {\n    return 0;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var size = 0;\n\n    for (var prop in x)\n    {\n      size++;\n    }\n\n    return size;\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n};\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding overriding any existing properties.\n * \n * @param  {object} out\n * @return {object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding existing properties where necessary.\n * \n * @param  {object}\n * @return {object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses scale from a string or number.\n * \n * @param  {string|number}\n * @return {number}\n */\nanim8.scale = function(scale, returnOnInvalid)\n{\n  if ( anim8.isNumber( scale ) )\n  {\n    return scale;\n  }\n\n  return anim8.coalesce( returnOnInvalid, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n * \n * @param  {number} v\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n      \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t        eventListeners.length = 0;\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an array.\n * This is especially beneficial when most of the time the contents of the structure need to be iterated and order\n * doesn't matter (since removal performs a swap which breaks insertion order).\n */\nanim8.FastMap = function()\n{\n  this.values = [];\n  this.keys = [];\n  this.indices = {};\n};\n\nanim8.FastMap.prototype =\n{\n  /**\n   * Puts the value in the map by the given key.\n   * \n   * @param  {string} key\n   * @param  {any} value\n   * @return {this}\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   * \n   * @param  {anim8.FastMap}\n   * @return {this}\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   * \n   * @param  {string} key\n   * @return {any}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   * \n   * @param  {string} key\n   * @return {this}\n   */\n  remove: function(key)\n  {\n    if ( key in this.indices )\n    {\n      var index = this.indices[ key ];\n      var lastValue = this.values.pop();\n      var lastKey = this.keys.pop();\n\n      if ( index < this.values.length )\n      {\n        this.values[ index ] = lastValue;\n        this.keys[ index ] = lastKey;\n        this.indices[ lastKey ] = index;\n      }\n\n      delete this.indices[ key ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   * \n   * @param  {string} key\n   * @return {number}\n   */\n  indexOf: function(key)\n  {\n    return this.indices[ key ];\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   * \n   * @return {number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  }\n\n};","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n    \n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * [bezier description]\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\n/**\n * [default description]\n * @type {[type]}\n */\nanim8.easing.default      = anim8.easing.ease;\n","\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\n/**\n * Plays the animation forward normally.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn easing( x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum halfway.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } \n\t  else \n\t  {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\n/**\n * Plays the aninmation forwards with the given easing, and backwards with the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.yoyo = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x );\n\t  } \n\t  else \n\t  {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n/**\n * Plays the animation forwards with the given easing, and backwards reflecting the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.mirror = function(easing)\n{\n\treturn function(x)\n\t{\n\t\tif ( x < 0.5 )\n\t\t{\n\t\t\treturn easing( 2.0 * x );\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1.0 - easing( 2.0 - 2.0 * x );\n\t\t}\n\t};\n};\n\n/**\n * Plays the animation backwards with using the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.reverse = function(easing)\n{\n\treturn easing( 1.0 - x );\n};\n\n/**\n * Plays the animation backwards by flipping the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.flip = function(easing)\n{\n\treturn 1.0 - easing( x );\n};\n","\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * [computed description]\n * @type {Object}\n */\nanim8.computed = {};\n\n/**\n * Calculates the current value for an animator.\n * \n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.current = function(event, animator)\n{\n  var attr = event.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currenrtly in the animator.\n * \n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.relative = function(relativeAmount, mask)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( anim8.isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(event, animator)\n  { \n    var attr = event.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = attribute.cloneDefault();\n    }\n\n    if ( mask )\n    {\n      current = calc.mul( current, mask );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  relativeFunction.relativeAmount = relativeAmount;\n  relativeFunction.mask = mask;\n\n  return relativeFunction;\n};\n\n/**\n * [isComputed description]\n * @param  {[type]}\n * @return {Boolean}\n */\nanim8.isComputed = function(x)\n{\n  return anim8.isFunction( x ) && x.computed;\n};","/**\n * Calculators perform math and basic operations for a specific data structure.\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Instantiates a new Calculator instance.\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * [copy description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * [clone description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clone: function(out) \n  {\n    return this.copy( this.create(), out );\n  },\n\n  /**\n   * [create description]\n   * @return {[type]}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * [scale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * [add description]\n   * @param {[type]}\n   * @param {[type]}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * [adds description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * [sub description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * [mul description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * [interpolate description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * [distance description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * [distanceSq description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * [isValid description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * [isNaN description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * [isZero description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * [isEqual description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * [isRelative description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * [relativeAmount description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n */\nanim8.NumberCalculator = function()\n{\n\n};\n\nanim8.override( anim8.NumberCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  }\n});\n\n/**\n * Register the calculators.\n */\nanim8.calculator['default'] = anim8.calculator['number'] = new anim8.NumberCalculator();\n","\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.Point2dCalculator = function()\n{\n\n};\n\nanim8.override( anim8.Point2dCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n\n        if ( ix || iy )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  }\n});\n\n/**\n * Register all calculators.\n */\nanim8.calculator['2d'] = new anim8.Point2dCalculator();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.Point3dCalculator = function()\n{\n\n};\n\nanim8.override( anim8.Point3dCalculator.prototype = new anim8.Calculator(), \n{\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n\n        if ( ix || iy || iz )\n        { \n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['3d'] = new anim8.Point3dCalculator();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.QuaternionCalculator = function()\n{\n\n};\n\nanim8.override( anim8.QuaternionCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n        var ia = this.isRelative( ca );\n\n        if ( ix || iy || iz || ia )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0,\n            angle: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx }, { x:0, y:0, z:0, angle:1 } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  }\n});\n\n\n/**\n * Register the calculator.\n */\nanim8.calculator['quaternion'] = new anim8.QuaternionCalculator();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.RGBCalculator = function()\n{\n\n};\n\nanim8.override( anim8.RGBCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n\n        if ( ir || ig || ib )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n\t\t\n    // Try to parse the color.\n\t\tvar parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgb'] = new anim8.RGBCalculator();\n","\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.RGBACalculator = function()\n{\n\n};\n\nanim8.override( anim8.RGBACalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n        var ia = this.isRelative( ca );\n\n        if ( ir || ig || ib || ia )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0,\n            a: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgba'] = new anim8.RGBACalculator();\n","\n/**\n * [path description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n/**\n * [Path description]\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * [reset description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n\t{\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * [reference description]\n   * @return {[type]}\n   */\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n\n  /**\n   * [last description]\n   * @return {[type]}\n   */\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n\n  /**\n   * [first description]\n   * @return {[type]}\n   */\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n\n  /**\n   * [point description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n\n  /**\n   * [replaceComputed description]\n   * @return {[type]}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * [resolvePoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  },\n\n  /**\n   * Returns whether the path is linear. Linear paths go directly from point to\n   * point where curved paths do not. Linear paths can have their length calculated\n   * fairly easily however curves you must compute length with a given granularity.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return true;\n  },\n\n  /**\n   * Computes the length of the Path with a given granularity. Granularity\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  length: function(granularity)\n  {\n    var distance = 0;\n    var calc = this.calculator;\n\n    if ( this.isLinear() )\n    {\n      var prev = this.resolvePoint( 0 );\n\n      for (var i = 1; i < this.points.length; i++)\n      {\n        var next = this.resolvePoint( i );\n\n        distance += calc.distance( prev, next );\n\n        prev = next;\n      }\n    }\n    else\n    {\n      var deltadelta = 1.0 / granularity;\n      var delta = delta;\n      var prev = calc.clone( this.resolvePoint( 0 ) );\n      var temp = calc.create();\n\n      for (var i = 1; i <= granularity; i++)\n      {\n        var next = this.compute( temp, delta );\n\n        distance += calc.distance( prev, next );\n\n        temp = prev;\n        prev = next;\n      }\n    }\n\n    return distance;\n  }\n\n};\n","\n/**\n * [Tween description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n\n});\n\n/**\n * [tween description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['tween'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  var defaultValue = calc.create();\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, defaultValue ),\n    calc.parse( path.end, defaultValue )\n  );\n};\n","\n/**\n * [CubicPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.CubicPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  },\n\n  /**\n   * CubicPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [cubic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['cubic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * [QuadraticPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.QuadraticPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  },\n\n  /**\n   * QuadraticPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [quadratic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['quadratic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * [DeltaPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.DeltaPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n      return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n\n});\n\n/**\n * [delta description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['delta'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * [JumpPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.JumpPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n  }\n\n});\n\n/**\n * [jump description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['jump'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * [CompiledPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.CompiledPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CompiledPath( this.name, this, this.points.length );\n  }\n\n});\n\n/**\n * [compiled description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['compiled'] = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * [KeyframePath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.KeyframePath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n\n});\n\n/**\n * [keyframe description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['keyframe'] = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * [PointPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.override( anim8.PointPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.copy( out, this.resolvePoint( 0 ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n  }\n\n});\n\n/**\n * [point description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['point'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.Spring.prototype = \n{\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  reset: function(attribute, calculator, rest, position, gravity)\n  { \n    this.attribute    = attribute;\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = null;\n    this.time         = 0;\n  },\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  preupdate: function(animator)\n  {\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.create() );\n    this.velocity   = calc.create();\n  },\n\n  /**\n   * [parseValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isFunction( parsed ) )\n    {\n      if ( parsed.computed )\n      {\n        parsed = parsed( this, animator );\n      }\n    }\n\n    return parsed;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} now\n   * @param {object} frame\n   */\n  update: function(now, frame)\n  {\n    if (this.time === 0)\n    {\n      this.time = now;\n    }\n    \n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (now - this.time) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.copy( {}, this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    this.time = now;\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  }\n};\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * [LinearSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.LinearSpring.prototype = new anim8.Spring(), \n{\n  preupdate: function(animator)\n  {\n    anim8.Spring.prototype.preupdate.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['linear'] = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\n/**\n * [DistanceSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.DistanceSpring.prototype = new anim8.Spring(), \n{\n  preupdate: function(animator)\n  {\n    anim8.Spring.prototype.preupdate.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['distance'] = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\n/**\n * [EventState description]\n * @type {[type]}\n */\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\n/**\n * [Event description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {Boolean}\n * @param {[type]}\n * @param {Function}\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  if ( attribute )\n  {\n    this.attribute        = attribute;\n    this.path             = path;\n    this.easing           = anim8.easing( easing );\n    this.delay            = anim8.delay( delay );\n    this.duration         = anim8.duration( duration );\n    this.sleep            = anim8.sleep( sleep );\n    this.repeat           = anim8.repeat( repeat );\n    this.scale            = anim8.scale( scale );\n    this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.create() );\n    this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n    this.parser           = parser;\n    this.next             = next; \n  }\n};\n\nanim8.Event.prototype = \n{\n  /**\n   * [newInstance description]\n   * @return {[type]}\n   */\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this );\n  },\n\n  /**\n   * [isInstance description]\n   * @return {Boolean}\n   */\n  isInstance: function()\n  {\n    return false\n  },\n\n  /**\n   * [getParser description]\n   * @return {[type]}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * [totalTime description]\n   * @return {[type]}\n   */\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n\n  /**\n   * [isInfinite description]\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n\n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(e)\n  {\n    if ( this.next )\n    {\n      this.next.queue( e );\n    }\n    else\n    {\n      this.next = e;\n    }\n  }\n\n};\n","\n/**\n * [EventInstance description]\n * @param {[type]}\n */\nanim8.EventInstance = function(event)\n{\n\tthis.event \t\t\t      = event;\n\tthis.attribute \t      = event.attribute;\n\tthis.path \t\t\t      = event.path;\n\tthis.duration \t      = event.duration;\n\tthis.easing \t\t      = event.easing;\n\tthis.delay \t\t\t      = event.delay;\n\tthis.sleep \t\t\t      = event.sleep;\n\tthis.repeat \t\t      = event.repeat;\n  this.scale            = event.scale;\n  this.scaleBase        = event.scaleBase;\n  this.hasInitialState  = event.hasInitialState;\n  this.next             = null;\n  this.state \t\t\t      = anim8.EventState.CREATED;\n  this.time \t\t\t      = 0;\n  this.pauseTime \t      = 0;\n  this.pauseState       = 0;\n\tthis.elapsed\t\t      = 0;\n  this.cycle            = 0;\n};\n\nanim8.override( anim8.EventInstance.prototype = new anim8.Event(),\n{\n  /**\n   * [newInstance description]\n   * @return {[type]}\n   */\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this.event );\n  },\n\n  /**\n   * [isInstance description]\n   * @return {Boolean}\n   */\n  isInstance: function()\n  {\n    return true\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.EventInstance( this.event );\n  },\n\n  /**\n   * [getParser description]\n   * @return {[type]}\n   */\n  getParser: function()\n  {\n    return this.event.parser;\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * [update description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(now, frame) \n\t{\n    var updated = false;\n    var elapsed = this.catchup( now );\n    \n    if ( this.isAnimating() ) \n\t\t{\t\t\t\n      var delta = elapsed / this.duration;\n      \n      if (delta >= 1 || this.duration === 0)\n\t\t\t{\n        if (!this.isInfinite() && --this.repeat === 0) \n\t\t\t\t{\n          this.finish(frame);\n\t\t\t\t\t\n          return true;\n        } \n\t\t\t\telse \n\t\t\t\t{\n          if (this.sleep)\n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING ); \n            delta = 1;\n            \n            this.trigger('sleeping', this);\n          } \n\t\t\t\t\telse \n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.ANIMATING );\n            delta -= 1;\n          }\n        }\n      }\n      \n      this.applyValue( frame, frame[this.attribute], delta );\n      updated = true;\n    }\n    \n    return updated;\n  },\n\n  /**\n   * [catchup description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  catchup: function(now)\n  {\n    if ( this.isPaused() )\n    {\n      return;\n    }\n    \n    if ( this.state === anim8.EventState.CREATED )\n    {\n      this.time = now;\n      \n      if ( this.delay )\n      {\n        this.state = anim8.EventState.DELAYED;\n        \n        this.trigger('delaying', this);\n      } \n      else\n      {\n        this.state = anim8.EventState.ANIMATING;\n      }\n    }\n    \n    var elapsed = now - this.time;\n    \n    if ( this.isDelayed() )\n    {\n      if ( elapsed > this.delay ) \n      {\n        this.trigger('delayed', this);\n        \n        elapsed = this.progress( elapsed, this.delay, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isSleeping() )\n    {\n      if ( elapsed > this.sleep )\n      {\n        this.trigger('slept', this);\n        \n        elapsed = this.progress( elapsed, this.sleep, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isAnimating() && this.duration )\n    {\n      var cycle = this.duration + this.sleep;\n      var cycleCount = Math.floor( ( elapsed + this.sleep ) / cycle );\n      var maxCycles = Math.min( this.repeat, cycleCount );\n            \n      elapsed = this.progress( elapsed, maxCycles * cycle, anim8.EventState.ANIMATING );\n      \n      if ( !this.isInfinite() )\n      { \n        if (maxCycles === this.repeat)\n        {\n          elapsed = this.duration;\n          this.repeat = 1;\n        }\n        else\n        {\n          this.repeat -= cycleCount;\n        }\n      }\n      \n      if ( elapsed > this.duration )\n      {\n        elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING );\n        \n        this.trigger('sleeping', this);\n      }\n    }\n    \n    return elapsed;\n  },\n\n  /**\n   * [computeValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * [progress description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  progress: function(elapsed, time, newState) \n  {\n    this.time += time;\n    this.elapsed += time;\n    this.state = newState;\n    \n    return elapsed - time;\n  },\n\n  /**\n   * [finish description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n    \n    this.trigger('finish', this);\n  },\n\n  /**\n   * [applyValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[this.attribute] = value;\n    }\n  },\n\n  /**\n   * [getDelta description]\n   * @return {[type]}\n   */\n  getDelta: function()\n  {\n    return this.isAnimating() ? Math.min( 1.0, (anim8.now() - this.time) / this.duration ) : 0.0;\n  },\n\n  /**\n   * [getPoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getPoint: function(delta)\n  {\n    return this.computeValue( this.path.calculator.create(), delta );\n  },\n\n  /**\n   * [getFuture description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getFuture: function(fdelta)\n  {\n    return this.getPoint( Math.min( 1.0, this.getDelta() + fdelta ) );\n  },\n\n  /**\n   * [getStart description]\n   * @return {[type]}\n   */\n  getStart: function()\n  {\n    return this.getPoint( 0 );\n  },\n\n  /**\n   * [getEnd description]\n   * @return {[type]}\n   */\n  getEnd: function() \n\t{\n    return this.getPoint( 1 );\n  },\n\n  /**\n   * [pause description]\n   * @return {[type]}\n   */\n  pause: function() \n  {\n    if (this.state !== anim8.EventState.PAUSED) \n    {\n      this.pauseTime = anim8.now();\n      this.pauseState = this.state;\n      this.state = anim8.EventState.PAUSED; \n    }\n  },\n\n  /**\n   * [resume description]\n   * @return {[type]}\n   */\n  resume: function() \n  {\n    if (this.state === anim8.EventState.PAUSED) \n    {\n      this.time += anim8.now() - this.pauseTime;\n      this.state = this.pauseState; \n    }\n  },\n\n  /**\n   * [hasStarted description]\n   * @return {Boolean}\n   */\n  hasStarted: function()\n  {\n    return (this.state !== anim8.EventState.CREATED && this.state !== anim8.EventState.DELAYED);\n  },\n\n  /**\n   * [isAnimating description]\n   * @return {Boolean}\n   */\n  isAnimating: function() \n  {\n    return (this.state === anim8.EventState.ANIMATING);\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function() \n  {\n    return (this.state === anim8.EventState.FINISHED);\n  },\n\n  /**\n   * [isDelayed description]\n   * @return {Boolean}\n   */\n  isDelayed: function() \n  {\n    return (this.state === anim8.EventState.DELAYED);\n  },\n\n  /**\n   * [isPaused description]\n   * @return {Boolean}\n   */\n  isPaused: function() \n  {\n    return (this.state === anim8.EventState.PAUSED);\n  },\n\n  /**\n   * [isSleeping description]\n   * @return {Boolean}\n   */\n  isSleeping: function() \n  {\n    return (this.state === anim8.EventState.SLEEPING);\n  },\n\n  /**\n   * [hasStates description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  hasStates: function(states) \n  {\n    return (this.state & states) !== 0;\n  },\n\n  /**\n   * [stateText description]\n   * @return {[type]}\n   */\n  stateText: function() \n  {\n    switch(this.state) \n    {\n      case anim8.EventState.CREATED:            return \"created\";\n      case anim8.EventState.DELAYED:            return \"delayed\";\n      case anim8.EventState.ANIMATING:          return \"animating\";\n      case anim8.EventState.SLEEPING:           return \"sleeping\";\n      case anim8.EventState.FINISHED:           return \"finished\";\n    }\n  }\n\n});\n\n/**\n * Adds the following event methods to EventInstances: on, once, off, trigger.\n */\nanim8.eventize( anim8.EventInstance.prototype );","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n * @param [boolean] cache\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) )\n\t{\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationStrings = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationStrings.length; k++)\n    {\n      var split = animationStrings[ k ].toLowerCase().split(' ');\n      var parsedAnimation = anim8.animation[ split[ 0 ] ];\n      var parsedOptions = anim8.options( split.slice( 1 ) );\n\n      if ( parsedAnimation )\n      {\n        if ( anim === false )\n        {\n          last = anim = parsedAnimation.extend( parsedOptions, true );\n        }\n        else\n        {\n          last = last.next = parsedAnimation.extend( parsedOptions, true );\n        }\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n\t\tvar events = [];\n\t\tvar options = options || {};\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, events );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (events.length)\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, events );\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Parses a value into a transition object. If the given input is a string it's\n * expected to be in a similar format to:\n *\n * [time] [outroDelta] +[introDelta] [easing[-easingType]] ^[granularity]\n *\n * This is also a registry of transitions, you can add your own transitions that\n * can be used later with syntax like:\n *\n * anim8.transition['myTransition'] = anim8.transition('50ms 0.05 linear');\n *\n * So you can use 'myTransition' as the transition input.\n * \n * @param {object|string|array} options\n * @param {boolean} cache\n * @return {object}\n */\nanim8.transition = function(transition, cache)\n{\n  // 1. If it's a string, convert it into an array.\n  // 2. If it's an array, parse it and convert it into an object.\n  // 3. If it's an object, fill in any missing values with the defaults.\n\n  var originalInput = transition;\n\n  if ( anim8.isString( transition ) )\n  {\n    if ( transition in anim8.transition )\n    {\n      return anim8.transition[ transition ];\n    }\n\n    transition = transition.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( transition ) )\n  {\n    var transitionArray = transition;\n\n    transition = {};\n\n    for (var i = 0; i < transitionArray.length; i++)\n    {\n      var part = transitionArray[i];\n      var first = part.charAt( 0 );\n\n      // Introduction Delta (into next event)\n      if ( first === '+' )\n      {\n        var introDelta = parseFloat( part.substring(1) );\n\n        if ( !isNaN( introDelta ) )\n        {\n          transition.introDelta = introDelta;\n        }\n      }\n      // Granularity (for smooth transitions)\n      else if ( first === '^' )\n      {\n        var granularity = parseInt( part.substring(1) );\n\n        if ( !isNaN( granularity ) && granularity > 0 )\n        {\n          transition.granularity = granularity;\n        }\n      }\n      else\n      {\n        // Easing\n        var easing = anim8.easing( part, false );\n\n        if ( easing !== false )\n        {\n          transition.easing = easing;\n        }\n\n        // Outroduction Delta\n        if ( anim8.isDefined( transition.time ) )\n        {\n          var outroDelta = parseFloat( part );\n\n          if ( !isNaN( outroDelta ) && outroDelta >= 0 && outroDelta <= 1 )\n          {\n            transition.outroDelta = outroDelta;\n          }\n        }\n        else\n        {\n          // Time\n          var time = anim8.time( part, false );\n\n          if ( time !== false )\n          {\n            transition.time = time;\n          }\n        }\n\n      }\n    }\n  }\n\n  if ( anim8.isObject( transition ) )\n  {\n    if ( !anim8.isNumber( transition.time ) )\n    {\n      transition.time = anim8.time( transition.time, anim8.defaults.transitionTime );\n    }\n    if ( !anim8.isNumber( transition.outroDelta ) )\n    {\n      transition.outroDelta = anim8.defaults.transitionOutroDelta;\n    }\n    if ( !anim8.isNumber( transition.introDelta ) )\n    {\n      transition.introDelta = anim8.defaults.transitionIntroDelta;\n    }\n    if ( !anim8.isDefined( transition.easing ) )\n    {\n      transition.easing = anim8.easing( anim8.defaults.transitionEasing );\n    }\n    if ( !anim8.isNumber( transition.granularity ) )\n    {\n      transition.granularity = anim8.defaults.transitionGranularity;\n    }\n\n    if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheTransitions ) )\n    {\n      anim8.transition[ originalInput ] = transition;\n    }\n\n    return transition;\n  }\n\n  return anim8.defaults.noTransition;\n};\n\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n *\n * [duration] x[repeat] z[sleep] ~[delay] ![scale] [easing[-easingType]]\n *\n * This is also a registry of options, you can add your own options that\n * can be used later with syntax like:\n *\n * anim8.option['myOptions'] = anim8.option('1.5s x2 !2');\n *\n * So you can use 'myOptions' as the options input.\n * \n * @param {object|string|array} options\n * @param {boolean} cache\n * @return {object}\n */\nanim8.options = function(options, cache)\n{\n  var originalInput = options;\n\n  if ( anim8.isString( options ) )\n  {\n    if ( options in anim8.options )\n    {\n      return anim8.options[ options ];\n    }\n\n    options = options.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( options ) )\n  {\n    var parsed = {};\n\n    for (var i = 0; i < options.length; i++)\n    {\n      var part = options[i];\n      var first = part.charAt( 0 );\n\n      // Repeats\n      if ( first === 'x' )\n      {\n        var repeat = anim8.repeat( part.substring(1), false );\n\n        if ( repeat !== false )\n        {\n          parsed.repeat = repeat;\n        }\n      }\n      // Sleeping\n      else if ( first === 'z' )\n      {\n        var sleep = anim8.time( part.substring(1), false );\n\n        if ( sleep !== false )\n        {\n          parsed.sleep = sleep;\n        }\n      }\n      // Delay\n      else if ( first === '~' )\n      {\n        var delay = anim8.time( part.substring(1), false );\n\n        if ( delay !== false )\n        {\n          parsed.delay = delay;\n        }\n      }\n      // Scaling\n      else if ( first === '!' )\n      {\n        var scale = parseFloat( part.substring(1) );\n\n        if ( !isNaN(scale) )\n        {\n          parsed.scale = scale;\n        }\n      }\n      else\n      {\n        // Easing?\n        var easing = anim8.easing( part, false );\n\n        if ( easing !== false )\n        {\n          parsed.easing = easing;\n        }\n\n        // Duration?\n        var duration = anim8.time( part, false );\n\n        if ( duration !== false )\n        {\n          parsed.duration = duration;\n        }\n        else\n        {\n          // If not a duration, might be an alternative repeat? (doesn't start with x)\n          var repeat = anim8.repeat( part, false );\n\n          if ( repeat !== false )\n          {\n            parsed.repeat = repeat;\n          }\n        }\n      }\n    }\n\n    if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheOptions ) )\n    {\n      anim8.options[ originalInput ] = parsed;\n    }\n\n    return parsed; \n  }\n\n  if ( anim8.isObject( options ) )\n  {\n    return options;\n  }\n\n  return anim8.defaults.noOptions;\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the events that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate events, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} events\n */\nanim8.Animation = function(name, input, options, events)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.events = events;\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an array of event instances from the events in this animation.\n   */\n  newEvents: function()\n  {\n    var instances = [];\n    \n    for (var i = 0; i < this.events.length; i++)\n    {\n      instances.push( this.events[i].newInstance() );\n    }\n    \n    return instances;\n  },\n\n  /**\n   * Generates an array of event clones from the events in this animation.\n   * \n   * @return {array}\n   */\n  cloneEvents: function()\n  {\n    var events = [];\n\n    for (var i = 0; i < this.events.length; i++)\n    {\n      events.push( this.events[i].clone() );\n    }\n\n    return events;\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {object} options\n   * @param  {array} events\n   * @return {[type]}\n   */\n  merge: function(options, events)\n  {\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, events );\n      }\n    }\n\n    return events;\n  },\n\n  /**\n   * Extends this animation and returns an animation modified with the given options. \n   *\n   * @param {object} options\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var events = this.cloneEvents();\n\n    this.merge( options, events );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, events );\n  }\n\n};","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(subject)\n\t{\n\t  this.subject = subject;\n\t  this.events = {};\n    this.eventsAdded = [];\n    this.eventsComputed = [];\n    this.springs = {};\n    this.springsAdded = [];\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    this.cycleCurrent = 0;\n    this.cycleNext = 0;\n    \n    return this;\n\t},\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are placed\n   * to group them together so we know when to apply their initial value.\n   * \n   * @return {this}\n   */\n  newCycle: function()\n  {\n    this.cycleNext++;\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all events & springs with the same cycle\n   * identifier and applying their initial state.\n   * \n   * @return {this}\n   */\n  applyCurrentCycle: function()\n  {\n    /**\n     * Cycle is applied to event before its placed on the animator or queued\n     * When no events/springs exist for the current cycle, increment it and apply it\n     */\n\n    var cycle = this.cycleCurrent;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the attribute descriptor\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  { \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function()\n  {\n    // If there are events placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the even'ts path.\n    var ce = this.eventsComputed;\n    if ( ce.length )\n    {\n      for (var i = 0; i < ce.length; i++)\n      {\n        var e = ce[ i ];\n\n        e.path = e.path.replaceComputed( e, this );        \n      }\n\n      ce.length = 0;\n    }\n    \n    // If there isn't a value in frame for any of the events on the animator,\n    // place the default value.\n    var ea = this.eventsAdded;\n    if ( ea.length )\n    {\n      for (var i = 0; i < ea.length; i++)\n      {\n        this.setDefault( ea[ i].attribute );\n      }\n\n      ea.length = 0;\n    }\n\n    // Call pre update on any new springs.\n    var sa = this.springsAdded;\n    if ( sa.length )\n    {\n      for (var i = 0; i < sa.length; i++)\n      {\n        var s = sa[i];\n\n        this.setDefault( s.attribute );\n\n        s.preupdate( this );\n      }\n\n      sa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this Animator if there's no value there.\n   * \n   * @param {[type]}\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    \n    this.finished = true;\n\t\t\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      this.updated[ attr ] = e.update( now, this.frame );\n      \n      this.finished = this.finished && e.isFinished();\n    }\n    \n    for (var attr in this.springs)\n    {\n      var s = this.springs[ attr ];\n      \n      this.updated[ attr ] = s.update( now, this.frame );\n      \n      this.finished = false;\n    }\n\t\n\t\tthis.trigger('update');\n    \n    return this;\n  },\n  \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function(s)\n  {\n    var attr = s.attribute;\n    \n    this.springs[ attr ] = s;\n    this.springsAdded.push( s );\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function(e)\n  {\n    var attr = e.attribute;\n\n    this.events[ attr ] = e;\n    this.eventsAdded.push( e );\n    \n    if ( e.hasComputed() )\n    {\n       this.eventsComputed.push( e );\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimEvents();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      var e = this.events[attr];\n      \n      if ( e.isFinished() )\n      {\n        if ( e.next )\n        {                    \n          this.placeEvent( e.next );\n          this.finished = false;\n        }\n        else\n        {\n          delete this.events[attr];\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there already.\n   * \n   * @return {[type]}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createEvents: function(animation, options, cache)\n  {\n    var options = anim8.options( options );    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var events = animation.newEvents();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, events );\n    }\n    \n    this.onAnimation( animation, options, events );\n\n    if ( animation.next !== null )\n    {\n      var eventMap = {};\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[i];\n\n        eventMap[ e.attribute ] = e;\n      }\n\n      while ( animation.next !== null )\n      {\n        animation = animation.next;\n\n        var queueEvents = animation.newEvents();\n        var maxRemaining = 0;\n\n        for (var i = 0; i < events.length; i++)\n        {\n          var e = events[i];\n\n          if ( !e.isInfinite() )\n          {\n            maxRemaining = Math.max( maxRemaining, e.timeRemaining() );  \n          }\n        }\n\n        for (var i = 0; i < queueEvents.length; i++)\n        {\n          var e = queueEvents[ i ];\n          var existing = eventMap[ e.attribute ];\n\n          if ( existing && !existing.isInfinite() )\n          {\n            e.delay += (maxRemaining - existing.timeRemaining());\n            eventMap[ e.attribute ].queue( e );\n          }\n          else\n          {\n            e.delay += maxRemaining;\n            eventMap[ e.attribute ] = e;\n            events.push( e );\n          }\n        }\n\n        this.onAnimation( animation, options, queueEvents );\n      }      \n    }\n\n    return events;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeSpring( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Removes springs for the specified attributes. If no attributes are specified then all springs\n   * are removed. Attributes can be specified as an array of attribute names or a string with attribute\n   * names separated by a space.\n   *\n   * @param {string|Array} attributes\n   */\n  unspring: function(attributes)\n  {\n    return this.springsFor( attributes, function(s)\n    {\n      delete this.springs[ s.attribute ];\n    });\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Existing events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   * @param [boolean] cache\n   */\n\tplay: function(animation, options, all, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.playEvents( events, all );\n\n    return this.activate();\n\t},\n\n  /**\n   * Adds events to this Animator to be played (optionally finishing events for attributes not specified in the given \n   * attribute). Existing events will be replaced immediately. This method will not activate the Animator, that has\n   * to be done manually.\n   * \n   * @param  {array} events\n   * @param  [boolean] all\n   * @return {this}\n   */\n  playEvents: function(events, all)\n  {\n    var attrs = {};\n    \n    for (var i = 0; i < events.length; i++)\n    { \n      this.placeEvent( events[i] );\n      \n      attrs[ events[i].attribute ] = true;\n    }\n    \n    if ( all )\n    {\n      for (var attr in this.events)\n      {\n        if ( !(attr in attrs) )\n        {\n          this.events[ attr ].finish( this.frame );\n        }\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n        \n    this.queueEvents( events );\n\n    return this.activate();\n\t},\n\n  /**\n   * Queues an array of events on this Animator. The given events will be delayed to start at the same time - at the\n   * end of the events currently on the Animator. This method will not activate the Animator, that has to be done \n   * manually.\n   * \n   * @param  {array} events\n   * @return {this}\n   */\n  queueEvents: function(events)\n  {\n    var maxRemaining = this.timeRemaining();\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var existing = this.events[ attr ];\n      \n      if ( attr in this.events  && !existing.isInfinite() )\n      {    \n        e.delay += (maxRemaining - existing.timeRemaining());\n        \n        existing.queue( e );\n      }\n      else\n      {\n        e.delay += maxRemaining;\n        \n        this.placeEvent( e );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n\n    this.transitionEvents( transition, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation. This method will not activate the \n   * Animator, that has to be done manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param [array] events\n   * @param [boolean] all\n   */\n  transitionEvents: function(transition, events, all)\n  {\n    // Check if we even need to transition\n    var transitionRequired = false;\n    \n    for (var i = 0; i < events.length && !transitionRequired; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transitionRequired = true;\n      }\n    }\n    \n    // Only transition if we need to\n    if ( transitionRequired )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transition.outroDelta );\n          var p2 = e1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, calc, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transition.time, transition.easing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transition.time;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transitionInto: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.transitionIntoEvents( transition, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation. This method will not activate the Animator, that has to be done \n   * manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {array} events\n   * @param [boolean] all\n   */\n  transitionIntoEvents: function(transition, events, all)\n  {\n    // Check if we even need to transition\n    var transitionRequired = false;\n    \n    for (var i = 0; i < events.length && !transitionRequired; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transitionRequired = true;\n      }\n    }\n    \n    // Only transition if we need to\n    if ( transitionRequired )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transition.outroDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transition.introDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transition.time, transition.easing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transition.time;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n      \n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {string} attr\n   * @param {any} target\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenTo: function(attr, target, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attribute to target values.\n   *\n   * @param {object} targets\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenManyTo: function(targets, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {string} attr\n   * @param {any} starts\n   * @param {any} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tween: function(attr, starts, ends, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {object} starts\n   * @param {object} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenMany: function(starts, ends, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n\t\n\t/**\n\t * Applies the initial state of all unstarted current events for the specified attributes immediately. \n\t * Attribute names can be given as an array or a space separated string. If no attributes are given all \n\t * attributes are assumed.\n\t *\n   * @param {string|array} attributes\n\t */\n\tapplyInitialState: function(attributes)\n\t{\n\t\tvar eventCount = this.eventsFor( attributes, function(event, attr)\n\t\t{\n\t\t\tif ( !event.hasStarted() && event.hasInitialState )\n\t\t\t{\n        this.setDefault( attr );\n\n\t\t\t\tevent.applyValue( this.frame, this.frame[ attr ], 0.0 );\n\t\t\t\t\n\t\t\t\tthis.updated[ attr ] = true;\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.apply();\n\t\t\n\t\treturn eventCount;\n\t},\n\n  /**\n   * Returns the amount of time remaining for all finite events in this Animator.\n   * \n   * @return {number} milliseconds\n   */\n  timeRemaining: function()\n  {\n    var remaining = 0;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      if ( !e.isInfinite() )\n      {\n        remaining = Math.max( remaining, e.timeRemaining() );  \n      }\n    }\n\n    return remaining;\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n    \n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n      \n      request[ attr ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n      \n      return attribute.defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number|string] duration\n   * @param [number|string] delay\n   * @param [function|string] easing\n   * @param [number|string] repeat\n   * @param [number|string] sleep  \n   * @param [number] scale\n   */\n  follow: function(attribute, path, options)\n  {\n    var options = anim8.options( options );\n    var path = anim8.path( path );\n    \n    var event = new anim8.Event( \n      attribute, \n      path, \n      options.duration,\n      options.easing,\n      options.delay, \n      options.sleep,\n      options.repeat,\n      options.scale,\n      options.scaleBase\n    );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  objectsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n    \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        \n        if ( attr in objects )\n        {\n          if ( resulting )\n          {\n            results.push( objects[attr] );\n          }\n          else\n          {\n            callback.call( this, objects[attr], attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      for (var attr in objects)\n      {\n        if ( resulting )\n        {\n          results.push( objects[attr] );\n        }\n        else\n        {\n          callback.call( this, objects[attr], attr );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n  \n  /**\n   * Invokes the callback for each event for the given attributes.\n   * \n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\teventsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.events );\n\t},\n  \n  /**\n   * Invokes the callback for each spring for the given attributes.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\tspringsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.springs );\n\t},\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event, attr) \n\t\t{\n\t\t\tdelete this.events[ attr ];\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event) \n\t\t{\n\t\t\twhile (event.next)\n\t\t\t{\n\t\t\t\tevent = event.next;\n\t\t\t}\n\t\t\t\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attribtues. Unsetting involves removing all events,\n   * springs, and the current value in the frame.\n   * \n   * @param  {string|array|object}\n   * @return {this}\n   */\n  unset: function(attributes)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      delete this.events[ attributes ];\n      delete this.springs[ attributes ];\n      delete this.frame[ attribute ];\n    }\n    else if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        this.unset( attributes[ i ] );\n      }\n    }\n    else if ( anim8.isObject( attributes ) )\n    {\n      for (var attr in attributes)\n      {\n        this.unset( attr );\n      }\n    }\n\n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator.\n   */\n  hasSprings: function()\n  {\n    for (var attr in this.springs)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator or animating events.\n   */\n  isAnimating: function()\n  {\n    if ( this.hasSprings() )\n    {\n      return true;\n    }\n    \n    for (var attr in this.events)\n    {\n      if ( this.events[attr].isAnimating() )\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  },\n\n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator if none is given. This is particularly\n   * useful for having a function be called on deferred statements.\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  invoke: function(func, context, arguments)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, arguments || [] );\n    }\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n   * @param [function] callback\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t}\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'play', 'queue', 'transition', 'transitionInto', 'restore', 'set', 'unset', 'resume', 'pause', \n  'finish', 'end', 'stop', 'follow', 'applyInitialState', 'tweenTo', \n  'tween', 'tweenMany', 'tweenManyTo', 'spring', 'unspring', 'apply', \n  'placeSpring', 'placeEvent', 'invoke'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.override( anim8s.fn = anim8.Animators.prototype = new Array(),\n{\n  /**\n   * Invokes a callback for each element in the array.\n   * \n   * @param {function} iterator\n   */\n  each: function(iterator, context) \n  {\n    for (var i = 0; i < this.length; i++) \n    {\n      if ( iterator.call( context || this[i], this[i], i ) === false ) \n      {\n        break;\n      }\n    }\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @param {array} animators\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n   *\n   * @param {function} filterer\n   */\n  filter: function(filterer)\n  {\t\n  \tvar alive = 0;\n  \t\n  \tfor (var i = 0; i < this.length; i++)\n  \t{\n  \t\tvar remove = filterer( this[i] );\n  \t\t\n  \t\tif ( !remove )\n  \t\t{\n  \t\t\tthis[alive++] = this[i];\n  \t\t}\n  \t}\n  \t\n  \tthis.length = alive;\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubjects: function(wrapper)\n  {\n    var subjects = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      subjects.push( this[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   */\n  first: function()\n  {\n    return this[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   */\n   reverse: function()\n   {\n    var last = this.length - 1;\n    var mid = Math.floor( this.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = this[ i ];\n      var e1 = this[ last - i ];\n\n      this[ i ] = e1;\n      this[ last - i ] = e0;\n    }\n\n    return this;\n   },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   * \n   * @return {this}\n   */\n  activate: function()\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var animator = this[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Returns an array of the subjects optionally\n   */\n\n  /**\n   * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * Adds the following methods to make an array of Animators appear like a single Animator.\n   */\n  restore              : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n  placeSpring          : anim8.delegate( 'placeSpring', anim8.delegate.RETURN_THIS ),\n  placeEvent           : anim8.delegate( 'placeEvent', anim8.delegate.RETURN_THIS ),\n  preupdate            : anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS ),\n  update               : anim8.delegate( 'update', anim8.delegate.RETURN_THIS ),\n  apply                : anim8.delegate( 'apply', anim8.delegate.RETURN_THIS ),\n  trimEvents           : anim8.delegate( 'trimEvents', anim8.delegate.RETURN_THIS ),\n  deactivate           : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n  destroy              : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n  spring               : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n  unspring             : anim8.delegate( 'unspring', anim8.delegate.RETURN_THIS ),\n  play                 : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n  playEvents           : anim8.delegate( 'playEvents', anim8.delegate.RETURN_THIS ),\n  queue                : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n  queueEvents          : anim8.delegate( 'queueEvents', anim8.delegate.RETURN_THIS ),\n  transition           : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n  transitionEvents     : anim8.delegate( 'transitionEvents', anim8.delegate.RETURN_THIS ),\n  transitionInto       : anim8.delegate( 'transitionInto', anim8.delegate.RETURN_THIS ),\n  transitionIntoEvents : anim8.delegate( 'transitionIntoEvents', anim8.delegate.RETURN_THIS ),\n  tween                : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n  tweenTo              : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n  tweenMany            : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n  tweenManyTo          : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n  applyInitialState    : anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS ),\n  follow               : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n  eventsFor            : anim8.delegate( 'eventsFor', anim8.delegate.RETURN_RESULTS ),\n  springsFor           : anim8.delegate( 'springsFor', anim8.delegate.RETURN_RESULTS ),\n  stop                 : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n  end                  : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n  finish               : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n  pause \t\t\t         : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n  resume \t\t\t         : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n  set                  : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n  get                  : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n  isAnimating          : anim8.delegate( 'isAnimating', anim8.delegate.RETURN_TRUE ),\n  hasEvents            : anim8.delegate( 'hasEvents', anim8.delegate.RETURN_TRUE ),\n  hasSprings           : anim8.delegate( 'hasSprings', anim8.delegate.RETURN_TRUE ),\n  on\t\t\t             : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n  once\t\t             : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n  off\t\t\t             : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n  trigger              : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n});\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate();\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * [Sequence description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * [maxDelay description]\n   * @return {[type]}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  /**\n   * [createEvents description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  createEvents: function(animation, options, i)\n  {\n    var events = animation.newEvents();\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = 0; k < events.length; k++)\n    {\n      events[k].delay += delayOffset;\n    }\n\n    animation.merge( options, events );\n    \n    return events;\n  },\n\n  /**\n   * [reverse description]\n   * @return {[type]}\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * [play description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  play: function(animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.playEvents( sequence.createEvents( anim, options, i ), all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(animation, options, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var events = sequence.createEvents( anim, options, i );\n      \n      for (var i = 0; i < events.length; i++)\n      {\n        events[ i ].delay += delayOffset;\n      }\n      \n      animator.queueEvents( events );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transition description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionEvents( transition, sequence.createEvents( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transitionInto description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transitionInto: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionIntoEvents( transition, sequence.createEvents( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [add description]\n   */\n  add: function()\n  {\n    this.animators.activate();\n    this.animators.applyInitialState();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var easings   = animation.easings || {};\n    var delays    = animation.delays || {};\n    var sleeps    = animation.sleeps || {};\n    var repeats   = animation.repeats || {};\n    var scales    = animation.scales || {};\n    var scaleBases= animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = anim8.easing( anim8.coalesce( easings[attr],   newOptions.easing,   oldOptions.easing   ), e.easing );\n      e.repeat    = anim8.repeat( anim8.coalesce( repeats[attr],   newOptions.repeat,   oldOptions.repeat   ), e.repeat );\n      e.delay     = anim8.time(   anim8.coalesce( delays[attr],    newOptions.delay,    oldOptions.delay    ), e.delay );\n      e.sleep     = anim8.time(   anim8.coalesce( sleeps[attr],    newOptions.sleep,    oldOptions.sleep    ), e.sleep );\n      e.duration  = anim8.time(   anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration ), e.duration );\n      e.scale     =               anim8.coalesce( scales[attr],    newOptions.scale,    oldOptions.scale     , e.scale );\n      e.scaleBase = calc.parse(   anim8.coalesce( scaleBases[attr],newOptions.scaleBase,oldOptions.scaleBase), e.scaleBase );\n    }\n  }\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the events\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar deltas = animation.deltas;\n  \tvar values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      var valueCount = 0;\n      \n  \t\tfor (var attr in values)\n  \t\t{\n        valueCount++; \n      }\n      \n      deltas = [];\n      \n      for (var i = 0; i < valueCount; i++)\n      {\n        deltas[i] = i / (valueCount - 1);\n      }\n    }\n  \tif ( anim8.isArray( deltas ) )\n  \t{\n  \t\tvar deltaObject = {};\n  \t\t\n  \t\tfor (var attr in values)\n  \t\t{\n  \t\t\tdeltaObject[attr] = deltas;\t\n  \t\t}\n  \t\t\n  \t\tdeltas = deltaObject;\n  \t}\n  \t\n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[ attr ];\n      var attribute = factory.attribute( attr );\n  \t\t\n  \t\tfor (var k = 0; k < value.length; k++)\n  \t\t{\n  \t\t\tvalue[k] = attribute.parse( value[k] );\n  \t\t}\n  \t\t\n      var duration  = anim8.coalesce( durations[attr], options.duration );\n      var easing    = anim8.coalesce( easings[attr], options.easing );\n      var delay     = anim8.coalesce( delays[attr], options.delay );\n      var sleep     = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat    = anim8.coalesce( repeats[attr], options.repeat );\n      var scale     = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path      = new anim8.DeltaPath( attr, attribute.calculator, values[attr], deltas[attr] );\n      var event     = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['values'] = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Generate the events, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar values = animation.final;\n    var delays = animation.delays || {};\n    var durations = animation.durations || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    var calculators = {};\n  \tvar defaults = {};\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var duration   = anim8.duration( anim8.coalesce( durations[attr], options.duration ) );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, scale, scaleBase, false, this );\n      \n      events.push( event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales    = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      var delay = anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay );\n      var duration = anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration );\n\n      e.delay = anim8.delay( delay ) + anim8.duration( duration );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['final'] = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Generate the events, only caring about the delays\n    \n    var factory    = anim8.factory( animation.factory );\n  \tvar values     = animation.initial;\n    var delays     = animation.delays || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      e.delay = anim8.time( anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay ), e.delay );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['initial'] = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the events\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    \n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n  \t\t\t\n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n  \t\n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = anim8.coalesce( durations[attr], options.duration );\n      var delay     = anim8.coalesce( delays[attr], options.delay );\n      var sleep     = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat    = anim8.coalesce( repeats[attr], options.repeat );\n      var scale     = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path      = new anim8.KeyframePath( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser['keyframe'] = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTween = function()\n{\n  \n};\n\n// ParserTween extends anim8.Parser()\nanim8.override( anim8.ParserTween.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n    var durations  = animation.durations || {};\n    var easings    = animation.easings || {};\n    var delays     = animation.delays || {};\n    var sleeps     = animation.sleeps || {};\n    var repeats    = animation.repeats || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBase || {};\n\n  \tfor (var attr in tweenTo)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[attr] );\n      var duration   = anim8.coalesce( durations[attr], options.duration );\n      var easing     = anim8.coalesce( easings[attr], options.easing );\n      var delay      = anim8.coalesce( delays[attr], options.delay );\n      var sleep      = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat     = anim8.coalesce( repeats[attr], options.repeat );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, value );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenTo'] = new anim8.ParserTween();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParserMove = function()\n{\n  \n};\n\n// ParserMove extends anim8.Parser()\nanim8.override( anim8.ParserMove.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var move       = animation.move;\n    var durations  = animation.durations || {};\n    var easings    = animation.easings || {};\n    var delays     = animation.delays || {};\n    var sleeps     = animation.sleeps || {};\n    var repeats    = animation.repeats || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBase || {};\n\n  \tfor (var attr in move)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[attr] );\n      var duration   = anim8.coalesce( durations[attr], options.duration );\n      var easing     = anim8.coalesce( easings[attr], options.easing );\n      var delay      = anim8.coalesce( delays[attr], options.delay );\n      var sleep      = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat     = anim8.coalesce( repeats[attr], options.repeat );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, anim8.computed.relative( value ) );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['move'] = new anim8.ParserMove();\n","\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n * \n * @param  [string|anim8.Factory]\n * @return {anim8.Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory.default;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n  this.priority = 0;\n  this.attributes = {};\n};\n\nanim8.override( anim8.ObjectFactory.prototype = new anim8.Factory(),\n{\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;\n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.create() );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory['default'] = anim8.factory['object'] = new anim8.ObjectFactory();\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute['default']                 = {defaultValue: 0};\n","\n/**\n * A factory for HTML Elements\n */\nanim8.DomFactory = function()\n{\n  this.cached = {};\n  this.ids = 0;\n  this.elementAttribute = 'anim8';\n  this.priority = 5;\n  this.attributes = {};\n};\n\nanim8.override( anim8.DomFactory.prototype = new anim8.Factory(),\n{\n  \n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isElement( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animatorId = subject.getAttribute( this.elementAttribute );\n    \n    if (!(animatorId in this.cached)) \n    {\n      var animator = new anim8.DomAnimator( subject );\n      \n      subject.setAttribute( this.elementAttribute, animatorId = animator.id = ++this.ids );\n      \n      animator.factory = this;\n      \n      this.cached[animatorId] = animator;\n    }\n\n    return this.cached[ animatorId ];\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete this.cached[ animator.id ];\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.dom.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.create() );\n      var propertyName = anim8.coalesce( attribute.property, attr );\n      var property = anim8.dom.property( propertyName );\n      var defaultUnit = attribute.defaultUnit || '';\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.propertyName = propertyName;\n      attribute.property = property;\n      attribute.defaultUnit = defaultUnit;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the DOM factory.\n */\nanim8.factory['default'] = anim8.factory['dom'] = new anim8.DomFactory();\n\n/* TODO don't apply styles if they're impercivable (convert value to pixels of applicable) */\n\n/**\n * All DOM related\n */\nanim8.dom = {};\n\n/* \n  anim8.dom.property[name] = {\n    get: function(e, anim) {\n      // based on anim.animating, gets one or more value from the entity and places it on anim.frame. this function should only do this for an attribute if\n      // anim.animating[attribute] === false. When it successfully gets a value anim.animating[attribute] should be set to true. This is called before an animation\n      // begins on attributes that will be animated based on the current value. \n    },\n    set: function(e, anim) {\n      // applies the applicable attributes in anim.frame to the entity, \n    }\n }\n*/\nanim8.dom.property = function(prop) \n{\n  if ( anim8.isObject( prop ) && anim8.isFunction( prop.get ) && anim8.isFunction( prop.set ) ) \n  {\n    return prop;\n  }\n  if ( anim8.isString( prop ) && prop in anim8.dom.property )\n  {\n\t  return anim8.dom.property[ prop ];\n  }\n\t\n  throw prop + ' is not a valid property';\n}\n\n/**\n * Computes the desired style of the given element and returns it as a string. The style\n * given must be in hyphenated format like so: anim8.dom.style( element, 'font-size' ) = '12px'\n */\nanim8.dom.style = (function()\n{\n  var hyphenated = {};\n\n  var hyphenize = function(str) \n\t{\n    if ( str in hyphenated )\n    {\n      return hyphenated[ str ];\n    }\n\n    var key = str;\n\n    str = str.replace(/[a-z][A-Z]/g, function(str, letter)\n    {\n     return str[0] + '-' + str[1].toLowerCase();\n    });\n    \n    str = str.replace(/^Webkit/, '-webkit');\n    str = str.replace(/^Moz/, '-moz');\n    str = str.replace(/^Ms/, '-ms');\n    str = str.replace(/^O/, '-o');\n    str = str.replace(/^Khtml/, '-khtml');\n    \n    return hyphenated[ key ] = str;\n  };\n\t\n\treturn function(e, style) \n\t{\n\t  if (e.currentStyle)\n\t\t{\n\t    return e.currentStyle[ style ];\n\t  } \n\t\telse if (document.defaultView && document.defaultView.getComputedStyle) \n\t\t{\n\t    return document.defaultView.getComputedStyle( e, null ).getPropertyValue( hyphenize( style ) );\n\t  } \n\t\telse \n\t\t{\n\t    return e.style[ style ]; \n\t  }\n\t};\n\t\n})();\n\n/**\n * Given an array of styles this will return the first one that is present on elements in the current browser.\n */\nanim8.dom.prefix = (function() \n{\n  var a = document.createElement('a');\n  \n  return function(prefixes) \n  {\n    for (var i = 0; i < prefixes.length; i++) \n    {\n      if ( anim8.isDefined( a.style[ prefixes[ i ] ] ) ) \n      {\n        return prefixes[i];\n      }\n    }\n    return false;\n  };\n  \n})();\n\n/**\n * Parses the string for a value and a unit.\n *\n * @param {string} value\n */\nanim8.dom.parseValue = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(px|em|%|vw|ex|cm|mm|in|pt|pc|deg|rad)?/;\n  \n  return function(x)\n  {\n    var parsed = regex.exec( x );\n    \n    if (parsed) \n    {      \n      return {\n        value: parseFloat( parsed[1] ),\n        unit: parsed[3]\n      }\n    }\n    \n    return false;\n  };\n})();\n\n\n/**\n * Converts one unit to another for a given element.\n *\n * For Example: anim8.dom.convert( element, '100px', '%', 'parentWidth' )\n *    returns how much percent 100px relativeTo parentWidth of the given element\n *\n * @param {HTMLElement} e\n * @param {string} from\n * @param {string} toUnit\n * @param {string} relativeTo\n */\nanim8.dom.convert = (function()\n{\n  /**\n   * Calculators how many pixels a given value & unit is.\n   * \n   * For Example: anim8.toPixels( 100, 'in' ) \n   *    returns how many pixels are in 1 inch, with up to 2 decimal points of accuracy.\n   */\n  var toPixels = function(baseValue, baseUnit, defaultRate)\n  {\n    if ( document.body )\n    {\n      var div = document.createElement('div');\n      document.body.appendChild( div );\n      div.style.width = baseValue + baseUnit;\n      var pixels = (div.offsetWidth / baseValue);\n      document.body.removeChild( div );\n      return pixels || defaultRate;\n    }\n    \n    return defaultRate;\n  };\n\n  var getFontSize = function(e, notUnit)\n  {\n    var fontSize = anim8.dom.style( e, 'fontSize' );\n    var parsed = anim8.dom.parseValue( fontSize );\n    \n    if ( !parsed || parsed.unit === notUnit )\n    {\n      return 12;\n    }\n    \n    if ( parsed.unit === 'px' ) \n    {\n      return parsed.value;\n    }\n    \n    return getConverterScale( e, conversions[ parsed.unit ].px, relativeTo );\n  };\n\n  var variables = {};\n  \n  variables.parentWidth = function(e)\n  {\n    return e.parentNode.scrollWidth;\n  };\n  variables.parentHeight = function(e)\n  {\n    return e.parentNode.scrollHeight;\n  };\n  variables.width = function(e)\n  {\n    return e.offsetWidth;\n  };\n  variables.height = function(e)\n  {\n    return e.offsetHeight;\n  };\n  variables.fontSize = function(e)\n  {\n    return getFontSize( e, '%' );\n  };\n  variables.parentFontSize = function(e)\n  {\n    return getFontSize( e.parentNode, '%' );\n  };\n  variables.htmlFontSize = function(e)\n  {\n    var htmlElement = document.getElementsByTagName(\"html\")[0];\n    \n    return getFontSize( htmlElement, '%' );\n  };\n  \n  var conversions = {};\n  \n  conversions.pt  = { px: toPixels(100, 'pt') };\n  conversions.in  = { px: toPixels(100, 'in') };\n  conversions.cm  = { px: toPixels(1000, 'cm') };\n  conversions.mm  = { px: toPixels(100000, 'mm') };\n  conversions.vw  = { px: toPixels(1000, 'vw') };\n  conversions.deg = { rad: Math.PI / 180.0};\n\n  conversions.em = \n  {\n    px: function(e, relativeTo) \n    {\n      return getFontSize( e, 'em' );\n    }\n  };\n  \n  conversions.rem = \n  {\n    px: function(e, relativeTo) \n    {\n      var htmlElement = document.getElementsByTagName(\"html\")[0];\n      \n      return getFontSize( htmlElement, 'rem' );\n    }\n  };\n  \n  conversions['%'] = \n  {\n    px: function(e, relativeTo) \n    {\n      if ( anim8.isNumber( relativeTo ) )\n      {\n        return relativeTo;\n      }\n      if ( relativeTo in variables )\n      {\n        return variables[ relativeTo ]( e ) / 100.0;\n      }\n      \n      return 1.0;\n    }\n  };\n  \n  // Populate conversions going other way.\n  for (var unit in conversions)\n  {\n    for (var to in conversions[ unit ])\n    {\n      if ( !(to in conversions) )\n      {\n        conversions[ to ] = {};\n      }\n      \n      if ( !(unit in conversions[ to ]) )\n      {\n        var given = conversions[ unit ][ to ];\n        \n        if ( anim8.isNumber( given ) )\n        {\n          conversions[ to ][ unit ] = 1.0 / given;  \n        }\n        if ( anim8.isFunction( given ) )\n        {\n          conversions[ to ][ unit ] = (function(converter) \n          {\n            return function(e, relativeTo) \n            {\n              return 1.0 / converter( e, relativeTo );\n            };\n          })( given );\n        }\n      }\n    }\n  }\n  \n  // Given an element, convert, and relativeTo - return the number we need to multiply by.\n  var getConverterScale = function(e, converter, relativeTo)\n  {\n    if ( anim8.isNumber( converter ) )\n    {\n      return converter;\n    }\n    else if ( anim8.isFunction( converter ) )\n    {\n      return converter( e, relativeTo );\n    }\n    \n    return 1.0;\n  };\n  \n  return function(e, from, toUnit, relativeTo)\n  {\n    if ( anim8.isNumber( from ) )\n    {\n      return from;\n    }\n    \n    var parsed = anim8.dom.parseValue( from );\n    \n    if ( !parsed )\n    {\n      return false;\n    }\n    \n    var value = parsed.value;\n    var fromUnit = parsed.unit;\n    \n    if ( !fromUnit || fromUnit === toUnit )\n    {\n      return value;\n    }\n    \n    // First see if we have a direct conversion available...\n    if ( fromUnit in conversions && toUnit in conversions[ fromUnit ] )\n    {\n      var converter = conversions[ fromUnit ][ toUnit ];\n      \n      value *= getConverterScale( e, converter, relativeTo );\n    }\n    // Otherwise convert it to px, then to the desired unit\n    else if ( fromUnit in conversions && conversions[ fromUnit ].px && toUnit in conversions.px )\n    {\n      var converter1 = conversions[ fromUnit ].px;\n      var converter2 = conversions.px[ toUnit ];\n      \n      value *= getConverterScale( e, converter1, relativeTo );\n      value *= getConverterScale( e, converter2, relativeTo );\n    }\n    \n    return value;\n  };\n  \n})();\n\n\n","\nanim8.dom.property.factory = function(nm, relativeTo) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryDerivable = function(nm, relativeTo, deriver) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n        else if ( anim8.isFunction( deriver ) )\n        {\n          converted = anim8.dom.convert( e, deriver( e ), anim.units[ nm ], relativeTo );\n          \n          if ( converted !== false )\n          {\n            anim.frame[nm] = converted;\n            anim.animating[nm] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryColor = function(nm) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var parsed = anim8.color.parse( e.style[nm] );\n        \n        if (parsed !== false) \n        {\n          anim.frame[nm] = parsed;\n          anim.animating[nm] = true;\n        }              \n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[nm] = anim8.color.format( anim.frame[nm] );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.padding                  = anim8.dom.property.factory( 'padding', 'parentWidth' );\nanim8.dom.property.paddingTop               = anim8.dom.property.factory( 'paddingTop', 'parentWidth' );\nanim8.dom.property.paddingRight             = anim8.dom.property.factory( 'paddingRight', 'parentWidth' );\nanim8.dom.property.paddingBottom            = anim8.dom.property.factory( 'paddingBottom', 'parentWidth' );\nanim8.dom.property.paddingLeft              = anim8.dom.property.factory( 'paddingLeft', 'parentWidth' );\n\nanim8.dom.property.margin                   = anim8.dom.property.factory( 'margin', 'parentWidth' );\nanim8.dom.property.marginTop                = anim8.dom.property.factory( 'marginTop', 'parentWidth' );\nanim8.dom.property.marginRight              = anim8.dom.property.factory( 'marginRight', 'parentWidth' );\nanim8.dom.property.marginBottom             = anim8.dom.property.factory( 'marginBottom', 'parentWidth' );\nanim8.dom.property.marginLeft               = anim8.dom.property.factory( 'marginLeft', 'parentWidth' );\n\nanim8.dom.property.borderRadius             = anim8.dom.property.factory( 'borderRadius', 'width' );\nanim8.dom.property.borderTopLeftRadius      = anim8.dom.property.factory( 'borderTopLeftRadius', 'width' );\nanim8.dom.property.borderTopRightRadius     = anim8.dom.property.factory( 'borderTopRightRadius', 'width' );\nanim8.dom.property.borderBottomLeftRadius   = anim8.dom.property.factory( 'borderBottomLeftRadius', 'width' );\nanim8.dom.property.borderBottomRightRadius  = anim8.dom.property.factory( 'borderBottomRightRadius', 'width' );\n\nanim8.dom.property.borderWidth              = anim8.dom.property.factory( 'borderWidth' );\nanim8.dom.property.borderTopWidth           = anim8.dom.property.factory( 'borderTopWidth' );\nanim8.dom.property.borderRightWidth         = anim8.dom.property.factory( 'borderRightWidth' );\nanim8.dom.property.borderBottomWidth        = anim8.dom.property.factory( 'borderBottomWidth' );\nanim8.dom.property.borderLeftWidth          = anim8.dom.property.factory( 'borderLeftWidth' );\n\nanim8.dom.property.outlineWidth             = anim8.dom.property.factory( 'outlineWidth' );\nanim8.dom.property.textIndent               = anim8.dom.property.factory( 'textIndent', 'parentWidth' );\nanim8.dom.property.borderSpacing            = anim8.dom.property.factory( 'borderSpacing' );\nanim8.dom.property.fontSize                 = anim8.dom.property.factory( 'fontSize', 'parentFontSize' );\nanim8.dom.property.lineHeight               = anim8.dom.property.factory( 'lineHeight', 'fontSize' );\nanim8.dom.property.zIndex                   = anim8.dom.property.factory( 'zIndex' );\n\nanim8.dom.property.color                    = anim8.dom.property.factoryColor( 'color' );\nanim8.dom.property.backgroundColor          = anim8.dom.property.factoryColor( 'backgroundColor' );\nanim8.dom.property.borderTopColor           = anim8.dom.property.factoryColor( 'borderTopColor' );\nanim8.dom.property.borderRightColor         = anim8.dom.property.factoryColor( 'borderRightColor' );\nanim8.dom.property.borderBottomColor        = anim8.dom.property.factoryColor( 'borderBottomColor' );\nanim8.dom.property.borderLeftColor          = anim8.dom.property.factoryColor( 'borderLeftColor' );\nanim8.dom.property.outlineColor             = anim8.dom.property.factoryColor( 'outlineColor' );\n\nanim8.dom.property.minWidth                 = anim8.dom.property.factory( 'minWidth', 'parentWidth' );\nanim8.dom.property.maxWidth                 = anim8.dom.property.factory( 'maxWidth', 'parentWidth' );\nanim8.dom.property.minHeight                = anim8.dom.property.factory( 'minHeight', 'parentHeight' );\nanim8.dom.property.maxHeight                = anim8.dom.property.factory( 'maxHeight', 'parentHeight' );\n\nanim8.dom.property.width                    = anim8.dom.property.factoryDerivable('width', 'parentWidth', function(e) { return e.offsetWidth + 'px'; });\nanim8.dom.property.height                   = anim8.dom.property.factoryDerivable('height', 'parentHeight', function(e) { return e.offsetHeight + 'px'; });\n\nanim8.dom.property.top                      = anim8.dom.property.factoryDerivable('top', 'parentHeight', function(e) { return e.offsetTop + 'px'; });\nanim8.dom.property.right                    = anim8.dom.property.factoryDerivable('right', 'parentWidth', function(e) { return (e.parentNode.scrollWidth - (e.offsetLeft + e.offsetWidth)) + 'px'; });\nanim8.dom.property.bottom                   = anim8.dom.property.factoryDerivable('bottom', 'parentHeight', function(e) { return (e.parentNode.scrollHeight - (e.offsetTop + e.offsetHeight)) + 'px'; });\nanim8.dom.property.left                     = anim8.dom.property.factoryDerivable('left', 'parentWidth', function(e) { return e.offsetLeft + 'px'; });\n\nanim8.dom.property.visibility = \n{\n  get: function(e, anim) \n  {\n    if (anim.animating.visibility === false) \n    {\n      var style = anim8.dom.style( e, 'visibility' );\n      anim.frame.visibility = style === 'hidden' ? 0.0 : 1.0;\n      anim.animating = true;\n    }\n  },\n  set: function(e, anim) \n  {\n    anim.styles.visibility = anim.frame.visibility < 0.5 ? 'hidden' : 'visible'\n  },\n  unset: function(e, anim)\n  {\n    e.style.visibility = null;\n  }\n}\n\nanim8.dom.property.backface = (function()\n{\n  var css = anim8.dom.prefix(['WebkitBackfaceVisibility', 'MozBackfaceVisibility', 'msBackfaceVisibility', 'BackfaceVisibility']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim)\n    {\n      if ( anim.animating.backface === false )\n      {\n        var style = anim8.dom.style( e, css ); \n        \n        anim.frame.backface = (style === 'visible') ? 1.0 : 0.0;\n        anim.animating.backface = true;\n      }\n    },\n    set: function(e, anim)\n    {\n      anim.styles[css] = anim.frame.backface < 0.5 ? 'none' : 'visible';\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n    \n  };\n  \n})();\n\nanim8.dom.property.transformOrigin = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransformOrigin', 'MozTransformOrigin', 'OTransformOrigin', 'msTransformOrigin', 'transformOrigin']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  var keywords = \n  {\n    'left':   '0%',\n    'center': '50%',\n    'right':  '100%',\n    'top':    '0%',\n    'bottom': '100%'\n  };\n  \n  var setOriginAttribute = function(e, value, anim, attr, relativeTo ) \n  {\n    if (anim.animating[attr] === false) \n    {\n      if ( value in keywords )\n      {        \n        value = keywords[ value ];\n      }\n\n      var converted = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n      \n      if ( converted !== false )\n      {\n        anim.frame[ attr ] = converted;\n        anim.animating[ attr ] = true;\n      }\n    }\n  };\n  \n  var setOrigin = function(e, split, anim) \n  {\n    if (anim.animating.origin === false) \n    {\n      if ((split.length === 1) || \n          (split.length === 2 && split[0] === split[1]) || \n          (split.length === 3 && split[0] === split[1] && split[1] === split[2])) \n      {     \n        setOriginAttribute( e, split[0], anim, 'origin', 'width' );\n      }            \n    }\n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      if (style) \n      {\n        var origin = style.toLowerCase();\n        var split = origin.split(' ');\n        \n        switch (split.length) \n        {\n        case 3:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOriginAttribute( e, split[2], anim, 'originZ' );\n          setOrigin( e, split, anim );\n          break;\n        case 2:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        case 1:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[0], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var style = null;\n      \n      if ( anim8.isDefined( anim.frame.originZ ) )\n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' ) + ' ' + anim.valueOr( 'originZ', 'origin', 'z' );\n      } \n      else \n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' );\n      }\n      \n      anim.styles[css] = style;\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.transform = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);\n   \n  if ( !css )\n  {\n    return false;\n  }\n\n  var d2 = { translate: true, scale: true };\n  var d3 = { translate3d: true, scale3d: true };\n  var d4 = { rotate3d: true };\n  var axis = ['X', 'Y', 'Z'];\n    \n  var regex = \n  {\n    translate: /translate\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translate3d: /translate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translateX: /translateX\\(([^\\)]+)\\)/i,\n    translateY: /translateY\\(([^\\)]+)\\)/i,\n    translateZ: /translateZ\\(([^\\)]+)\\)/i,\n    scale: /scale\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scale3d: /scale3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scaleX: /scaleX\\(([^\\)]+)\\)/i,\n    scaleY: /scaleY\\(([^\\)]+)\\)/i,\n    scaleZ: /scaleZ\\(([^\\)]+)\\)/i,\n    rotate: /rotate\\(([^\\)]+)\\)/i,\n    rotate3d: /rotate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    rotateX: /rotateX\\(([^\\)]+)\\)/i,\n    rotateY: /rotateY\\(([^\\)]+)\\)/i,\n    rotateZ: /rotateZ\\(([^\\)]+)\\)/i,\n    skew: /skew\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    skewX: /skewX\\(([^\\)]+)\\)/i,\n    skewY: /skewY\\(([^\\)]+)\\)/i\n  };\n  \n  var parse = function( e, value, anim, attr, relativeTo )\n  {\n    var desiredUnit = anim.units[ attr ];\n    var converted = anim8.dom.convert( e, value, desiredUnit, relativeTo );\n    \n    if ( converted !== false )\n    {\n      return converted;\n    }\n    \n    // TODO show convert this to desiredUnit, however defaultValue may be non-scalar.\n    return anim.getAttribute( attr ).defaultValue;    \n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      for (var attr in anim.animating) \n      {\n        if ( anim.animating[ attr ] === false && attr in regex ) \n        {\n          var parsed = regex[ attr ].exec( style );\n\n          if ( parsed ) \n          {\n            if ( attr in d4 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr ),\n                angle: parse( e, parsed[4], anim, attr )\n              };\n            }\n            else if ( attr in d3 )\n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr )\n              };\n            }\n            else if ( attr in d2 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' )\n              };\n            }\n            else \n            {\n              anim.frame[attr] = parse( e, parsed[1], anim, attr, 'width' );\n            }\n            \n            anim.animating[attr] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    {  \n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n      var transforms = [];\n      \n      for (var attr in regex) \n      {\n        if (attr in anim.frame) \n        { \n          var value = anim.frame[ attr ];\n          var unit = anim.units[ attr ];\n          \n          if (attr in d4) \n          {\n            transforms.push( attr + '(' + value.x + ',' + value.y + ',' + value.z + ',' + value.angle + unit + ')' );\n          }\n          else if (attr in d3) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ',' + value.z + unit + ')' );\n          }\n          else if (attr in d2) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ')' );\n          }\n          else\n          {\n            transforms.push( attr + '(' + value + unit + ')' );\n          }\n        }\n      }\n\t\t\t\n      if (transforms.length) \n      {\n        anim.styles[css] = transforms.join(' ');\n      }\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.opacity = (function() \n{\n  var css = anim8.dom.prefix(['WebkitOpacity', 'MozOpacity', 'KhtmlOpacity', 'opacity']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating.opacity === false) \n      {\n        var style = anim8.dom.style( e, css );\n        var opacity = parseFloat( style );\n        \n        if ( !isNaN(opacity) ) \n        {\n          anim.frame.opacity = opacity\n          anim.animating.opacity = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[ css ] = anim8.clamp( anim.frame.opacity, 0, 1 );\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.filter = (function() \n{\n  var css = anim8.dom.prefix(['WebkitFilter', 'MozFilter', 'OFilter', 'msFilter', 'filter']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n\tvar methods = \n  {\n\t\tgrayscale: \t'grayscale',\n\t\tsepia: \t\t\t'sepia',\n\t\tsaturate: \t'saturate',\n\t\thueRotate: \t'hue-rotate',\n\t\tinvert: \t\t'invert',\n\t\tbrightness: 'brightness',\n\t\tcontrast: \t'contrast',\n    blur:       'blur'\n\t};\n\t\n\tvar patterns = {};\n\t\n\tfor (var attr in methods) \n  {\n\t\tpatterns[attr] = new RegExp( methods[attr] + '\\(([^\\)]+)\\)', 'i');\n\t}\n  \n\treturn {\n    \n\t\tget: function(e, anim) \n    {\n\t\t\tvar style = anim8.dom.style( e, css );\n      \n\t\t\tfor (var attr in patterns) \n      {\n\t\t\t\tif ( anim.animating[attr] === false ) \n        {\n\t\t\t\t\tvar parsed = patterns[attr].exec( style );\n          \n\t\t\t\t\tif (parsed !== false) \n          {\n            var converted = anim8.dom.convert( e, parsed[1], anim.units[ attr ] );\n            \n            if ( converted !== false )\n            {\n              anim.frame[ attr ] = converted;\n              anim.animating[ attr ] = true;\n            }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\t\tset: function(e, anim) \n    {\n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n\t\t\tvar filters = [];\n      \n\t\t\tfor (var attr in methods) \n      {\n\t\t\t\tif ( attr in anim.frame ) \n        {\n          filters.push( methods[attr] + '(' + anim.value( attr ) + ')' );\n\t\t\t\t}\n\t\t\t}\n      \n\t\t\tif (filters.length) \n      {\n\t\t\t\tanim.styles[ css ] = filters.join(' ');\n\t\t\t}\n\t\t},\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n\t};\n\t\n})();\n\nanim8.dom.property.center = \n{\n  get: function(e, anim)\n  {\n    var cx = (e.offsetLeft + e.offsetWidth * 0.5) + 'px';\n    var cy = (e.offsetTop + e.offsetHeight * 0.5) + 'px';\n    \n    if ( anim.animating.center === false )\n    {\n      var desiredUnit = anim.units.center;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n    \n      if ( ccx !== false && ccy !== false )\n      {\n        anim.frame.center = {\n          x: ccx,\n          y: ccy\n        };\n        anim.animating.center = true;\n      }\n    }\n    if ( anim.animating.centerX === false )\n    {\n      var desiredUnit = anim.units.centerX;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      \n      if ( ccx !== false )\n      {\n        anim.frame.centerX = ccx;\n        anim.animating.centerX = true;\n      }\n    }\n    if ( anim.animating.centerY === false )\n    {\n      var desiredUnit = anim.units.centerY;\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n      \n      if ( ccy !== false )\n      {\n        anim.frame.centerY = ccy;\n        anim.animating.centerY = true;\n      }\n    }\n  },\n  preset: function(e, anim)\n  {\n    anim.cached.width  = anim8.dom.convert( e, e.offsetWidth + 'px', anim.units.centerX || anim.units.center, 'parentWidth' );\n    anim.cached.height = anim8.dom.convert( e, e.offsetHeight + 'px', anim.units.centerY || anim.units.center, 'parentHeight' );\n  },\n  set: function(e, anim)\n  {\n    var rw = anim.cached.width * 0.5;\n    var rh = anim.cached.height * 0.5;\n        \n    if ( anim.updated.center )\n    {\n      anim.styles.left = (anim.frame.center.x - rw) + anim.units.center;\n      anim.styles.top = (anim.frame.center.y - rh) + anim.units.center;\n    }\n    if ( anim.updated.centerX )\n    {\n      anim.styles.left = (anim.frame.centerX - rw) + anim.units.centerX;\n    }\n    if ( anim.updated.centerY )\n    {\n      anim.styles.top = (anim.frame.centerY - rh) + anim.units.centerY;\n    }\n  }\n};\n\nanim8.dom.property.orbit = \n{\n  DEGREE_TO_RADIAN: Math.PI / 180.0,\n  \n  RADIAN_TO_DEGREE: 180.0 / Math.PI,\n  \n  get: function(e, anim)\n  {\n    var ox = (e.parentNode.scrollWidth * 0.5);\n    var oy = (e.parentNode.scrollHeight * 0.5); \n    var cx = (e.offsetLeft + e.offsetWidth * 0.5);\n    var cy = (e.offsetTop + e.offsetHeight * 0.5);\n    var dx = cx - ox;\n    var dy = cy - oy;\n  \n    if ( anim.animating.orbitOffset === false )\n    {\n      var cunit = anim.units.orbitOffset;\n      var cox = anim8.dom.convert( e, ox + 'px', cunit, 'parentWidth' );\n      var coy = anim8.dom.convert( e, oy + 'px', cunit, 'parentHeight' );\n      \n      if ( cox !== false && coy !== false )\n      {\n        anim.frame.orbitOffset = {\n          x: cox,\n          y: coy\n        };\n        anim.animating.orbitOffset = false;\n      }\n    }\n    \n    if ( anim.animating.distance === false )\n    {\n      anim.frame.distance = Math.sqrt( dx * dx + dy * dy );\n      anim.animating.distance = true;\n    }\n    \n    if ( anim.animating.angle === false )\n    {\n      anim.frame.angle = Math.atan2( dy, dx ) * this.RADIAN_TO_DEGREE;\n      anim.animating.angle = true;\n    }\n  },\n  \n  preset: function(e, anim)\n  {  \n    anim.cached.parentWidth = e.parentNode.scrollWidth;\n    anim.cached.parentHeight = e.parentNode.scrollHeight;\n    anim.cached.width = e.offsetWidth;\n    anim.cached.height = e.offsetHeight;\n  },\n  \n  set: function(e, anim)\n  {\n    // TODO calculator this correctly\n    var cunit = anim.units.orbitOffset || '%';\n    var orbitX = anim.frame.orbitOffset ? anim.frame.orbitOffset.x : 50;\n    var orbitY = anim.frame.orbitOffset ? anim.frame.orbitOffset.y : 50;\n    \n    var originUnit = anim.units.origin || '%';\n    var originX = anim.frame.origin ? anim.frame.origin.x : 50;\n    var originY = anim.frame.origin ? anim.frame.origin.y : 50;\n    \n    var cox = anim8.dom.convert( e, orbitX + cunit, 'px', anim.cached.parentWidth / 100.0 );\n    var coy = anim8.dom.convert( e, orbitY + cunit, 'px', anim.cached.parentHeight / 100.0 );\n    \n    var ox = anim8.dom.convert( e, originX + originUnit, 'px', anim.cached.width / 100.0 );\n    var oy = anim8.dom.convert( e, originY + originUnit, 'px', anim.cached.height / 100.0 );\n    \n    var angle = (anim.frame.angle || 0.0) * this.DEGREE_TO_RADIAN;\n    var distance = anim.frame.distance || 0.0;\n        \n    var cos = Math.cos( angle ) * distance;\n    var sin = Math.sin( angle ) * distance;\n    \n    anim.styles.left = (cox + cos - ox) + 'px';\n    anim.styles.top = (coy + sin - oy) + 'px';\n  }\n};","\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.dom.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.dom.attribute[ attr ];\n  }\n  \n  return anim8.dom.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.dom.attribute.default                 = {defaultValue: 0};\n\n/**\n * All animatable attributes for DomAnimators & HTMLElements.\n */\n\nanim8.dom.attribute.padding                 = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingTop              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingRight            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingBottom           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingLeft             = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.margin                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginTop               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginRight             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginBottom            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginLeft              = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderRadius            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopLeftRadius     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopRightRadius    = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomLeftRadius  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomRightRadius = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderWidth             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopWidth          = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderRightWidth        = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomWidth       = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderLeftWidth         = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.outlineWidth\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.outlineOffset\t\t\t\t\t\t= {defaultValue: 0};\nanim8.dom.attribute.textIndent\t\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderSpacing\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.fontSize\t\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\nanim8.dom.attribute.lineHeight\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\n\nanim8.dom.attribute.origin                  = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'transformOrigin', calculator: '2d'};\nanim8.dom.attribute.originX                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\nanim8.dom.attribute.originY                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\n\nanim8.dom.attribute.opacity                 = {defaultValue: 1};\nanim8.dom.attribute.zIndex                  = {defaultValue: 1};\n\nanim8.dom.attribute.width                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minWidth                = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxWidth                = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.height                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minHeight               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxHeight               = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.angle                   = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.distance                = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.orbitOffset             = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'orbitOffset', calculator: '2d'};\n\nanim8.dom.attribute.top                     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.right                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.bottom                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.left                    = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.center                  = {defaultValue: {x:0, y:0}, defaultUnit: 'px', property: 'center', calculator: '2d'};\nanim8.dom.attribute.centerX                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\nanim8.dom.attribute.centerY                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\n\nanim8.dom.attribute.blur                    = {defaultValue: 0, property: 'filter', defaultUnit: 'px'};\nanim8.dom.attribute.sepia                   = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.brightness              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.grayscale               = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.contrast                = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.invert                  = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.saturation              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.hueRotate               = {defaultValue: 0, property: 'filter', defaultUnit: 'deg'};\n\nanim8.dom.attribute.rotate                  = {defaultValue: 0, property: 'transform', defaultUnit: 'deg'};\nanim8.dom.attribute.rotate3d                = {defaultValue: {x:0, y:0, z:1, angle:0}, property: 'transform', calculator: 'quaternion', defaultUnit: 'deg'};\n\nanim8.dom.attribute.translate               = {defaultValue: {x:0, y:0}, property: 'transform', calculator: '2d', defaultUnit: 'px'};\nanim8.dom.attribute.translateX              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateY              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateZ              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translate3d             = {defaultValue: {x:0, y:0, z:0}, property: 'transform', calculator: '3d', defaultUnit: 'px'};\n\nanim8.dom.attribute.scale                   = {defaultValue: {x:1, y:1}, property: 'transform', calculator: '2d'};\nanim8.dom.attribute.scaleX\t                = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleY  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleZ  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scale3d                 = {defaultValue: {x:1, y:1, z:1}, property: 'transform', calculator: '3d'};\n\nanim8.dom.attribute.skew                    = {defaultValue: {x:0, y:0}, defaultUnit: 'deg', property: 'transform', calculator: '2d'};\nanim8.dom.attribute.skewX                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\nanim8.dom.attribute.skewY                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\n\nanim8.dom.attribute.backface                = {defaultValue: 0};\nanim8.dom.attribute.visibility              = {defaultValue: 1};\n\nanim8.dom.attribute.backgroundColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.color                   = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderTopColor          = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderRightColor        = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderBottomColor       = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderLeftColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.outlineColor            = {defaultValue: anim8.color(), calculator: 'rgba'};\n","\n/**\n * Instantiates a new DomAnimator given a subject.\n * \n * @param {HTMLElement} e\n */\nanim8.DomAnimator = function(e)\n{\n\tthis.reset( e );\n  this.properties = {};\n  this.propertiesPreset = {};\n  this.attributeToProperty = {};\n  this.animating = {};\n  this.cached = {};\n  this.units = {};\n  this.styles = {};\n  this.styled = false;\n  this.stylesUpdated = false;\n};\n\n/**\n * Extends anim8.Animator\n */\nanim8.override( anim8.DomAnimator.prototype = new anim8.Animator(),\n{\n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   *\n   * If any events that were recently added have true values this is where we replace\n   * this true values with the values currently on the subject.\n   */\n  preupdate: function()\n  {\n    // If there are events with paths that contain computed values we should\n    // populate the frame directly from the HTML element.\n    var ce = this.eventsComputed;\n    if ( ce.length )\n    {\n      var properties = {};\n    \n      for (var i = 0; i < ce.length; i++)\n      {\n        var attr = ce[ i ].attribute;\n\n        if ( !(attr in this.frame) )\n        {\n          properties[ this.attributeToProperty[ attr ] ] = true;\n      \n          this.animating[ attr ] = false; \n        }\n      }\n      \n      for (var prop in properties)\n      {\n        this.properties[ prop ].get( this.subject, this );\n      }\n    }\n\n    // If a property currently being animated requires some heads up before it\n    // gets or sets a value, notify it. TODO removed dead properties.\n    for (var prop in this.propertiesPreset)\n    { \n      this.propertiesPreset[ prop ].preset( this.subject, this );\n    }\n\n    // Finish updating computed events, filling in the frame, and triggering.\n    anim8.Animator.prototype.preupdate.apply( this, arguments );\n\n    return this;\n  },\n    \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now)\n  {\n    anim8.Animator.prototype.update.apply( this, arguments );\n      \n    this.getStyles();\n    this.stylesUpdated = true;\n\n    return this;\n  },\n\n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {  \n    if ( animation.input.units )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[i];\n        var attr = e.attribute;\n      \n        if ( attr in animation.input.units )\n        {\n          e.unit = animation.input.units[ attr ];\n        }\n      }  \n    }\n  },\n\n  /**\n   * Builds the styles map in preparation to be applied.\n   */\n  getStyles: function()\n  {\n    this.styles = {};\n    \n    var applyProperties = {};\n    \n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        var prop = this.attributeToProperty[ attr ];\n        \n        if ( prop in this.properties )\n        {\n          applyProperties[ prop ] = true; \n        }\n      }\n    }\n    \n    for (var prop in applyProperties)\n    {\n      this.properties[ prop ].set( this.subject, this );  \n      \n      this.styled = true;\n    }\n  },\n\n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n  {\n    if ( !this.styled && !this.stylesUpdated )\n    {\n      this.getStyles();\n    }\n    \n    if ( this.styled )\n    {    \n      for (var prop in this.styles)\n      {\n         this.subject.style[ prop ] = this.styles[ prop ];\n      }\n      \n      for (var attr in this.frame)\n      {\n        this.updated[ attr ] = false;\n      }\n    \n      this.styled = false;\n    }\n    \n    this.stylesUpdated = false;\n    \n    this.trigger('apply');\n    \n    this.trimEvents();\n\n    return this;\n  },\n    \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function( e )\n  {\n    anim8.Animator.prototype.placeEvent.apply( this, arguments );\n    \n    return this.placeProperty( e.attribute, e.unit );\n  },\n    \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function( s )\n  {\n    anim8.Animator.prototype.placeSpring.apply( this, arguments );\n    \n    return this.placeProperty( s.attribute );\n  },\n\n  /**\n   * Places all necessary property information on the Animator for animating the given attribute.\n   * \n   * @param  {string} attr\n   * @return {this}\n   */\n  placeProperty: function( attr, unit )\n  {\n    var attribute = this.getAttribute( attr );\n    \n    this.properties[ attribute.propertyName ] = attribute.property;\n    this.attributeToProperty[ attr ] = attribute.propertyName;\n    this.units[ attr ] = unit || attribute.defaultUnit;\n\n    if ( attribute.property && anim8.isFunction( attribute.property.preset ) )\n    {\n      this.propertiesPreset[ attribute.propertyName ] = attribute.property;\n    }\n\n    return this;\n  },\n    \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  {\n    for (var prop in this.properties)\n    {\n      this.properties[ prop ].unset( this.subject, this );\n    }\n  \t\n  \tthis.frame = {};\n\n    return this;\n  },\n\n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    var props = {};\n    var updated = {};\n    var units = {};\n    var styles = {};\n    \n    for (var attr in attributes)\n    {\n      var attribute = this.getAttribute( attr );\n      var value     = attributes[ attr ];\n      \n      units[ attr ] = attribute.defaultUnit;\n      \n      if ( anim8.isString( value ) )\n      {\n        var parsed = anim8.dom.parseValue( value, attribute.defaultUnit );\n        \n        if ( parsed !== false )\n        {\n          units[ attr ] = parsed.unit || attribute.defaultUnit;\n          value = parsed.value;\n        }  \n      }\n      \n      var parsed = attribute.parse( value );\n      \n      if ( parsed !== false )\n      {\n        props[ attribute.propertyName ] = attribute.property;\n        attributes[ attr ] = parsed;\n        updated[ attr ] = true;\n      }\n    }\n      \n    var flash = \n    {\n      units: units,\n       \n      frame: attributes,\n      \n      updated: updated,\n      \n      styles: styles,\n      \n      cached: {},\n      \n      value: function(attr)\n      {\n        return attributes[ attr ] + units[ attr ];\n      },\n      \n      valueOr: function(attr, other, subproperty)\n      {\n        var value = attributes[ attr ];\n        \n        if ( !anim8.isDefined( value ) )\n        {\n          value = attributes[ attr = other ];\n        \n          if ( anim8.isDefined( subproperty ) )\n          {\n            value = value[ subproperty ];\n          }\n        }\n    \n        return value + units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      var property = props[ prop ];\n      \n      if ( anim8.isFunction( property.preset ) )\n      {\n        props[ prop ].preset( this.subject, flash );\n      }\n    }\n    \n    for (var prop in props)\n    {\n      props[ prop ].set( this.subject, flash );\n    }\n    \n    for (var prop in styles)\n    {\n      this.subject.style[ prop ] = styles[ prop ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute and the value is the desired unit.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var props = {};\n    var animating = {};\n    var units = {};\n    var out = {};\n    \n    for (var attr in attributes)\n    {    \n      var attribute = this.getAttribute( attr );\n      \n      animating[ attr ] = false;    \n      units[ attr ] = attributes[ attr ] || attribute.defaultUnit;\n      props[ attribute.propertyName ] = attribute.property;\n      out[ attr ] = attribute.cloneDefault();\n    }\n    \n    var flash = \n    {    \n      units: units,\n      \n      frame: out,\n      \n      animating: animating,\n      \n      unit: function(attr)\n      {\n        return units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      props[ prop ].get( this.subject, flash );\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute, desiredUnit, relativeTo)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame && anim8.isNumber( animator.frame[ attribute ] ) )\n      {\n        return anim8.dom.convert( animator.e, animator.value( attribute ), desiredUnit, relativeTo );\n      }\n      \n      request[ attribute ] = desiredUnit;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return animator.getAttribute( attribute ).defaultValue;\n    };\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ] + this.units[ attr ];\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   * if the attribute doesn't exist a secondary one is looked up. If that value\n   * is an object and contains the given subproperty the value is resolved once again.\n   *\n   * @param {string} attr\n   * @param {string} other\n   * @param [string] subproperty\n   */\n  valueOr: function(attr, other, subproperty)\n  {\n    var value = this.frame[ attr ];\n      \n    if ( !anim8.isDefined( value ) )\n    {\n      value = this.frame[ attr = other ];\n      \n      if ( anim8.isDefined( subproperty ) )\n      {\n        value = value[ subproperty ];\n      }\n    }\n    \n    return value + this.units[ attr ];\n  }\n\n});\n"],"sourceRoot":"/source/"}