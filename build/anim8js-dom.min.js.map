{"version":3,"sources":["anim8js-core.js","anim8js-defer.js","anim8js-easing.js","anim8js-color.js","anim8js-calculator.js","anim8js-path.js","anim8js-spring.js","anim8js-event.js","anim8js-animation.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tween.js","anim8js-factory.js","anim8js-object.js","anim8js-dom-core.js","anim8js-dom-property.js","anim8js-dom-attribute.js","anim8js-dom-animator.js"],"names":["m8","anim8","subject","Animator","factory","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","log","size","prop","isEmpty","copy","p","extend","out","arguments","o","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","delay","defaults","sleep","duration","repeat","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","scale","constant","variable","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","attribute","attr","defaultValue","easing","teasing","transitionTime","transitionDelta","transitionIntoDelta","transitionEasing","cache","Defer","methods","$factory","$push","prototype","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","indexOf","pair","e","t","easingType","bezier","isEasingName","optional","inout","pong","yoyo","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","invalidColor","format","ca","cr","cg","cb","toString","calculator","calc","create","name","defaultMethods","clone","adds","add","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","isPristine","method","amountScale","mul","ab","isValid","isZero","epsilon","isEqual","y","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","z","dz","angle","da","dr","dg","db","number","path","Path","spring","type","reset","points","trues","hasTrue","compute","ps","reference","last","first","point","resolvePoint","DeltaPath","deltas","ds","d0","d1","pd","p0","p1","PointPath","KeyframePath","easings","ea","keyframe","defaultEasing","CubicPath","p2","p3","d2","d3","i1","i3","QuadraticPath","quadratic","CompiledPath","pointCount","index","compiled","Tween","tween","JumpPath","jump","Spring","rest","position","gravity","velocity","update","frame","dt","MAX_DT","starting","updateVelocity","updated","EPSILON","resolveRest","BoxSpring","acceleration","box","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","temp","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","scaleBase","hasInitialState","parser","totalTime","newInstance","EventInstance","getParser","isInfinite","timeRemaining","timeRemainingInChain","finiteTimeRemaining","finiteTimeRemainingInChain","queue","state","pauseTime","pauseState","elapsed","catchup","isAnimating","finish","progress","applyValue","isPaused","isDelayed","isSleeping","cycle","cycleCount","maxCycles","computeValue","baseValue","value","newState","getPoint","getFuture","fdelta","getDelta","getStart","getEnd","pause","resume","hasStarted","isFinished","hasStates","states","stateText","animation","options","Animation","key","animationStrings","anim","parseAnimationString","parserName","save","result","part","charAt","substring","isSaved","newEvents","instances","cloneEvents","merge","force","fn","springs","attributes","finished","active","restore","preupdate","wasFinished","placeSpring","placeEvent","trimEvents","activate","deactivate","destroy","createEvents","onAnimation","eventMap","queueEvents","maxRemaining","existing","unspring","springsFor","play","all","playEvents","attrs","transition","transitionEvents","e1","e2","transitionPath","transitionEvent","transitionInto","transitionFromDelta","transitionIntoEvents","tweenTo","target","tweenManyTo","targets","starts","ends","tweenMany","applyInitialState","eventCount","eventsFor","remaining","ref","request","current","get","follow","objectsFor","objects","resulting","stop","set","hasEvents","hasSprings","getSubject","wrapper","DeferAnimator","fill","each","iterator","filter","filterer","alive","remove","getSubjects","reverse","mid","e0","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","Parser","newOptions","oldOptions","durations","delays","sleeps","repeats","scales","scaleBases","ParserDeltas","values","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","sort","from","half","to","times","maxTime","order","calculators","pathEasings","ParserTween","factoryName","is","Factory","ObjectFactory","$animator","DomFactory","cached","ids","animatorId","getAttribute","DomAnimator","setAttribute","dom","style","hyphenated","hyphenize","str","replace","currentStyle","document","defaultView","getComputedStyle","getPropertyValue","prefix","createElement","prefixes","toPixels","baseUnit","defaultRate","body","div","appendChild","width","pixels","offsetWidth","removeChild","parseValue","convert","getFontSize","notUnit","fontSize","getConverterScale","px","relativeTo","variables","parentWidth","parentNode","scrollWidth","parentHeight","scrollHeight","height","offsetHeight","parentFontSize","htmlFontSize","htmlElement","getElementsByTagName","pt","cm","mm","vw","deg","rad","PI","em","rem","given","converter","toUnit","fromUnit","converter1","converter2","nm","converted","units","styles","unset","factoryDerivable","deriver","factoryColor","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","outlineWidth","textIndent","borderSpacing","lineHeight","zIndex","backgroundColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor","minWidth","maxWidth","minHeight","maxHeight","offsetTop","offsetLeft","visibility","backface","css","transformOrigin","keywords","setOriginAttribute","setOrigin","origin","originZ","valueOr","transform","translate","translate3d","scale3d","d4","rotate3d","translateX","translateY","translateZ","scaleX","scaleY","scaleZ","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY","desiredUnit","transforms","join","opacity","grayscale","sepia","saturate","hueRotate","invert","brightness","contrast","blur","patterns","RegExp","filters","cx","cy","ccx","ccy","centerX","centerY","preset","rw","rh","orbit","DEGREE_TO_RADIAN","RADIAN_TO_DEGREE","ox","oy","orbitOffset","cunit","cox","coy","atan2","orbitX","orbitY","originUnit","originX","originY","defaultUnit","outlineOffset","saturation","properties","truesUpdated","attributeToProperty","styled","stylesUpdated","getStyles","applyProperties","props","flash","other","subproperty"],"mappings":"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","file":"anim8js-dom.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factory( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {array} subject\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factory( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * If the user is interested in seeing warnings they can override this by specifying\n * a function which accepts a text argument providing a generc message, a second argument\n * which has the input that caused the warning, and a third agument with the object\n * throwing the warning. Most warnings that are thrown occur when an animation is\n * trying to be parsed an the user provided an invalid animation, time, easing, etc.\n *\n * @param {string} message\n * @param {any} source\n */\nanim8.log = false;\n\n/**\n * Returns the size of the variable. The size of a variable is dependent on the variable\n * type. For arrays and strings their length is returned. If it's an object the number of\n * enumerable properties is returned. If it's a number, the number is returned. Otherwise\n * zero is returned.\n *\n * @param {any} x\n */\n anim8.size = function(x)\n {\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length;\n  }\n  else if ( x === null )\n  {\n    return 0;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var size = 0;\n\n    for (var prop in x)\n    {\n      size++;\n    }\n\n    return size;\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n};\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding overriding any existing properties.\n * \n * @param  {object} out\n * @return {object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses scale from a string or number.\n * \n * @param  {string|number}\n * @return {number}\n */\nanim8.scale = function(scale, returnOnInvalid)\n{\n  if ( anim8.isNumber( scale ) )\n  {\n    return scale;\n  }\n\n  return anim8.coalesce( returnOnInvalid, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n * \n * @param  {number} v\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n      \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t        eventListeners.length = 0;\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n\n/*****************************************************************\n  REGISTRIES\n******************************************************************/\n\n/* Attributes are the animatable properties of a subject\n\n  anim8.attribute[name] = {\n    // the default value for an attribute if none exists on the subject\n    defaultValue: 0,\n    // the name of the calculator this attribute requires for mathematical operations. default value: anim8.calculator.default\n    calculator: calculatorName,\n    // other values can be specified here that the respective factory might use\n    \"factory specific attributes\"\n  }\n*/\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.attribute = function(attr) \n{\n  if ( anim8.isObject(attr) && anim8.isDefined(attr.defaultValue) ) \n\t{\n    return attr;\n  }\n  if ( anim8.isString(attr) && attr in anim8.attribute ) \n\t{\n    return anim8.attribute[ attr ];\n  }\n\t\n  return anim8.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.attribute.default = {defaultValue: 0};\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   * \n   * @type {number}\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @type {string|function}\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @type {string|function}\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @type {number}\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @type {number}\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @type {number}\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @type {number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @type {number}\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition delta.\n   * \n   * @type {number}\n   */\n  transitionDelta: 0.2,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {number}\n   */\n  transitionIntoDelta: 0.2,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {string|function}\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * @type {boolean}\n   */\n  cache: false\n\n};\n","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) {\n\t\treturn easing( x );\n\t};\n};\n\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) {\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } else {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\nanim8.easingType.pong = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x );\n\t  } else {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n// yoyo is an alias for pong\nanim8.easingType.yoyo = anim8.easingType.pong;\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n\nanim8.easing.default      = anim8.easing.ease;","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return this.invalidColor;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};\n\n/**\n * The color to return when input is invalid.\n */\nanim8.color.invalidColor = anim8.color.defaultValue =\n{\n  r: 255,\n  g: 255,\n  b: 255,\n  a: 1.0\n};","/**\n * Calculators perform math and basic operations for a specific data structure. Calculators have the following methods.\n *\n *  parse(x, default)\n *  copy(out, copy)\n * -clone(out)\n *  create()\n *  zero(out)\n * -scale(out, scale)\n * -add(out, amount)\n *  adds(out, amount, amountScale)\n * -sub(out, amount)\n *  mul(out, scale)\n * -interpolate(out, start, end, delta)\n *  distanceSq(a, b)\n *  isValid(a)\n *  isNaN(a)\n *  isZero(a, epsilon)\n *  isEqual(a, b, epsilon)\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n\tif ( anim8.isObject(calc) )\n\t{\n\t\treturn calc;\n\t}\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Creates a calculator and fills in any missing methods where possible.\n * \n * @param {string} name\n * @param {object} methods\n */\nanim8.calculator.create = function(name, methods)\n{\n  var defaultMethods = \n\t{\n\t  clone: function(out) \n\t\t{\n\t    return this.copy( this.create(), out );\n\t  },\n\t  scale: function(out, scale) \n\t\t{\n\t    return this.adds( out, out, scale - 1 );\n\t  },\n\t  add: function(out, amount) \n\t\t{\n\t    return this.adds( out, amount, 1 );\n\t  },\n\t  sub: function(out, amount) \n\t\t{\n\t    return this.adds( out, amount, -1 );\n\t  },\n\t  interpolate: function(out, start, end, delta) \n\t\t{\n\t    out = this.zero( out );\n\t    out = this.adds( out, start, 1 - delta );\n\t    out = this.adds( out, end, delta );\n\t    return out;\n\t  },\n\t\tdistance: function(a, b)\n\t\t{\n\t\t\treturn Math.sqrt( this.distanceSq( a, b ) );\n\t\t},\n    isPristine: function(x)\n    {\n      return ( x === true || anim8.isFunction( x ) );\n    }\n\t};\n  \n  for (var method in defaultMethods)\n  {\n    if ( !(method in methods) )\n    {\n      methods[ method ] = defaultMethods[ method ];\n    }\n  }\n  \n\tanim8.calculator[name] = methods; \n};\n\n/**\n * A calculator for number primitives.\n */\nanim8.calculator.create('number', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\tif ( anim8.isString( x ) )\n\t\t{\n\t\t\tx = parseFloat( x );\n\t\t\t\n\t\t\tif (!isNaN(x))\n\t\t\t{\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn defaultValue;\n\t},\n  copy: function(out, copy) \n\t{\t\n    return copy;\n  },\n  create: function() \n\t{\n    return 0.0;\n  },\n  zero: function(out) \n\t{\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n\t{\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n\t{\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a - b) < epsilon;\n  }\n});\n\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.calculator.create('2d', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y )\n\t\t\t};\n\t\t}\n    if ( anim8.isString( x ) )\n    {\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.calculator.create('3d',\n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\t\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y ),\n\t\t\t\tz: anim8.coalesce( x.z, defaultValue.z )\n\t\t\t};\n\t\t}\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.calculator.create('quaternion', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y ),\n\t\t\t\tz: anim8.coalesce( x.z, defaultValue.z ),\n\t\t\t\tangle: anim8.coalesce( x.angle, defaultValue.angle )\n\t\t\t};\n\t\t}\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.calculator.create('rgb', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn anim8.color.parse( x );\n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.calculator.create('rgba', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn anim8.color.parse( x );\n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  }\n});\n\n/**\n * Sets the default calculator to the numeric calculator.\n */\nanim8.calculator.default = anim8.calculator.number;","anim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.trues = this.hasTrue();\n  },\n  compute: function(out, delta) \n\t{\n    return out;\n  },\n  hasTrue: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if (ps[i] === true) \n      {\n        return true;\n      }\n    }\n    return false;\n  },\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  }\n};\n\n\n\n\n\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.DeltaPath.prototype = new anim8.Path();\n\nanim8.DeltaPath.prototype.compute = function(out, delta) \n{\n  var ds = this.deltas;\n  var end = ds.length - 2;\n  var i = 0;\n  while (ds[i + 1] < delta && i < end) i++;\n  var d0 = ds[i];\n  var d1 = ds[i + 1];\n  var pd = (delta - d0) / (d1 - d0);\n  var p0 = this.resolvePoint( i );\n  var p1 = this.resolvePoint( i + 1 );\n  \n  return this.calculator.interpolate( out, p0, p1, pd );\n};\n  \nanim8.DeltaPath.prototype.copy = function() \n{\n    return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n};\n\nanim8.path.delta = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n\n\n\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.PointPath.prototype = new anim8.Path();\n\nanim8.PointPath.prototype.compute = function(out, delta)\n{\n  return this.calculator.copy( out, this.resolvePoint( 0 ) );\n};\n  \nanim8.PointPath.prototype.copy = function() \n{\n  return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n};\n\nanim8.path.point = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n\n\n\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.KeyframePath.prototype = new anim8.Path();\n\nanim8.KeyframePath.prototype.compute = function(out, delta) \n{  \n  var ds = this.deltas;\n  var end = ds.length - 2;\n  \n  if ( delta < ds[0] ) {\n    return false;\n  }\n  \n  if ( delta > ds[ds.length - 1] ) {\n    return this.points[ds.length - 1];\n  }\n  \n  var i = 0;\n  while (ds[i + 1] < delta && i < end) i++;\n  var d0 = ds[i];\n  var d1 = ds[i + 1];\n  var pd = (delta - d0) / (d1 - d0);\n  var p0 = this.resolvePoint( i );\n  var p1 = this.resolvePoint( i + 1 );\n  var ea = this.easings[i];\n  \n  return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n};\n  \nanim8.KeyframePath.prototype.copy = function() \n{\n  return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n};\n\nanim8.path.keyframe = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n\n\n\n\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.CubicPath.prototype = new anim8.Path();\n\nanim8.CubicPath.prototype.compute = function(out, d1)\n{\n  var calc = this.calculator;\n  var d2 = d1 * d1;\n  var d3 = d1 * d2;\n  var i1 = 1 - d1;\n  var i2 = i1 * i1;\n  var i3 = i1 * i2;\n  \n  out = calc.copy( out, this.resolvePoint( 0 ) );\n  out = calc.scale( out, i3 );\n  out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n  out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n  out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n  \n  return out;\n};\n  \nanim8.CubicPath.prototype.copy = function() \n{\n  return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n};\n\nanim8.path.cubic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n\n\n\n\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.QuadraticPath.prototype = new anim8.Path();\n\nanim8.QuadraticPath.prototype.compute = function(out, d1)\n{\n  var calc = this.calculator;\n  var d2 = d1 * d1;\n  var i1 = 1 - d1;\n  var i2 = i1 * i1;\n  \n  out = calc.copy( out, this.resolvePoint( 0 ) );\n  out = calc.scale( out, i2 );\n  out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n  out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n    \n  return out;\n};\n  \nanim8.QuadraticPath.prototype.copy = function() \n{\n  return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n};\n\nanim8.path.quadratic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n\n\n\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.CompiledPath.prototype = new anim8.Path();\n\nanim8.CompiledPath.prototype.compute = function(out, delta)\n{\n  var a = Math.floor( delta * this.points.length );\n  var index = Math.min( a, this.points.length - 1 );\n  \n  return this.calculator.copy( out, this.resolvePoint( index ) );\n};\n  \nanim8.CompiledPath.prototype.copy = function() \n{\n  return new anim8.CompiledPath( this.name, this, this.points.length );\n};\n\nanim8.path.compiled = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n\n\n\n\n\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [start, end] );\n};\n\nanim8.Tween.prototype = new anim8.Path();\n\nanim8.Tween.prototype.compute = function(out, delta)\n{\n  return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n};\n  \nanim8.Tween.prototype.copy = function() \n{\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n};\n\nanim8.path.tween = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start ),\n    calc.parse( path.end )\n  );\n};\n\n\n\n\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.JumpPath.prototype = new anim8.Path();\n\nanim8.JumpPath.prototype.compute = function(out, delta)\n{\n  var a = Math.floor( delta * this.points.length );\n  var index = Math.min( a, this.points.length - 1 );\n  \n  return this.calculator.copy( out, this.resolvePoint( index ) );\n};\n  \nanim8.JumpPath.prototype.copy = function() \n{\n  return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n};\n\nanim8.path.jump = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.Spring.prototype = \n{\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  reset: function(attribute, calculator, rest, position, gravity)\n  {\n    var calc = anim8.calculator( calculator );\n    var a = anim8.attribute( attribute );\n    \n    this.attribute    = attribute;\n    this.calculator   = calc;\n    this.rest         = calc.parse( rest, a.defaultValue );\n    this.position     = calc.parse( position, a.defaultValue );\n    this.gravity      = calc.parse( gravity, calc.create() );\n    this.velocity     = calc.create();\n    this.time         = 0;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} now\n   * @param {object} frame\n   */\n  update: function(now, frame)\n  {\n    if (this.time === 0)\n    {\n      this.time = now;\n    }\n    \n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (now - this.time) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.copy( {}, this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    this.time = now;\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    \n  }\n};\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n\n\n\n/**\n * A box spring is a simple string\n */\nanim8.BoxSpring = function(attribute, calculator, position, rest, constant, gravity)\n{\n  var a = anim8.attribute( attribute );\n    \n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.acceleration   = this.calculator.create();\n  this.constant       = this.calculator.parse( constant, a.defaultValue );\n};\n\nanim8.BoxSpring.prototype = new anim8.Spring();\n\nanim8.BoxSpring.prototype.updateVelocity = function(dt)\n{\n  var calc = this.calculator;\n  \n  this.acceleration = calc.copy( this.acceleration, this.resolveRest() );\n  this.acceleration = calc.sub( this.acceleration, this.position );\n  this.acceleration = calc.mul( this.acceleration, this.constant );\n  this.velocity     = calc.adds( this.velocity, this.acceleration, dt );\n};\n\nanim8.spring.box = function(spring)\n{ \n  return new anim8.BoxSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.constant,\n    spring.gravity\n  );\n};\n\n\n\n\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, gravity)\n{\n  var a = anim8.attribute( attribute );\n  \n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.damping      = this.calculator.parse( damping, a.defaultValue );\n  this.stiffness    = this.calculator.parse( stiffness, a.defaultValue );\n  this.temp0        = this.calculator.create();\n  this.temp1        = this.calculator.create();\n};\n\nanim8.LinearSpring.prototype = new anim8.Spring();\n\nanim8.LinearSpring.prototype.updateVelocity = function(dt)\n{\n  // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n\t// position += velocity * elapsed.seconds;\n    \n  var calc = this.calculator;\n\n  this.temp1 = calc.copy( this.temp1, this.damping );\n  this.temp1 = calc.mul( this.temp1, this.velocity );\n  \n  this.temp0 = calc.copy( this.temp0, this.position );\n  this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n  this.temp0 = calc.mul( this.temp0, this.stiffness );\n  this.temp0 = calc.sub( this.temp0, this.temp1 );\n  \n  this.velocity = calc.adds( this.velocity, this.temp0, dt );\n};\n\nanim8.spring.linear = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};\n\n\n\n\n\n\n\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = this.calculator.create();\n};\n\nanim8.DistanceSpring.prototype = new anim8.Spring();\n\nanim8.DistanceSpring.prototype.updateVelocity = function(dt)\n{\n  // d = DISTANCE( position, rest )\n  // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n  // position += velocity * elapsed.seconds;\n\n  var calc = this.calculator;\n  var rest = this.resolveRest();\n  \n  var d = calc.distance( this.position, rest );\n  \n  this.temp = calc.copy( this.temp, this.position )\n  this.temp = calc.sub( this.temp, rest );\n  \n  if ( d !== 0 )\n  {\n  \tthis.temp = calc.scale( this.temp, 1.0 / d );\n  \tthis.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n  }\n\n  this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n  this.velocity = calc.adds( this.velocity, this.temp, dt );\n};\n\nanim8.spring.distance = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  this.attribute \t      = attribute;\n  this.path \t\t\t      = path;\n  this.easing \t\t      = anim8.easing( easing );\n  this.delay \t\t\t      = anim8.delay( delay );\n  this.duration \t      = anim8.duration( duration );\n  this.sleep \t\t\t      = anim8.sleep( sleep );\n  this.repeat \t\t      = anim8.repeat( repeat );\n  this.scale            = anim8.scale( scale );\n  this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.create() );\n  this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n  this.parser           = parser;\n  this.next             = next;\n};\n\nanim8.Event.prototype = \n{\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this );\n  },\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n  getParser: function()\n  {\n    return this.parser;\n  },\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY);\n  },\n  timeRemaining: function() \n  {    \n    return this.totalTime();\n  },\n  timeRemainingInChain: function()\n  {\n    return this.timeRemaining() + (this.next ? this.next.timeRemainingInChain() : 0);\n  },\n  finiteTimeRemaining: function()\n  {\n    return this.isInfinite() ? 0 : this.timeRemaining();\n  },\n  finiteTimeRemainingInChain: function()\n  {\n    return this.isInfinite() ? 0 : this.timeRemaining() + (this.next ? this.next.finiteTimeRemainingInChain() : 0);\n  },\n  queue: function(e)\n  {\n    if ( this.next )\n    {\n      this.next.queue( e );\n    }\n    else\n    {\n      this.next = e;\n    }\n  }\n};\n\nanim8.EventInstance = function(event)\n{\n\tthis.event \t\t\t      = event;\n\tthis.attribute \t      = event.attribute;\n\tthis.path \t\t\t      = event.path;\n\tthis.duration \t      = event.duration;\n\tthis.easing \t\t      = event.easing;\n\tthis.delay \t\t\t      = event.delay;\n\tthis.sleep \t\t\t      = event.sleep;\n\tthis.repeat \t\t      = event.repeat;\n  this.scale            = event.scale;\n  this.scaleBase        = event.scaleBase;\n  this.state \t\t\t      = anim8.EventState.CREATED;\n  this.time \t\t\t      = 0;\n  this.pauseTime \t      = 0;\n  this.pauseState       = 0;\n\tthis.elapsed\t\t      = 0;\n\tthis.next\t\t\t\t      = null;\n};\n\nanim8.EventInstance.prototype = \n{\n  update: function(now, frame) \n\t{\n    var updated = false;\n    var elapsed = this.catchup( now );\n    \n    if ( this.isAnimating() ) \n\t\t{\t\t\t\n      var delta = elapsed / this.duration;\n      \n      if (delta >= 1 || this.duration === 0)\n\t\t\t{\n        if (!this.isInfinite() && --this.repeat === 0) \n\t\t\t\t{\n          this.finish(frame);\n\t\t\t\t\t\n          return true;\n        } \n\t\t\t\telse \n\t\t\t\t{\n          if (this.sleep)\n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING ); \n            delta = 1;\n            \n            this.trigger('sleeping', this);\n          } \n\t\t\t\t\telse \n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.ANIMATING );\n            delta -= 1;\n          }\n        }\n      }\n      \n      this.applyValue( frame, frame[this.attribute], delta );\n      updated = true;\n    }\n    \n    return updated;\n  },\n  catchup: function(now)\n  {\n    if ( this.isPaused() )\n    {\n      return;\n    }\n    \n    if ( this.state === anim8.EventState.CREATED )\n    {\n      this.time = now;\n      \n      if ( this.delay )\n      {\n        this.state = anim8.EventState.DELAYED;\n        \n        this.trigger('delaying', this);\n      } \n      else\n      {\n        this.state = anim8.EventState.ANIMATING;\n      }\n    }\n    \n    var elapsed = now - this.time;\n    \n    if ( this.isDelayed() )\n    {\n      if ( elapsed > this.delay ) \n      {\n        this.trigger('delayed', this);\n        \n        elapsed = this.progress( elapsed, this.delay, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isSleeping() )\n    {\n      if ( elapsed > this.sleep )\n      {\n        this.trigger('slept', this);\n        \n        elapsed = this.progress( elapsed, this.sleep, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isAnimating() && this.duration )\n    {\n      var cycle = this.duration + this.sleep;\n      var cycleCount = Math.floor( ( elapsed + this.sleep ) / cycle );\n      var maxCycles = Math.min( this.repeat, cycleCount );\n            \n      elapsed = this.progress( elapsed, maxCycles * cycle, anim8.EventState.ANIMATING );\n      \n      if ( !this.isInfinite() )\n      { \n        if (maxCycles === this.repeat)\n        {\n          elapsed = this.duration;\n          this.repeat = 1;\n        }\n        else\n        {\n          this.repeat -= cycleCount;\n        }\n      }\n      \n      if ( elapsed > this.duration )\n      {\n        elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING );\n        \n        this.trigger('sleeping', this);\n      }\n    }\n    \n    return elapsed;\n  },\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n  progress: function(elapsed, time, newState) \n  {\n    this.time += time;\n    this.elapsed += time;\n    this.state = newState;\n    \n    return elapsed - time;\n  },\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n    \n    this.trigger('finish', this);\n  },\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[this.attribute] = value;\n    }\n  },\n  hasInitialState: function()\n  {\n    return this.event.hasInitialState;\n  },\n  getParser: function()\n  {\n    return this.event.parser;\n  },\n  getPoint: function(delta)\n  {\n    return this.computeValue( this.path.calculator.create(), delta );\n  },\n  getFuture: function(fdelta)\n  {\n    return this.getPoint( Math.min( 1.0, this.getDelta() + fdelta ) );\n  },\n  getDelta: function()\n  {\n    return this.isAnimating() ? Math.min( 1.0, (anim8.now() - this.time) / this.duration ) : 0.0;\n  },\n  getStart: function()\n  {\n    return this.getPoint( 0 );\n  },\n  getEnd: function() \n\t{\n    return this.getPoint( 1 );\n  },\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n  timeRemaining: function() \n\t{    \n\t\treturn this.totalTime() - this.elapsed;\n  },\n  timeRemainingInChain: function()\n  {\n    return this.timeRemaining() + (this.next ? this.next.timeRemainingInChain() : 0);\n  },\n  finiteTimeRemaining: function()\n  {\n    return this.isInfinite() ? 0 : this.timeRemaining();\n  },\n  finiteTimeRemainingInChain: function()\n  {\n    return this.isInfinite() ? 0 : this.timeRemaining() + (this.next ? this.next.finiteTimeRemainingInChain() : 0);\n  },\n  queue: function(e)\n  {\n    if ( this.next )\n    {\n      this.next.queue( e );\n    }\n    else\n    {\n      this.next = e;\n    }\n  },\n  pause: function() \n\t{\n    if (this.state !== anim8.EventState.PAUSED) \n\t\t{\n      this.pauseTime = anim8.now();\n      this.pauseState = this.state;\n      this.state = anim8.EventState.PAUSED; \n    }\n  },\n  resume: function() \n\t{\n    if (this.state === anim8.EventState.PAUSED) \n\t\t{\n      this.time += anim8.now() - this.pauseTime;\n      this.state = this.pauseState; \n    }\n  },\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY);\n  },\n\thasStarted: function()\n\t{\n\t\treturn (this.state !== anim8.EventState.CREATED && this.state !== anim8.EventState.DELAYED);\n\t},\n  isAnimating: function() \n\t{\n    return (this.state === anim8.EventState.ANIMATING);\n  },\n  isFinished: function() \n\t{\n    return (this.state === anim8.EventState.FINISHED);\n  },\n  isDelayed: function() \n\t{\n    return (this.state === anim8.EventState.DELAYED);\n  },\n  isPaused: function() \n\t{\n    return (this.state === anim8.EventState.PAUSED);\n  },\n  isSleeping: function() \n\t{\n    return (this.state === anim8.EventState.SLEEPING);\n  },\n  hasStates: function(states) \n\t{\n    return (this.state & states) !== 0;\n  },\n  stateText: function() \n\t{\n    switch(this.state) \n    {\n      case anim8.EventState.CREATED:            return \"created\";\n      case anim8.EventState.DELAYED:            return \"delayed\";\n      case anim8.EventState.ANIMATING:          return \"animating\";\n      case anim8.EventState.SLEEPING:           return \"sleeping\";\n      case anim8.EventState.FINISHED:           return \"finished\";\n    }\n  },\n  hasTrue: function()\n  {\n    return this.path.trues;\n  }\n};\n\n/**\n * Adds the following event methods to EventInstances: on, once, off, trigger.\n */\nanim8.eventize( anim8.EventInstance.prototype );","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n * @param [boolean] cache\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) )\n\t{\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationStrings = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationStrings.length; k++)\n    {\n      var parsed = anim8.parseAnimationString( animationStrings[ k ] );\n\n      if ( parsed.animation !== false )\n      {\n        if ( anim === false )\n        {\n          last = anim = parsed.animation.extend( parsed.options, true );\n        }\n        else\n        {\n          last = last.next = parsed.animation.extend( parsed.options, true );\n        }\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n\t\tvar events = [];\n\t\tvar options = options || {};\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, events );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (events.length)\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, events );\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Parses a string for an animation in the format of:\n *\n * animationName [duration] x[repeat] z[sleep] ~[delay] [easing]\n * \n * @param {string} animation\n */\nanim8.parseAnimationString = function(animation)\n{\n  var split = animation.toLowerCase().split(' ');\n  var result = {\n    animation: false,\n    options: {}\n  };\n\n  for (var i = 0; i < split.length; i++)\n  {\n    var part = split[i];\n\n    if ( part in anim8.animation && !result.animation )\n    {\n      result.animation = anim8.animation[ part ];\n    }\n    else\n    {\n      var first = part.charAt( 0 );\n\n      if ( first === 'x' )\n      {\n        var repeat = anim8.repeat( part.substring(1), false );\n\n        if ( repeat !== false )\n        {\n          result.options.repeat = repeat;\n        }\n      }\n      if ( first === 'z' )\n      {\n        var sleep = anim8.time( part.substring(1), false );\n\n        if ( sleep !== false )\n        {\n          result.options.sleep = sleep;\n        }\n      }\n      if ( first === '~' )\n      {\n        var delay = anim8.time( part.substring(1), false );\n\n        if ( delay !== false )\n        {\n          result.options.delay = delay;\n        }\n      }\n      if ( first === '!' )\n      {\n        var scale = parseFloat( part.substring(1) );\n\n        if ( !isNaN(scale) )\n        {\n          result.options.scale = scale;\n        }\n      }\n      var easing = anim8.easing( part, false );\n\n      if ( easing !== false )\n      {\n        result.options.easing = easing;\n      }\n\n      var duration = anim8.time( part, false );\n\n      if ( duration !== false )\n      {\n        result.options.duration = duration;\n      }\n      else\n      {\n        var repeat = anim8.repeat( part, false );\n\n        if ( repeat !== false )\n        {\n          result.options.repeat = repeat;\n        }\n      }\n    }\n  }\n\n  return result;\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the events that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate events, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} events\n */\nanim8.Animation = function(name, input, options, events)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.events = events;\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an array of event instances from the events in this animation.\n   */\n  newEvents: function()\n  {\n    var instances = [];\n    \n    for (var i = 0; i < this.events.length; i++)\n    {\n      instances.push( this.events[i].newInstance() );\n    }\n    \n    return instances;\n  },\n\n  /**\n   * Generates an array of event clones from the events in this animation.\n   * \n   * @return {array}\n   */\n  cloneEvents: function()\n  {\n    var events = [];\n\n    for (var i = 0; i < this.events.length; i++)\n    {\n      events.push( this.events[i].clone() );\n    }\n\n    return events;\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {object} options\n   * @param  {array} events\n   * @return {[type]}\n   */\n  merge: function(options, events)\n  {\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, events );\n      }\n    }\n\n    return events;\n  },\n\n  /**\n   * Extends this animation and returns an animation modified with the given options. \n   *\n   * @param {object} options\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var events = this.cloneEvents();\n\n    this.merge( options, events );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, events );\n  }\n\n};","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(subject)\n\t{\n\t  this.subject = subject;\n\t  this.events = {};\n    this.springs = {};\n\t  this.attributes = {};\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    \n    return this;\n\t},\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  {\n    \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function()\n  {\n\t\tthis.trigger('preupdate');\n    \n    return this;\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    \n    this.finished = true;\n\t\t\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      this.updated[ attr ] = e.update( now, this.frame );\n      \n      this.finished = this.finished && e.isFinished();\n    }\n    \n    for (var attr in this.springs)\n    {\n      var s = this.springs[ attr ];\n      \n      this.updated[ attr ] = s.update( now, this.frame );\n      \n      this.finished = false;\n    }\n\t\n\t\tthis.trigger('update');\n    \n    return this;\n  },\n  \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function(s)\n  {\n    var attr = s.attribute;\n    \n    this.springs[ attr ] = s;\n    \n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = anim8.attribute( attr ).defaultValue;\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function(e)\n  {\n    var attr = e.attribute;\n    \n    this.events[ attr ] = e;\n    \n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = anim8.attribute( attr ).defaultValue;\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimEvents();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      var e = this.events[attr];\n      \n      if ( e.isFinished() )\n      {\n        if ( e.next )\n        {                    \n          this.placeEvent( e.next );\n          this.finished = false;\n        }\n        else\n        {\n          delete this.events[attr];\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there already.\n   * \n   * @return {[type]}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createEvents: function(animation, options, cache)\n  {\n    var options = options || {};    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var events = animation.newEvents();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, events );\n    }\n    \n    this.onAnimation( animation, options, events );\n\n    if ( animation.next !== null )\n    {\n      var eventMap = {};\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[i];\n\n        eventMap[ e.attribute ] = e;\n      }\n\n      while ( animation.next !== null )\n      {\n        animation = animation.next;\n\n        var queueEvents = animation.newEvents();\n        var maxRemaining = 0;\n\n        for (var i = 0; i < events.length; i++)\n        {\n          var e = events[i];\n\n          if ( !e.isInfinite() )\n          {\n            maxRemaining = Math.max( maxRemaining, e.finiteTimeRemainingInChain() );  \n          }\n        }\n\n        for (var i = 0; i < queueEvents.length; i++)\n        {\n          var e = queueEvents[ i ];\n          var existing = eventMap[ e.attribute ];\n\n          if ( existing && !existing.isInfinite() )\n          {\n            e.delay += (maxRemaining - existing.finiteTimeRemainingInChain());\n            eventMap[ e.attribute ].queue( e );\n          }\n          else\n          {\n            e.delay += maxRemaining;\n            eventMap[ e.attribute ] = e;\n            events.push( e );\n          }\n        }\n\n        this.onAnimation( animation, options, queueEvents );\n      }      \n    }\n\n    return events;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeSpring( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Removes springs for the specified attributes. If no attributes are specified then all springs\n   * are removed. Attributes can be specified as an array of attribute names or a string with attribute\n   * names separated by a space.\n   *\n   * @param {string|Array} attributes\n   */\n  unspring: function(attributes)\n  {\n    return this.springsFor( attributes, function(s)\n    {\n      delete this.springs[ s.attribute ];\n    });\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Existing events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   * @param [boolean] cache\n   */\n\tplay: function(animation, options, all, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.playEvents( events, all );\n\n    return this.activate();\n\t},\n\n  /**\n   * Adds events to this Animator to be played (optionally finishing events for attributes not specified in the given \n   * attribute). Existing events will be replaced immediately. This method will not activate the Animator, that has\n   * to be done manually.\n   * \n   * @param  {array} events\n   * @param  [boolean] all\n   * @return {this}\n   */\n  playEvents: function(events, all)\n  {\n    var attrs = {};\n    \n    for (var i = 0; i < events.length; i++)\n    { \n      this.placeEvent( events[i] );\n      \n      attrs[ events[i].attribute ] = true;\n    }\n    \n    if ( all )\n    {\n      for (var attr in this.events)\n      {\n        if ( !(attr in attrs) )\n        {\n          this.events[ attr ].finish( this.frame );\n        }\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n        \n    this.queueEvents( events );\n\n    return this;\n\t},\n\n  /**\n   * Queues an array of events on this Animator. The given events will be delayed to start at the same time - at the\n   * end of the events currently on the Animator. This method will not activate the Animator, that has to be done \n   * manually.\n   * \n   * @param  {array} events\n   * @return {this}\n   */\n  queueEvents: function(events)\n  {\n    var maxRemaining = this.finiteTimeRemaining();\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      \n      if ( attr in this.events  && !this.events[ attr ].isInfinite() )\n      {    \n        e.delay += (maxRemaining - this.events[ attr ].timeRemainingInChain());\n        \n        this.events[attr].queue( e );\n      }\n      else\n      {\n        e.delay += maxRemaining;\n        \n        this.placeEvent( e );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all, cache)\n  {\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n\n    this.transitionEvents( transitionTime, transitionDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation. This method will not activate the \n   * Animator, that has to be done manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param [array] events\n   * @param [boolean] all\n   */\n  transitionEvents: function(transitionTime, transitionDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n\n    // Parse given variables\n    var transitionTime = anim8.time( transitionTime, anim8.defaults.transitionTime );\n    var transitionDelta = anim8.coalesce( transitionDelta, anim8.defaults.transitionDelta );\n    var transitionEasing = anim8.easing( transitionEasing, anim8.defaults.transitionEasing );\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionDelta );\n          var p2 = e1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, calc, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transitionInto: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation, options, all, cache)\n  {\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.transitionIntoEvents( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation. This method will not activate the Animator, that has to be done \n   * manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {array} events\n   * @param [boolean] all\n   */\n  transitionIntoEvents: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n\n    // Parse given variables\n    var transitionTime = anim8.time( transitionTime, anim8.defaults.transitionTime );\n    var transitionFromDelta = anim8.coalesce( transitionFromDelta, anim8.defaults.transitionDelta );\n    var transitionIntoDelta = anim8.coalesce( transitionIntoDelta, anim8.defaults.transitionIntoDelta );\n    var transitionEasing = anim8.easing( transitionEasing, anim8.defaults.transitionEasing );\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionFromDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transitionIntoDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n      \n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {string} attribute\n   * @param {any} target\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenTo: function(attribute, target, duration, delay, easing, repeat, sleep, scale, scaleBase)\n  {\n    var attr = anim8.attribute( attribute );\n    var calc = anim8.calculator( attr.calculator );\n    var start = attribute in this.frame ? calc.clone( this.frame[ attribute ] ) : true;\n    var end = calc.parse( target, attr.defaultValue );\n\n    var path = new anim8.Tween( attribute, calc, start, end );\n    var event = new anim8.Event( attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attribute to target values.\n   *\n   * @param {object} targets\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenManyTo: function(targets, duration, delay, easing, repeat, sleep, scale, scaleBase)\n  {\n    for ( var attribute in targets )\n    {\n      var attr = anim8.attribute( attribute );\n      var calc = anim8.calculator( attr.calculator );\n      var start = attribute in this.frame ? calc.clone( this.frame[ attribute ] ) : true;\n      var end = calc.parse( targets[ attribute ], attr.defaultValue );      \n      \n      var path = new anim8.Tween( attribute, calc, start, end );\n      var event = new anim8.Event( attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {string} attribute\n   * @param {any} starts\n   * @param {any} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tween: function(attribute, starts, ends, duration, delay, easing, repeat, sleep, scale, scaleBase)\n  {\n    var attr = anim8.attribute( attribute );\n    var calc = anim8.calculator( attr.calculator );\n    var start = calc.parse( starts, attr.defaultValue );\n    var end = calc.parse( ends, attr.defaultValue );\n\n    var path = new anim8.Tween( attribute, calc, start, end );\n    var event = new anim8.Event( attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {object} starts\n   * @param {object} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenMany: function(starts, ends, duration, delay, easing, repeat, sleep, scale, scaleBase)\n  {\n    for ( var attribute in starts )\n    {\n      var attr = anim8.attribute( input );\n      var calc = anim8.calculator( attr.calculator );\n      var start = calc.parse( starts[ attribute ], attr.defaultValue );\n      var end = calc.parse( ends[ attribute ], attr.defaultValue );\n      \n      var path = new anim8.Tween( attribute, calc, start, end );\n      var event = new anim8.Event( attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n\t\n\t/**\n\t * Applies the initial state of all unstarted current events for the specified attributes immediately. \n\t * Attribute names can be given as an array or a space separated string. If no attributes are given all \n\t * attributes are assumed.\n\t *\n   * @param {string|array} attributes\n\t */\n\tapplyInitialState: function(attributes)\n\t{\n\t\tvar eventCount = this.eventsFor( attributes, function(event, attr)\n\t\t{\n\t\t\tif ( !event.hasStarted() && event.hasInitialState() )\n\t\t\t{\n\t\t\t\tevent.applyValue( this.frame, this.frame[ attr ], 0.0 );\n\t\t\t\t\n\t\t\t\tthis.updated[ attr ] = true;\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.apply();\n\t\t\n\t\treturn eventCount;\n\t},\n\n  /**\n   * Returns the amount of time remaining for all finite events in this Animator.\n   * \n   * @return {number} milliseconds\n   */\n  finiteTimeRemaining: function()\n  {\n    var remaining = 0;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      if ( !e.isInfinite() )\n      {\n        remaining = Math.max( remaining, this.events[attr].finiteTimeRemainingInChain() );  \n      }\n    }\n\n    return remaining;\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame )\n      {\n        return animator.frame[ attribute ];\n      }\n      \n      request[ attribute ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return anim8.attribute( attribute ).defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number|string] duration\n   * @param [number|string] delay\n   * @param [function|string] easing\n   * @param [number|string] repeat\n   * @param [number|string] sleep  \n   * @param [number] scale\n   */\n  follow: function(attribute, path, duration, delay, easing, repeat, sleep, scale, scaleBase)\n  {\n    var path = anim8.path( path );\n    \n    // attribute, path, duration, easing, delay, sleep, repeat) \n    var event = new anim8.Event( \n      attribute, \n      path, \n      duration,\n      easing,\n      delay, \n      sleep,\n      repeat,\n      scale,\n      scaleBase\n    );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  objectsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n    \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        \n        if ( attr in objects )\n        {\n          if ( resulting )\n          {\n            results.push( objects[attr] );\n          }\n          else\n          {\n            callback.call( this, objects[attr], attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      for (var attr in objects)\n      {\n        if ( resulting )\n        {\n          results.push( objects[attr] );\n        }\n        else\n        {\n          callback.call( this, objects[attr], attr );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n  \n  /**\n   * Invokes the callback for each event for the given attributes.\n   * \n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\teventsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.events );\n\t},\n  \n  /**\n   * Invokes the callback for each spring for the given attributes.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\tspringsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.springs );\n\t},\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event, attr) \n\t\t{\n\t\t\tdelete this.events[ attr ];\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event) \n\t\t{\n\t\t\twhile (event.next)\n\t\t\t{\n\t\t\t\tevent = event.next;\n\t\t\t}\n\t\t\t\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator.\n   */\n  hasSprings: function()\n  {\n    for (var attr in this.springs)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator or animating events.\n   */\n  isAnimating: function()\n  {\n    if ( this.hasSprings() )\n    {\n      return true;\n    }\n    \n    for (var attr in this.events)\n    {\n      if ( this.events[attr].isAnimating() )\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  },\n\n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n   * @param [function] callback\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t}\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'play', 'queue', 'transition', 'transitionInt', 'restore', 'set', 'resume', 'pause', \n  'finish', 'end', 'stop', 'follow', 'applyInitialState', 'tweenTo', \n  'tween', 'tweenMany', 'tweenManyTo', 'spring', 'unspring', 'apply', \n  'placeSpring', 'placeEvent'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8s.fn = anim8.Animators.prototype = new Array();\n\n/**\n * Invokes a callback for each element in the array.\n * \n * @param {function} iterator\n */\nanim8s.fn.each = function(iterator, context) \n{\n  for (var i = 0; i < this.length; i++) \n  {\n    if ( iterator.call( context || this[i], this[i], i ) === false ) \n    {\n      break;\n    }\n  }\n\t\n\treturn this;\n};\n\n/**\n * Appends the array of animators given to the end of this array.\n *\n * @param {array} animators\n */\nanim8s.fn.fill = function(animators)\n{\n  for (var i = 0; i < animators.length; i++)\n  {\n    this.push( animators[i] );\n  }\n\n  return this;\n};\n\n/**\n * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n *\n * @param {function} filterer\n */\nanim8s.fn.filter = function(filterer)\n{\t\n\tvar alive = 0;\n\t\n\tfor (var i = 0; i < this.length; i++)\n\t{\n\t\tvar remove = filterer( this[i] );\n\t\t\n\t\tif ( !remove )\n\t\t{\n\t\t\tthis[alive++] = this[i];\n\t\t}\n\t}\n\t\n\tthis.length = alive;\n\t\n\treturn this;\n};\n\n/**\n * Returns the subjects of the Animators optionally passing them through a wrapper\n * function before it's returned.\n *\n * @param [function] wrapper\n */\nanim8s.fn.getSubjects = function(wrapper)\n{\n  var subjects = [];\n\n  for (var i = 0; i < this.length; i++)\n  {\n    subjects.push( this[i].subject );\n  }\n\n  if ( anim8.isFunction( wrapper ) )\n  {\n    subjects = wrapper( subjects );\n  }\n  \n  return subjects;\n};\n\n/**\n * Returns the first animator in the array.\n */\nanim8s.fn.first = function()\n{\n  return this[0];\n};\n\n/**\n * Reverses the order of animators in the array.\n */\n anim8s.fn.reverse = function()\n {\n  var last = this.length - 1;\n  var mid = Math.floor( this.length / 2 );\n\n  for (var i = 0; i < mid; i++)\n  {\n    var e0 = this[ i ];\n    var e1 = this[ last - i ];\n\n    this[ i ] = e1;\n    this[ last - i ] = e0;\n  }\n\n  return this;\n };\n\n/**\n * Activates all Animators in the array if they aren't active already.\n * \n * @return {this}\n */\nanim8s.fn.activate = function()\n{\n  for (var i = 0; i < this.length; i++)\n  {\n    var animator = this[i];\n\n    if ( !animator.active )\n    {\n      animator.active = true;\n      anim8.animating.push( animator ); \n    }\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n  \n  return this;\n};\n\n/**\n * Returns an array of the subjects optionally\n */\n\n/**\n * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n */\nanim8s.fn.sequence = function(delay, easing, animation, options)\n{\n  return new anim8.Sequence( this, delay, easing, animation, options );\n};\n\n/**\n * Adds the following methods to make an array of Animators appear like a single Animator.\n */\nanim8s.fn.restore              = anim8.delegate( 'restore', anim8.delegate.RETURN_THIS );\nanim8s.fn.placeSpring          = anim8.delegate( 'placeSpring', anim8.delegate.RETURN_THIS );\nanim8s.fn.placeEvent           = anim8.delegate( 'placeEvent', anim8.delegate.RETURN_THIS );\nanim8s.fn.preupdate            = anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS );\nanim8s.fn.update               = anim8.delegate( 'update', anim8.delegate.RETURN_THIS );\nanim8s.fn.apply                = anim8.delegate( 'apply', anim8.delegate.RETURN_THIS );\nanim8s.fn.trimEvents           = anim8.delegate( 'trimEvents', anim8.delegate.RETURN_THIS );\nanim8s.fn.deactivate           = anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS );\nanim8s.fn.destroy              = anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS );\nanim8s.fn.spring               = anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS );\nanim8s.fn.unspring             = anim8.delegate( 'unspring', anim8.delegate.RETURN_THIS );\nanim8s.fn.play                 = anim8.delegate( 'play', anim8.delegate.RETURN_THIS );\nanim8s.fn.playEvents           = anim8.delegate( 'playEvents', anim8.delegate.RETURN_THIS );\nanim8s.fn.queue                = anim8.delegate( 'queue', anim8.delegate.RETURN_THIS );\nanim8s.fn.queueEvents          = anim8.delegate( 'queueEvents', anim8.delegate.RETURN_THIS );\nanim8s.fn.transition           = anim8.delegate( 'transition', anim8.delegate.RETURN_THIS );\nanim8s.fn.transitionEvents     = anim8.delegate( 'transitionEvents', anim8.delegate.RETURN_THIS );\nanim8s.fn.transitionInto       = anim8.delegate( 'transitionInto', anim8.delegate.RETURN_THIS );\nanim8s.fn.transitionIntoEvents = anim8.delegate( 'transitionIntoEvents', anim8.delegate.RETURN_THIS );\nanim8s.fn.tween                = anim8.delegate( 'tween', anim8.delegate.RETURN_THIS );\nanim8s.fn.tweenTo              = anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS );\nanim8s.fn.tweenMany            = anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS );\nanim8s.fn.tweenManyTo          = anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS );\nanim8s.fn.applyInitialState    = anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS );\nanim8s.fn.follow               = anim8.delegate( 'follow', anim8.delegate.RETURN_THIS );\nanim8s.fn.eventsFor            = anim8.delegate( 'eventsFor', anim8.delegate.RETURN_RESULTS );\nanim8s.fn.springsFor           = anim8.delegate( 'springsFor', anim8.delegate.RETURN_RESULTS );\nanim8s.fn.stop                 = anim8.delegate( 'stop', anim8.delegate.RETURN_THIS );\nanim8s.fn.end                  = anim8.delegate( 'end', anim8.delegate.RETURN_THIS );\nanim8s.fn.finish               = anim8.delegate( 'finish', anim8.delegate.RETURN_THIS );\nanim8s.fn.pause \t\t\t         = anim8.delegate( 'pause', anim8.delegate.RETURN_THIS );\nanim8s.fn.resume \t\t\t         = anim8.delegate( 'resume', anim8.delegate.RETURN_THIS );\nanim8s.fn.set                  = anim8.delegate( 'set', anim8.delegate.RETURN_THIS );\nanim8s.fn.get                  = anim8.delegate( 'get', anim8.delegate.RETURN_FIRST );\nanim8s.fn.isAnimating          = anim8.delegate( 'isAnimating', anim8.delegate.RETURN_TRUE );\nanim8s.fn.hasEvents            = anim8.delegate( 'hasEvents', anim8.delegate.RETURN_TRUE );\nanim8s.fn.hasSprings           = anim8.delegate( 'hasSprings', anim8.delegate.RETURN_TRUE );\nanim8s.fn.on\t\t\t             = anim8.delegate( 'on', anim8.delegate.RETURN_THIS );\nanim8s.fn.once\t\t             = anim8.delegate( 'once', anim8.delegate.RETURN_THIS );\nanim8s.fn.off\t\t\t             = anim8.delegate( 'off', anim8.delegate.RETURN_THIS );\nanim8s.fn.trigger              = anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS );\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate();\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );","anim8.Sequence = function(animators, delay, easing, animation, options)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n  this.animation = anim8.animation( animation, options );\n  this.options = options;\n};\n\nanim8.Sequence.prototype =\n{\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  createEvents: function(i)\n  {\n    var events = this.animation.newEvents();\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = 0; k < events.length; k++)\n    {\n      events[k].delay += delayOffset;\n    }\n    \n    return events;\n  },\n\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  play: function(all)\n  {    \n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.playEvents( sequence.createEvents( i ), all );       \n    });\n    \n    return this.add();\n  },\n  \n  queue: function()\n  {\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.finiteTimeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var events = sequence.createEvents( i );\n      \n      for (var i = 0; i < events.length; i++)\n      {\n        events[ i ].delay += delayOffset;\n      }\n      \n      animator.queueEvents( events );\n    });\n    \n    return this.add();\n  },\n\n  /*\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options)\n  {\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transition( sequence.createEvents( i ), all );\n    });\n    \n    return this.add();\n  },\n  */\n  \n  add: function()\n  {\n    this.animators.activate();\n    this.animators.applyInitialState();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    return true;\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var easings   = animation.easings || {};\n    var delays    = animation.delays || {};\n    var sleeps    = animation.sleeps || {};\n    var repeats   = animation.repeats || {};\n    var scales    = animation.scales || {};\n    var scaleBases= animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = anim8.easing( anim8.coalesce( easings[attr],   newOptions.easing,   oldOptions.easing   ), e.easing );\n      e.repeat    = anim8.repeat( anim8.coalesce( repeats[attr],   newOptions.repeat,   oldOptions.repeat   ), e.repeat );\n      e.delay     = anim8.time(   anim8.coalesce( delays[attr],    newOptions.delay,    oldOptions.delay    ), e.delay );\n      e.sleep     = anim8.time(   anim8.coalesce( sleeps[attr],    newOptions.sleep,    oldOptions.sleep    ), e.sleep );\n      e.duration  = anim8.time(   anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration ), e.duration );\n      e.scale     =               anim8.coalesce( scales[attr],    newOptions.scale,    oldOptions.scale     , e.scale );\n      e.scaleBase = calc.parse(   anim8.coalesce( scaleBases[attr],newOptions.scaleBase,oldOptions.scaleBase), e.scaleBase );\n    }\n  }\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.ParserDeltas.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserDeltas.prototype.parse = function( animation, options, events )\n{\n  // 1. If deltas wasn't specified, assume a uniform distribution of points\n  // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n  // 3. Generate the events\n  \n\tvar deltas = animation.deltas;\n\tvar values = animation.values;\n\n  if ( !anim8.isDefined( deltas ) )\n  {\n    var valueCount = 0;\n    \n\t\tfor (var attr in values)\n\t\t{\n      valueCount++; \n    }\n    \n    deltas = [];\n    \n    for (var i = 0; i < valueCount; i++)\n    {\n      deltas[i] = i / (valueCount - 1);\n    }\n  }\n\tif ( anim8.isArray( deltas ) )\n\t{\n\t\tvar deltaObject = {};\n\t\t\n\t\tfor (var attr in values)\n\t\t{\n\t\t\tdeltaObject[attr] = deltas;\t\n\t\t}\n\t\t\n\t\tdeltas = deltaObject;\n\t}\n\t\n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n  var scales = animation.scales || {};\n  var scaleBases = animation.scaleBases || {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n\t\t\n\t\tfor (var k = 0; k < value.length; k++)\n\t\t{\n\t\t\tvalue[k] = calculator.parse( value[k], defaultValue );\n\t\t}\n\t\t\n    var duration = anim8.coalesce( durations[attr], options.duration );\n    var easing   = anim8.coalesce( easings[attr], options.easing );\n    var delay    = anim8.coalesce( delays[attr], options.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat );\n    var scale    = anim8.coalesce( scales[attr], options.scale );\n    var scaleBase= anim8.coalesce( scaleBase[attr], options.scaleBase );\n\n    var path     = new anim8.DeltaPath( attr, calculator, values[attr], deltas[attr] );\n    var event    = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n    \n    events.push( event );\n\t}\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.values = new anim8.ParserDeltas();","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.ParserFinal.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserFinal.prototype.parse = function( animation, options, events )\n{\n  // 1. Generate the events, only caring about the delays and durations\n  \n\tvar values = animation.final;\n\t\n  var delays = animation.delays || {};\n  var durations = animation.durations || {};\n  var scales = animation.scales || {};\n  var scaleBases = animation.scaleBases || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n\n    value = calculator.parse( value, defaultValue ); \n\t\t\n    var delay    = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n    var duration = anim8.duration( anim8.coalesce( durations[attr], options.duration ) );\n    var scale    = anim8.coalesce( scales[attr], options.scale );\n    var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n\n    var path     = new anim8.PointPath( attr, calculator, value );\n    var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, scale, scaleBase, false, this );\n    \n    events.push( event );\n\t}\n};\n\n/**\n * Merges the options with the given event instances. This is when an existing \n * animation is provided but the user wants to override the animation's options.\n *\n * Because event properties can be specified in several places there's a priority\n * to which one takes precedence. The properties specified in the animation object\n * itself are highest priority, followed by the new options, then by the old\n * options, and finally by the existing property on the event instance.\n *\n * @param {object} animation\n * @param {object} newOptions\n * @param {object} oldOptions\n * @param {Array} events\n */\nanim8.ParserFinal.prototype.merge = function( animation, newOptions, oldOptions, events )\n{\n  var durations = animation.durations || {};\n  var delays    = animation.delays || {};\n  var scales    = animation.scales || {};\n  var scaleBases = animation.scaleBases || {};\n  \n  for (var i = 0; i < events.length; i++)\n  {\n    var e = events[i];\n    var attr = e.attribute;\n    var calc = e.path.calculator;\n      \n    if ( e.getParser() !== this )\n    {\n      continue;\n    }\n\n    var delay = anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay );\n    var duration = anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration );\n\n    e.delay = anim8.delay( delay ) + anim8.duration( duration );\n    e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n    e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n  }\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.final = new anim8.ParserFinal();","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.ParserInitial.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserInitial.prototype.parse = function( animation, options, events )\n{\n  // 1. Generate the events, only caring about the delays\n  \n\tvar values = animation.initial;\n\t\n  var delays = animation.delays || {};\n  var scales = animation.scales || {};\n  var scaleBases = animation.scaleBases || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n    \n    value = calculator.parse( value, defaultValue ); \n\t\t\n    var delay    = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n    var scale    = anim8.coalesce( scales[attr], options.scale );\n    var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n    \n    var path     = new anim8.PointPath( attr, calculator, value );\n    var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, scale, scaleBase, true, this );\n    \n    events.push( event );\n\t}\n};\n\n/**\n * Merges the options with the given event instances. This is when an existing \n * animation is provided but the user wants to override the animation's options.\n *\n * Because event properties can be specified in several places there's a priority\n * to which one takes precedence. The properties specified in the animation object\n * itself are highest priority, followed by the new options, then by the old\n * options, and finally by the existing property on the event instance.\n *\n * @param {object} animation\n * @param {object} newOptions\n * @param {object} oldOptions\n * @param {Array} events\n */\nanim8.ParserInitial.prototype.merge = function( animation, newOptions, oldOptions, events )\n{\n  var durations = animation.durations || {};\n  var delays    = animation.delays || {};\n  var scales = animation.scales || {};\n  var scaleBases = animation.scaleBases || {};\n  \n  for (var i = 0; i < events.length; i++)\n  {\n    var e = events[i];\n    var attr = e.attribute;\n    var calc = e.path.calculator;\n      \n    if ( e.getParser() !== this )\n    {\n      continue;\n    }\n    \n    e.delay = anim8.time( anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay ), e.delay );\n    e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n    e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n  }\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.initial = new anim8.ParserInitial();","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.ParserKeyframe.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserKeyframe.prototype.parse = function( animation, options, events )\n{\n  // 1. Normalize keys by converting aliases to the actual value\n  // 2. Split up keys that have commas into multiple entries\n  // 3. Validate keys and remove invalid ones - also calculate max key value\n  // 4. Sort frames by the key\n  // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n  // 6. Generate the events\n  \n  var kframes = animation.keyframe;\n  \n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n  var scales = animation.scales || {};\n  var scaleBases = animation.scaleBases || {};\n  \n  var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n  \n  var sort = false;\n  \n  var aliases = {\n    from:     '0',\n    start:    '0',\n    initial:  '0',\n    first:    '0',\n    half:     '50',\n    middle:   '50',\n    to:       '100',\n    end:      '100',\n    last:     '100'\n  };\n  \n  // split up comma delimited times\n  for (var time in kframes)\n  {\n    if ( time in aliases )\n    {\n      kframes[ aliases[time] ] = kframes[ time ];\n      \n      delete kframes[ time ];\n    }\n    else if ( time.indexOf(',') !== -1 )\n    {\n      var times = time.split(',');\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i]] = kframes[time];\n      }\n      \n      delete kframes[time];\n      \n      sort = true;\n    }\n  }\n  \n  var times = [];\n  \n  // validate times\n  var lastTime = 0.0;\n  var maxTime = 0.0;\n  \n  for (var time in kframes)\n  {\n    var t = parseFloat(time);\n    \n    if (isNaN(t))\n    {\n      delete kframes[time];\n    }\n    else\n    {\n      if (t < lastTime)\n      {\n        sort = true;\n      }\n      \n      times.push({\n        order: t,\n        key: time,\n        value: kframes[time]\n      });\n      \n      lastTime = t;\n      \n      maxTime = Math.max( maxTime, t );\n    }\n  }\n  \n  // sort if necessary\n  if (sort)\n  {\n    times.sort(function(a, b) {\n      return a.order - b.order;\n    });\n    \n    kframes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      kframes[times[i].key] = times[i].value;\n    }\n  }\n  \n  // split up into deltas and values\n  var deltas = {};\n  var values = {};\n  var calculators = {};\n\tvar defaults = {};\n  var pathEasings = {};\n  \n  for (var i = 0; i < times.length; i++)\n  {\n    var frame = times[i];\n    var easing = anim8.coalesce( frame.value.easing, options.easing );\n    \n    delete frame.value.easing;\n    \n    for (var attr in frame.value)\n    {\n      if ( !(attr in deltas) )\n      {\n        deltas[attr] = [];\n        values[attr] = [];\n        pathEasings[attr] = [];\n        \n        if (attr in anim8.attribute)\n        {\n          calculators[attr] = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\t\t\tdefaults[attr] = anim8.attribute[attr].defaultValue;\n        }\n        else\n        {\n          calculators[attr] = anim8.calculator.default;\n\t\t\t\t\tdefaults[attr] = calculators[attr].create();\n        }\n      }\n\t\t\t\n      deltas[attr].push( frame.order / maxTime );\n      values[attr].push( calculators[attr].parse( frame.value[attr], defaults[attr] ) );\n      pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[attr], easing ) ) );\n    }\n  }\n\t\n  // create events & paths\n  for (var attr in deltas)\n  {\n    var duration = anim8.coalesce( durations[attr], options.duration );\n    var delay    = anim8.coalesce( delays[attr], options.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat );\n    var scale    = anim8.coalesce( scales[attr], options.scale );\n    var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n    \n    var path     = new anim8.KeyframePath( attr, calculators[attr], values[attr], deltas[attr], pathEasings[attr] );\n    var event    = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, scale, scaleBase, true, this );\n    \n    events.push( event );\n  }\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.keyframe = new anim8.ParserKeyframe();","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTween = function()\n{\n  \n};\n\n// ParserTween extends anim8.Parser()\nanim8.ParserTween.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserTween.prototype.parse = function( animation, options, events )\n{\n  // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n  var tweenTo = animation.tweenTo;\n\n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n  var scales = animation.scales || {};\n  var scaleBases = animation.scaleBase || {};\n\n\tfor (var attr in tweenTo)\n\t{\n    var calculator = null;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue= calculator.create();\n    }\n\t\t\n    var value    = calculator.parse( tweenTo[attr], defaultValue );\n    var duration = anim8.coalesce( durations[attr], options.duration );\n    var easing   = anim8.coalesce( easings[attr], options.easing );\n    var delay    = anim8.coalesce( delays[attr], options.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat );\n    var scale    = anim8.coalesce( scales[attr], options.scale );\n    var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n    \n    var path     = new anim8.Tween( attr, calculator, true, value );\n    var event    = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n    \n    events.push( event );\n\t}\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.tweenTo = new anim8.ParserTween();","\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factory = function(subject, optional) \n{\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) )\n    {     \n      return factory;\n    }\n  }\n  \n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return false;\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    return false;\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n\n};\n\n// It extends anim8.Factory\nanim8.ObjectFactory.prototype = new anim8.Factory();\n\n/**\n * Determines whether the given subject is valid for this factory to create Animators for.\n * \n * @param  {any} subject\n * @return {boolean}\n */\nanim8.ObjectFactory.prototype.is = function(subject)\n{\n  return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n};\n\n/**\n * Returns an animator given a subject.\n * \n * @param  {any} subject\n * @return {anim8.Animator}\n */\nanim8.ObjectFactory.prototype.animatorFor = function(subject)\n{\n  var animator = subject.$animator;\n    \n  if ( !animator )\n  {\n    animator = new anim8.Animator( subject );\n    animator.factory = this;\n    \n    subject.$animator = animator;\n  }\n  \n  return animator;\n};\n\n/**\n * Destroys the animator by unlinking the animator from the subject.\n * \n * @param  {anim8.Animator} animator\n * @return {void}\n */\nanim8.ObjectFactory.prototype.destroy = function(animator)\n{\n  delete animator.subject.$animator;\n};\n\n/**\n * Registers the object factory.\n */\nanim8.factory.object = new anim8.ObjectFactory();\n","\n/**\n * A factory for HTML Elements\n */\nanim8.DomFactory = function()\n{\n  this.cached = {};\n  this.ids = 0;\n  this.attribute = 'anim8';\n};\n\n// It extends anim8.Factory\nanim8.DomFactory.prototype = new anim8.Factory();\n\n/**\n * Determines whether the given subject is valid for this factory to create Animators for.\n * \n * @param  {any} subject\n * @return {boolean}\n */\nanim8.DomFactory.prototype.is = function(subject)\n{\n  return anim8.isElement( subject );\n};\n\n/**\n * Returns an animator given a subject.\n * \n * @param  {any} subject\n * @return {anim8.Animator}\n */\nanim8.DomFactory.prototype.animatorFor = function(subject)\n{\n  var animatorId = subject.getAttribute( this.attribute );\n  \n  if (!(animatorId in this.cached)) \n  {\n    var animator = new anim8.DomAnimator( subject );\n    \n    subject.setAttribute( this.attribute, animatorId = animator.id = ++this.ids );\n    \n    animator.factory = this;\n    \n    this.cached[animatorId] = animator;\n  }\n\n  return this.cached[ animatorId ];\n};\n\n/**\n * Destroys the animator by unlinking the animator from the subject.\n * \n * @param  {anim8.Animator} animator\n * @return {void}\n */\nanim8.DomFactory.prototype.destroy = function(animator)\n{\n  delete this.cached[ animator.id ];\n};\n\n/**\n * Registers the DOM factory.\n */\nanim8.factory.dom = new anim8.DomFactory();\n\n\n/*\n  DOM create styles to apply, then apply them all at the same time\n  don't apply styles if they're impercivable (convert value to pixels of applicable)\n\n*/\n\n/**\n * All DOM related\n */\nanim8.dom = {};\n\n/* \n  anim8.property[name] = {\n    get: function(e, anim) {\n      // based on anim.animating, gets one or more value from the entity and places it on anim.frame. this function should only do this for an attribute if\n      // anim.animating[attribute] === false. When it successfully gets a value anim.animating[attribute] should be set to true. This is called before an animation\n      // begins on attributes that will be animated based on the current value. \n    },\n    set: function(e, anim) {\n      // applies the applicable attributes in anim.frame to the entity, \n    }\n }\n*/\nanim8.property = function(prop) \n{\n  if ( anim8.isObject( prop ) && anim8.isFunction( prop.get ) && anim8.isFunction( prop.set ) ) \n  {\n    return prop;\n  }\n  if ( anim8.isString( prop ) && prop in anim8.property )\n  {\n\t  return anim8.property[ prop ];\n  }\n\t\n  throw prop + ' is not a valid property';\n}\n\n/**\n * Computes the desired style of the given element and returns it as a string. The style\n * given must be in hyphenated format like so: anim8.style( element, 'font-size' ) = '12px'\n */\nanim8.style = (function()\n{\n  var hyphenated = {};\n\n  var hyphenize = function(str) \n\t{\n    if ( str in hyphenated )\n    {\n      return hyphenated[ str ];\n    }\n\n    var key = str;\n\n    str = str.replace(/[a-z][A-Z]/g, function(str, letter)\n    {\n     return str[0] + '-' + str[1].toLowerCase();\n    });\n    \n    str = str.replace(/^Webkit/, '-webkit');\n    str = str.replace(/^Moz/, '-moz');\n    str = str.replace(/^Ms/, '-ms');\n    str = str.replace(/^O/, '-o');\n    str = str.replace(/^Khtml/, '-khtml');\n    \n    return hyphenated[ key ] = str;\n  };\n\t\n\treturn function(e, style) \n\t{\n\t  if (e.currentStyle)\n\t\t{\n\t    return e.currentStyle[ style ];\n\t  } \n\t\telse if (document.defaultView && document.defaultView.getComputedStyle) \n\t\t{\n\t    return document.defaultView.getComputedStyle( e, null ).getPropertyValue( hyphenize( style ) );\n\t  } \n\t\telse \n\t\t{\n\t    return e.style[ style ]; \n\t  }\n\t};\n\t\n})();\n\n/**\n * Given an array of styles this will return the first one that is present on elements in the current browser.\n */\nanim8.prefix = (function() \n{\n  var a = document.createElement('a');\n  \n  return function(prefixes) \n  {\n    for (var i = 0; i < prefixes.length; i++) \n    {\n      if ( anim8.isDefined( a.style[ prefixes[ i ] ] ) ) \n      {\n        return prefixes[i];\n      }\n    }\n    return false;\n  };\n  \n})();\n\n/**\n * Calculators how many pixels a given value & unit is.\n * \n * For Example: anim8.toPixels( 100, 'in' ) \n *    returns how many pixels are in 1 inch, with up to 2 decimal points of accuracy.\n */\nanim8.toPixels = function(baseValue, baseUnit, defaultRate)\n{\n  if ( document.body )\n  {\n    var div = document.createElement('div');\n    document.body.appendChild( div );\n    div.style.width = baseValue + baseUnit;\n    var pixels = (div.offsetWidth / baseValue);\n    document.body.removeChild( div );\n    return pixels || defaultRate;\n  }\n  \n  return defaultRate;\n};\n\n/**\n * Parses the string for a value and a unit.\n *\n * @param {string} value\n */\nanim8.parseValue = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(px|em|%|vw|ex|cm|mm|in|pt|pc|deg|rad)?/;\n  \n  return function(x)\n  {\n    var parsed = regex.exec( x );\n    \n    if (parsed) \n    {      \n      return {\n        value: parseFloat( parsed[1] ),\n        unit: parsed[3]\n      }\n    }\n    \n    return false;\n  };\n})();\n\n\n/**\n * Converts one unit to another for a given element.\n *\n * For Example: anim8.convert( element, '100px', '%', 'parentWidth' )\n *    returns how much percent 100px relativeTo parentWidth of the given element\n *\n * @param {HTMLElement} e\n * @param {string} from\n * @param {string} toUnit\n * @param {string} relativeTo\n */\nanim8.convert = (function()\n{  \n  var getFontSize = function(e, notUnit)\n  {\n    var fontSize = anim8.style( e, 'fontSize' );\n    var parsed = anim8.parseValue( fontSize );\n    \n    if ( !parsed || parsed.unit === notUnit )\n    {\n      return 12;\n    }\n    \n    if ( parsed.unit === 'px' ) \n    {\n      return parsed.value;\n    }\n    \n    return getConverterScale( e, conversions[ parsed.unit ].px, relativeTo );\n  };\n\n  var variables = {};\n  \n  variables.parentWidth = function(e)\n  {\n    return e.parentNode.scrollWidth;\n  };\n  variables.parentHeight = function(e)\n  {\n    return e.parentNode.scrollHeight;\n  };\n  variables.width = function(e)\n  {\n    return e.offsetWidth;\n  };\n  variables.height = function(e)\n  {\n    return e.offsetHeight;\n  };\n  variables.fontSize = function(e)\n  {\n    return getFontSize( e, '%' );\n  };\n  variables.parentFontSize = function(e)\n  {\n    return getFontSize( e.parentNode, '%' );\n  };\n  variables.htmlFontSize = function(e)\n  {\n    var htmlElement = document.getElementsByTagName(\"html\")[0];\n    \n    return getFontSize( htmlElement, '%' );\n  };\n  \n  var conversions = {};\n  \n  conversions.pt  = { px: anim8.toPixels(100, 'pt') };\n  conversions.in  = { px: anim8.toPixels(100, 'in') };\n  conversions.cm  = { px: anim8.toPixels(1000, 'cm') };\n  conversions.mm  = { px: anim8.toPixels(100000, 'mm') };\n  conversions.vw  = { px: anim8.toPixels(1000, 'vw') };\n  conversions.deg = { rad: Math.PI / 180.0};\n\n  conversions.em = \n  {\n    px: function(e, relativeTo) \n    {\n      return getFontSize( e, 'em' );\n    }\n  };\n  \n  conversions.rem = \n  {\n    px: function(e, relativeTo) \n    {\n      var htmlElement = document.getElementsByTagName(\"html\")[0];\n      \n      return getFontSize( htmlElement, 'rem' );\n    }\n  };\n  \n  conversions['%'] = \n  {\n    px: function(e, relativeTo) \n    {\n      if ( anim8.isNumber( relativeTo ) )\n      {\n        return relativeTo;\n      }\n      if ( relativeTo in variables )\n      {\n        return variables[ relativeTo ]( e ) / 100.0;\n      }\n      \n      return 1.0;\n    }\n  };\n  \n  // Populate conversions going other way.\n  for (var unit in conversions)\n  {\n    for (var to in conversions[ unit ])\n    {\n      if ( !(to in conversions) )\n      {\n        conversions[ to ] = {};\n      }\n      \n      if ( !(unit in conversions[ to ]) )\n      {\n        var given = conversions[ unit ][ to ];\n        \n        if ( anim8.isNumber( given ) )\n        {\n          conversions[ to ][ unit ] = 1.0 / given;  \n        }\n        if ( anim8.isFunction( given ) )\n        {\n          conversions[ to ][ unit ] = (function(converter) \n          {\n            return function(e, relativeTo) \n            {\n              return 1.0 / converter( e, relativeTo );\n            };\n          })( given );\n        }\n      }\n    }\n  }\n  \n  // Given an element, convert, and relativeTo - return the number we need to multiply by.\n  var getConverterScale = function(e, converter, relativeTo)\n  {\n    if ( anim8.isNumber( converter ) )\n    {\n      return converter;\n    }\n    else if ( anim8.isFunction( converter ) )\n    {\n      return converter( e, relativeTo );\n    }\n    \n    return 1.0;\n  };\n  \n  return function(e, from, toUnit, relativeTo)\n  {\n    if ( anim8.isNumber( from ) )\n    {\n      return from;\n    }\n    \n    var parsed = anim8.parseValue( from );\n    \n    if ( !parsed )\n    {\n      return false;\n    }\n    \n    var value = parsed.value;\n    var fromUnit = parsed.unit;\n    \n    if ( !fromUnit || fromUnit === toUnit )\n    {\n      return value;\n    }\n    \n    // First see if we have a direct conversion available...\n    if ( fromUnit in conversions && toUnit in conversions[ fromUnit ] )\n    {\n      var converter = conversions[ fromUnit ][ toUnit ];\n      \n      value *= getConverterScale( e, converter, relativeTo );\n    }\n    // Otherwise convert it to px, then to the desired unit\n    else if ( fromUnit in conversions && conversions[ fromUnit ].px && toUnit in conversions.px )\n    {\n      var converter1 = conversions[ fromUnit ].px;\n      var converter2 = conversions.px[ toUnit ];\n      \n      value *= getConverterScale( e, converter1, relativeTo );\n      value *= getConverterScale( e, converter2, relativeTo );\n    }\n    \n    return value;\n  };\n  \n})();\n\n\n","\nanim8.property.factory = function(nm, relativeTo) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.style( e, nm );\n        var converted = anim8.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.property.factoryDerivable = function(nm, relativeTo, deriver) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.style( e, nm );\n        var converted = anim8.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n        else if ( anim8.isFunction( deriver ) )\n        {\n          converted = anim8.convert( e, deriver( e ), anim.units[ nm ], relativeTo );\n          \n          if ( converted !== false )\n          {\n            anim.frame[nm] = converted;\n            anim.animating[nm] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.property.factoryColor = function(nm) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var parsed = anim8.color.parse( e.style[nm] );\n        \n        if (parsed !== anim8.color.invalidColor) \n        {\n          anim.frame[nm] = parsed;\n          anim.animating[nm] = true;\n        }              \n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[nm] = anim8.color.format( anim.frame[nm] );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.property.padding                  = anim8.property.factory( 'padding', 'parentWidth' );\nanim8.property.paddingTop               = anim8.property.factory( 'paddingTop', 'parentWidth' );\nanim8.property.paddingRight             = anim8.property.factory( 'paddingRight', 'parentWidth' );\nanim8.property.paddingBottom            = anim8.property.factory( 'paddingBottom', 'parentWidth' );\nanim8.property.paddingLeft              = anim8.property.factory( 'paddingLeft', 'parentWidth' );\n\nanim8.property.margin                   = anim8.property.factory( 'margin', 'parentWidth' );\nanim8.property.marginTop                = anim8.property.factory( 'marginTop', 'parentWidth' );\nanim8.property.marginRight              = anim8.property.factory( 'marginRight', 'parentWidth' );\nanim8.property.marginBottom             = anim8.property.factory( 'marginBottom', 'parentWidth' );\nanim8.property.marginLeft               = anim8.property.factory( 'marginLeft', 'parentWidth' );\n\nanim8.property.borderRadius             = anim8.property.factory( 'borderRadius', 'width' );\nanim8.property.borderTopLeftRadius      = anim8.property.factory( 'borderTopLeftRadius', 'width' );\nanim8.property.borderTopRightRadius     = anim8.property.factory( 'borderTopRightRadius', 'width' );\nanim8.property.borderBottomLeftRadius   = anim8.property.factory( 'borderBottomLeftRadius', 'width' );\nanim8.property.borderBottomRightRadius  = anim8.property.factory( 'borderBottomRightRadius', 'width' );\n\nanim8.property.borderWidth              = anim8.property.factory( 'borderWidth' );\nanim8.property.borderTopWidth           = anim8.property.factory( 'borderTopWidth' );\nanim8.property.borderRightWidth         = anim8.property.factory( 'borderRightWidth' );\nanim8.property.borderBottomWidth        = anim8.property.factory( 'borderBottomWidth' );\nanim8.property.borderLeftWidth          = anim8.property.factory( 'borderLeftWidth' );\n\nanim8.property.outlineWidth             = anim8.property.factory( 'outlineWidth' );\nanim8.property.textIndent               = anim8.property.factory( 'textIndent', 'parentWidth' );\nanim8.property.borderSpacing            = anim8.property.factory( 'borderSpacing' );\nanim8.property.fontSize                 = anim8.property.factory( 'fontSize', 'parentFontSize' );\nanim8.property.lineHeight               = anim8.property.factory( 'lineHeight', 'fontSize' );\nanim8.property.zIndex                   = anim8.property.factory( 'zIndex' );\n\nanim8.property.color                    = anim8.property.factoryColor( 'color' );\nanim8.property.backgroundColor          = anim8.property.factoryColor( 'backgroundColor' );\nanim8.property.borderTopColor           = anim8.property.factoryColor( 'borderTopColor' );\nanim8.property.borderRightColor         = anim8.property.factoryColor( 'borderRightColor' );\nanim8.property.borderBottomColor        = anim8.property.factoryColor( 'borderBottomColor' );\nanim8.property.borderLeftColor          = anim8.property.factoryColor( 'borderLeftColor' );\nanim8.property.outlineColor             = anim8.property.factoryColor( 'outlineColor' );\n\nanim8.property.minWidth                 = anim8.property.factory( 'minWidth', 'parentWidth' );\nanim8.property.maxWidth                 = anim8.property.factory( 'maxWidth', 'parentWidth' );\nanim8.property.minHeight                = anim8.property.factory( 'minHeight', 'parentHeight' );\nanim8.property.maxHeight                = anim8.property.factory( 'maxHeight', 'parentHeight' );\n\nanim8.property.width                    = anim8.property.factoryDerivable('width', 'parentWidth', function(e) { return e.offsetWidth + 'px'; });\nanim8.property.height                   = anim8.property.factoryDerivable('height', 'parentHeight', function(e) { return e.offsetHeight + 'px'; });\n\nanim8.property.top                      = anim8.property.factoryDerivable('top', 'parentHeight', function(e) { return e.offsetTop + 'px'; });\nanim8.property.right                    = anim8.property.factoryDerivable('right', 'parentWidth', function(e) { return (e.parentNode.scrollWidth - (e.offsetLeft + e.offsetWidth)) + 'px'; });\nanim8.property.bottom                   = anim8.property.factoryDerivable('bottom', 'parentHeight', function(e) { return (e.parentNode.scrollHeight - (e.offsetTop + e.offsetHeight)) + 'px'; });\nanim8.property.left                     = anim8.property.factoryDerivable('left', 'parentWidth', function(e) { return e.offsetLeft + 'px'; });\n\nanim8.property.visibility = \n{\n  get: function(e, anim) \n  {\n    if (anim.animating.visibility === false) \n    {\n      var style = anim8.style( e, 'visibility' );\n      anim.frame.visibility = style === 'hidden' ? 0.0 : 1.0;\n      anim.animating = true;\n    }\n  },\n  set: function(e, anim) \n  {\n    anim.styles.visibility = anim.frame.visibility < 0.5 ? 'hidden' : 'visible'\n  },\n  unset: function(e, anim)\n  {\n    e.style.visibility = null;\n  }\n}\n\nanim8.property.backface = (function()\n{\n  var css = anim8.prefix(['WebkitBackfaceVisibility', 'MozBackfaceVisibility', 'msBackfaceVisibility', 'BackfaceVisibility']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim)\n    {\n      if ( anim.animating.backface === false )\n      {\n        var style = anim8.style( e, css ); \n        \n        anim.frame.backface = (style === 'visible') ? 1.0 : 0.0;\n        anim.animating.backface = true;\n      }\n    },\n    set: function(e, anim)\n    {\n      anim.styles[css] = anim.frame.backface < 0.5 ? 'none' : 'visible';\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n    \n  };\n  \n})();\n\nanim8.property.transformOrigin = (function() \n{\n  var css = anim8.prefix(['WebkitTransformOrigin', 'MozTransformOrigin', 'OTransformOrigin', 'msTransformOrigin', 'transformOrigin']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  var keywords = \n  {\n    'left':   '0%',\n    'center': '50%',\n    'right':  '100%',\n    'top':    '0%',\n    'bottom': '100%'\n  };\n  \n  var setOriginAttribute = function(e, value, anim, attr, relativeTo ) \n  {\n    if (anim.animating[attr] === false) \n    {\n      if ( value in keywords )\n      {        \n        value = keywords[ value ];\n      }\n\n      var converted = anim8.convert( e, value, anim.units[ attr ], relativeTo );\n      \n      if ( converted !== false )\n      {\n        anim.frame[ attr ] = converted;\n        anim.animating[ attr ] = true;\n      }\n    }\n  };\n  \n  var setOrigin = function(e, split, anim) \n  {\n    if (anim.animating.origin === false) \n    {\n      if ((split.length === 1) || \n          (split.length === 2 && split[0] === split[1]) || \n          (split.length === 3 && split[0] === split[1] && split[1] === split[2])) \n      {     \n        setOriginAttribute( e, split[0], anim, 'origin', 'width' );\n      }            \n    }\n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.style( e, css );\n      \n      if (style) \n      {\n        var origin = style.toLowerCase();\n        var split = origin.split(' ');\n        \n        switch (split.length) \n        {\n        case 3:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOriginAttribute( e, split[2], anim, 'originZ' );\n          setOrigin( e, split, anim );\n          break;\n        case 2:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        case 1:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[0], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var style = null;\n      \n      if ( anim8.isDefined( anim.frame.originZ ) )\n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' ) + ' ' + anim.valueOr( 'originZ', 'origin', 'z' );\n      } \n      else \n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' );\n      }\n      \n      anim.styles[css] = style;\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.property.transform = (function() \n{\n  var css = anim8.prefix(['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);\n   \n  if ( !css )\n  {\n    return false;\n  }\n\n  var d2 = { translate: true, scale: true };\n  var d3 = { translate3d: true, scale3d: true };\n  var d4 = { rotate3d: true };\n  var axis = ['X', 'Y', 'Z'];\n    \n  var regex = \n  {\n    translate: /translate\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translate3d: /translate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translateX: /translateX\\(([^\\)]+)\\)/i,\n    translateY: /translateY\\(([^\\)]+)\\)/i,\n    translateZ: /translateZ\\(([^\\)]+)\\)/i,\n    scale: /scale\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scale3d: /scale3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scaleX: /scaleX\\(([^\\)]+)\\)/i,\n    scaleY: /scaleY\\(([^\\)]+)\\)/i,\n    scaleZ: /scaleZ\\(([^\\)]+)\\)/i,\n    rotate: /rotate\\(([^\\)]+)\\)/i,\n    rotate3d: /rotate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    rotateX: /rotateX\\(([^\\)]+)\\)/i,\n    rotateY: /rotateY\\(([^\\)]+)\\)/i,\n    rotateZ: /rotateZ\\(([^\\)]+)\\)/i,\n    skew: /skew\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    skewX: /skewX\\(([^\\)]+)\\)/i,\n    skewY: /skewY\\(([^\\)]+)\\)/i\n  };\n  \n  var parse = function( e, value, anim, attr, relativeTo )\n  {\n    var desiredUnit = anim.units[ attr ];\n    var converted = anim8.convert( e, value, desiredUnit, relativeTo );\n    \n    if ( converted !== false )\n    {\n      return converted;\n    }\n    \n    // TODO show convert this to desiredUnit, however defaultValue may be non-scalar.\n    return anim8.attribute( attr ).defaultValue;    \n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.style( e, css );\n      \n      for (var attr in anim.animating) \n      {\n        if ( anim.animating[ attr ] === false && attr in regex ) \n        {\n          var parsed = regex[ attr ].exec( style );\n          \n          if ( parsed ) \n          {\n            if ( attr in d4 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr ),\n                angle: parse( e, parsed[4], anim, attr )\n              };\n            }\n            else if ( attr in d3 )\n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr )\n              };\n            }\n            else if ( attr in d2 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' )\n              };\n            }\n            else \n            {\n              anim.frame[attr] = parse( e, parsed[1], anim, attr, 'width' );\n            }\n            \n            anim.animating[attr] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    {  \n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n      var transforms = [];\n      \n      for (var attr in regex) \n      {\n        if (attr in anim.frame) \n        { \n          var value = anim.frame[ attr ];\n          var unit = anim.units[ attr ];\n          \n          if (attr in d4) \n          {\n            transforms.push( attr + '(' + value.x + ',' + value.y + ',' + value.z + ',' + value.angle + unit + ')' );\n          }\n          else if (attr in d3) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ',' + value.z + unit + ')' );\n          }\n          else if (attr in d2) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ')' );\n          }\n          else\n          {\n            transforms.push( attr + '(' + value + unit + ')' );\n          }\n        }\n      }\n\t\t\t\n      if (transforms.length) \n      {\n        anim.styles[css] = transforms.join(' ');\n      }\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.property.opacity = (function() \n{\n  var css = anim8.prefix(['WebkitOpacity', 'MozOpacity', 'KhtmlOpacity', 'opacity']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating.opacity === false) \n      {\n        var style = anim8.style( e, css );\n        var opacity = parseFloat( style );\n        \n        if ( !isNaN(opacity) ) \n        {\n          anim.frame.opacity = opacity\n          anim.animating.opacity = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[ css ] = anim8.clamp( anim.frame.opacity, 0, 1 );\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n  };\n  \n})();\n\nanim8.property.filter = (function() \n{\n  var css = anim8.prefix(['WebkitFilter', 'MozFilter', 'OFilter', 'msFilter', 'filter']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n\tvar methods = \n  {\n\t\tgrayscale: \t'grayscale',\n\t\tsepia: \t\t\t'sepia',\n\t\tsaturate: \t'saturate',\n\t\thueRotate: \t'hue-rotate',\n\t\tinvert: \t\t'invert',\n\t\tbrightness: 'brightness',\n\t\tcontrast: \t'contrast',\n    blur:       'blur'\n\t};\n\t\n\tvar patterns = {};\n\t\n\tfor (var attr in methods) \n  {\n\t\tpatterns[attr] = new RegExp( methods[attr] + '\\(([^\\)]+)\\)', 'i');\n\t}\n  \n\treturn {\n    \n\t\tget: function(e, anim) \n    {\n\t\t\tvar style = anim8.style( e, css );\n      \n\t\t\tfor (var attr in patterns) \n      {\n\t\t\t\tif ( anim.animating[attr] === false ) \n        {\n\t\t\t\t\tvar parsed = patterns[attr].exec( style );\n          \n\t\t\t\t\tif (parsed !== false) \n          {\n            var converted = anim8.convert( e, parsed[1], anim.units[ attr ] );\n            \n            if ( converted !== false )\n            {\n              anim.frame[ attr ] = converted;\n              anim.animating[ attr ] = true;\n            }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\t\tset: function(e, anim) \n    {\n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n\t\t\tvar filters = [];\n      \n\t\t\tfor (var attr in methods) \n      {\n\t\t\t\tif ( attr in anim.frame ) \n        {\n          filters.push( methods[attr] + '(' + anim.value( attr ) + ')' );\n\t\t\t\t}\n\t\t\t}\n      \n\t\t\tif (filters.length) \n      {\n\t\t\t\tanim.styles[ css ] = filters.join(' ');\n\t\t\t}\n\t\t},\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n\t};\n\t\n})();\n\nanim8.property.center = \n{\n  get: function(e, anim)\n  {\n    var cx = (e.offsetLeft + e.offsetWidth * 0.5) + 'px';\n    var cy = (e.offsetTop + e.offsetHeight * 0.5) + 'px';\n    \n    if ( anim.animating.center === false )\n    {\n      var desiredUnit = anim.units.center;\n      var ccx = anim8.convert( e, cx, desiredUnit, 'parentWidth' );\n      var ccy = anim8.convert( e, cy, desiredUnit, 'parentHeight' );\n    \n      if ( ccx !== false && ccy !== false )\n      {\n        anim.frame.center = {\n          x: ccx,\n          y: ccy\n        };\n        anim.animating.center = true;\n      }\n    }\n    if ( anim.animating.centerX === false )\n    {\n      var desiredUnit = anim.units.centerX;\n      var ccx = anim8.convert( e, cx, desiredUnit, 'parentWidth' );\n      \n      if ( ccx !== false )\n      {\n        anim.frame.centerX = ccx;\n        anim.animating.centerX = true;\n      }\n    }\n    if ( anim.animating.centerY === false )\n    {\n      var desiredUnit = anim.units.centerY;\n      var ccy = anim8.convert( e, cy, desiredUnit, 'parentHeight' );\n      \n      if ( ccy !== false )\n      {\n        anim.frame.centerY = ccy;\n        anim.animating.centerY = true;\n      }\n    }\n  },\n  preset: function(e, anim)\n  {\n    anim.cached.width  = anim8.convert( e, e.offsetWidth + 'px', anim.units.centerX || anim.units.center, 'parentWidth' );\n    anim.cached.height = anim8.convert( e, e.offsetHeight + 'px', anim.units.centerY || anim.units.center, 'parentHeight' );\n  },\n  set: function(e, anim)\n  {\n    var rw = anim.cached.width * 0.5;\n    var rh = anim.cached.height * 0.5;\n        \n    if ( anim.updated.center )\n    {\n      anim.styles.left = (anim.frame.center.x - rw) + anim.units.center;\n      anim.styles.top = (anim.frame.center.y - rh) + anim.units.center;\n    }\n    if ( anim.updated.centerX )\n    {\n      anim.styles.left = (anim.frame.centerX - rw) + anim.units.centerX;\n    }\n    if ( anim.updated.centerY )\n    {\n      anim.styles.top = (anim.frame.centerY - rh) + anim.units.centerY;\n    }\n  }\n};\n\nanim8.property.orbit = \n{\n  DEGREE_TO_RADIAN: Math.PI / 180.0,\n  \n  RADIAN_TO_DEGREE: 180.0 / Math.PI,\n  \n  get: function(e, anim)\n  {\n    var ox = (e.parentNode.scrollWidth * 0.5);\n    var oy = (e.parentNode.scrollHeight * 0.5); \n    var cx = (e.offsetLeft + e.offsetWidth * 0.5);\n    var cy = (e.offsetTop + e.offsetHeight * 0.5);\n    var dx = cx - ox;\n    var dy = cy - oy;\n  \n    if ( anim.animating.orbitOffset === false )\n    {\n      var cunit = anim.units.orbitOffset;\n      var cox = anim8.convert( e, ox + 'px', cunit, 'parentWidth' );\n      var coy = anim8.convert( e, oy + 'px', cunit, 'parentHeight' );\n      \n      if ( cox !== false && coy !== false )\n      {\n        anim.frame.orbitOffset = {\n          x: cox,\n          y: coy\n        };\n        anim.animating.orbitOffset = false;\n      }\n    }\n    \n    if ( anim.animating.distance === false )\n    {\n      anim.frame.distance = Math.sqrt( dx * dx + dy * dy );\n      anim.animating.distance = true;\n    }\n    \n    if ( anim.animating.angle === false )\n    {\n      anim.frame.angle = Math.atan2( dy, dx ) * this.RADIAN_TO_DEGREE;\n      anim.animating.angle = true;\n    }\n  },\n  \n  preset: function(e, anim)\n  {  \n    anim.cached.parentWidth = e.parentNode.scrollWidth;\n    anim.cached.parentHeight = e.parentNode.scrollHeight;\n    anim.cached.width = e.offsetWidth;\n    anim.cached.height = e.offsetHeight;\n  },\n  \n  set: function(e, anim)\n  {\n    // TODO calculator this correctly\n    var cunit = anim.units.orbitOffset || '%';\n    var orbitX = anim.frame.orbitOffset ? anim.frame.orbitOffset.x : 50;\n    var orbitY = anim.frame.orbitOffset ? anim.frame.orbitOffset.y : 50;\n    \n    var originUnit = anim.units.origin || '%';\n    var originX = anim.frame.origin ? anim.frame.origin.x : 50;\n    var originY = anim.frame.origin ? anim.frame.origin.y : 50;\n    \n    var cox = anim8.convert( e, orbitX + cunit, 'px', anim.cached.parentWidth / 100.0 );\n    var coy = anim8.convert( e, orbitY + cunit, 'px', anim.cached.parentHeight / 100.0 );\n    \n    var ox = anim8.convert( e, originX + originUnit, 'px', anim.cached.width / 100.0 );\n    var oy = anim8.convert( e, originY + originUnit, 'px', anim.cached.height / 100.0 );\n    \n    var angle = (anim.frame.angle || 0.0) * this.DEGREE_TO_RADIAN;\n    var distance = anim.frame.distance || 0.0;\n        \n    var cos = Math.cos( angle ) * distance;\n    var sin = Math.sin( angle ) * distance;\n    \n    anim.styles.left = (cox + cos - ox) + 'px';\n    anim.styles.top = (coy + sin - oy) + 'px';\n  }\n};","\n/**\n * All animatable attributes for DomAnimators & HTMLElements.\n */\n\nanim8.attribute.padding                 = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.paddingTop              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.paddingRight            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.paddingBottom           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.paddingLeft             = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.margin                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.marginTop               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.marginRight             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.marginBottom            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.marginLeft              = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.borderRadius            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderTopLeftRadius     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderTopRightRadius    = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderBottomLeftRadius  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderBottomRightRadius = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.borderWidth             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderTopWidth          = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderRightWidth        = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderBottomWidth       = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderLeftWidth         = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.outlineWidth\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.outlineOffset\t\t\t\t\t\t= {defaultValue: 0};\nanim8.attribute.textIndent\t\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.borderSpacing\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.fontSize\t\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\nanim8.attribute.lineHeight\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\n\nanim8.attribute.origin                  = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'transformOrigin', calculator: '2d'};\nanim8.attribute.originX                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\nanim8.attribute.originY                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\n\nanim8.attribute.opacity                 = {defaultValue: 1};\nanim8.attribute.zIndex                  = {defaultValue: 1};\n\nanim8.attribute.width                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.minWidth                = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.maxWidth                = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.height                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.minHeight               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.maxHeight               = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.angle                   = {defaultValue: 0, property: 'orbit'};\nanim8.attribute.distance                = {defaultValue: 0, property: 'orbit'};\nanim8.attribute.orbitOffset             = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'orbitOffset', calculator: '2d'};\n\nanim8.attribute.top                     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.right                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.bottom                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.attribute.left                    = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.attribute.center                  = {defaultValue: {x:0, y:0}, defaultUnit: 'px', property: 'center', calculator: '2d'};\nanim8.attribute.centerX                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\nanim8.attribute.centerY                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\n\nanim8.attribute.blur                    = {defaultValue: 0, property: 'filter', defaultUnit: 'px'};\nanim8.attribute.sepia                   = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.brightness              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.grayscale               = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.contrast                = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.invert                  = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.saturation              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.attribute.hueRotate               = {defaultValue: 0, property: 'filter', defaultUnit: 'deg'};\n\nanim8.attribute.rotate                  = {defaultValue: 0, property: 'transform', defaultUnit: 'deg'};\nanim8.attribute.rotate3d                = {defaultValue: {x:0, y:0, z:1, angle:0}, property: 'transform', calculator: 'quaternion', defaultUnit: 'deg'};\n\nanim8.attribute.translate               = {defaultValue: {x:0, y:0}, property: 'transform', calculator: '2d', defaultUnit: 'px'};\nanim8.attribute.translateX              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.attribute.translateY              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.attribute.translateZ              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.attribute.translate3d             = {defaultValue: {x:0, y:0, z:0}, property: 'transform', calculator: '3d', defaultUnit: 'px'};\n\nanim8.attribute.scale                   = {defaultValue: {x:1, y:1}, property: 'transform', calculator: '2d'};\nanim8.attribute.scaleX\t                = {defaultValue: 1, property: 'transform'};\nanim8.attribute.scaleY  \t              = {defaultValue: 1, property: 'transform'};\nanim8.attribute.scaleZ  \t              = {defaultValue: 1, property: 'transform'};\nanim8.attribute.scale3d                 = {defaultValue: {x:1, y:1, z:1}, property: 'transform', calculator: '3d'};\n\nanim8.attribute.skew                    = {defaultValue: {x:0, y:0}, defaultUnit: 'deg', property: 'transform', calculator: '2d'};\nanim8.attribute.skewX                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\nanim8.attribute.skewY                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\n\nanim8.attribute.backface                = {defaultValue: 0};\nanim8.attribute.visibility              = {defaultValue: 1};\n\nanim8.attribute.backgroundColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.color                   = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.borderTopColor          = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.borderRightColor        = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.borderBottomColor       = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.borderLeftColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.attribute.outlineColor            = {defaultValue: anim8.color(), calculator: 'rgba'};","\n/**\n * Instantiates a new DomAnimator given a subject.\n * \n * @param {HTMLElement} e\n */\nanim8.DomAnimator = function(e)\n{\n\tthis.reset( e );\n  this.properties = {};\n  this.trues = {};\n  this.truesUpdated = false;\n  this.attributeToProperty = {};\n  this.animating = {};\n  this.units = {};\n  this.cached = {};\n  this.styles = {};\n  this.styled = false;\n  this.stylesUpdated = false;\n  this.animation = null;\n};\n\n/**\n * Extends anim8.Animator\n */\nanim8.DomAnimator.prototype = new anim8.Animator();\n\n/**\n * A method thats invoked along with all other animators before updates are called.\n * This is used to make any necessary preparations before the animator is updated.\n *\n * If any events that were recently added have true values this is where we replace\n * this true values with the values currently on the subject.\n */\nanim8.DomAnimator.prototype.preupdate = function()\n{\n  if ( this.truesUpdated )\n  {    \n    var properties = {};\n  \n    for (var attr in this.trues)\n    {\n      properties[ this.attributeToProperty[attr] ] = true;\n      \n      this.animating[ attr ] = false;\n    }\n  \n    for (var prop in properties)\n    {\n      this.properties[ prop ].get( this.subject, this );\n    }\n    \n    for (var attr in this.trues)\n    {\n      if ( this.animating[attr] === true )\n      {\n        var calculator = anim8.calculator( this.attributes[ attr ].calculator );\n\n        var e = this.trues[ attr ];\n        var p = e.path.copy();\n        var ps = p.points;\n        \n        for (var i = 0; i < ps.length; i++)\n        {\n          if ( ps[i] === true )\n          {\n            ps[i] = calculator.clone( this.frame[ attr ] );\n          }\n        }\n\n        e.path = p;\n      }\n    \n      delete this.trues[ attr ];\n    }\n    \n    this.truesUpdated = false;\n  }\n  \n  for (var prop in this.properties)\n  {\n    var property = this.properties[ prop ];\n    \n    if ( anim8.isFunction( property.preset ) )\n    {\n      property.preset( this.subject, this );\n    }\n  }\n  \n  this.trigger('preupdate');\n};\n  \n/**\n * Updates the animator with the current time. All events and springs in this\n * animator are updated.\n *\n * @param {number} now\n */\nanim8.DomAnimator.prototype.update = function(now)\n{\n  anim8.Animator.prototype.update.apply( this, arguments );\n    \n  this.getStyles();\n  this.stylesUpdated = true;\n};\n\n/**\n * A method invoked when an animation is about to be played in the Animator.\n * \n * @param {anim8.Animation} animation\n * @param {object} options\n * @param {array:anim8.EventInstance} events\n */\nanim8.DomAnimator.prototype.onAnimation = function(animation, options, events)\n{  \n  if ( animation.input.units )\n  {\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n    \n      if ( attr in animation.input.units )\n      {\n        e.unit = animation.input.units[ attr ];\n      }\n    }  \n  }\n};\n\n/**\n * Builds the styles map in preparation to be applied.\n */\nanim8.DomAnimator.prototype.getStyles = function()\n{\n  this.styles = {};\n  \n  var applyProperties = {};\n  \n  for (var attr in this.frame)\n  {\n    if ( this.updated[ attr ] )\n    {\n      var prop = this.attributeToProperty[ attr ];\n      \n      if ( prop in this.properties )\n      {\n        applyProperties[ prop ] = true; \n      }\n    }\n  }\n  \n  for (var prop in applyProperties)\n  {\n    this.properties[ prop ].set( this.subject, this );  \n    \n    this.styled = true;\n  }\n};\n\n/**\n * Applies all updated attributes to the subject. This method is invoked with all of the other\n * animators at the end of the animation cycle.\n */\nanim8.DomAnimator.prototype.apply = function()\n{\n  if ( !this.styled && !this.stylesUpdated )\n  {\n    this.getStyles();\n  }\n  \n  if ( this.styled )\n  {    \n    for (var prop in this.styles)\n    {\n       this.subject.style[ prop ] = this.styles[ prop ];\n    }\n    \n    for (var attr in this.frame)\n    {\n      this.updated[ attr ] = false;\n    }\n  \n    this.styled = false;\n  }\n  \n  this.stylesUpdated = false;\n  \n  this.trigger('apply');\n  \n  this.trimEvents();\n\n  return this;\n};\n  \n/**\n * Places the event in this animator replacing any event that exists for the same\n * attribute. The next time the animator is updated the event will be started.\n *\n * @param {anim8.EventInstance} e\n */\nanim8.DomAnimator.prototype.placeEvent = function( e )\n{\n  anim8.Animator.prototype.placeEvent.apply( this, arguments );\n  \n  var attr = e.attribute;\n  var attribute = anim8.attribute( attr );\n  var prop = anim8.coalesce( attribute.property, attr );\n  var property = anim8.property( prop );\n  \n  if ( e.hasTrue() )\n  {    \n    this.trues[ attr ] = e;\n    this.truesUpdated = true;\n  }\n  \n  this.attributes[ attr ] = attribute;\n  this.properties[ prop ] = property;\n  this.attributeToProperty[ attr ] = prop;\n  this.units[ attr ] = e.unit || attribute.defaultUnit || '';\n\n  return this;\n};\n  \n/**\n * Places the spring in this animator replacing any spring that exists for the same\n * attribute. The next time the animator is updated the spring will be started.\n *\n * @param {anim8.Spring} s\n */\nanim8.DomAnimator.prototype.placeSpring = function( s )\n{\n  anim8.Animator.prototype.placeSpring.apply( this, arguments );\n  \n  var attr = s.attribute;\n  var attribute = anim8.attribute( attr );\n  var prop = anim8.coalesce( attribute.property, attr );\n  var property = anim8.property( prop );\n  \n  this.attributes[ attr ] = attribute;\n  this.properties[ prop ] = property;\n  this.attributeToProperty[ attr ] = prop;\n  this.units[ attr ] = attribute.defaultUnit || '';\n\n  return this;\n};\n  \n/**\n * Restores any temporary state that may exist on this Animator that\n * is a result from animations.\n */\nanim8.DomAnimator.prototype.restore = function()\n{\n  for (var prop in this.properties)\n  {\n    this.properties[ prop ].unset( this.subject, this );\n  }\n\t\n\tthis.frame = {};\n\n  return this;\n};\n\n/**\n * Sets the given attributes to this Animator immediately.\n *\n * @param {object} attributes\n */\nanim8.DomAnimator.prototype.set = function(attributes)\n{\n  var props = {};\n  var updated = {};\n  var units = {};\n  var styles = {};\n  \n  for (var attr in attributes)\n  {\n    var attribute = anim8.attribute( attr );\n    var prop      = anim8.coalesce( attribute.property, attr );\n    var property  = anim8.property( prop );\n    var calc      = anim8.calculator( attribute.calculator );\n    var value     = attributes[ attr ];\n    \n    units[ attr ] = attribute.defaultUnit || '';\n    \n    if ( anim8.isString( value ) )\n    {\n      var parsed = anim8.parseValue( value, attribute.defaultUnit );\n      \n      if ( parsed !== false )\n      {\n        units[ attr ] = parsed.unit || attribute.defaultUnit || '';\n        value = parsed.value;\n      }  \n    }\n    \n    var parsed = calc.parse( value, attribute.defaultValue );\n    \n    if ( parsed !== false )\n    {\n      props[ prop ] = property;\n      attributes[ attr ] = parsed;\n      updated[ attr ] = true;\n    }\n  }\n    \n  var flash = \n  {\n    units: units,\n     \n    frame: attributes,\n    \n    updated: updated,\n    \n    styles: styles,\n    \n    cached: {},\n    \n    value: function(attr)\n    {\n      return attributes[ attr ] + units[ attr ];\n    },\n    \n    valueOr: function(attr, other, subproperty)\n    {\n      var value = attributes[ attr ];\n      \n      if ( !anim8.isDefined( value ) )\n      {\n        value = attributes[ attr = other ];\n      \n        if ( anim8.isDefined( subproperty ) )\n        {\n          value = value[ subproperty ];\n        }\n      }\n  \n      return value + units[ attr ];\n    }\n  };\n  \n  for (var prop in props)\n  {\n    var property = props[ prop ];\n    \n    if ( anim8.isFunction( property.preset ) )\n    {\n      props[ prop ].preset( this.subject, flash );\n    }\n  }\n  \n  for (var prop in props)\n  {\n    props[ prop ].set( this.subject, flash );\n  }\n  \n  for (var prop in styles)\n  {\n    this.subject.style[ prop ] = styles[ prop ];\n  }\n\n  return this;\n};\n\n/**\n * Gets the current attribute values for all attributes specified. The argument must be an object\n * where the key is the name of an attribute and the value is the desired unit.\n *\n * @param {object} attributes\n */\nanim8.DomAnimator.prototype.get = function(attributes)\n{\n  var props = {};\n  var animating = {};\n  var units = {};\n  var out = {};\n  \n  for (var attr in attributes)\n  {    \n    var attribute = anim8.attribute( attr );\n    var prop      = anim8.coalesce( attribute.property, attr );\n    var property  = anim8.property( prop );\n    var calc      = anim8.calculator( attribute.calculator );\n    \n    animating[ attr ] = false;    \n    units[ attr ] = attributes[ attr ] || attribute.defaultUnit || '';\n    props[ prop ] = property;\n    out[ attr ] = calc.clone( attribute.defaultValue );\n  }\n  \n  var flash = \n  {    \n    units: units,\n    \n    frame: out,\n    \n    animating: animating,\n    \n    unit: function(attr)\n    {\n      return units[ attr ];\n    }\n  };\n  \n  for (var prop in props)\n  {\n    props[ prop ].get( this.subject, flash );\n  }\n  \n  return out;\n};\n\n/**\n * Returns a function that returns the current value for the given attribute when invoked.\n * \n * @param {string} attribute\n */\nanim8.DomAnimator.prototype.ref = function(attribute, desiredUnit, relativeTo)\n{\n  var animator = this;\n  var request = {};\n  \n  return function()\n  {\n    if ( attribute in animator.frame && anim8.isNumber( animator.frame[ attribute ] ) )\n    {\n      return anim8.convert( animator.e, animator.value( attribute ), desiredUnit, relativeTo );\n    }\n    \n    request[ attribute ] = desiredUnit;\n    \n    var current = animator.get( request );\n    \n    if ( anim8.isDefined( current[ attribute ] ) )\n    {\n      return current[ attribute ];\n    }\n    \n    return anim8.attribute( attribute ).defaultValue;\n  };\n},\n\n/**\n * Returns the value for the given attribute as a string with the current units.\n *\n * @param {string} attr\n */\nanim8.DomAnimator.prototype.value = function(attr)\n{\n  return this.frame[ attr ] + this.units[ attr ];\n};\n\n/**\n * Returns the value for the given attribute as a string with the current units.\n * if the attribute doesn't exist a secondary one is looked up. If that value\n * is an object and contains the given subproperty the value is resolved once again.\n *\n * @param {string} attr\n * @param {string} other\n * @param [string] subproperty\n */\nanim8.DomAnimator.prototype.valueOr = function(attr, other, subproperty)\n{\n  var value = this.frame[ attr ];\n    \n  if ( !anim8.isDefined( value ) )\n  {\n    value = this.frame[ attr = other ];\n    \n    if ( anim8.isDefined( subproperty ) )\n    {\n      value = value[ subproperty ];\n    }\n  }\n  \n  return value + this.units[ attr ];\n};\n"],"sourceRoot":"/source/"}