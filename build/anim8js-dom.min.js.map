{"version":3,"sources":["anim8js-core.js","anim8js-fast-map.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-point.js","anim8js-attrimator.js","anim8js-attrimator-map.js","anim8js-event.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-animation.js","anim8js-transition.js","anim8js-options.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tweenTo.js","anim8js-parser-tweenFrom.js","anim8js-parser-move.js","anim8js-factory.js","anim8js-object.js","anim8js-dom-core.js","anim8js-dom-property.js","anim8js-dom-attribute.js","anim8js-dom-animator.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","defaults","duration","easing","teasing","delay","sleep","repeat","scale","transitionTime","transitionOutroDelta","transitionIntroDelta","transitionEasing","transitionGranularity","cache","cacheOptions","cacheTransitions","noOptions","noTransition","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","log","size","prop","isEmpty","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","constant","variable","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","FastMap","reset","prototype","values","keys","indices","put","key","value","putMap","map","get","remove","removeAt","index","lastValue","pop","lastKey","indexOf","has","hasOverlap","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","pair","e","t","easingType","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","yoyo","mirror","reverse","flip","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attrimator","attr","attribute","getAttribute","frame","calculator","clone","cloneDefault","relative","relativeAmount","mask","isComputed","relativeFunction","calc","mul","add","Calculator","create","adds","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","isValid","isZero","isEqual","isRelative","getRelativeAmount","z","NumberCalculator","createConstants","defaultValue","amountScale","ab","epsilon","Point2dCalculator","y","cx","cy","rx","ry","ix","iy","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Point3dCalculator","cz","rz","iz","dz","QuaternionCalculator","angle","ra","ia","da","RGBCalculator","rr","rg","rb","ir","ig","ib","dr","dg","db","RGBACalculator","path","Path","spring","type","name","points","hasComputed","compute","ps","reference","trues","last","first","point","replaceComputed","resolvePoint","isLinear","granularity","prev","temp","Tween","CubicPath","p0","p1","p2","p3","d1","d2","d3","i1","i3","QuadraticPath","DeltaPath","deltas","ds","d0","pd","JumpPath","CompiledPath","pointCount","KeyframePath","easings","ea","defaultEasing","PointPath","Attrimator","parser","startTime","pauseTime","paused","cycle","setTime","valueAt","updated","getElapsed","totalTime","timeRemaining","isInfinite","pause","resume","isPaused","finish","isFinished","getParser","queue","AttrimatorMap","queueMap","onNewAttribute","maxRemaining","attrimators","existing","unqueueAt","remaining","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","scaleBase","hasInitialState","elapsed","state","oldState","newState","iteration","applyValue","computeValue","baseValue","Spring","set","rest","position","velocity","gravity","finishOnRest","finished","parseValue","dt","MAX_DT","starting","updateVelocity","EPSILON","resolveRest","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","animation","options","Animation","animationStrings","anim","parsedAnimation","parsedOptions","attrimatorMap","parserName","save","isSaved","newAttrimators","merge","force","transition","originalInput","transitionArray","part","charAt","introDelta","substring","outroDelta","fn","attrimatorsAdded","active","cycleCurrent","cycleNext","newCycle","applyCurrentCycle","restore","preupdate","aa","setDefault","update","wasFinished","placeAttrimator","trimAttrimators","activate","deactivate","destroy","createAttrimators","onAnimation","queueAttrimators","play","all","playAttrimators","transitionAttrimators","a1","a2","getFuture","getPoint","transitionPath","transitionEvent","newInstance","tweenTo","target","tweenManyTo","targets","tween","starts","ends","tweenMany","ref","request","follow","attrimatorsFor","attributes","resulting","stop","unset","hasAttrimators","getSubject","wrapper","invoke","func","DeferAnimator","fill","each","iterator","filter","filterer","alive","getSubjects","mid","e0","e1","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","Parser","newOptions","oldOptions","durations","delays","sleeps","repeats","scales","scaleBases","ParserDeltas","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","keyframe","sort","from","half","to","times","maxTime","order","pathEasings","ParserTweenTo","ParserTweenFrom","tweenFrom","ParserMove","move","highestPriorityFactory","factoryName","is","priority","Factory","ObjectFactory","$animator","calculatorName","dom","DomFactory","cached","ids","elementAttribute","animatorId","DomAnimator","setAttribute","propertyName","defaultUnit","style","hyphenated","hyphenize","str","replace","currentStyle","document","defaultView","getComputedStyle","getPropertyValue","prefix","createElement","prefixes","convert","toPixels","baseUnit","defaultRate","body","div","appendChild","width","pixels","offsetWidth","removeChild","getFontSize","notUnit","fontSize","getConverterScale","px","relativeTo","variables","parentWidth","parentNode","scrollWidth","parentHeight","scrollHeight","height","offsetHeight","parentFontSize","htmlFontSize","htmlElement","getElementsByTagName","pt","cm","mm","vw","deg","rad","PI","em","rem","given","converter","toUnit","fromUnit","converter1","converter2","nm","converted","units","styles","factoryDerivable","deriver","factoryColor","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","outlineWidth","textIndent","borderSpacing","lineHeight","zIndex","backgroundColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor","minWidth","maxWidth","minHeight","maxHeight","offsetTop","offsetLeft","visibility","backface","css","transformOrigin","keywords","setOriginAttribute","setOrigin","origin","originZ","valueOr","transform","translate","translate3d","scale3d","d4","rotate3d","translateX","translateY","translateZ","scaleX","scaleY","scaleZ","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY","desiredUnit","transforms","join","opacity","grayscale","sepia","saturate","hueRotate","invert","brightness","contrast","blur","patterns","RegExp","filters","ccx","ccy","centerX","centerY","preset","rw","rh","orbit","DEGREE_TO_RADIAN","RADIAN_TO_DEGREE","ox","oy","orbitOffset","cunit","cox","coy","atan2","orbitX","orbitY","originUnit","originX","originY","outlineOffset","saturation","properties","propertiesPreset","attributeToProperty","styled","stylesUpdated","presets","getStyles","applyProperties","props","flash","other","subproperty"],"mappings":"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","file":"anim8js-dom.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {array} subject\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   * \n   * @type {number}\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @type {string|function}\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @type {string|function}\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @type {number}\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @type {number}\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @type {number}\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @type {number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @type {number}\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition delta.\n   * \n   * @type {number}\n   */\n  transitionOutroDelta: 0.1,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {number}\n   */\n  transitionIntroDelta: 0.1,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {string|function}\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * The default transition granularity. This is used for smooth transitions to\n   * provide a smooth transition from the outro velocity to the intro velocity,\n   * the cubic or quadratic path between the two is a curve with unknown length\n   * so the length needs to be calculated using a maximum number of points to\n   * calculate along the path - summing the distances between the consecutive points.\n   * \n   * @type {Number}\n   */\n  transitionGranularity: 0,\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * @type {boolean}\n   * @see  anim8.animation\n   */\n  cache: false,\n\n  /**\n   * Whether parsed options are cached whenever possible. Options that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see  anim8.options\n   */\n  cacheOptions: false,\n\n  /**\n   * Whether parsed transitions are cached whenever possible. Transitions that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see  anim8.transition\n   */\n  cacheTransitions: false,\n\n  /**\n   * The value to return when options could not be parsed from input.\n   * \n   * @type {Object}\n   */\n  noOptions: {},\n\n  /**\n   * The value to return when a transition could not be parsed from input.\n   * @type {Object}\n   */\n  noTransition: {}\n\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * If the user is interested in seeing warnings they can override this by specifying\n * a function which accepts a text argument providing a generc message, a second argument\n * which has the input that caused the warning, and a third agument with the object\n * throwing the warning. Most warnings that are thrown occur when an animation is\n * trying to be parsed an the user provided an invalid animation, time, easing, etc.\n *\n * @param {string} message\n * @param {any} source\n */\nanim8.log = false;\n\n/**\n * Returns the size of the variable. The size of a variable is dependent on the variable\n * type. For arrays and strings their length is returned. If it's an object the number of\n * enumerable properties is returned. If it's a number, the number is returned. Otherwise\n * zero is returned.\n *\n * @param {any} x\n */\n anim8.size = function(x)\n {\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length;\n  }\n  else if ( x === null )\n  {\n    return 0;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var size = 0;\n\n    for (var prop in x)\n    {\n      size++;\n    }\n\n    return size;\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n};\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding overriding any existing properties.\n * \n * @param  {object} out\n * @return {object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding existing properties where necessary.\n * \n * @param  {object}\n * @return {object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses scale from a string or number.\n * \n * @param  {string|number}\n * @return {number}\n */\nanim8.scale = function(scale, returnOnInvalid)\n{\n  if ( anim8.isNumber( scale ) )\n  {\n    return scale;\n  }\n\n  return anim8.coalesce( returnOnInvalid, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n * \n * @param  {number} v\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n      \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t        eventListeners.length = 0;\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an array.\n * This is especially beneficial when most of the time the contents of the structure need to be iterated and order\n * doesn't matter (since removal performs a swap which breaks insertion order).\n */\nanim8.FastMap = function()\n{\n  this.reset();\n};\n\nanim8.FastMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {this}\n   */\n  reset: function()\n  {\n    this.values = [];\n    this.keys = [];\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   * \n   * @param  {string} key\n   * @param  {any} value\n   * @return {this}\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   * \n   * @param  {anim8.FastMap}\n   * @return {this}\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   * \n   * @param  {string} key\n   * @return {any}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   * \n   * @param  {string} key\n   * @return {this}\n   */\n  remove: function(key)\n  {\n    if ( key in this.indices )\n    {\n      this.removeAt( this.indices[ key ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   * \n   * @param  {Number}\n   * @return {this}\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   * \n   * @param  {string} key\n   * @return {number}\n   */\n  indexOf: function(key)\n  {\n    return this.indices[ key ];\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   * \n   * @param  {string}\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns whether the given input has overlap with keys in this map.\n   * \n   * @param  {anim8.FastMap|object}\n   * @return {Boolean}\n   */\n  hasOverlap: function(map)\n  {\n    if ( map instanceof anim8.FastMap )\n    {\n      var keys = this.keys;\n      var indices = map.indices;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        if ( keys[i] in indices )\n        {\n          return true;\n        }\n      }\n    }\n    else if ( anim8.isObject( map ) )\n    {\n      var indices = this.indices;\n\n      for (var prop in map)\n      {\n        if ( prop in indices )\n        {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   * \n   * @return {number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Clears all keys & values from the map.\n   * \n   * @return {this}\n   */\n  clear: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  }\n\n};","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n    \n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * [bezier description]\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\n/**\n * [default description]\n * @type {[type]}\n */\nanim8.easing.default      = anim8.easing.ease;\n","\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\n/**\n * Plays the animation forward normally.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn easing( x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum halfway.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } \n\t  else \n\t  {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\n/**\n * Plays the aninmation forwards with the given easing, and backwards with the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.yoyo = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x );\n\t  } \n\t  else \n\t  {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n/**\n * Plays the animation forwards with the given easing, and backwards reflecting the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.mirror = function(easing)\n{\n\treturn function(x)\n\t{\n\t\tif ( x < 0.5 )\n\t\t{\n\t\t\treturn easing( 2.0 * x );\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1.0 - easing( 2.0 - 2.0 * x );\n\t\t}\n\t};\n};\n\n/**\n * Plays the animation backwards with using the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.reverse = function(easing)\n{\n\treturn easing( 1.0 - x );\n};\n\n/**\n * Plays the animation backwards by flipping the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.flip = function(easing)\n{\n\treturn 1.0 - easing( x );\n};\n","\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * [computed description]\n * @type {Object}\n */\nanim8.computed = {};\n\n/**\n * Calculates the current value for an animator.\n * \n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.current = function(attrimator, animator)\n{\n  var attr = attrimator.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currenrtly in the animator.\n * \n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.relative = function(relativeAmount, mask)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( anim8.isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(attrimator, animator)\n  { \n    var attr = attrimator.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = attribute.cloneDefault();\n    }\n\n    if ( mask )\n    {\n      current = calc.mul( current, mask );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  relativeFunction.relativeAmount = relativeAmount;\n  relativeFunction.mask = mask;\n\n  return relativeFunction;\n};\n\n/**\n * [isComputed description]\n * @param  {[type]}\n * @return {Boolean}\n */\nanim8.isComputed = function(x)\n{\n  return anim8.isFunction( x ) && x.computed;\n};","/**\n * Calculators perform math and basic operations for a specific data structure.\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Instantiates a new Calculator instance.\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * [copy description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * [clone description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clone: function(out) \n  {\n    return this.copy( this.create(), out );\n  },\n\n  /**\n   * [create description]\n   * @return {[type]}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * [scale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * [add description]\n   * @param {[type]}\n   * @param {[type]}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * [adds description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * [sub description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * [mul description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * [interpolate description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * [distance description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * [distanceSq description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * [isValid description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * [isNaN description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * [isZero description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * [isEqual description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * [isRelative description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * [relativeAmount description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n */\nanim8.NumberCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.NumberCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  }\n});\n\n/**\n * Register the calculators.\n */\nanim8.calculator['default'] = anim8.calculator['number'] = new anim8.NumberCalculator();\n","\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.Point2dCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Point2dCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n\n        if ( ix || iy )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  }\n});\n\n/**\n * Register all calculators.\n */\nanim8.calculator['2d'] = new anim8.Point2dCalculator();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.Point3dCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Point3dCalculator.prototype = new anim8.Calculator(), \n{\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n\n        if ( ix || iy || iz )\n        { \n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['3d'] = new anim8.Point3dCalculator();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.QuaternionCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.QuaternionCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n        var ia = this.isRelative( ca );\n\n        if ( ix || iy || iz || ia )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0,\n            angle: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx }, { x:0, y:0, z:0, angle:1 } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  }\n});\n\n\n/**\n * Register the calculator.\n */\nanim8.calculator['quaternion'] = new anim8.QuaternionCalculator();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.RGBCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.RGBCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n\n        if ( ir || ig || ib )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n\t\t\n    // Try to parse the color.\n\t\tvar parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgb'] = new anim8.RGBCalculator();\n","\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.RGBACalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.RGBACalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n        var ia = this.isRelative( ca );\n\n        if ( ir || ig || ib || ia )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0,\n            a: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgba'] = new anim8.RGBACalculator();\n","\n/**\n * [path description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n/**\n * [Path description]\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * [reset description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n\t{\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * [reference description]\n   * @return {[type]}\n   */\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n\n  /**\n   * [last description]\n   * @return {[type]}\n   */\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n\n  /**\n   * [first description]\n   * @return {[type]}\n   */\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n\n  /**\n   * [point description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n\n  /**\n   * [replaceComputed description]\n   * @return {[type]}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * [resolvePoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  },\n\n  /**\n   * Returns whether the path is linear. Linear paths go directly from point to\n   * point where curved paths do not. Linear paths can have their length calculated\n   * fairly easily however curves you must compute length with a given granularity.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return true;\n  },\n\n  /**\n   * Computes the length of the Path with a given granularity. Granularity\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  length: function(granularity)\n  {\n    var distance = 0;\n    var calc = this.calculator;\n\n    if ( this.isLinear() )\n    {\n      var prev = this.resolvePoint( 0 );\n\n      for (var i = 1; i < this.points.length; i++)\n      {\n        var next = this.resolvePoint( i );\n\n        distance += calc.distance( prev, next );\n\n        prev = next;\n      }\n    }\n    else\n    {\n      var deltadelta = 1.0 / granularity;\n      var delta = delta;\n      var prev = calc.clone( this.resolvePoint( 0 ) );\n      var temp = calc.create();\n\n      for (var i = 1; i <= granularity; i++)\n      {\n        var next = this.compute( temp, delta );\n\n        distance += calc.distance( prev, next );\n\n        temp = prev;\n        prev = next;\n      }\n    }\n\n    return distance;\n  }\n\n};\n","\n/**\n * [Tween description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n\n});\n\n/**\n * [tween description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['tween'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, calc.zero ),\n    calc.parse( path.end, calc.zero )\n  );\n};\n","\n/**\n * [CubicPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.CubicPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  },\n\n  /**\n   * CubicPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [cubic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['cubic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * [QuadraticPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.QuadraticPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  },\n\n  /**\n   * QuadraticPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [quadratic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['quadratic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * [DeltaPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.DeltaPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n      return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n\n});\n\n/**\n * [delta description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['delta'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * [JumpPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.JumpPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n  }\n\n});\n\n/**\n * [jump description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['jump'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * [CompiledPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.CompiledPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CompiledPath( this.name, this, this.points.length );\n  }\n\n});\n\n/**\n * [compiled description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['compiled'] = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * [KeyframePath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.KeyframePath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n\n});\n\n/**\n * [keyframe description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['keyframe'] = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * [PointPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.override( anim8.PointPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.copy( out, this.resolvePoint( 0 ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n  }\n\n});\n\n/**\n * [point description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['point'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n","\n/**\n * Animates a single attribute over any period of time.\n */\nanim8.Attrimator = function()\n{\n\n};\n\nanim8.Attrimator.prototype =\n{\n\n  /**\n   * Resets this animator for the given attribute created by the given parser.\n   * \n   * @param  {attribute} string\n   * @param  {anim8.Parser} parser\n   */\n  reset: function(attribute, parser, next)\n  {\n    this.attribute = attribute;\n    this.parser = parser;\n    this.next = next;\n\n    this.startTime = 0;\n    this.pauseTime = 0;\n    this.paused = false;\n    this.cycle = 0;\n  },\n\n  /**\n   * Prepares this attribute animator for animation on the given subject animator.\n   * This is called once in anim8.Animator.preupdate before the first time this\n   * animator is updated.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n  },\n\n  /**\n   * Updates this attribute animator given a time to animate to and the frame to\n   * provide with a new value. This method will return true if the attribute\n   * this is animating has been updated and needs to be applied to the subject.\n   * \n   * @param  {Number} now\n   * @param  {Object} frame\n   * @return {Boolean}\n   */\n  setTime: function(now, frame)\n  {\n    if ( this.paused )\n    {\n      return false;\n    }\n\n    var value = this.valueAt( now - this.startTime );\n    var updated = value !== false;\n\n    if ( updated )\n    {\n      frame[ this.attribute ] = value;\n    }\n\n    return updated;\n  },\n\n  /**\n   * Returns the amount of time that has elapsed in milliseconds.\n   * \n   * @return {Number}\n   */\n  getElapsed: function()\n  {\n    return 0;\n  },\n\n  /**\n   * Returns the value at the given time.\n   * \n   * @param  {Number} time\n   * @return {any}\n   */\n  valueAt: function(time)\n  {\n    return false;\n  },\n\n  /**\n   * The total amount of time this animator will take. This may be an infinite number.\n   * \n   * @return {Number}\n   */\n  totalTime: function()\n  {\n    return Number.POSITIVE_INFINITY;\n  },\n\n  /**\n   * The time remaining before this animator and any following will be finished.\n   * \n   * @return {Number}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * Clones this animator.\n   * \n   * @return {anim8.AttributeAnimator}\n   */\n  clone: function()\n  {\n    throw 'AttributeAnimator.clone not implemented';\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return false;\n  },\n\n  /**\n   * Determines whether this animator will run infinitely.\n   * \n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return true;\n  },\n\n  /**\n   * [pause description]\n   * @return {[type]}\n   */\n  pause: function()\n  {\n    if ( !this.paused )\n    {\n      this.pauseTime = anim8.now();\n      this.paused = true;\n    }\n  },\n\n  /**\n   * [resume description]\n   * @return {[type]}\n   */\n  resume: function()\n  {\n    if ( this.paused )\n    {\n      this.startTime += anim8.now() - this.pauseTime;\n      this.paused = false;\n    }\n  },\n\n  /**\n   * [isPaused description]\n   * @return {Boolean}\n   */\n  isPaused: function()\n  {\n    return this.paused;\n  },\n\n  /**\n   * Sets the final state of the animator to the frame if one exists.\n   * \n   * @param  {Object}\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return false;\n  },\n\n  /**\n   * Returns the parser that created this animator (if any).\n   * \n   * @return {anim8.Parser}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * \n   * @param  {Function}\n   * @return {[type]}\n   */\n  queue: function(next)\n  {\n    if ( this.next )\n    {\n      this.next.queue( next );\n    }\n    else\n    {\n      this.next = next;\n    }\n  }\n\n};","\n/**\n * [AttributeMap description]\n */\nanim8.AttrimatorMap = function()\n{\n  this.reset();\n};\n\nanim8.override( anim8.AttrimatorMap.prototype = new anim8.FastMap(),\n{\n\n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n\n    if ( this.has( attr ) )\n    {\n      this.get( attr ).queue( attrimator );\n    }\n    else\n    {\n      this.put( attr, attrimator );\n    }\n  },\n\n  /**\n   * [queueMap description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queueMap: function(map, onNewAttribute, context)\n  {\n    var maxRemaining = this.timeRemaining();\n    var attrimators = map.values;\n    \n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n      var existing = this.get( attr );\n\n      if ( existing && !existing.isInfinite() )\n      {\n        attrimator.delay += (maxRemaining - existing.timeRemaining());\n\n        existing.queue( attrimator );\n      }\n      else\n      {\n        attrimator.delay += maxRemaining;\n        \n        this.put( attr, attrimator );\n\n        if ( anim8.isFunction( onNewAttribute ) )\n        {\n          onNewAttribute.call( context || this, attrimator );\n        }\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * [unqueue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  unqueueAt: function(index)\n  {\n    var current = this.values[ index ];\n\n    if ( current.next )\n    {\n      this.values[ index ] = current.next;\n    }\n    else\n    {\n      this.removeAt( index );\n    }\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    var values = this.values;\n    var keys = this.keys;\n    var clone = new anim8.AttrimatorMap();\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      clone.values[i] = values[i].clone();\n      clone.keys[i] = keys[i];\n      clone.indices[ keys[i] ] = i;\n    }\n\n    return clone;\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function()\n  {\n    var remaining = 0;\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n\n      if ( !attrimator.isInfinite() )\n      {\n        remaining = Math.max( remaining, attrimator.timeRemaining() );\n      }\n    }\n\n    return remaining;\n  }\n\n});","\n/**\n * [EventState description]\n * @type {[type]}\n */\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\n/**\n * [Event description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {Boolean}\n * @param {[type]}\n * @param {Function}\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  this.reset( attribute, parser, next )\n\n  this.path             = path;\n  this.easing           = anim8.easing( easing );\n  this.delay            = anim8.delay( delay );\n  this.duration         = anim8.duration( duration );\n  this.sleep            = anim8.sleep( sleep );\n  this.repeat           = anim8.repeat( repeat );\n  this.scale            = anim8.scale( scale );\n  this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.zero );\n  this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n  this.elapsed          = 0;\n};\n\nanim8.override( anim8.Event.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Prepares this attribute animator for animation on the given subject animator.\n   * This is called once in anim8.Animator.preupdate before the first time this\n   * animator is updated.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n    this.state = this.delay ? anim8.EventState.DELAYED : anim8.EventState.ANIMATING;\n\n    if ( this.hasComputed() )\n    {\n      this.path = this.path.replaceComputed( this, animator );\n    }\n  },\n\n  /**\n   * Updates this attribute animator given a time to animate to and the frame to\n   * provide with a new value. This method will return true if the attribute\n   * this is animating has been updated and needs to be applied to the subject.\n   * \n   * @param  {Number} now\n   * @param  {Object} frame\n   * @return {Boolean}\n   */\n  setTime: function(now, frame)\n  {\n    if ( this.paused )\n    {\n      return false;\n    }\n\n    var updated = false;\n    var elapsed = now - this.startTime;\n    var delay = this.delay;\n    var duration = this.duration;\n    var sleep = this.sleep;\n    var repeat = this.repeat;\n    var oldState = this.state;\n    var newState = this.state;\n    var delta = 0;\n\n    if ( elapsed >= delay )\n    {\n      elapsed -= delay;\n\n      var cycle = duration + sleep;\n      var iteration = Math.floor( ( elapsed + sleep ) / cycle );\n\n      if (iteration >= repeat)\n      {\n        newState = anim8.EventState.FINISHED;\n        delta = 1;\n      }\n      else\n      {\n        elapsed -= iteration * cycle;\n\n        if ( elapsed > duration )\n        {\n          newState = anim8.EventState.SLEEPING;\n          delta = 1;\n        }\n        else\n        {\n          newState = anim8.EventState.ANIMATING;\n          delta = elapsed / duration;\n        }\n      }\n    }\n    else\n    {\n      newState = anim8.EventState.DELAYED;\n    }\n\n    if ( newState === anim8.EventState.ANIMATING || \n       ( newState !== anim8.EventState.ANIMATING && oldState === anim8.EventState.ANIMATING ) ||\n       ( newState === anim8.EventState.DELAYED && this.hasInitialState ) )\n    {\n      this.applyValue( frame, frame[ this.attribute ], delta );\n      updated = true;\n    }\n\n    this.state = newState;\n    this.elapsed = elapsed;\n\n    return updated;\n  },\n\n  /**\n   * [getElapsed description]\n   * @return {[type]}\n   */\n  getElapsed: function()\n  {\n    return this.elapsed;\n  },\n\n  /**\n   * Computes the value at the given time. The only time when a value won't be\n   * returned is if the time is before the delay and the event doesn't have an\n   * initial state.\n   * \n   * @param  {Number} time\n   * @param  {any} out\n   * @return {any}\n   */\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay && !this.hasInitialState )\n    {\n      return false;\n    }\n\n    var delta = 0;\n\n    if ( time >= this.delay )\n    {\n      delta = Math.max( 1.0, ((time - this.delay) % (this.duration + this.sleep)) / this.duration );\n    }\n\n    return this.computeValue( out, delta );\n  },\n\n  /**\n   * [computeValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * [finish description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n  },\n\n  /**\n   * [applyValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[ this.attribute ] = value;\n    }\n  },\n\n  /**\n   * The total amount of time this animator will take. This may be an infinite number.\n   * \n   * @return {Number}\n   */\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n\n  /**\n   * The time remaining before this animator and any following will be finished.\n   * \n   * @return {Number}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n\n  /**\n   * [isInfinite description]\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return (this.state === anim8.EventState.FINISHED);\n  }\n\n});\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.override( anim8.Spring.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  set: function(attribute, calculator, rest, position, velocity, gravity, finishOnRest)\n  { \n    this.reset( attribute, null, null );\n\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = velocity;\n    this.finishOnRest = finishOnRest;\n  },\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n    this.finished = false;\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.zero );\n    this.velocity   = this.parseValue( animator, this.velocity, calc.zero );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity );\n  },\n\n  /**\n   * [parseValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isFunction( parsed ) )\n    {\n      if ( parsed.computed )\n      {\n        parsed = parsed( this, animator );\n      }\n    }\n\n    return parsed;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} now\n   * @param {object} frame\n   */\n  setTime: function(now, frame)\n  {\n    if ( this.paused )\n    {\n      return false;\n    }\n\n    var elapsed = now - this.startTime;\n\n    if ( elapsed < this.delay )\n    {\n      this.elapsed = elapsed;\n\n      return false;\n    }\n\n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.clone( this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    this.elapsed = elapsed;\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    else if ( this.finishOnRest && calc.isZero( this.velocity ) )\n    {\n      this.finished = true;\n    }\n    \n    return updated;\n  },\n\n  /**\n   * [getElapsed description]\n   * @return {[type]}\n   */\n  getElapsed: function()\n  {\n    return this.elapsed;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  },\n\n  /**\n   * Sets the final state of the animator to the frame if one exists.\n   * \n   * @param  {Object}\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return this.finished;\n  }\n\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * [LinearSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.LinearSpring.prototype = new anim8.Spring(), \n{\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.damping ) || \n           anim8.isComputed( this.stiffness );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['linear'] = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * [DistanceSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.DistanceSpring.prototype = new anim8.Spring(), \n{\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['distance'] = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n * @param [boolean] cache\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) )\n\t{\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationStrings = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationStrings.length; k++)\n    {\n      var split = animationStrings[ k ].toLowerCase().split(' ');\n      var parsedAnimation = anim8.animation[ split[ 0 ] ];\n      var parsedOptions = anim8.options( split.slice( 1 ) );\n\n      if ( parsedAnimation )\n      {\n        if ( anim === false )\n        {\n          last = anim = parsedAnimation.extend( parsedOptions, true );\n        }\n        else\n        {\n          last = last.next = parsedAnimation.extend( parsedOptions, true );\n        }\n      }\n      else\n      {\n        throw parsedAnimation + ' is not a valid animation in \"' + animationStrings[ k ] + '\"';\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n    var attrimatorMap = new anim8.AttrimatorMap();\n\t\tvar options = anim8.options( options );\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, attrimatorMap );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (attrimatorMap.size())\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, attrimatorMap );\n\t\t}\n    else\n    {\n      throw 'Failed to create any attrimators in anim8.animation';\n    }\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the attrimators that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate attrimators, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} attrimators\n */\nanim8.Animation = function(name, input, options, attrimators)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.attrimators = attrimators;\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an map of event instances from the attrimators in this animation.\n   *\n   * @return {anim8.AttrimatorMap}\n   */\n  newAttrimators: function()\n  {\n    return this.attrimators.clone();\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {object} options\n   * @param  {anim8.AttrimatorMap} attrimatorMap\n   * @return {[type]}\n   */\n  merge: function(options, attrimatorMap)\n  {\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, attrimatorMap );\n      }\n    }\n\n    return attrimatorMap;\n  },\n\n  /**\n   * Extends this animation and returns an animation modified with the given options. \n   *\n   * @param {object} options\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var attrimatorMap = this.newAttrimators();\n\n    this.merge( options, attrimatorMap );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, attrimatorMap );\n  }\n\n};","\n/**\n * Parses a value into a transition object. If the given input is a string it's\n * expected to be in a similar format to:\n *\n * [time] [outroDelta] +[introDelta] [easing[-easingType]] ^[granularity]\n *\n * This is also a registry of transitions, you can add your own transitions that\n * can be used later with syntax like:\n *\n * anim8.transition['myTransition'] = anim8.transition('50ms 0.05 linear');\n *\n * So you can use 'myTransition' as the transition input.\n * \n * @param {object|string|array} options\n * @param {boolean} cache\n * @return {object}\n */\nanim8.transition = function(transition, cache)\n{\n  // 1. If it's a string, convert it into an array.\n  // 2. If it's an array, parse it and convert it into an object.\n  // 3. If it's an object, fill in any missing values with the defaults.\n\n  var originalInput = transition;\n\n  if ( anim8.isString( transition ) )\n  {\n    if ( transition in anim8.transition )\n    {\n      return anim8.transition[ transition ];\n    }\n\n    transition = transition.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( transition ) )\n  {\n    var transitionArray = transition;\n\n    transition = {};\n\n    for (var i = 0; i < transitionArray.length; i++)\n    {\n      var part = transitionArray[i];\n      var first = part.charAt( 0 );\n\n      // Introduction Delta (into next event)\n      if ( first === '+' )\n      {\n        var introDelta = parseFloat( part.substring(1) );\n\n        if ( !isNaN( introDelta ) )\n        {\n          transition.introDelta = introDelta;\n        }\n      }\n      // Granularity (for smooth transitions)\n      else if ( first === '^' )\n      {\n        var granularity = parseInt( part.substring(1) );\n\n        if ( !isNaN( granularity ) && granularity > 0 )\n        {\n          transition.granularity = granularity;\n        }\n      }\n      else\n      {\n        // Easing\n        var easing = anim8.easing( part, false );\n\n        if ( easing !== false )\n        {\n          transition.easing = easing;\n        }\n\n        // Outroduction Delta\n        if ( anim8.isDefined( transition.time ) )\n        {\n          var outroDelta = parseFloat( part );\n\n          if ( !isNaN( outroDelta ) && outroDelta >= 0 && outroDelta <= 1 )\n          {\n            transition.outroDelta = outroDelta;\n          }\n        }\n        else\n        {\n          // Time\n          var time = anim8.time( part, false );\n\n          if ( time !== false )\n          {\n            transition.time = time;\n          }\n        }\n\n      }\n    }\n  }\n\n  if ( anim8.isObject( transition ) )\n  {\n    if ( !anim8.isNumber( transition.time ) )\n    {\n      transition.time = anim8.time( transition.time, anim8.defaults.transitionTime );\n    }\n    if ( !anim8.isNumber( transition.outroDelta ) )\n    {\n      transition.outroDelta = anim8.defaults.transitionOutroDelta;\n    }\n    if ( !anim8.isNumber( transition.introDelta ) )\n    {\n      transition.introDelta = anim8.defaults.transitionIntroDelta;\n    }\n    if ( !anim8.isDefined( transition.easing ) )\n    {\n      transition.easing = anim8.easing( anim8.defaults.transitionEasing );\n    }\n    if ( !anim8.isNumber( transition.granularity ) )\n    {\n      transition.granularity = anim8.defaults.transitionGranularity;\n    }\n\n    if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheTransitions ) )\n    {\n      anim8.transition[ originalInput ] = transition;\n    }\n\n    return transition;\n  }\n\n  return anim8.defaults.noTransition;\n};\n","\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n *\n * [duration] x[repeat] z[sleep] ~[delay] ![scale] [easing[-easingType]]\n *\n * This is also a registry of options, you can add your own options that\n * can be used later with syntax like:\n *\n * anim8.option['myOptions'] = anim8.option('1.5s x2 !2');\n *\n * So you can use 'myOptions' as the options input.\n * \n * @param {object|string|array} options\n * @param {boolean} cache\n * @return {object}\n */\nanim8.options = function(options, cache)\n{\n  var originalInput = options;\n\n  if ( anim8.isString( options ) )\n  {\n    if ( options in anim8.options )\n    {\n      return anim8.options[ options ];\n    }\n\n    options = options.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( options ) )\n  {\n    var parsed = {};\n\n    for (var i = 0; i < options.length; i++)\n    {\n      var part = options[i];\n      var first = part.charAt( 0 );\n\n      // Repeats\n      if ( first === 'x' )\n      {\n        var repeat = anim8.repeat( part.substring(1), false );\n\n        if ( repeat !== false )\n        {\n          parsed.repeat = repeat;\n        }\n      }\n      // Sleeping\n      else if ( first === 'z' )\n      {\n        var sleep = anim8.time( part.substring(1), false );\n\n        if ( sleep !== false )\n        {\n          parsed.sleep = sleep;\n        }\n      }\n      // Delay\n      else if ( first === '~' )\n      {\n        var delay = anim8.time( part.substring(1), false );\n\n        if ( delay !== false )\n        {\n          parsed.delay = delay;\n        }\n      }\n      // Scaling\n      else if ( first === '!' )\n      {\n        var scale = parseFloat( part.substring(1) );\n\n        if ( !isNaN(scale) )\n        {\n          parsed.scale = scale;\n        }\n      }\n      else\n      {\n        // Easing?\n        var easing = anim8.easing( part, false );\n\n        if ( easing !== false )\n        {\n          parsed.easing = easing;\n        }\n\n        // Duration?\n        var duration = anim8.time( part, false );\n\n        if ( duration !== false )\n        {\n          parsed.duration = duration;\n        }\n        else\n        {\n          // If not a duration, might be an alternative repeat? (doesn't start with x)\n          var repeat = anim8.repeat( part, false );\n\n          if ( repeat !== false )\n          {\n            parsed.repeat = repeat;\n          }\n        }\n      }\n    }\n\n    if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheOptions ) )\n    {\n      anim8.options[ originalInput ] = parsed;\n    }\n\n    return parsed; \n  }\n\n  if ( anim8.isObject( options ) )\n  {\n    return options;\n  }\n\n  return anim8.defaults.noOptions;\n};","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(subject)\n\t{\n\t  this.subject = subject;\n    this.attrimators = new anim8.AttrimatorMap();\n    this.attrimatorsAdded = [];\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    this.cycleCurrent = 0;\n    this.cycleNext = 0;\n    \n    return this;\n\t},\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are placed\n   * to group them together so we know when to apply their initial value.\n   * \n   * @return {this}\n   */\n  newCycle: function()\n  {\n    this.cycleNext++;\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all events & springs with the same cycle\n   * identifier and applying their initial state.\n   * \n   * @return {this}\n   */\n  applyCurrentCycle: function()\n  {\n    /**\n     * Cycle is applied to event before its placed on the animator or queued\n     * When no events/springs exist for the current cycle, increment it and apply it\n     */\n\n    var cycle = this.cycleCurrent;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the attribute descriptor\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  { \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function(now)\n  {\n    // If there are attribute placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the attribute.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      for (var i = 0; i < aa.length; i++)\n      {\n        var attrimator = aa[ i ];\n\n        this.setDefault( attrimator.attribute );\n\n        attrimator.start( now, this );     \n      }\n\n      aa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this Animator if there's no value there.\n   * \n   * @param {[type]}\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    this.finished = true;\n\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      this.updated[ attr ] = attrimator.setTime( now, this.frame );\n\n      this.finished = this.finished && attrimator.isFinished();\n    }\n\t\n\t\tthis.trigger('update');\n    \n    return this;\n  },\n\n  /**\n   * Places the attribute animator in this animator replacing any existing animator\n   * for the same attribute. The next time the animator is updated the attribute\n   * animator will be started.\n   * \n   * @param  {anim8.Attrimator}\n   */\n  placeAttrimator: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n\n    this.attrimators.put( attr, attrimator );\n    this.attrimatorsAdded.push( attrimator );\n\n    this.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimAttrimators();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimAttrimators: function()\n  {\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( attrimator.isFinished() )\n      {\n        if ( attrimator.next )\n        {\n          this.placeAttrimator( attrimator.next );\n        }\n        else\n        {\n          this.attrimators.removeAt( i );\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there already.\n   * \n   * @return {[type]}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createAttrimators: function(animation, options, cache)\n  {\n    var options = anim8.options( options );    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var attrimators = animation.newAttrimators();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, attrimators );\n    }\n    \n    this.onAnimation( animation, options, attrimators );\n\n    while ( animation.next !== null )\n    {\n      animation = animation.next;\n\n      var queueAttrimators = animation.newAttrimators();\n\n      this.onAnimation( animation, options, queueAttrimators );\n\n      attrimators.queueMap( queueAttrimators );\n    }\n\n    return attrimators;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  onAnimation: function(animation, options, attrimatorMap)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeAttrimator( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Existing events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   * @param [boolean] cache\n   */\n\tplay: function(animation, options, all, cache)\n\t{\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n    \n    this.playAttrimators( attrimatorMap, all );\n\n    return this.activate();\n\t},\n\n  /**\n   * Adds events to this Animator to be played (optionally finishing events for attributes not specified in the given \n   * attribute). Existing events will be replaced immediately. This method will not activate the Animator, that has\n   * to be done manually.\n   * \n   * @param  {anim8.AttributeMap} animatorMap\n   * @param  [boolean] all\n   * @return {this}\n   */\n  playAttrimators: function(attrimatorMap, all)\n  {\n    if ( all )\n    {\n      var attrimators = this.attrimators.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n\n        if ( !attrimatorMap.has( attrimator.attribute ) )\n        {\n          attrimator.finish( this.frame );\n        }\n      }\n    }\n\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      this.placeAttrimator( attrimators[i] );\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options, cache)\n\t{\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n        \n    this.queueAttrimators( attrimatorMap );\n\n    return this.activate();\n\t},\n\n  /**\n   * Queues an array of events on this Animator. The given events will be delayed to start at the same time - at the\n   * end of the events currently on the Animator. This method will not activate the Animator, that has to be done \n   * manually.\n   * \n   * @param  {array} events\n   * @return {this}\n   */\n  queueAttrimators: function(attrimatorMap)\n  {\n    this.attrimators.queueMap( attrimatorMap, this.placeAttrimator, this );\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {string|array|object} transition\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   * @param [Boolean] cache\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n\n    this.transitionAttrimators( transition, attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation. This method will not activate the \n   * Animator, that has to be done manually.\n   *\n   * @param {object} transition\n   * @param {anim8.AttrimatorMap} events\n   * @param [boolean] all\n   */\n  transitionAttrimators: function(transition, attrimatorMap, all)\n  {\n    // If intro & outro are 0, use Tween\n    // If intro is 0, use Quadratic Path between current value, outro point, and first point on new path.\n    // If outro is 0, use Quadratic Path between current value, first point on new path, and intro point.\n    // If intro & outro are not 0, use Cubic Path between current value, outro point, first point on new path, and intro point.\n    // If granularity is given > 1 then compile the path, compute intro & outro velocities, and compute deltas for new \n    //    compiled path based on interpolated velocity over the path (knowing it's length and transition time)\n    \n    var current = this.attrimators;\n    var attrimators = attrimatorMap.values;\n\n    // Only transition if we need to\n    if ( current.hasOverlap( attrimatorMap ) )\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var a1 = attrimators[ i ];\n        var attr = a1.attribute;\n\n        if ( current.has( attr ) )\n        {\n          var attribute = this.getAttribute( attr );\n          var a2 = current.get( attr );\n        \n          var p0 = attribute.calculator.clone( this.frame[attr] );\n          var p1 = a2.getFuture( transition.outroDelta );\n          var p2 = a1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, attribute.calculator, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transition.time, transition.easing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = a1;\n\n          this.placeAttrimator( transitionEvent );\n        }\n        else\n        {\n          a1.delay += transition.time;\n     \n          this.placeAttrimator( a1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        this.placeAttrimator( attrimators[ i ] );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   * /\n  transitionInto: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.transitionIntoEvents( transition, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation. This method will not activate the Animator, that has to be done \n   * manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {array} events\n   * @param [boolean] all\n   * /\n  transitionIntoEvents: function(transition, events, all)\n  {\n    // Check if we even need to transition\n    var transitionRequired = false;\n    \n    for (var i = 0; i < events.length && !transitionRequired; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transitionRequired = true;\n      }\n    }\n    \n    // Only transition if we need to\n    if ( transitionRequired )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transition.outroDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transition.introDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transition.time, transition.easing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transition.time;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n      \n    return this;\n  },\n  /**/\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {string} attr\n   * @param {any} target\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenTo: function(attr, target, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attribute to target values.\n   *\n   * @param {object} targets\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenManyTo: function(targets, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {string} attr\n   * @param {any} starts\n   * @param {any} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tween: function(attr, starts, ends, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {object} starts\n   * @param {object} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenMany: function(starts, ends, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n    \n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n      \n      request[ attr ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n      \n      return attribute.defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number|string] duration\n   * @param [number|string] delay\n   * @param [function|string] easing\n   * @param [number|string] repeat\n   * @param [number|string] sleep  \n   * @param [number] scale\n   */\n  follow: function(attribute, path, options)\n  {\n    var options = anim8.options( options );\n    var path = anim8.path( path );\n    \n    var event = new anim8.Event( \n      attribute, \n      path, \n      options.duration,\n      options.easing,\n      options.delay, \n      options.sleep,\n      options.repeat,\n      options.scale,\n      options.scaleBase\n    );\n    \n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  attrimatorsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n   \n    var attrimatorMap = this.attrimators; \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        var attrimator = attrimatorMap.get( attr );\n        \n        if ( attrimator )\n        {\n          if ( resulting )\n          {\n            results.push( attrimator );\n          }\n          else\n          {\n            callback.call( this, attrimator, attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      var attrimators = attrimatorMap.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n\n        if ( resulting )\n        {\n          results.push( attrimator );\n        }\n        else\n        {\n          callback.call( this, attrimator, attrimator.attribute );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator, attr) \n\t\t{\n      this.attrimators.remove( attr );\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator) \n\t\t{\n\t\t\twhile (attrimator.next)\n\t\t\t{\n\t\t\t\tattrimator = attrimator.next;\n\t\t\t}\n\t\t\t\n\t\t\tattrimator.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attribtues. Unsetting involves removing all events,\n   * springs, and the current value in the frame.\n   * \n   * @param  {string|array|object}\n   * @return {this}\n   */\n  unset: function(attributes)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      this.attrimators.remove( attributes );\n      delete this.frame[ attributes ];\n    }\n    else if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        this.unset( attributes[ i ] );\n      }\n    }\n    else if ( anim8.isObject( attributes ) )\n    {\n      for (var attr in attributes)\n      {\n        this.unset( attr );\n      }\n    }\n\n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns the amount of finite time remaining before the animator is done\n   * animating. Attrimators that don't have a known end time aren't included.\n   */\n  timeRemaining: function()\n  {\n    return this.attrimators.timeRemaining();\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasAttrimators: function()\n  {\n    return this.attrimators.size() > 0;\n  },\n  \n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator if none is given. This is particularly\n   * useful for having a function be called on deferred statements.\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  invoke: function(func, context, arguments)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, arguments || [] );\n    }\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n   * @param [function] callback\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t}\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'restore', 'placeAttrimator', 'preupdate', 'update', 'apply', 'trimAttrimators',\n  'activate', 'deactivate', 'destroy', 'spring', 'play', 'playAttrimators', 'queue',\n  'queueAttrimators', 'transition', 'transitionAttrimators', 'tween', 'tweenTo', \n  'tweenMany', 'tweenManyTo', 'follow', 'stop', 'end', 'finish', 'pause', 'resume',\n  'set', 'unset', 'get', 'invoke'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.override( anim8s.fn = anim8.Animators.prototype = new Array(),\n{\n  /**\n   * Invokes a callback for each element in the array.\n   * \n   * @param {function} iterator\n   */\n  each: function(iterator, context) \n  {\n    for (var i = 0; i < this.length; i++) \n    {\n      if ( iterator.call( context || this[i], this[i], i ) === false ) \n      {\n        break;\n      }\n    }\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @param {array} animators\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n   *\n   * @param {function} filterer\n   */\n  filter: function(filterer)\n  {\t\n  \tvar alive = 0;\n  \t\n  \tfor (var i = 0; i < this.length; i++)\n  \t{\n  \t\tvar remove = filterer( this[i] );\n  \t\t\n  \t\tif ( !remove )\n  \t\t{\n  \t\t\tthis[alive++] = this[i];\n  \t\t}\n  \t}\n  \t\n  \tthis.length = alive;\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubjects: function(wrapper)\n  {\n    var subjects = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      subjects.push( this[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   */\n  first: function()\n  {\n    return this[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   */\n  reverse: function()\n  {\n    var last = this.length - 1;\n    var mid = Math.floor( this.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = this[ i ];\n      var e1 = this[ last - i ];\n\n      this[ i ] = e1;\n      this[ last - i ] = e0;\n    }\n\n    return this;\n  },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   * \n   * @return {this}\n   */\n  activate: function()\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var animator = this[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function()\n  {\n    var maxRemaining = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      maxRemaining = Math.max( maxRemaining, this[ i ].timeRemaining() );\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Adds the following methods to make an array of Animators appear like a single Animator.\n   */\n  restore               : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n  placeAttrimator       : anim8.delegate( 'placeAttrimator', anim8.delegate.RETURN_THIS ),\n  preupdate             : anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS ),\n  update                : anim8.delegate( 'update', anim8.delegate.RETURN_THIS ),\n  apply                 : anim8.delegate( 'apply', anim8.delegate.RETURN_THIS ),\n  trimAttrimators       : anim8.delegate( 'trimAttrimators', anim8.delegate.RETURN_THIS ),\n  activate              : anim8.delegate( 'activate', anim8.delegate.RETURN_THIS ),\n  deactivate            : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n  destroy               : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n  spring                : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n  play                  : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n  playAttrimators       : anim8.delegate( 'playAttrimators', anim8.delegate.RETURN_THIS ),\n  queue                 : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n  queueAttrimators      : anim8.delegate( 'queueAttrimators', anim8.delegate.RETURN_THIS ),\n  transition            : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n  transitionAttrimators : anim8.delegate( 'transitionAttrimators', anim8.delegate.RETURN_THIS ),\n  tween                 : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n  tweenTo               : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n  tweenMany             : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n  tweenManyTo           : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n  follow                : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n  attrimatorsFor        : anim8.delegate( 'attrimatorsFor', anim8.delegate.RETURN_RESULTS ),\n  stop                  : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n  end                   : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n  finish                : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n  pause \t\t\t          : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n  resume \t\t\t          : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n  set                   : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n  unset                 : anim8.delegate( 'unset', anim8.delegate.RETURN_THIS ),\n  get                   : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n  hasAttrimators        : anim8.delegate( 'hasAttrimators', anim8.delegate.RETURN_TRUE ),\n  invoke                : anim8.delegate( 'invoke', anim8.delegate.RETURN_THIS ),\n  on\t\t\t              : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n  once\t\t              : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n  off\t\t\t              : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n  trigger               : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n});\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate( now );\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * [Sequence description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * [maxDelay description]\n   * @return {[type]}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  /**\n   * [createEvents description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  createAttrimators: function(animation, options, i)\n  {\n    var attrimatorMap = animation.newAttrimators();\n    var attrimators = attrimatorMap.values;\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = attrimators.length - 1; k >= 0; k--)\n    {\n      attrimators[ k ].delay += delayOffset;\n    }\n\n    animation.merge( options, attrimatorMap );\n    \n    return attrimatorMap;\n  },\n\n  /**\n   * [reverse description]\n   * @return {[type]}\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * [play description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  play: function(animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.playAttrimators( sequence.createAttrimators( anim, options, i ), all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(animation, options, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var attrimatorMap = sequence.createAttrimators( anim, options, i );\n      var attrimators = attrimatorMap.values;\n\n      for (var k = attrimators.length - 1; k >= 0; k--)\n      {\n        attrimators[ k ].delay += delayOffset;\n      }\n      \n      animator.queueAttrimators( attrimatorMap );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transition description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionAttrimators( transition, sequence.createAttrimators( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [add description]\n   */\n  add: function()\n  {\n    this.animators.activate();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimatorMap to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  parse: function( animation, options, attrimatorMap )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap )\n  {\n    var durations = animation.durations || {};\n    var easings   = animation.easings || {};\n    var delays    = animation.delays || {};\n    var sleeps    = animation.sleeps || {};\n    var repeats   = animation.repeats || {};\n    var scales    = animation.scales || {};\n    var scaleBases= animation.scaleBases || {};\n    \n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[ i ];\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      var attr = e.attribute;\n      var calc = e.path.calculator;\n\n      e.easing    = anim8.easing( anim8.coalesce( easings[attr],   newOptions.easing,   oldOptions.easing   ), e.easing );\n      e.repeat    = anim8.repeat( anim8.coalesce( repeats[attr],   newOptions.repeat,   oldOptions.repeat   ), e.repeat );\n      e.delay     = anim8.time(   anim8.coalesce( delays[attr],    newOptions.delay,    oldOptions.delay    ), e.delay );\n      e.sleep     = anim8.time(   anim8.coalesce( sleeps[attr],    newOptions.sleep,    oldOptions.sleep    ), e.sleep );\n      e.duration  = anim8.time(   anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration ), e.duration );\n      e.scale     =               anim8.coalesce( scales[attr],    newOptions.scale,    oldOptions.scale     , e.scale );\n      e.scaleBase = calc.parse(   anim8.coalesce( scaleBases[attr],newOptions.scaleBase,oldOptions.scaleBase), e.scaleBase );\n    }\n  }\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  parse: function( animation, options, attrimatorMap )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar deltas = animation.deltas;\n  \tvar values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      var valueCount = 0;\n      \n  \t\tfor (var attr in values)\n  \t\t{\n        valueCount++; \n      }\n      \n      deltas = [];\n      \n      for (var i = 0; i < valueCount; i++)\n      {\n        deltas[i] = i / (valueCount - 1);\n      }\n    }\n  \tif ( anim8.isArray( deltas ) )\n  \t{\n  \t\tvar deltaObject = {};\n  \t\t\n  \t\tfor (var attr in values)\n  \t\t{\n  \t\t\tdeltaObject[attr] = deltas;\t\n  \t\t}\n  \t\t\n  \t\tdeltas = deltaObject;\n  \t}\n  \t\n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[ attr ];\n      var attribute = factory.attribute( attr );\n  \t\t\n  \t\tfor (var k = 0; k < value.length; k++)\n  \t\t{\n  \t\t\tvalue[k] = attribute.parse( value[k] );\n  \t\t}\n  \t\t\n      var duration  = anim8.coalesce( durations[attr], options.duration );\n      var easing    = anim8.coalesce( easings[attr], options.easing );\n      var delay     = anim8.coalesce( delays[attr], options.delay );\n      var sleep     = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat    = anim8.coalesce( repeats[attr], options.repeat );\n      var scale     = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path      = new anim8.DeltaPath( attr, attribute.calculator, values[attr], deltas[attr] );\n      var event     = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['values'] = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  parse: function( animation, options, attrimatorMap )\n  {\n    // 1. Generate the attrimators, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar values = animation.final;\n    var delays = animation.delays || {};\n    var durations = animation.durations || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    var calculators = {};\n  \tvar defaults = {};\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var duration   = anim8.duration( anim8.coalesce( durations[attr], options.duration ) );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, scale, scaleBase, false, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales    = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n      var delay = anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay );\n      var duration = anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration );\n\n      e.delay = anim8.delay( delay ) + anim8.duration( duration );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['final'] = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  parse: function( animation, options, attrimatorMap )\n  {\n    // 1. Generate the attrimators, only caring about the delays\n    \n    var factory    = anim8.factory( animation.factory );\n  \tvar values     = animation.initial;\n    var delays     = animation.delays || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      var attr = e.attribute;\n      var calc = e.path.calculator;\n      \n      e.delay = anim8.time( anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay ), e.delay );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['initial'] = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  parse: function( animation, options, attrimatorMap )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    \n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n  \t\t\t\n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n  \t\n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = anim8.coalesce( durations[attr], options.duration );\n      var delay     = anim8.coalesce( delays[attr], options.delay );\n      var sleep     = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat    = anim8.coalesce( repeats[attr], options.repeat );\n      var scale     = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path      = new anim8.KeyframePath( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser['keyframe'] = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTweenTo = function()\n{\n  \n};\n\n// ParserTweenTo extends anim8.Parser()\nanim8.override( anim8.ParserTweenTo.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  parse: function( animation, options, attrimatorMap )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n    var durations  = animation.durations || {};\n    var easings    = animation.easings || {};\n    var delays     = animation.delays || {};\n    var sleeps     = animation.sleeps || {};\n    var repeats    = animation.repeats || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBase || {};\n\n  \tfor (var attr in tweenTo)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[attr] );\n      var duration   = anim8.coalesce( durations[attr], options.duration );\n      var easing     = anim8.coalesce( easings[attr], options.easing );\n      var delay      = anim8.coalesce( delays[attr], options.delay );\n      var sleep      = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat     = anim8.coalesce( repeats[attr], options.repeat );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, value );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenTo'] = new anim8.ParserTweenTo();\n","\n/**\n * Instantiates a new parser for the 'tweenFrom' animation type.\n */\nanim8.ParserTweenFrom = function()\n{\n  \n};\n\n// ParserTweenFrom extends anim8.Parser()\nanim8.override( anim8.ParserTweenFrom.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  parse: function( animation, options, attrimatorMap )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenFrom  = animation.tweenFrom;\n    var durations  = animation.durations || {};\n    var easings    = animation.easings || {};\n    var delays     = animation.delays || {};\n    var sleeps     = animation.sleeps || {};\n    var repeats    = animation.repeats || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBase || {};\n\n  \tfor (var attr in tweenFrom)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenFrom[attr] );\n      var duration   = anim8.coalesce( durations[attr], options.duration );\n      var easing     = anim8.coalesce( easings[attr], options.easing );\n      var delay      = anim8.coalesce( delays[attr], options.delay );\n      var sleep      = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat     = anim8.coalesce( repeats[attr], options.repeat );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.Tween( attr, attribute.calculator, value, anim8.computed.current );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenFrom'] = new anim8.ParserTweenFrom();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParserMove = function()\n{\n  \n};\n\n// ParserMove extends anim8.Parser()\nanim8.override( anim8.ParserMove.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  parse: function( animation, options, attrimatorMap )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var move       = animation.move;\n    var durations  = animation.durations || {};\n    var easings    = animation.easings || {};\n    var delays     = animation.delays || {};\n    var sleeps     = animation.sleeps || {};\n    var repeats    = animation.repeats || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBase || {};\n\n  \tfor (var attr in move)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[attr] );\n      var duration   = anim8.coalesce( durations[attr], options.duration );\n      var easing     = anim8.coalesce( easings[attr], options.easing );\n      var delay      = anim8.coalesce( delays[attr], options.delay );\n      var sleep      = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat     = anim8.coalesce( repeats[attr], options.repeat );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, anim8.computed.relative( value ) );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['move'] = new anim8.ParserMove();\n","\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n * \n * @param  [string|anim8.Factory]\n * @return {anim8.Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory.default;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n  this.priority = 0;\n  this.attributes = {};\n};\n\nanim8.override( anim8.ObjectFactory.prototype = new anim8.Factory(),\n{\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;\n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.zero );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory['default'] = anim8.factory['object'] = new anim8.ObjectFactory();\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute['default']                 = {defaultValue: 0};\n","\n/**\n * A factory for HTML Elements\n */\nanim8.DomFactory = function()\n{\n  this.cached = {};\n  this.ids = 0;\n  this.elementAttribute = 'anim8';\n  this.priority = 5;\n  this.attributes = {};\n};\n\nanim8.override( anim8.DomFactory.prototype = new anim8.Factory(),\n{\n  \n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isElement( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animatorId = subject.getAttribute( this.elementAttribute );\n    \n    if (!(animatorId in this.cached)) \n    {\n      var animator = new anim8.DomAnimator( subject );\n      \n      subject.setAttribute( this.elementAttribute, animatorId = animator.id = ++this.ids );\n      \n      animator.factory = this;\n      \n      this.cached[animatorId] = animator;\n    }\n\n    return this.cached[ animatorId ];\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete this.cached[ animator.id ];\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.dom.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.zero );\n      var propertyName = anim8.coalesce( attribute.property, attr );\n      var property = anim8.dom.property( propertyName );\n      var defaultUnit = attribute.defaultUnit || '';\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.propertyName = propertyName;\n      attribute.property = property;\n      attribute.defaultUnit = defaultUnit;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the DOM factory.\n */\nanim8.factory['default'] = anim8.factory['dom'] = new anim8.DomFactory();\n\n/* TODO don't apply styles if they're impercivable (convert value to pixels of applicable) */\n\n/**\n * All DOM related\n */\nanim8.dom = {};\n\n/* \n  anim8.dom.property[name] = {\n    get: function(e, anim) {\n      // based on anim.animating, gets one or more value from the entity and places it on anim.frame. this function should only do this for an attribute if\n      // anim.animating[attribute] === false. When it successfully gets a value anim.animating[attribute] should be set to true. This is called before an animation\n      // begins on attributes that will be animated based on the current value. \n    },\n    set: function(e, anim) {\n      // applies the applicable attributes in anim.frame to the entity, \n    }\n }\n*/\nanim8.dom.property = function(prop) \n{\n  if ( anim8.isObject( prop ) && anim8.isFunction( prop.get ) && anim8.isFunction( prop.set ) ) \n  {\n    return prop;\n  }\n  if ( anim8.isString( prop ) && prop in anim8.dom.property )\n  {\n\t  return anim8.dom.property[ prop ];\n  }\n\t\n  throw prop + ' is not a valid property';\n}\n\n/**\n * Computes the desired style of the given element and returns it as a string. The style\n * given must be in hyphenated format like so: anim8.dom.style( element, 'font-size' ) = '12px'\n */\nanim8.dom.style = (function()\n{\n  var hyphenated = {};\n\n  var hyphenize = function(str) \n\t{\n    if ( str in hyphenated )\n    {\n      return hyphenated[ str ];\n    }\n\n    var key = str;\n\n    str = str.replace(/[a-z][A-Z]/g, function(str, letter)\n    {\n     return str[0] + '-' + str[1].toLowerCase();\n    });\n    \n    str = str.replace(/^Webkit/, '-webkit');\n    str = str.replace(/^Moz/, '-moz');\n    str = str.replace(/^Ms/, '-ms');\n    str = str.replace(/^O/, '-o');\n    str = str.replace(/^Khtml/, '-khtml');\n    \n    return hyphenated[ key ] = str;\n  };\n\t\n\treturn function(e, style) \n\t{\n\t  if (e.currentStyle)\n\t\t{\n\t    return e.currentStyle[ style ];\n\t  } \n\t\telse if (document.defaultView && document.defaultView.getComputedStyle) \n\t\t{\n\t    return document.defaultView.getComputedStyle( e, null ).getPropertyValue( hyphenize( style ) );\n\t  } \n\t\telse \n\t\t{\n\t    return e.style[ style ]; \n\t  }\n\t};\n\t\n})();\n\n/**\n * Given an array of styles this will return the first one that is present on elements in the current browser.\n */\nanim8.dom.prefix = (function() \n{\n  var a = document.createElement('a');\n  \n  return function(prefixes) \n  {\n    for (var i = 0; i < prefixes.length; i++) \n    {\n      if ( anim8.isDefined( a.style[ prefixes[ i ] ] ) ) \n      {\n        return prefixes[i];\n      }\n    }\n    return false;\n  };\n  \n})();\n\n/**\n * Parses the string for a value and a unit.\n *\n * @param {string} value\n */\nanim8.dom.parseValue = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(px|em|%|vw|ex|cm|mm|in|pt|pc|deg|rad)?/;\n  \n  return function(x)\n  {\n    var parsed = regex.exec( x );\n    \n    if (parsed) \n    {      \n      return {\n        value: parseFloat( parsed[1] ),\n        unit: parsed[3]\n      }\n    }\n    \n    return false;\n  };\n})();\n\n\n/**\n * Converts one unit to another for a given element.\n *\n * For Example: anim8.dom.convert( element, '100px', '%', 'parentWidth' )\n *    returns how much percent 100px relativeTo parentWidth of the given element\n *\n * @param {HTMLElement} e\n * @param {string} from\n * @param {string} toUnit\n * @param {string} relativeTo\n */\nanim8.dom.convert = (function()\n{\n  /**\n   * Calculators how many pixels a given value & unit is.\n   * \n   * For Example: anim8.toPixels( 100, 'in' ) \n   *    returns how many pixels are in 1 inch, with up to 2 decimal points of accuracy.\n   */\n  var toPixels = function(baseValue, baseUnit, defaultRate)\n  {\n    if ( document.body )\n    {\n      var div = document.createElement('div');\n      document.body.appendChild( div );\n      div.style.width = baseValue + baseUnit;\n      var pixels = (div.offsetWidth / baseValue);\n      document.body.removeChild( div );\n      return pixels || defaultRate;\n    }\n    \n    return defaultRate;\n  };\n\n  var getFontSize = function(e, notUnit)\n  {\n    var fontSize = anim8.dom.style( e, 'fontSize' );\n    var parsed = anim8.dom.parseValue( fontSize );\n    \n    if ( !parsed || parsed.unit === notUnit )\n    {\n      return 12;\n    }\n    \n    if ( parsed.unit === 'px' ) \n    {\n      return parsed.value;\n    }\n    \n    return getConverterScale( e, conversions[ parsed.unit ].px, relativeTo );\n  };\n\n  var variables = {};\n  \n  variables.parentWidth = function(e)\n  {\n    return e.parentNode.scrollWidth;\n  };\n  variables.parentHeight = function(e)\n  {\n    return e.parentNode.scrollHeight;\n  };\n  variables.width = function(e)\n  {\n    return e.offsetWidth;\n  };\n  variables.height = function(e)\n  {\n    return e.offsetHeight;\n  };\n  variables.fontSize = function(e)\n  {\n    return getFontSize( e, '%' );\n  };\n  variables.parentFontSize = function(e)\n  {\n    return getFontSize( e.parentNode, '%' );\n  };\n  variables.htmlFontSize = function(e)\n  {\n    var htmlElement = document.getElementsByTagName(\"html\")[0];\n    \n    return getFontSize( htmlElement, '%' );\n  };\n  \n  var conversions = {};\n  \n  conversions.pt  = { px: toPixels(100, 'pt') };\n  conversions.in  = { px: toPixels(100, 'in') };\n  conversions.cm  = { px: toPixels(1000, 'cm') };\n  conversions.mm  = { px: toPixels(100000, 'mm') };\n  conversions.vw  = { px: toPixels(1000, 'vw') };\n  conversions.deg = { rad: Math.PI / 180.0};\n\n  conversions.em = \n  {\n    px: function(e, relativeTo) \n    {\n      return getFontSize( e, 'em' );\n    }\n  };\n  \n  conversions.rem = \n  {\n    px: function(e, relativeTo) \n    {\n      var htmlElement = document.getElementsByTagName(\"html\")[0];\n      \n      return getFontSize( htmlElement, 'rem' );\n    }\n  };\n  \n  conversions['%'] = \n  {\n    px: function(e, relativeTo) \n    {\n      if ( anim8.isNumber( relativeTo ) )\n      {\n        return relativeTo;\n      }\n      if ( relativeTo in variables )\n      {\n        return variables[ relativeTo ]( e ) / 100.0;\n      }\n      \n      return 1.0;\n    }\n  };\n  \n  // Populate conversions going other way.\n  for (var unit in conversions)\n  {\n    for (var to in conversions[ unit ])\n    {\n      if ( !(to in conversions) )\n      {\n        conversions[ to ] = {};\n      }\n      \n      if ( !(unit in conversions[ to ]) )\n      {\n        var given = conversions[ unit ][ to ];\n        \n        if ( anim8.isNumber( given ) )\n        {\n          conversions[ to ][ unit ] = 1.0 / given;  \n        }\n        if ( anim8.isFunction( given ) )\n        {\n          conversions[ to ][ unit ] = (function(converter) \n          {\n            return function(e, relativeTo) \n            {\n              return 1.0 / converter( e, relativeTo );\n            };\n          })( given );\n        }\n      }\n    }\n  }\n  \n  // Given an element, convert, and relativeTo - return the number we need to multiply by.\n  var getConverterScale = function(e, converter, relativeTo)\n  {\n    if ( anim8.isNumber( converter ) )\n    {\n      return converter;\n    }\n    else if ( anim8.isFunction( converter ) )\n    {\n      return converter( e, relativeTo );\n    }\n    \n    return 1.0;\n  };\n  \n  return function(e, from, toUnit, relativeTo)\n  {\n    if ( anim8.isNumber( from ) )\n    {\n      return from;\n    }\n    \n    var parsed = anim8.dom.parseValue( from );\n    \n    if ( !parsed )\n    {\n      return false;\n    }\n    \n    var value = parsed.value;\n    var fromUnit = parsed.unit;\n    \n    if ( !fromUnit || fromUnit === toUnit )\n    {\n      return value;\n    }\n    \n    // First see if we have a direct conversion available...\n    if ( fromUnit in conversions && toUnit in conversions[ fromUnit ] )\n    {\n      var converter = conversions[ fromUnit ][ toUnit ];\n      \n      value *= getConverterScale( e, converter, relativeTo );\n    }\n    // Otherwise convert it to px, then to the desired unit\n    else if ( fromUnit in conversions && conversions[ fromUnit ].px && toUnit in conversions.px )\n    {\n      var converter1 = conversions[ fromUnit ].px;\n      var converter2 = conversions.px[ toUnit ];\n      \n      value *= getConverterScale( e, converter1, relativeTo );\n      value *= getConverterScale( e, converter2, relativeTo );\n    }\n    \n    return value;\n  };\n  \n})();\n\n\n","\nanim8.dom.property.factory = function(nm, relativeTo) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryDerivable = function(nm, relativeTo, deriver) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n        else if ( anim8.isFunction( deriver ) )\n        {\n          converted = anim8.dom.convert( e, deriver( e ), anim.units[ nm ], relativeTo );\n          \n          if ( converted !== false )\n          {\n            anim.frame[nm] = converted;\n            anim.animating[nm] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryColor = function(nm) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var parsed = anim8.color.parse( e.style[nm] );\n        \n        if (parsed !== false) \n        {\n          anim.frame[nm] = parsed;\n          anim.animating[nm] = true;\n        }              \n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[nm] = anim8.color.format( anim.frame[nm] );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.padding                  = anim8.dom.property.factory( 'padding', 'parentWidth' );\nanim8.dom.property.paddingTop               = anim8.dom.property.factory( 'paddingTop', 'parentWidth' );\nanim8.dom.property.paddingRight             = anim8.dom.property.factory( 'paddingRight', 'parentWidth' );\nanim8.dom.property.paddingBottom            = anim8.dom.property.factory( 'paddingBottom', 'parentWidth' );\nanim8.dom.property.paddingLeft              = anim8.dom.property.factory( 'paddingLeft', 'parentWidth' );\n\nanim8.dom.property.margin                   = anim8.dom.property.factory( 'margin', 'parentWidth' );\nanim8.dom.property.marginTop                = anim8.dom.property.factory( 'marginTop', 'parentWidth' );\nanim8.dom.property.marginRight              = anim8.dom.property.factory( 'marginRight', 'parentWidth' );\nanim8.dom.property.marginBottom             = anim8.dom.property.factory( 'marginBottom', 'parentWidth' );\nanim8.dom.property.marginLeft               = anim8.dom.property.factory( 'marginLeft', 'parentWidth' );\n\nanim8.dom.property.borderRadius             = anim8.dom.property.factory( 'borderRadius', 'width' );\nanim8.dom.property.borderTopLeftRadius      = anim8.dom.property.factory( 'borderTopLeftRadius', 'width' );\nanim8.dom.property.borderTopRightRadius     = anim8.dom.property.factory( 'borderTopRightRadius', 'width' );\nanim8.dom.property.borderBottomLeftRadius   = anim8.dom.property.factory( 'borderBottomLeftRadius', 'width' );\nanim8.dom.property.borderBottomRightRadius  = anim8.dom.property.factory( 'borderBottomRightRadius', 'width' );\n\nanim8.dom.property.borderWidth              = anim8.dom.property.factory( 'borderWidth' );\nanim8.dom.property.borderTopWidth           = anim8.dom.property.factory( 'borderTopWidth' );\nanim8.dom.property.borderRightWidth         = anim8.dom.property.factory( 'borderRightWidth' );\nanim8.dom.property.borderBottomWidth        = anim8.dom.property.factory( 'borderBottomWidth' );\nanim8.dom.property.borderLeftWidth          = anim8.dom.property.factory( 'borderLeftWidth' );\n\nanim8.dom.property.outlineWidth             = anim8.dom.property.factory( 'outlineWidth' );\nanim8.dom.property.textIndent               = anim8.dom.property.factory( 'textIndent', 'parentWidth' );\nanim8.dom.property.borderSpacing            = anim8.dom.property.factory( 'borderSpacing' );\nanim8.dom.property.fontSize                 = anim8.dom.property.factory( 'fontSize', 'parentFontSize' );\nanim8.dom.property.lineHeight               = anim8.dom.property.factory( 'lineHeight', 'fontSize' );\nanim8.dom.property.zIndex                   = anim8.dom.property.factory( 'zIndex' );\n\nanim8.dom.property.color                    = anim8.dom.property.factoryColor( 'color' );\nanim8.dom.property.backgroundColor          = anim8.dom.property.factoryColor( 'backgroundColor' );\nanim8.dom.property.borderTopColor           = anim8.dom.property.factoryColor( 'borderTopColor' );\nanim8.dom.property.borderRightColor         = anim8.dom.property.factoryColor( 'borderRightColor' );\nanim8.dom.property.borderBottomColor        = anim8.dom.property.factoryColor( 'borderBottomColor' );\nanim8.dom.property.borderLeftColor          = anim8.dom.property.factoryColor( 'borderLeftColor' );\nanim8.dom.property.outlineColor             = anim8.dom.property.factoryColor( 'outlineColor' );\n\nanim8.dom.property.minWidth                 = anim8.dom.property.factory( 'minWidth', 'parentWidth' );\nanim8.dom.property.maxWidth                 = anim8.dom.property.factory( 'maxWidth', 'parentWidth' );\nanim8.dom.property.minHeight                = anim8.dom.property.factory( 'minHeight', 'parentHeight' );\nanim8.dom.property.maxHeight                = anim8.dom.property.factory( 'maxHeight', 'parentHeight' );\n\nanim8.dom.property.width                    = anim8.dom.property.factoryDerivable('width', 'parentWidth', function(e) { return e.offsetWidth + 'px'; });\nanim8.dom.property.height                   = anim8.dom.property.factoryDerivable('height', 'parentHeight', function(e) { return e.offsetHeight + 'px'; });\n\nanim8.dom.property.top                      = anim8.dom.property.factoryDerivable('top', 'parentHeight', function(e) { return e.offsetTop + 'px'; });\nanim8.dom.property.right                    = anim8.dom.property.factoryDerivable('right', 'parentWidth', function(e) { return (e.parentNode.scrollWidth - (e.offsetLeft + e.offsetWidth)) + 'px'; });\nanim8.dom.property.bottom                   = anim8.dom.property.factoryDerivable('bottom', 'parentHeight', function(e) { return (e.parentNode.scrollHeight - (e.offsetTop + e.offsetHeight)) + 'px'; });\nanim8.dom.property.left                     = anim8.dom.property.factoryDerivable('left', 'parentWidth', function(e) { return e.offsetLeft + 'px'; });\n\nanim8.dom.property.visibility = \n{\n  get: function(e, anim) \n  {\n    if (anim.animating.visibility === false) \n    {\n      var style = anim8.dom.style( e, 'visibility' );\n      anim.frame.visibility = style === 'hidden' ? 0.0 : 1.0;\n      anim.animating = true;\n    }\n  },\n  set: function(e, anim) \n  {\n    anim.styles.visibility = anim.frame.visibility < 0.5 ? 'hidden' : 'visible'\n  },\n  unset: function(e, anim)\n  {\n    e.style.visibility = null;\n  }\n}\n\nanim8.dom.property.backface = (function()\n{\n  var css = anim8.dom.prefix(['WebkitBackfaceVisibility', 'MozBackfaceVisibility', 'msBackfaceVisibility', 'BackfaceVisibility']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim)\n    {\n      if ( anim.animating.backface === false )\n      {\n        var style = anim8.dom.style( e, css ); \n        \n        anim.frame.backface = (style === 'visible') ? 1.0 : 0.0;\n        anim.animating.backface = true;\n      }\n    },\n    set: function(e, anim)\n    {\n      anim.styles[css] = anim.frame.backface < 0.5 ? 'none' : 'visible';\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n    \n  };\n  \n})();\n\nanim8.dom.property.transformOrigin = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransformOrigin', 'MozTransformOrigin', 'OTransformOrigin', 'msTransformOrigin', 'transformOrigin']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  var keywords = \n  {\n    'left':   '0%',\n    'center': '50%',\n    'right':  '100%',\n    'top':    '0%',\n    'bottom': '100%'\n  };\n  \n  var setOriginAttribute = function(e, value, anim, attr, relativeTo ) \n  {\n    if (anim.animating[attr] === false) \n    {\n      if ( value in keywords )\n      {        \n        value = keywords[ value ];\n      }\n\n      var converted = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n      \n      if ( converted !== false )\n      {\n        anim.frame[ attr ] = converted;\n        anim.animating[ attr ] = true;\n      }\n    }\n  };\n  \n  var setOrigin = function(e, split, anim) \n  {\n    if (anim.animating.origin === false) \n    {\n      if ((split.length === 1) || \n          (split.length === 2 && split[0] === split[1]) || \n          (split.length === 3 && split[0] === split[1] && split[1] === split[2])) \n      {     \n        setOriginAttribute( e, split[0], anim, 'origin', 'width' );\n      }            \n    }\n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      if (style) \n      {\n        var origin = style.toLowerCase();\n        var split = origin.split(' ');\n        \n        switch (split.length) \n        {\n        case 3:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOriginAttribute( e, split[2], anim, 'originZ' );\n          setOrigin( e, split, anim );\n          break;\n        case 2:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        case 1:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[0], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var style = null;\n      \n      if ( anim8.isDefined( anim.frame.originZ ) )\n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' ) + ' ' + anim.valueOr( 'originZ', 'origin', 'z' );\n      } \n      else \n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' );\n      }\n      \n      anim.styles[css] = style;\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.transform = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);\n   \n  if ( !css )\n  {\n    return false;\n  }\n\n  var d2 = { translate: true, scale: true };\n  var d3 = { translate3d: true, scale3d: true };\n  var d4 = { rotate3d: true };\n  var axis = ['X', 'Y', 'Z'];\n    \n  var regex = \n  {\n    translate: /translate\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translate3d: /translate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translateX: /translateX\\(([^\\)]+)\\)/i,\n    translateY: /translateY\\(([^\\)]+)\\)/i,\n    translateZ: /translateZ\\(([^\\)]+)\\)/i,\n    scale: /scale\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scale3d: /scale3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scaleX: /scaleX\\(([^\\)]+)\\)/i,\n    scaleY: /scaleY\\(([^\\)]+)\\)/i,\n    scaleZ: /scaleZ\\(([^\\)]+)\\)/i,\n    rotate: /rotate\\(([^\\)]+)\\)/i,\n    rotate3d: /rotate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    rotateX: /rotateX\\(([^\\)]+)\\)/i,\n    rotateY: /rotateY\\(([^\\)]+)\\)/i,\n    rotateZ: /rotateZ\\(([^\\)]+)\\)/i,\n    skew: /skew\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    skewX: /skewX\\(([^\\)]+)\\)/i,\n    skewY: /skewY\\(([^\\)]+)\\)/i\n  };\n  \n  var parse = function( e, value, anim, attr, relativeTo )\n  {\n    var desiredUnit = anim.units[ attr ];\n    var converted = anim8.dom.convert( e, value, desiredUnit, relativeTo );\n    \n    if ( converted !== false )\n    {\n      return converted;\n    }\n    \n    // TODO show convert this to desiredUnit, however defaultValue may be non-scalar.\n    return anim.getAttribute( attr ).defaultValue;    \n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      for (var attr in anim.animating) \n      {\n        if ( anim.animating[ attr ] === false && attr in regex ) \n        {\n          var parsed = regex[ attr ].exec( style );\n\n          if ( parsed ) \n          {\n            if ( attr in d4 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr ),\n                angle: parse( e, parsed[4], anim, attr )\n              };\n            }\n            else if ( attr in d3 )\n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr )\n              };\n            }\n            else if ( attr in d2 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' )\n              };\n            }\n            else \n            {\n              anim.frame[attr] = parse( e, parsed[1], anim, attr, 'width' );\n            }\n            \n            anim.animating[attr] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    {  \n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n      var transforms = [];\n      \n      for (var attr in regex) \n      {\n        if (attr in anim.frame) \n        { \n          var value = anim.frame[ attr ];\n          var unit = anim.units[ attr ];\n          \n          if (attr in d4) \n          {\n            transforms.push( attr + '(' + value.x + ',' + value.y + ',' + value.z + ',' + value.angle + unit + ')' );\n          }\n          else if (attr in d3) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ',' + value.z + unit + ')' );\n          }\n          else if (attr in d2) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ')' );\n          }\n          else\n          {\n            transforms.push( attr + '(' + value + unit + ')' );\n          }\n        }\n      }\n\t\t\t\n      if (transforms.length) \n      {\n        anim.styles[css] = transforms.join(' ');\n      }\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.opacity = (function() \n{\n  var css = anim8.dom.prefix(['WebkitOpacity', 'MozOpacity', 'KhtmlOpacity', 'opacity']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating.opacity === false) \n      {\n        var style = anim8.dom.style( e, css );\n        var opacity = parseFloat( style );\n        \n        if ( !isNaN(opacity) ) \n        {\n          anim.frame.opacity = opacity\n          anim.animating.opacity = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[ css ] = anim8.clamp( anim.frame.opacity, 0, 1 );\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.filter = (function() \n{\n  var css = anim8.dom.prefix(['WebkitFilter', 'MozFilter', 'OFilter', 'msFilter', 'filter']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n\tvar methods = \n  {\n\t\tgrayscale: \t'grayscale',\n\t\tsepia: \t\t\t'sepia',\n\t\tsaturate: \t'saturate',\n\t\thueRotate: \t'hue-rotate',\n\t\tinvert: \t\t'invert',\n\t\tbrightness: 'brightness',\n\t\tcontrast: \t'contrast',\n    blur:       'blur'\n\t};\n\t\n\tvar patterns = {};\n\t\n\tfor (var attr in methods) \n  {\n\t\tpatterns[attr] = new RegExp( methods[attr] + '\\(([^\\)]+)\\)', 'i');\n\t}\n  \n\treturn {\n    \n\t\tget: function(e, anim) \n    {\n\t\t\tvar style = anim8.dom.style( e, css );\n      \n\t\t\tfor (var attr in patterns) \n      {\n\t\t\t\tif ( anim.animating[attr] === false ) \n        {\n\t\t\t\t\tvar parsed = patterns[attr].exec( style );\n          \n\t\t\t\t\tif (parsed !== false) \n          {\n            var converted = anim8.dom.convert( e, parsed[1], anim.units[ attr ] );\n            \n            if ( converted !== false )\n            {\n              anim.frame[ attr ] = converted;\n              anim.animating[ attr ] = true;\n            }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\t\tset: function(e, anim) \n    {\n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n\t\t\tvar filters = [];\n      \n\t\t\tfor (var attr in methods) \n      {\n\t\t\t\tif ( attr in anim.frame ) \n        {\n          filters.push( methods[attr] + '(' + anim.value( attr ) + ')' );\n\t\t\t\t}\n\t\t\t}\n      \n\t\t\tif (filters.length) \n      {\n\t\t\t\tanim.styles[ css ] = filters.join(' ');\n\t\t\t}\n\t\t},\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n\t};\n\t\n})();\n\nanim8.dom.property.center = \n{\n  get: function(e, anim)\n  {\n    var cx = (e.offsetLeft + e.offsetWidth * 0.5) + 'px';\n    var cy = (e.offsetTop + e.offsetHeight * 0.5) + 'px';\n    \n    if ( anim.animating.center === false )\n    {\n      var desiredUnit = anim.units.center;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n    \n      if ( ccx !== false && ccy !== false )\n      {\n        anim.frame.center = {\n          x: ccx,\n          y: ccy\n        };\n        anim.animating.center = true;\n      }\n    }\n    if ( anim.animating.centerX === false )\n    {\n      var desiredUnit = anim.units.centerX;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      \n      if ( ccx !== false )\n      {\n        anim.frame.centerX = ccx;\n        anim.animating.centerX = true;\n      }\n    }\n    if ( anim.animating.centerY === false )\n    {\n      var desiredUnit = anim.units.centerY;\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n      \n      if ( ccy !== false )\n      {\n        anim.frame.centerY = ccy;\n        anim.animating.centerY = true;\n      }\n    }\n  },\n  preset: function(e, anim)\n  {\n    anim.cached.width  = anim8.dom.convert( e, e.offsetWidth + 'px', anim.units.centerX || anim.units.center, 'parentWidth' );\n    anim.cached.height = anim8.dom.convert( e, e.offsetHeight + 'px', anim.units.centerY || anim.units.center, 'parentHeight' );\n  },\n  set: function(e, anim)\n  {\n    var rw = anim.cached.width * 0.5;\n    var rh = anim.cached.height * 0.5;\n        \n    if ( anim.updated.center )\n    {\n      anim.styles.left = (anim.frame.center.x - rw) + anim.units.center;\n      anim.styles.top = (anim.frame.center.y - rh) + anim.units.center;\n    }\n    if ( anim.updated.centerX )\n    {\n      anim.styles.left = (anim.frame.centerX - rw) + anim.units.centerX;\n    }\n    if ( anim.updated.centerY )\n    {\n      anim.styles.top = (anim.frame.centerY - rh) + anim.units.centerY;\n    }\n  }\n};\n\nanim8.dom.property.orbit = \n{\n  DEGREE_TO_RADIAN: Math.PI / 180.0,\n  \n  RADIAN_TO_DEGREE: 180.0 / Math.PI,\n  \n  get: function(e, anim)\n  {\n    var ox = (e.parentNode.scrollWidth * 0.5);\n    var oy = (e.parentNode.scrollHeight * 0.5); \n    var cx = (e.offsetLeft + e.offsetWidth * 0.5);\n    var cy = (e.offsetTop + e.offsetHeight * 0.5);\n    var dx = cx - ox;\n    var dy = cy - oy;\n  \n    if ( anim.animating.orbitOffset === false )\n    {\n      var cunit = anim.units.orbitOffset;\n      var cox = anim8.dom.convert( e, ox + 'px', cunit, 'parentWidth' );\n      var coy = anim8.dom.convert( e, oy + 'px', cunit, 'parentHeight' );\n      \n      if ( cox !== false && coy !== false )\n      {\n        anim.frame.orbitOffset = {\n          x: cox,\n          y: coy\n        };\n        anim.animating.orbitOffset = false;\n      }\n    }\n    \n    if ( anim.animating.distance === false )\n    {\n      anim.frame.distance = Math.sqrt( dx * dx + dy * dy );\n      anim.animating.distance = true;\n    }\n    \n    if ( anim.animating.angle === false )\n    {\n      anim.frame.angle = Math.atan2( dy, dx ) * this.RADIAN_TO_DEGREE;\n      anim.animating.angle = true;\n    }\n  },\n  \n  preset: function(e, anim)\n  {  \n    anim.cached.parentWidth = e.parentNode.scrollWidth;\n    anim.cached.parentHeight = e.parentNode.scrollHeight;\n    anim.cached.width = e.offsetWidth;\n    anim.cached.height = e.offsetHeight;\n  },\n  \n  set: function(e, anim)\n  {\n    // TODO calculator this correctly\n    var cunit = anim.units.orbitOffset || '%';\n    var orbitX = anim.frame.orbitOffset ? anim.frame.orbitOffset.x : 50;\n    var orbitY = anim.frame.orbitOffset ? anim.frame.orbitOffset.y : 50;\n    \n    var originUnit = anim.units.origin || '%';\n    var originX = anim.frame.origin ? anim.frame.origin.x : 50;\n    var originY = anim.frame.origin ? anim.frame.origin.y : 50;\n    \n    var cox = anim8.dom.convert( e, orbitX + cunit, 'px', anim.cached.parentWidth / 100.0 );\n    var coy = anim8.dom.convert( e, orbitY + cunit, 'px', anim.cached.parentHeight / 100.0 );\n    \n    var ox = anim8.dom.convert( e, originX + originUnit, 'px', anim.cached.width / 100.0 );\n    var oy = anim8.dom.convert( e, originY + originUnit, 'px', anim.cached.height / 100.0 );\n    \n    var angle = (anim.frame.angle || 0.0) * this.DEGREE_TO_RADIAN;\n    var distance = anim.frame.distance || 0.0;\n        \n    var cos = Math.cos( angle ) * distance;\n    var sin = Math.sin( angle ) * distance;\n    \n    anim.styles.left = (cox + cos - ox) + 'px';\n    anim.styles.top = (coy + sin - oy) + 'px';\n  }\n};","\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.dom.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.dom.attribute[ attr ];\n  }\n  \n  return anim8.dom.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.dom.attribute.default                 = {defaultValue: 0};\n\n/**\n * All animatable attributes for DomAnimators & HTMLElements.\n */\n\nanim8.dom.attribute.padding                 = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingTop              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingRight            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingBottom           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingLeft             = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.margin                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginTop               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginRight             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginBottom            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginLeft              = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderRadius            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopLeftRadius     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopRightRadius    = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomLeftRadius  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomRightRadius = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderWidth             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopWidth          = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderRightWidth        = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomWidth       = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderLeftWidth         = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.outlineWidth\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.outlineOffset\t\t\t\t\t\t= {defaultValue: 0};\nanim8.dom.attribute.textIndent\t\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderSpacing\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.fontSize\t\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\nanim8.dom.attribute.lineHeight\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\n\nanim8.dom.attribute.origin                  = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'transformOrigin', calculator: '2d'};\nanim8.dom.attribute.originX                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\nanim8.dom.attribute.originY                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\n\nanim8.dom.attribute.opacity                 = {defaultValue: 1};\nanim8.dom.attribute.zIndex                  = {defaultValue: 1};\n\nanim8.dom.attribute.width                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minWidth                = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxWidth                = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.height                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minHeight               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxHeight               = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.angle                   = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.distance                = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.orbitOffset             = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'orbitOffset', calculator: '2d'};\n\nanim8.dom.attribute.top                     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.right                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.bottom                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.left                    = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.center                  = {defaultValue: {x:0, y:0}, defaultUnit: 'px', property: 'center', calculator: '2d'};\nanim8.dom.attribute.centerX                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\nanim8.dom.attribute.centerY                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\n\nanim8.dom.attribute.blur                    = {defaultValue: 0, property: 'filter', defaultUnit: 'px'};\nanim8.dom.attribute.sepia                   = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.brightness              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.grayscale               = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.contrast                = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.invert                  = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.saturation              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.hueRotate               = {defaultValue: 0, property: 'filter', defaultUnit: 'deg'};\n\nanim8.dom.attribute.rotate                  = {defaultValue: 0, property: 'transform', defaultUnit: 'deg'};\nanim8.dom.attribute.rotate3d                = {defaultValue: {x:0, y:0, z:1, angle:0}, property: 'transform', calculator: 'quaternion', defaultUnit: 'deg'};\n\nanim8.dom.attribute.translate               = {defaultValue: {x:0, y:0}, property: 'transform', calculator: '2d', defaultUnit: 'px'};\nanim8.dom.attribute.translateX              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateY              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateZ              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translate3d             = {defaultValue: {x:0, y:0, z:0}, property: 'transform', calculator: '3d', defaultUnit: 'px'};\n\nanim8.dom.attribute.scale                   = {defaultValue: {x:1, y:1}, property: 'transform', calculator: '2d'};\nanim8.dom.attribute.scaleX\t                = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleY  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleZ  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scale3d                 = {defaultValue: {x:1, y:1, z:1}, property: 'transform', calculator: '3d'};\n\nanim8.dom.attribute.skew                    = {defaultValue: {x:0, y:0}, defaultUnit: 'deg', property: 'transform', calculator: '2d'};\nanim8.dom.attribute.skewX                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\nanim8.dom.attribute.skewY                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\n\nanim8.dom.attribute.backface                = {defaultValue: 0};\nanim8.dom.attribute.visibility              = {defaultValue: 1};\n\nanim8.dom.attribute.backgroundColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.color                   = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderTopColor          = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderRightColor        = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderBottomColor       = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderLeftColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.outlineColor            = {defaultValue: anim8.color(), calculator: 'rgba'};\n","\n/**\n * Instantiates a new DomAnimator given a subject.\n * \n * @param {HTMLElement} e\n */\nanim8.DomAnimator = function(e)\n{\n\tthis.reset( e );\n  this.properties = new anim8.FastMap();\n  this.propertiesPreset = new anim8.FastMap();\n  this.attributeToProperty = {};\n  this.animating = {};\n  this.cached = {};\n  this.units = {};\n  this.styles = {};\n  this.styled = false;\n  this.stylesUpdated = false;\n};\n\n/**\n * Extends anim8.Animator\n */\nanim8.override( anim8.DomAnimator.prototype = new anim8.Animator(),\n{\n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   *\n   * If any events that were recently added have true values this is where we replace\n   * this true values with the values currently on the subject.\n   */\n  preupdate: function(now)\n  {\n    // If there are events with paths that contain computed values we should\n    // populate the frame directly from the HTML element.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      var properties = {};\n    \n      for (var i = aa.length - 1; i >= 0; i--)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        if ( !(attr in this.frame) && attrimator.hasComputed() )\n        {\n          properties[ this.attributeToProperty[ attr ] ] = true;\n      \n          this.animating[ attr ] = false; \n        }\n      }\n      \n      for (var prop in properties)\n      {\n        this.properties.get( prop ).get( this.subject, this );\n      }\n    }\n\n    // If a property currently being animated requires some heads up before it\n    // gets or sets a value, notify it. TODO removed dead properties.\n    var presets = this.propertiesPreset.values;\n    for (var i = presets.length - 1; i >= 0; i--)\n    {\n      presets[ i ].preset( this.subject, this );\n    }\n\n    // Finish updating computed events, filling in the frame, and triggering.\n    anim8.Animator.prototype.preupdate.apply( this, arguments );\n\n    return this;\n  },\n    \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now)\n  {\n    anim8.Animator.prototype.update.apply( this, arguments );\n      \n    this.getStyles();\n    this.stylesUpdated = true;\n\n    return this;\n  },\n\n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  onAnimation: function(animation, options, attrimatorMap)\n  {  \n    if ( animation.input.units )\n    {\n      var attrimators = attrimatorMap.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n        var attr = attrimator.attribute;\n      \n        if ( attr in animation.input.units )\n        {\n          attrimator.unit = animation.input.units[ attr ];\n        }\n      }  \n    }\n  },\n\n  /**\n   * Builds the styles map in preparation to be applied.\n   */\n  getStyles: function()\n  {\n    this.styles = {};\n    \n    var applyProperties = {};\n    \n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        var prop = this.attributeToProperty[ attr ];\n        \n        if ( this.properties.has( prop ) )\n        {\n          applyProperties[ prop ] = true; \n        }\n      }\n    }\n    \n    for (var prop in applyProperties)\n    {\n      this.properties.get( prop ).set( this.subject, this );  \n      \n      this.styled = true;\n    }\n  },\n\n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n  {\n    if ( !this.styled && !this.stylesUpdated )\n    {\n      this.getStyles();\n    }\n    \n    if ( this.styled )\n    {    \n      for (var prop in this.styles)\n      {\n         this.subject.style[ prop ] = this.styles[ prop ];\n      }\n      \n      for (var attr in this.frame)\n      {\n        this.updated[ attr ] = false;\n      }\n    \n      this.styled = false;\n    }\n    \n    this.stylesUpdated = false;\n    \n    this.trigger('apply');\n    \n    this.trimAttrimators();\n\n    return this;\n  },\n    \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeAttrimator: function( attrimator )\n  {\n    anim8.Animator.prototype.placeAttrimator.apply( this, arguments );\n    \n    var attr = attrimator.attribute;\n    var attribute = this.getAttribute( attr );\n    var propertyName = attribute.propertyName;\n    var property = attribute.property;\n\n    this.properties.put( propertyName, property );\n\n    this.attributeToProperty[ attr ] = propertyName;\n    this.units[ attr ] = attrimator.unit || attribute.defaultUnit;\n\n    if ( anim8.isFunction( property.preset ) )\n    {\n      this.propertiesPreset.put( propertyName, property );\n    }\n\n    return this;\n  },\n    \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  {\n    var props = this.properties.values;\n    for (var i = props.length - 1; i >= 0; i--)\n    {\n      props[ i ].unset( this.subject, this );\n    }\n    \n  \tthis.frame = {};\n\n    return this;\n  },\n\n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    var props = {};\n    var updated = {};\n    var units = {};\n    var styles = {};\n    \n    for (var attr in attributes)\n    {\n      var attribute = this.getAttribute( attr );\n      var value     = attributes[ attr ];\n      \n      units[ attr ] = attribute.defaultUnit;\n      \n      if ( anim8.isString( value ) )\n      {\n        var parsed = anim8.dom.parseValue( value, attribute.defaultUnit );\n        \n        if ( parsed !== false )\n        {\n          units[ attr ] = parsed.unit || attribute.defaultUnit;\n          value = parsed.value;\n        }  \n      }\n      \n      var parsed = attribute.parse( value );\n      \n      if ( parsed !== false )\n      {\n        props[ attribute.propertyName ] = attribute.property;\n        attributes[ attr ] = parsed;\n        updated[ attr ] = true;\n      }\n    }\n      \n    var flash = \n    {\n      units: units,\n       \n      frame: attributes,\n      \n      updated: updated,\n      \n      styles: styles,\n      \n      cached: {},\n      \n      value: function(attr)\n      {\n        return attributes[ attr ] + units[ attr ];\n      },\n      \n      valueOr: function(attr, other, subproperty)\n      {\n        var value = attributes[ attr ];\n        \n        if ( !anim8.isDefined( value ) )\n        {\n          value = attributes[ attr = other ];\n        \n          if ( anim8.isDefined( subproperty ) )\n          {\n            value = value[ subproperty ];\n          }\n        }\n    \n        return value + units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      var property = props[ prop ];\n      \n      if ( anim8.isFunction( property.preset ) )\n      {\n        props[ prop ].preset( this.subject, flash );\n      }\n    }\n    \n    for (var prop in props)\n    {\n      props[ prop ].set( this.subject, flash );\n    }\n    \n    for (var prop in styles)\n    {\n      this.subject.style[ prop ] = styles[ prop ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute and the value is the desired unit.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var props = {};\n    var animating = {};\n    var units = {};\n    var out = {};\n    \n    for (var attr in attributes)\n    {    \n      var attribute = this.getAttribute( attr );\n      \n      animating[ attr ] = false;    \n      units[ attr ] = attributes[ attr ] || attribute.defaultUnit;\n      props[ attribute.propertyName ] = attribute.property;\n      out[ attr ] = attribute.cloneDefault();\n    }\n    \n    var flash = \n    {    \n      units: units,\n      \n      frame: out,\n      \n      animating: animating,\n      \n      unit: function(attr)\n      {\n        return units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      props[ prop ].get( this.subject, flash );\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute, desiredUnit, relativeTo)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame && anim8.isNumber( animator.frame[ attribute ] ) )\n      {\n        return anim8.dom.convert( animator.e, animator.value( attribute ), desiredUnit, relativeTo );\n      }\n      \n      request[ attribute ] = desiredUnit;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return animator.getAttribute( attribute ).defaultValue;\n    };\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ] + this.units[ attr ];\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   * if the attribute doesn't exist a secondary one is looked up. If that value\n   * is an object and contains the given subproperty the value is resolved once again.\n   *\n   * @param {string} attr\n   * @param {string} other\n   * @param [string] subproperty\n   */\n  valueOr: function(attr, other, subproperty)\n  {\n    var value = this.frame[ attr ];\n      \n    if ( !anim8.isDefined( value ) )\n    {\n      value = this.frame[ attr = other ];\n      \n      if ( anim8.isDefined( subproperty ) )\n      {\n        value = value[ subproperty ];\n      }\n    }\n    \n    return value + this.units[ attr ];\n  }\n\n});\n"],"sourceRoot":"/source/"}