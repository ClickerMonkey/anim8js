{"version":3,"sources":["anim8js.min.js"],"names":["root","factory","define","amd","module","exports","global","m8","anim8","m8s","anim8s","this","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isBoolean","isString","isArray","Array","isObject","isEmpty","length","prop","toArray","split","props","push","copy","copied","i","p","extend","out","arguments","o","coalesce","a","b","c","d","constant","variable","resolve","clamp","v","min","max","Animation","name","input","options","attrimators","Animator","e","reset","Animators","$","fill","Attrimator","AttrimatorMap","Builder","BuilderHelper","oldOptions","newOptions","prepareSpecifics","Calculator","Defer","methods","$factory","$push","DeferAnimator","animator","previous","eventType","event","$reset","Event","attribute","path","duration","easing","delay","sleep","offset","repeat","scale","scaleBase","hasInitialState","builder","next","mergeId","$easing","$duration","$sleep","$repeat","$scale","calculator","parse","ZERO","$delay","$offset","Factory","priority","FastMap","map","putMap","put","Movie","events","currentTime","subjects","index","Oncer","value","applied","Path","Physics","position","velocity","acceleration","terminal","stopTime","$number","Number","POSITIVE_INFINITY","$time","finished","Sequence","animators","Spring","subject","$factoryFor","animatorFor","animatorsFor","isRunning","running","isLive","live","setLive","newLive","activateAnimator","pushAnimator","activate","active","animating","trigger","requestRun","run","now","preupdate","update","filter","handleFinished","pause","attributes","resume","stop","end","finish","nopeat","Color","r","g","computed","funcOrName","func","isComputed","delegate","functionName","returning","RETURN_THIS","array","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","composite","frame","partial","subattribute","spread","eventize","target","Class","defineProperty","on","once","off","addListener","$this","property","callback","context","removeListeners","listeners","eventListeners","k","splice","deleteProperty","obj","triggerListeners","argument","clear","slice","$on","$once","save","animation","$animation","key","toLowerCase","Animations","Calculator2d","createConstants","Calculator3d","CalculatorNumber","CalculatorQuaternion","CalculatorRGB","CalculatorRGBA","CalculatorString","FactoryObject","BuilderAnd","BuilderDeltas","BuilderFinal","BuilderInitial","BuilderKeyframe","BuilderMove","BuilderPath","BuilderPhysics","BuilderQueue","BuilderSpring","BuilderTravel","BuilderTweenFrom","BuilderTweenTo","PathCombo","paths","uniform","granularity","set","PathCompiled","pointCount","PathCubic","p0","p1","p2","p3","PathDelta","points","deltas","PathJump","PathKeyframe","easings","PathQuadratic","Tween","start","SpringDistance","rest","distance","damping","stiffness","gravity","finishOnRest","temp","SpringLinear","temp0","temp1","cache","$options","hasOptions","newAttrimators","merge","$attrimatorsFor","parsedOptions","helper","builderName","$builder","saved","cacheIt","Defaults","animationsQueued","animationsMerged","base","j","animationString","trim","animationSplit","parsedAnimation","additionalOptions","hasAdditionalOptions","parsedAttrimators","queueMap","builderInput","Builders","$calculator","calculatorInput","Calculators","time","returnOnInvalid","Easings","EasingTypes","indexOf","pair","t","bezier","$easingType","easingType","optional","factoryInput","Factories","highestPriorityFactory","factoryName","is","parsed","parseFloat","isNaN","originalInput","cacheOptions","Options","part","first","charAt","parseOptionProperty","substring","noOptions","parseFunction","propertyAdd","propertyScale","$path","pathInput","Paths","type","$spring","springInput","Springs","$transition","transition","Transitions","transitionArray","intro","outro","lookup","transitionTime","transitionOutro","transitionIntro","transitionEasing","transitionGranularity","transitionLookup","cacheTransitions","noTransition","superPrefix","construct","parentConstructor","properties","F","prototype","Object","enumerable","configurable","writable","teasing","frameRate","pauseTime","Date","getTime","String","replace","id","_id","clone","attrimatorMap","attrimatorsAdded","updated","cycleCurrent","cycleNext","cycleEnded","newCycle","applyCycle","cycle","applyCurrentCycle","values","attrimator","attr","startCycle","endCurrentCycle","getAttribute","restore","applyInitialState","aa","setDefault","cloneDefault","wasFinished","minCycle","setTime","isFinished","Math","placeAttrimator","existing","get","trimAttrimators","removeAt","deactivate","destroy","spring","play","all","playAttrimators","finishNotPresent","queue","queueAttrimators","transitionAttrimators","current","hasOverlap","curr","calc","valueAt","create","getElapsed","pastLookahead","pastVelocity","sub","pastNegativeVelocity","past","add","outTime","outPoint","outNext","inTime","inPoint","inNext","outVelocity","outPerMillis","inVelocity","inPerMillis","compiled","lastPoint","totalDistance","distances","requiredTime","timeDelta","transitionEvent","stopIn","has","tweenTo","fromOptions","tweenManyTo","targets","tweenFrom","starting","tweenManyFrom","startings","tween","starts","ends","tweenMany","move","amount","relative","moveMany","amounts","ref","request","defaultValue","follow","attrimatorsFor","keys","resulting","remove","unset","timeRemaining","hasAttrimators","size","getSubject","wrapper","invoke","args","defer","onCycleStart","onCycleEnd","at","each","iterator","filterer","alive","getSubjects","reverse","last","mid","floor","e0","e1","sequence","maxRemaining","startTime","elapsed","paused","prestart","prestartNext","overrideNext","totalTime","milliseconds","hasComputed","isInfinite","totalPausedTime","isPaused","getBuilder","parseValue","setGroup","groupId","force","deep","onNewAttribute","hasCallback","unqueueAt","indices","nextCycle","currentDepth","nextDepth","iterate","depth","nextMergeId","mergeAttrimator","mergeEasing","mergeRepeat","mergeDelay","mergeSleep","mergeDuration","mergeOffset","mergeScale","mergeScaleBase","submerge","specifics","parseEasing","parseFirst","parseRepeat","parseNumber","parseDelay","parseSleep","parseDuration","parseOffset","parseScale","parseScaleBase","option","parseEvent","parseOptionFunction","optionAdd","optionScale","baseRaw","mergeFirst","mergeNumber","specific","ONE","INFINITY","adds","mul","interpolate","delta","zero","random","sqrt","distanceSq","lengthSq","isValid","isZero","isEqual","dot","distSq","setLength","isRelative","getRelativeAmount","z","eventable","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","i2","x2","eq1","eq2","x3","sin","wave","abs","cos","inv","log10","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","EventState","DELAYED","ANIMATING","SLEEPING","FINISHED","computeValue","baseValue","compute","applyValue","newRepeat","ceil","state","replaceComputed","oldState","newState","iteration","lastValue","pop","lastKey","select","by","wait","after","getAttrimators","_add","getValue","ps","resolvePoint","isLinear","prev","deltadelta","resolveVelocity","resolveAcceleration","initalPosition","dt","MAX_DT","vel","acc","pos","usePosition","maxDelay","createAttrimators","template","delayOffset","remaining","resolveRest","updateVelocity","EPSILON","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","setTimeout","parsers","color","parseComponent","parseInt","vparsed","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","regex","matches","exec","cp","format","ca","cr","cg","cb","toString","relativeAmount","mask","relativeFunction","randomSelection","randomFunction","selected","resolvedMin","resolvedMax","y","cx","cy","rx","ry","ix","iy","aliases","left","right","middle","center","top","bottom","_x","_y","amountScale","dx","dy","epsilon","cz","rz","iz","dz","ab","angle","ra","ia","da","rr","rg","rb","ir","ig","ib","dr","dg","db","$animator","object","calculatorName","and","deltaObject","valueMax","initial","oncer","from","half","to","kframes","keyframe","sort","times","maxTime","order","pathEasings","pathDefinition","parsedPath","physics","physic","stopAt","springs","parser","travel","pointing","subtractVelocity","targetValue","difference","traveling","fromParsed","toParsed","traveler","linear","lengthGranularity","lengthTotal","lengths","lengthCurrent","cachedLength","_length","previousDelta","d1","d2","d3","i1","i3","ds","d0","pd","ea","_start","defaultEasing","conversions","inf","infinity","infinite","twice","thrice","dozen","ms","cs","jiffy","third","s","sec","m","h","hr","unit","fn","factoryFor","number","Aninmation","PathTween"],"mappings":"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","file":"anim8js.min.js","sourcesContent":["/* anim8js 1.0.3 - anim8js - Anim8 Everything by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define('anim8', [], function() { // jshint ignore:line\n      return factory(root);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global);  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.m8 = root.anim8 = factory(root);\n    root.m8s = root.anim8s = root.anim8.anim8s;\n  }\n}(this, function(global)\n{\n\n\nvar Class =\n{\n  superPrefix: '_',\n\n  extend: function(construct, parentConstructor, properties)\n  {\n    function F() {}\n\n    F.prototype = parentConstructor.prototype;\n\n    construct.prototype = new F();\n\n    if ( isObject( properties ) )\n    {\n      this.define( construct, properties );\n    }\n  },\n\n  define: function(construct, properties)\n  {\n    var target = construct.prototype;\n\n    for (var prop in properties)\n    {\n      if ( prop in target )\n      {\n        this.defineProperty( target, this.superPrefix + prop, target[ prop ] );\n      }\n\n      this.defineProperty( target, prop, properties[ prop ] );\n    }\n  },\n\n  defineProperty: function(target, property, value)\n  {\n    if ( Object.defineProperty )\n    {\n      Object.defineProperty( target, property, {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: value\n      });\n    }\n    else\n    {\n      target[ property ] = value;\n    }\n  }\n};\n\n\n\n/**\n * The default values for anim8js properties.\n *\n * @property {Object} anim8.defaults\n */\nvar Defaults =\n{\n\n  /**\n   * The default animation duration in milliseconds.\n   *\n   * @property {Number} duration\n   * @for anim8.defaults\n   * @default 1000\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   *\n   * @property {String|Function|Array} easing\n   * @for anim8.defaults\n   * @default 'ease'\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   *\n   * @property {String|Function|Array} teasing\n   * @for anim8.defaults\n   * @default 'linear'\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   *\n   * @property {Number} delay\n   * @for anim8.defaults\n   * @default 0\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   *\n   * @property {Number} sleep\n   * @for anim8.defaults\n   * @default 0\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   *\n   * @property {Number} repeat\n   * @for anim8.defaults\n   * @default 1\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   *\n   * @property scale\n   * @for anim8.defaults\n   * @default 1.0\n   * @type {Number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default animation offset in milliseconds.\n   *\n   * @property {Number} offset\n   * @for anim8.defaults\n   * @default 0\n   */\n  offset: 0,\n\n  /**\n   * The default transition time in milliseconds.\n   *\n   * @property {Number} transitionTime\n   * @for anim8.defaults\n   * @default 500\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition outroduction time in milliseconds.\n   *\n   * @property {Number} transitionOutro\n   * @for anim8.defaults\n   * @default 100\n   */\n  transitionOutro: 100,\n\n  /**\n   * The default transition introduction time in milliseconds.\n   *\n   * @property {Number} transitionIntro\n   * @for anim8.defaults\n   * @default 100\n   */\n  transitionIntro: 100,\n\n  /**\n   * The default transition easing when none is specified.\n   *\n   * @property {String|Function|Array} transitionEasing\n   * @for anim8.defaults\n   * @default 'linear'\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * The default transition granularity. This is used for smooth transitions to\n   * provide a smooth transition from the outro velocity to the intro velocity,\n   * the cubic or quadratic path between the two is a curve with unknown length\n   * so the length needs to be calculated using a maximum number of points to\n   * calculate along the path - summing the distances between the consecutive points.\n   *\n   * @property {Number} transitionGranularity\n   * @for anim8.defaults\n   * @default 0\n   */\n  transitionGranularity: 0,\n\n  /**\n   * TODO\n   *\n   * @property {Number} transitionLookup\n   * @for anim8.defaults\n   * @default 10\n   */\n  transitionLookup: 10,\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}}\n   *\n   * @property {Boolean} cache\n   * @for anim8.defaults\n   * @default false\n   */\n  cache: false,\n\n  /**\n   * Whether parsed options are cached whenever possible. Options that can be\n   * cached must be strings.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @property {Boolean} cacheOptions\n   * @for anim8.defaults\n   * @default false\n   */\n  cacheOptions: false,\n\n  /**\n   * Whether parsed transitions are cached whenever possible. Transitions that can be\n   * cached must be strings.\n   *\n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}}\n   *\n   * @property {Boolean} cacheTransitions\n   * @for anim8.defaults\n   * @default false\n   */\n  cacheTransitions: false,\n\n  /**\n   * The value to return when options could not be parsed from input.\n   *\n   * @property {Object} noOptions\n   * @for anim8.defaults\n   * @default {}\n   */\n  noOptions: {},\n\n  /**\n   * The value to return when a transition could not be parsed from input.\n   *\n   * @property {Object} noTransition\n   * @for anim8.defaults\n   * @default {}\n   */\n  noTransition: {},\n\n  /**\n   * The target number of milliseconds between frames. This only applies if the\n   * browser doesn't support any of the requestAnimationFrame variations.\n   *\n   * @property {Number} frameRate\n   * @for anim8.defaults\n   * @default 33\n   */\n  frameRate: 16,\n\n  /**\n   * The number of milliseconds to pause between looping to let the UI react\n   * to user events.\n   *\n   * @property {Number} pauseTime\n   * @for anim8.defaults\n   * @default 5\n   */\n  pauseTime: 5\n\n};\n\n\n\n/**\n * @class Core\n */\n\n/**\n * A function that does nothing.\n *\n * @property anim8.noop\n */\nfunction noop() {}\n\n/**\n * Returns true if the given variable is defined.\n *\n * **Examples:**\n *\n *     anim8.isDefined( 0 );     // true\n *     anim8.isDefined( false ); // true\n *     anim8.isDefined();        // false\n *\n * @method anim8.isDefined\n * @param {Any} x\n * @return {Boolean}\n */\nfunction isDefined(x)\n{\n  return typeof x !== 'undefined';\n}\n\n/**\n * Returns true if the given variable is a function.\n *\n * @method anim8.isFunction\n * @param {Any} x\n * @return {Boolean}\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Returns true if the given variable is a number.\n *\n * **Examples:**\n *\n *     anim8.isNumber( 0 );     // true\n *     anim8.isNumber( -45.6 ); // true\n *     anim8.isNumber( true );  // false\n *     anim8.isNumber( '1' );   // false\n *     anim8.isNumber();        // false\n *\n * @method anim8.isNumber\n * @param {Any} x\n * @return {Boolean}\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number';\n}\n\n/**\n * Returns true if the given variable is a boolean variable.\n *\n * **Examples:**\n *\n *     anim8.isBoolean( 0 );     // false\n *     anim8.isBoolean( -45.6 ); // false\n *     anim8.isBoolean( true );  // true\n *     anim8.isBoolean( false ); // true\n *     anim8.isBoolean( '1' );   // false\n *     anim8.isBoolean();        // false\n *\n * @method anim8.isBoolean\n * @param {Any} x\n * @return {Boolean}\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Returns true if the given variable is a string.\n *\n * **Examples:**\n *\n *     anim8.isString( '' );    // true\n *     anim8.isString( '1' );   // true\n *     anim8.isString( 4.5 );   // false\n *     anim8.isString();        // false\n *\n * @method anim8.isString\n * @param {Any} x\n * @return {Boolean}\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n *\n * **Examples:**\n *\n *     anim8.isArray( [] );     // true\n *     anim8.isArray( [4, 5] ); // true\n *     anim8.isArray( 4.5 );    // false\n *     anim8.isArray();         // false\n *\n * @method anim8.isArray\n * @param {Any} x\n * @return {Boolean}\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Returns true if the given variable is an object. Arrays are considered\n * objects.\n *\n * **Examples:**\n *\n *     anim8.isObject( {} );     // true\n *     anim8.isObject( [] );     // true\n *     anim8.isObject( 4.5 );    // false\n *     anim8.isObject();         // false\n *     anim8.isObject( null );   // false\n *\n * @method anim8.isObject\n * @param {Any} x\n * @return {Boolean}\n */\nfunction isObject(x)\n{\n  return typeof x === 'object' && x !== null;\n}\n\n/**\n * Returns the current time in milliseconds.\n *\n * @method anim8.now\n * @return {Number}\n */\nvar now = (function()\n{\n  return Date.now ? Date.now : function()\n  {\n    return new Date().getTime();\n  };\n\n})();\n\n/**\n * Returns the trimmed version of the given string. A trimmed string has no\n * whitespace in the beginning or end of it.\n *\n * **Examples:**\n *\n *     anim8.trim( 'x' );     // 'x'\n *     anim8.trim( '   x' );  // 'x'\n *     anim8.trim( 'x   ' );  // 'x'\n *     anim8.trim( '  x ' );  // 'x'\n *     anim8.trim( '    ' );  // ''\n *\n * @method anim8.trim\n * @param  {String} x\n * @return {String}\n */\nvar trim = (function()\n{\n  if (String.prototype.trim) {\n    return function(x) {\n      return x.trim();\n    };\n  }\n  return function(x) {\n    return x.replace(/^([\\s]*)|([\\s]*)$/g, '');\n  };\n})();\n\n/**\n * Determines whether the given variable is empty.\n *\n * **Examples:**\n *\n *     anim8.isEmpty( '' );        // true\n *     anim8.isEmpty( 0 );         // true\n *     anim8.isEmpty( [] );        // true\n *     anim8.isEmpty( {} );        // true\n *     anim8.isEmpty( null );      // true\n *     anim8.isEmpty( true );      // true\n *     anim8.isEmpty( false );     // true\n *     anim8.isEmpty( 'x' );       // false\n *     anim8.isEmpty( 0.3 );       // false\n *     anim8.isEmpty( [0] );       // false\n *     anim8.isEmpty( {x:3} );     // false\n *\n * @method anim8.isEmpty\n * @param {Any} x\n * @return {Boolean}\n */\nfunction isEmpty(x)\n{\n  if ( isArray( x ) || isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n}\n\n/**\n * Parses the given input and returns an array.\n *\n * **Examples:**\n *\n *     anim8.toArray();            // []\n *     anim8.toArray('a b');       // ['a b']\n *     anim8.toArray('a b', ' ');  // ['a', 'b']\n *     anim8.toArray({a:0,b:0});   // ['a', 'b']\n *     anim8.toArray(['a', 'b']);  // ['a', 'b']\n *     anim8.toArray(3.2);         // [3.2]\n *     anim8.toArray(true);        // [true]\n *\n * @param  {Any} x\n * @param  {String} [split]\n * @return {Array}\n */\nfunction toArray( x, split )\n{\n  if ( isString( x ) )\n  {\n    return split ? x.split( split ) : [ x ];\n  }\n  else if ( isArray ( x ) )\n  {\n    return x;\n  }\n  else if ( isObject( x ) )\n  {\n    var props = [];\n\n    for ( var prop in x )\n    {\n      props.push( prop );\n    }\n\n    return props;\n  }\n  else if ( isDefined( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or\n * object a new instance of that type is created where the values are copied as\n * well. All other types can't be copied (most likely because they're scalar) so\n * they are returned as-is.\n *\n * @method anim8.copy\n * @param {T} x\n * @return {T}\n */\nfunction copy(x)\n{\n  if ( isArray(x) )\n  {\n    var copied = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      copied.push( copy( x[i] ) );\n    }\n\n    x = copied;\n  }\n  else if ( isObject(x) )\n  {\n    var copied = {};\n\n    for (var p in x)\n    {\n      copied[p] = copy( x[p] );\n    }\n\n    x = copied;\n  }\n\n  return x;\n}\n\n/**\n * Extends the given object by merging the following objects into it, avoiding\n * overriding any existing properties.\n *\n * @method anim8.extend\n * @param  {Object} out\n * @return {Object}\n */\nfunction extend(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n}\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n *\n * **Examples:**\n *\n *     anim8.coalesce( 1, 2, 3 );           // 1\n *     anim8.coalesce( undefined, 2, 3 );   // 2\n *     anim8.coalesce();                    // undefined\n *\n * @method anim8.coalesce\n */\nfunction coalesce(a, b, c, d)\n{\n  if (isDefined(a)) {\n    return a;\n  }\n  if (isDefined(b)) {\n    return b;\n  }\n  if (isDefined(c)) {\n    return c;\n  }\n  return d;\n}\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * **Examples:**\n *\n *     anim8.constant( 5 );   // function() { return 5; }\n *\n * @method anim8.constant\n * @param {T} variable\n * @return {Function}\n */\nfunction constant(variable)\n{\n  return function()\n  {\n    return variable;\n  };\n}\n\n/**\n * Resolves the given variable. If the variable is a function the result is\n * returned.\n *\n * **Examples:**\n *\n *     anim8.resolve( 5 );                     // 5\n *     anim8.resolve( true );                  // true\n *     anim8.resolve( function(){return 7;} ); // 7\n *\n * @method anim8.resolve\n * @param  {Function|E} variable\n * @return {E}\n */\nfunction resolve(variable)\n{\n  return isFunction( variable ) ? variable() : variable;\n}\n\n/**\n * Returns a value between the given minimum and maximum.\n *\n * **Examples:**\n *\n *     anim8.clamp( 5, 1, 6 );   // 5\n *     anim8.clamp( 0, 1, 6 );   // 1\n *     anim8.clamp( 7, 1, 6 );   // 6\n *\n * @method anim8.clamp\n * @param  {Number} v\n * @param  {Number} min\n * @param  {Number} max\n * @return {Number}\n */\nfunction clamp(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n}\n\n/**\n * Returns a \"unique\" identifier.\n *\n * @method id\n * @return {Number}\n */\nvar id = (function()\n{\n  var _id = 0;\n  return function() {\n    return ++_id;\n  };\n\n})();\n\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and\n * the attrimators that were generated from the input & options. If the name is\n * false this is an anonymous animation. Input & Options are used by builders to\n * generate attrimators, options allow for an animations default properties to\n * be overriden.\n *\n * @param {String|Boolean} name\n * @param {Object} input\n * @param {Object} options\n * @param {AttrimatorMap} attrimators\n * @class Animation\n * @constructor\n */\nfunction Animation(name, input, options, attrimators)\n{\n  /**\n   * The name of the animation, or false if it's an anonymous animation.\n   *\n   * @property {String|False} name\n   */\n  this.name = name;\n\n  /**\n   * The object which created the animation.\n   *\n   * @property {Object} input\n   */\n  this.input = input;\n\n  /**\n   * The options given when the animation was created.\n   *\n   * @property {Object} [options]\n   */\n  this.options = options;\n\n  /**\n   * The name of the animation, or false if it's an anonymous animation.\n   *\n   * @property {AttrimatorMap} name\n   */\n  this.attrimators = attrimators;\n}\n\nClass.define( Animation,\n{\n\n  /**\n   * Generates an map of event instances from the attrimators in this animation.\n   *\n   * @method newAttrimators\n   * @return {AttrimatorMap}\n   */\n  newAttrimators: function()\n  {\n    return this.attrimators.clone();\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   *\n   * @method merge\n   * @param {Object} [options]\n   * @param {AttrimatorMap} attrimatorMap\n   * @return {AttrimatorMap}\n   */\n  merge: function(options, attrimatorMap)\n  {\n    var helper = new BuilderHelper( this.input, this.options, options );\n\n    for (var builderName in this.input)\n    {\n      var builder = $builder( builderName );\n\n      if ( builder !== false && builder.merge )\n      {\n        builder.merge( this.input, options, this.options, attrimatorMap, helper );\n      }\n    }\n\n    return attrimatorMap;\n  }\n\n});\n\n\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {Any} e\n * @class Animator\n * @constructor\n * @extends anim8.eventize\n */\nfunction Animator(e)\n{\n  this.reset( e );\n}\n\n/**\n * The event triggered after preupdate is called. Pre-update is used to run any\n * preparations on the subject before updates are made and attributes are\n * applied.\n *\n * @event preupdate\n */\n\n/**\n * The event triggered after all attrimators are updated and any new values\n * have been applied to the current values (frame) on the animator.\n *\n * @event update\n */\n\n/**\n * The event triggered after the current values (frame) on the animator are\n * applied to the subject.\n *\n * @event apply\n */\n\n/**\n * The event triggered when the given animation cycle starts (and initial\n * values are applied) for all attrimators in the cycle.\n *\n * @event cycleStart:#\n * @param {Number} cycleID\n */\n\n/**\n * The event triggered when the given animation cycle ends which occurs when the\n * last attrimator for an animation finishes or is interrupted by commands like\n * play, queue, transition, end, finish, & stop.\n *\n * @event cycleEnd:#\n * @param {Number} cycleID\n */\n\n/**\n * The event triggered when all animations on the animator have finished.\n *\n * @event finished\n * @param {Animator} animator\n */\n\n/**\n * The event triggered when an animator is deactivated which occurs when an\n * animator has finished animating and is being taken off the list of live\n * animators (anim8.animating).\n *\n * @event deactivate\n */\n\n/**\n * The event triggered after the user calls destroy on an animator.\n *\n * @event destroyed\n */\n\nClass.define( Animator,\n{\n\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @method reset\n   * @param {Any} subject\n   * @chainable\n   * @protected\n   */\n  reset: function(subject)\n  {\n    /**\n     * The subject which is being animated.\n     *\n     * @property {Any} subject\n     */\n    this.subject = subject;\n\n    /**\n     * The map of attrimators animating the subject.\n     *\n     * @property {AttrimatorMap} attrimators\n     */\n    this.attrimators = new AttrimatorMap();\n\n    /**\n     * The array of attrimators recently added to the animator that\n     * are ready to be started.\n     *\n     * @property {Array} attrimatorsAdded\n     * @protected\n     */\n    this.attrimatorsAdded = [];\n\n    /**\n     * The object which stores the attribute values being animated.\n     *\n     * @property {Object} frame\n     */\n    this.frame = {};\n\n    /**\n     * The object which stores the attributes last updated.\n     *\n     * @property {Object} updated\n     */\n    this.updated = {};\n\n    /**\n     * Whether or not this animator has completely finished animating it's subject.\n     *\n     * @property {Boolean} finished\n     */\n    this.finished = false;\n\n    /**\n     * The factory which created this Animator given a subject.\n     *\n     * @property {Factory} factory\n     */\n    this.factory = null;\n\n    /**\n     * Whether or not this animator is actively being updated.\n     *\n     * @property {Boolean} active\n     */\n    this.active = false;\n\n    /**\n     * The current cycle being animated. Multiple cycles can be animated at once, this is the first one.\n     *\n     * @property {Number} cycleCurrent\n     * @protected\n     */\n    this.cycleCurrent = 0;\n\n    /**\n     * The ID of the next cycle of animations to be added to this Animator.\n     *\n     * @property {Number} cycleNext\n     * @protected\n     */\n    this.cycleNext = 0;\n\n    /**\n     * The last cycle that was ended.\n     *\n     * @property {Number} cycleEnded\n     * @protected\n     */\n    this.cycleEnded = 0;\n\n    return this;\n  },\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are\n   * placed to group them together so we know when to apply their initial value.\n   *\n   * @method newCycle\n   * @param {Attrimator|AttrimatorMap} attrimators\n   * @chainable\n   * @protected\n   */\n  newCycle: function(attrimators)\n  {\n    this.cycleNext++;\n\n    if ( attrimators instanceof AttrimatorMap )\n    {\n      this.cycleNext = attrimators.applyCycle( this.cycleNext );\n    }\n    else if ( attrimators instanceof Attrimator )\n    {\n      attrimators.cycle = this.cycleNext;\n    }\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all attrimators with the\n   * same cycle identifier and applying their initial state.\n   *\n   * @method applyCurrentCycle\n   * @chainable\n   * @protected\n   */\n  applyCurrentCycle: function()\n  {\n    var cycle = this.cycleCurrent;\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      if ( attrimator.cycle === cycle )\n      {\n        this.updated[ attr ] = (attrimator.startCycle( this.frame ) !== false) || this.updated[ attr ];\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Ends the current cycle which calls any listening functions.\n   *\n   * @method endCurrentCycle\n   * @chainable\n   * @protected\n   */\n  endCurrentCycle: function()\n  {\n    if ( this.cycleCurrent > this.cycleEnded )\n    {\n      this.cycleEnded = this.cycleCurrent;\n      this.trigger( 'cycleEnd:' + this.cycleCurrent, this.cycleCurrent );\n    }\n  },\n\n  /**\n   * Returns the attribute descriptor given the name of the attribute.\n   *\n   * @method getAttribute\n   * @param  {String} attr\n   * @return {Object}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n\n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   *\n   * @method restore\n   * @chainable\n   */\n  restore: function()\n  {\n    return this;\n  },\n\n  /**\n   * Applies the initial state of recently added attrimators immediately.\n   *\n   * @method applyInitialState\n   * @chainable\n   */\n  applyInitialState: function()\n  {\n    var currentTime = now();\n\n    this.preupdate( currentTime );\n    this.update( currentTime );\n    this.apply();\n\n    return this;\n  },\n\n  /**\n   * A method thats invoked along with all other animators before updates are\n   * called. This is used to make any necessary preparations before the animator\n   * is updated.\n   *\n   * @method preupdate\n   * @param {Number} now\n   * @chainable\n   */\n  preupdate: function(now)\n  {\n    // If there are attribute placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value &\n    // relative values are injected from the animator into the attribute.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      for (var i = 0; i < aa.length; i++)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        if ( attr in this.subject )\n        {\n          this.frame[ attr ] = this.subject[ attr ];\n        }\n        else\n        {\n          this.setDefault( attr );\n        }\n\n        attrimator.start( now, this );\n      }\n\n      aa.length = 0;\n    }\n\n    this.trigger('preupdate');\n\n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this\n   * Animator if there's no value there.\n   *\n   * @method setDefault\n   * @param {String} attr\n   * @protected\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n\n  /**\n   * Updates all attrimators in this animator with the given time.\n   *\n   * @method update\n   * @param {Number} now\n   * @chainable\n   */\n  update: function(now)\n  {\n    this.wasFinished = this.finished;\n    this.finished = true;\n\n    var attrimators = this.attrimators.values;\n    var minCycle = this.cycleNext;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      this.updated[ attr ] = attrimator.setTime( now, this.frame );\n\n      this.finished = this.finished && attrimator.isFinished();\n\n      minCycle = Math.min( minCycle, attrimator.cycle );\n    }\n\n    if ( this.cycleCurrent < minCycle )\n    {\n      while ( this.cycleCurrent < minCycle )\n      {\n        this.endCurrentCycle();\n        this.cycleCurrent++;\n      }\n\n      this.cycleCurrent = minCycle;\n      this.applyCurrentCycle();\n      this.trigger( 'cycleStart:' + this.cycleCurrent, this.cycleCurrent );\n    }\n\n    if ( !this.wasFinished && this.finished )\n    {\n      this.endCurrentCycle();\n    }\n\n    this.trigger('update');\n\n    return this;\n  },\n\n  /**\n   * Places the attribute animator in this animator replacing any existing\n   * animator for the same attribute. The next time the animator is updated the\n   * attribute animator will be started. The previous (if any) attrimator is\n   * returned.\n   *\n   * @method placeAttrimator\n   * @param {Attrimator} attrimator\n   * @return {Attrimator}\n   */\n  placeAttrimator: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n    var existing = this.attrimators.get( attr );\n\n    this.attrimators.put( attr, attrimator );\n    this.attrimatorsAdded.push( attrimator );\n\n    this.finished = false;\n\n    return existing;\n  },\n\n  /**\n   * Applies all updated attributes to the subject. This method is invoked with\n   * all of the other animators at the end of the animation cycle.\n   *\n   * @method apply\n   * @chainable\n   */\n  apply: function()\n  {\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ];\n        this.updated[ attr ] = false;\n      }\n    }\n\n    this.trigger('apply');\n\n    this.trimAttrimators();\n\n    return this;\n  },\n\n  /**\n   * Removes any finished attrimators and places any queued attrimators. If the\n   * animator previously wasn't finished but now is the 'finished' event will\n   * be triggered.\n   *\n   * @method trimAttrimators\n   * @chainable\n   * @protected\n   */\n  trimAttrimators: function()\n  {\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( attrimator.isFinished() )\n      {\n        if ( attrimator.next )\n        {\n          this.placeAttrimator( attrimator.next );\n        }\n        else\n        {\n          this.attrimators.removeAt( i );\n        }\n      }\n    }\n\n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the current value for the given attribute (or undefined if the\n   * attribute is not or has not animated).\n   *\n   * @method value\n   * @param {String} attr\n   * @return {Any}\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there\n   * already.\n   *\n   * @method activate\n   * @chainable\n   */\n  activate: function()\n  {\n    activateAnimator( this );\n\n    return this;\n  },\n\n  /**\n   * A method that is invoked when an animator is finished and is being removed\n   * from the list of currently animating Animators.\n   *\n   * @method deactivate\n   * @chainable\n   */\n  deactivate: function()\n  {\n    this.trigger('deactivate', this);\n\n    return this;\n  },\n\n  /**\n   * A method that can be invoked to destroy an animator - removing any\n   * relationship between the subject and animator. The next time an animator is\n   * generated for the subject a new animator will be created.\n   *\n   * @method destroy\n   * @chainable\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n\n    this.trigger('destroyed');\n\n    return this;\n  },\n\n  /**\n   * Adds a spring to this animator replacing any existing attrimator for the\n   * same attribute. A spring object can be given, an instance of anim8.Spring,\n   * or a name of a saved Spring. The spring added to the animator is returned.\n   *\n   * @method spring\n   * @param {Spring|String|Object} spring\n   * @return {Spring}\n   */\n  spring: function(spring)\n  {\n    var spring = $spring( spring );\n\n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.newCycle( spring );\n    this.placeAttrimator( spring );\n\n    this.activate();\n\n    return spring;\n  },\n\n  /**\n   * Plays an animation. Attributes in the animation that are currently being\n   * animated will be stopped and replaced with the new attrimators. If `all` is\n   * true then any attrimators animating not specified in the given animation\n   * will be stopped.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method play\n   * @param {Animation|String|Object} animation\n   * @param {String|Object} [options]\n   * @param {Boolean} [all=false]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  play: function(animation, options, all, cache)\n  {\n    var attrimatorMap = $attrimatorsFor( animation, options, cache );\n\n    this.newCycle( attrimatorMap );\n    this.playAttrimators( attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Plays a map of attrimators. Attributes in the attrimator map that are\n   * currently being animated will be stopped and replaced with the new\n   * attrimators. If \"all\" is true then any attrimators animating not specified\n   * in the given attrimator map will be stopped. This method will not activate\n   * the Animator, that has to be done manually.\n   *\n   * @method playAttrimators\n   * @param {AttrimatorMap} animatorMap\n   * @param {Boolean} [all]\n   * @chainable\n   * @protected\n   */\n  playAttrimators: function(attrimatorMap, all)\n  {\n    if ( all )\n    {\n      this.finishNotPresent( attrimatorMap, 0 );\n    }\n\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      this.placeAttrimator( attrimators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Queues an animation. The attrimators generated from the given animation\n   * will be started at the same time - as soon as all finite attrimators for\n   * the same attributes are finished. Any infinite attrimators will be\n   * automatically stopped when all queued attrimators are set to start.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method queue\n   * @param {Animation|String|Object} animation\n   * @param {String|Object} [options]\n   * @param {Boolean} [cache]\n   * @chainable\n   */\n  queue: function(animation, options, cache)\n  {\n    var attrimatorMap = $attrimatorsFor( animation, options, cache );\n\n    this.newCycle( attrimatorMap );\n    this.queueAttrimators( attrimatorMap );\n\n    return this.activate();\n  },\n\n  /**\n   * Queues a map of attrimators. The map of attrimators will be started at the\n   * same time - as soon as all finished attrimators for the same attribute are\n   * finished. Any infinite attrimators will be automatically stopped when all\n   * queued attrimators are set to start.\n   *\n   * @method queueAttrimators\n   * @param {AttrimatorMap} attrimatorMap\n   * @chainable\n   * @protected\n   */\n  queueAttrimators: function(attrimatorMap)\n  {\n    this.attrimators.queueMap( attrimatorMap, this.placeAttrimator, this );\n\n    return this;\n  },\n\n  /**\n   * Transitions from the currently playing attrimators into the beginning of a\n   * new animation. Several parameters can be specified in the transition object\n   * which determine how the transition is made. If \"all\" is true then any\n   * attrimators animating not specified in the given animation will be stopped.\n   *\n   * time: the total time to take to transition into a new animation.\n   * outro: time to look into the future for the current attrimator to curve to.\n   * intro: time to look into the future for the next attrimator to curve into.\n   * lookup: time to look into the future to calculate velocity which is used\n   *   for negative intros and maintaing consistent exit & entrance velocity.\n   * granularity: when greater than 2 it activates smooth transitions where the\n   *    velocity of the new & old attrimators is maintained over the transition.\n   *\n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method transition\n   * @param {String|Array|Object} transition\n   * @param {String|Object|Animation} animation\n   * @param {Object} [options]\n   * @param {Boolean} [all]\n   * @param {Boolean} [cache]\n   * @chainable\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = $transition( transition );\n    var attrimatorMap = $attrimatorsFor( animation, options, cache );\n\n    this.newCycle( attrimatorMap );\n    this.transitionAttrimators( transition, attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing attrimators into the beginning of a\n   * new animation. Several parameters can be specified in the transition object\n   * which determine how the transition is made. If \"all\" is true then any\n   * attrimators animating not specified in the given attrimator map will be\n   * stopped.\n   *\n   * time: the total time to take to transition into a new animation.\n   * outro: time to look into the future for the current attrimator to curve to.\n   * intro: time to look into the future for the next attrimator to curve into.\n   * lookup: time to look into the future to calculate velocity which is used\n   *   for negative intros and maintaing consistent exit & entrance velocity.\n   * granularity: when greater than 2 it activates smooth transitions where the\n   *    velocity of the new & old attrimators is maintained over the transition.\n   *\n   * @method transitionAttrimators\n   * @param {Object} transition\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {Boolean} [all]\n   * @chainable\n   * @protected\n   */\n  transitionAttrimators: function(transition, attrimatorMap, all)\n  {\n    // TRANSITIONING:\n    // If the animator doesn't have an attrimator for the given attribute just add the attrimator adding the total delay\n    // If the animator has an attrimator currently...\n    //   If the current attrimator or new attrimator don't have values at the desired times...\n    //      Stop the current attrimator after the total delay (adding the delay of the new attrimator as well)\n    //      Queue the new attrimator\n    //   Else\n    //      Create a path using the methods detailed above\n    // If all is true and there's an attrimator left on the animator that isn't being transitioned, stop it after the total delay.\n\n    // CREATING A TRANSITION PATH:\n    // If intro & outro are 0, use Tween\n    // If intro is 0, use Quadratic Path between current value, outro point, and first point on new path.\n    // If outro is 0, use Quadratic Path between current value, first point on new path, and intro point.\n    // If intro & outro are not 0, use Cubic Path between current value, outro point, first point on new path, and intro point.\n    // If granularity is given > 1 then compile the path, compute intro & outro velocities, and compute deltas for new\n    //    compiled path based on interpolated velocity over the path (knowing it's length and transition time)\n\n    var current = this.attrimators;\n    var attrimators = attrimatorMap.values;\n\n    // If transition all attributes,\n    if ( all )\n    {\n      this.finishNotPresent( attrimatorMap, transition.time );\n    }\n\n    // Only transition if we need to\n    if ( current.hasOverlap( attrimatorMap ) )\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var next = attrimators[ i ];\n        var attr = next.attribute;\n        var curr = current.get( attr );\n\n        if ( curr && isDefined( this.frame[ attr ] ) )\n        {\n          var attribute = this.getAttribute( attr );\n          var calc = attribute.calculator;\n\n          var p2 = next.valueAt( 0, calc.create() );\n\n          if ( p2 !== false )\n          {\n            var transitionTime = transition.time;\n            var p0 = calc.clone( this.frame[ attr ] );\n            var p1 = transition.outro ? curr.valueAt( curr.getElapsed() + transition.outro, calc.create() ) : false;\n            var p3 = transition.intro ? next.valueAt( transition.intro, calc.create() ) : false;\n            var path = null;\n\n            // If the intro is negative we can look into the past by looking a little bit into\n            // the future and assume the past is going in the same direction (only the opposite).\n            if ( p3 !== false && transition.intro < 0 && transition.lookup > 0 )\n            {\n              var pastLookahead = next.valueAt( transition.lookup, calc.create() );\n              var pastVelocity = calc.sub( pastLookahead, p2 );\n\n              if ( pastVelocity !== false )\n              {\n                var pastNegativeVelocity = calc.scale( pastVelocity, transition.intro / transition.lookup );\n                var past = calc.add( pastNegativeVelocity, p2 );\n\n                p3 = p2;\n                p2 = past;\n              }\n            }\n\n            // Build a path with as many of the points as possible.\n            if ( p1 === false && p3 === false )\n            {\n              path = new Tween( attr, calc, p0, p2 );\n            }\n            else if ( p1 === false )\n            {\n              path = new PathQuadratic( attr, calc, p0, p2, p3 );\n            }\n            else if ( p3 === false )\n            {\n              path = new PathQuadratic( attr, calc, p0, p1, p2 );\n            }\n            else\n            {\n              path = new PathCubic( attr, calc, p0, p1, p2, p3 );\n            }\n\n            // If granularity is specified we will try to make the transition\n            // smooth by maintaining exit (outro) velocity from the current attrimator\n            // and interpolating it to the entrance (intro) velocity for the\n            // attrimator we're transitioning into.\n            if ( transition.granularity > 2 && transition.lookup > 0 )\n            {\n              var outTime  = p1 === false ? curr.getElapsed() : curr.getElapsed() + transition.outro;\n              var outPoint = p1 === false ? p0 : p1;\n              var outNext  = curr.valueAt( outTime + transition.lookup, calc.create() );\n\n              var inTime   = p3 === false ? 0 : transition.intro;\n              var inPoint  = p3 === false ? p2 : p3;\n              var inNext   = next.valueAt( inTime + transition.lookup, calc.create() );\n\n              // We can only proceed if we have reference points to calculate\n              // exit & entrance velocity.\n              if ( outNext !== false && inNext !== false )\n              {\n                var outVelocity  = calc.sub( calc.clone( outNext ), outPoint );\n                var outPerMillis = calc.length( outVelocity ) / transition.lookup;\n\n                var inVelocity   = calc.sub( calc.clone( inNext ), inPoint );\n                var inPerMillis  = calc.length( inVelocity ) / transition.lookup;\n\n                var compiled = new PathCompiled( attr, path, transition.granularity );\n                var points = compiled.points;\n                var lastPoint = points.length - 1;\n                var totalDistance = 0;\n                var distances = [];\n\n                for (var k = 0; k < lastPoint; k++)\n                {\n                  distances[ k ] = totalDistance;\n                  totalDistance += calc.distance( points[ k ], points[ k + 1 ] );\n                }\n                distances[ lastPoint ] = totalDistance;\n\n                if ( !isNaN( totalDistance ) )\n                {\n                  var requiredTime = 2.0 * totalDistance / (outPerMillis + inPerMillis);\n                  var acceleration = 0.5 * (inPerMillis - outPerMillis) / requiredTime;\n                  var timeDelta = requiredTime / lastPoint;\n                  var deltas = [];\n\n                  for (var k = 0; k < lastPoint; k++)\n                  {\n                    var time = k * timeDelta;\n                    var position = outPerMillis * time + acceleration * time * time;\n\n                    deltas[ k ] = position / totalDistance;\n                  }\n                  deltas[ lastPoint ] = 1.0;\n\n                  path = new PathDelta( attr, calc, points, deltas );\n                  transitionTime = requiredTime;\n                }\n              }\n            }\n\n            var transitionEvent = new Event( attr, path, transitionTime, transition.easing, 0, 0, 0, 1 );\n\n            transitionEvent.next = next;\n            transitionEvent.cycle = next.cycle;\n\n            next.offset = transition.intro;\n\n            this.placeAttrimator( transitionEvent );\n          }\n          else\n          {\n            curr.stopIn( transition.time + next.delay );\n            curr.queue( next );\n            next.delay = 0;\n          }\n        }\n        else\n        {\n          next.delay += transition.time;\n\n          this.placeAttrimator( next );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        this.placeAttrimator( attrimators[ i ] );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Finishes any attrimators on this animator that are not present in the given\n   * map of attrimators. Optionally a delay in stopping them can be given.\n   *\n   * @method finishNotPresent\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {Number} [delay=0]\n   * @chainable\n   * @protected\n   */\n  finishNotPresent: function(attrimatorMap, delay)\n  {\n    var attrimators = this.attrimators.values;\n    var stopIn = delay || 0;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( !attrimatorMap.has( attrimator.attribute ) )\n      {\n        attrimator.stopIn( stopIn );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method tweenTo\n   * @param {String} attr\n   * @param {T} target\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenTo: function(attr, target, options, cache)\n  {\n    var options   = $options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new Tween( attr, attribute.calculator, computed.current, end );\n    var event     = Event.fromOptions( attr, path, options );\n\n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n\n  /**\n   * Tweens multiple attributes to target values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method tweenManyTo\n   * @param {Object} targets\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenManyTo: function(targets, options, cache)\n  {\n    var options = $options( options, cache );\n\n    this.newCycle();\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new Tween( attr, attribute.calculator, computed.current, end );\n      var event     = Event.fromOptions( attr, path, options );\n\n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n\n  /**\n   * Tweens a single attribute from a starting value to the current value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method tweenFrom\n   * @param {String} attr\n   * @param {T} starting\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenFrom: function(attr, starting, options, cache)\n  {\n    var options   = $options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starting );\n    var path      = new Tween( attr, attribute.calculator, start, computed.current );\n    var event     = Event.fromOptions( attr, path, options );\n\n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n\n  /**\n   * Tweens multiple attributes from starting values to the current values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method tweenManyFrom\n   * @param {Object} startings\n   * @param {String|Array|Object} [options]\n   * @chainable\n   */\n  tweenManyFrom: function(startings, options)\n  {\n    var options = $options( options );\n\n    this.newCycle();\n\n    for ( var attr in startings )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( startings[ attr ] );\n      var path      = new Tween( attr, attribute.calculator, start, computed.current );\n      var event     = Event.fromOptions( attr, path, options );\n\n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n\n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method tween\n   * @param {String} attr\n   * @param {T} starts\n   * @param {T} ends\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tween: function(attr, starts, ends, options, cache)\n  {\n    var options   = $options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new Tween( attr, attribute.calculator, start, end );\n    var event     = Event.fromOptions( attr, path, options );\n\n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n\n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method tweenMany\n   * @param {Object} starts\n   * @param {Object} ends\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenMany: function(starts, ends, options, cache)\n  {\n    var options = $options( options, cache );\n\n    this.newCycle();\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new Tween( attr, attribute.calculator, start, end );\n      var event     = Event.fromOptions( attr, path, options );\n\n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n\n  /**\n   * Moves an attribute relative to its current value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method move\n   * @param {String} attr\n   * @param {T} amount\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  move: function(attr, amount, options, cache)\n  {\n    var options   = $options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var relative  = attribute.parse( amount );\n    var start     = computed.current;\n    var end       = isComputed( relative ) ? relative : computed.relative( relative );\n    var path      = new Tween( attr, attribute.calculator, start, end );\n    var event     = Event.fromOptions( attr, path, options );\n\n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n\n  /**\n   * Moves multiple attribute relative to their current value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method moveMany\n   * @param {Object} amounts\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  moveMany: function(amounts, options, cache)\n  {\n    var options = $options( options, cache );\n\n    this.newCycle();\n\n    for ( var attr in amounts )\n    {\n      var attribute = this.getAttribute( attr );\n      var relative  = attribute.parse( amounts[ attr ] );\n      var start     = computed.current;\n      var end       = isComputed( relative ) ? relative : computed.relative( relative );\n      var path      = new Tween( attr, attribute.calculator, start, end );\n      var event     = Event.fromOptions( attr, path, options );\n\n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n\n  /**\n   * Returns a function that returns the current value for the given attribute\n   * when invoked. The returned function can be given as values for paths &\n   * springs that are evaluated every frame.\n   *\n   * @method ref\n   * @param {String} attr\n   * @return {Function}\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n\n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n\n      request[ attr ] = true;\n\n      var current = animator.get( request );\n\n      if ( isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n\n      return attribute.defaultValue;\n    };\n  },\n\n  /**\n   * Follows the attribute along the given path definition.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method follow\n   * @param {String} attr\n   * @param {Path|Object|String} path\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  follow: function(attr, path, options, cache)\n  {\n    var options = $options( options, cache );\n    var path    = $path( path );\n    var event   = Event.fromOptions( attr, path, options );\n\n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n\n  /**\n   * Helper method that iterates over given attributes. If callback is specified\n   * it is invoked for each attrimator in this animator for the given\n   * attributes. If no callback is given an array of anim8.Attrimators is\n   * returned for each attrimator in this animator for the given attributes.\n   *\n   * @method attrimatorsFor\n   * @param {String|Array|Object} attributes\n   * @param {Function} callback\n   * @return {this|Array}\n   */\n  attrimatorsFor: function(attributes, callback)\n  {\n    var attrimatorMap = this.attrimators;\n    var attributes = toArray( coalesce( attributes, attrimatorMap.keys ), ' ' );\n    var resulting = !isFunction( callback );\n    var results = [];\n\n    for (var i = attributes.length - 1; i >= 0; i--)\n    {\n      var attr = attributes[ i ];\n      var attrimator = attrimatorMap.get( attr );\n\n      if ( attrimator )\n      {\n        if ( resulting )\n        {\n          results.push( attrimator );\n        }\n        else\n        {\n          callback.call( this, attrimator, attr );\n        }\n      }\n    }\n\n    return resulting ? results : this;\n  },\n\n  /**\n   * Stops all attributes for the specified attributes. Attribute names can be\n   * given as an array or a space separated string. If no attributes are given\n   * all attributes are assumed.\n   *\n   * @method stop\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  stop: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator, attr)\n    {\n      this.attrimators.remove( attr );\n    });\n  },\n\n  /**\n   * Ends all attributes for the specified attributes. If attributes are queued\n   * the last value of the last attribute is applied to this Animator before\n   * being completely removed. Attribute names can be given as an array or a\n   * space separated string. If no attributes are given all attributes are\n   * assumed.\n   *\n   * @method end\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  end: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      while (attrimator.next)\n      {\n        attrimator = attrimator.next;\n      }\n\n      attrimator.finish( this.frame );\n    });\n  },\n\n  /**\n   * Finishes all current attrimators for the specified attributes. Attribute\n   * names can be given as an array or a space separated string. If no\n   * attributes are given all attributes are assumed.\n   *\n   * @method finish\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  finish: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.finish( this.frame );\n    });\n  },\n\n  /**\n   * Calls nopeat on all current attrimators for the specified attributes.\n   * Attribute names can be given as an array or a space separated string. If\n   * no attributes are given all attributes are assumed.\n   *\n   * **See:** {{#crossLink \"Attrimator/nopeat:method\"}}Attrimator.nopeat{{/crossLink}}\n   *\n   * @method nopeat\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  nopeat: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.nopeat();\n    });\n  },\n\n  /**\n   * Pauses all current attrimators for the specified attributes. Attribute\n   * names can be given as an array or a space separated string. If no\n   * attributes are given all attributes are assumed.\n   *\n   * @method pause\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  pause: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.pause();\n    });\n  },\n\n  /**\n   * Resumes all current attrimators for the specified attributes. Attribute\n   * names can be given as an array or a space separated string. If no\n   * attributes are given all attributes are assumed.\n   *\n   * @method resume\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  resume: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.resume();\n    });\n  },\n\n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @method set\n   * @param {Object} attributes\n   * @chainable\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n      this.updated[ attr ] = true;\n    }\n\n    this.apply();\n\n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attributes.\n   * Unsetting involves removing all attrimators and the current value in the\n   * frame,\n   *\n   * @method unset\n   * @param {String|Array|Object} attributes\n   * @chainable\n   */\n  unset: function(attributes)\n  {\n    var attributes = toArray( coalesce( attributes, this.frame ), ' ' );\n\n    for (var i = attributes.length - 1; i >= 0; i--)\n    {\n      var attr = attributes[ i ];\n\n      this.attrimators.remove( attr );\n\n      delete this.frame[ attr ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Gets the current attribute values for all attributes specified. The\n   * argument must be an object where the key is the name of an attribute.\n   *\n   * @method get\n   * @param {Object} attributes\n   * @return {Object}\n   */\n  get: function(attributes)\n  {\n    var out = {};\n\n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n\n    return out;\n  },\n\n  /**\n   * Returns the amount of finite time remaining before the animator is done\n   * animating. Attrimators that don't have a known end time are not included.\n   * If there are no attrimators with end times then zero is returned.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    return this.attrimators.timeRemaining();\n  },\n\n  /**\n   * Returns true if there are any attrimators on this Animator.\n   *\n   * @method hasAttrimators\n   * @return {Boolean}\n   */\n  hasAttrimators: function()\n  {\n    return this.attrimators.size() > 0;\n  },\n\n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @method getSubject\n   * @param {Function} [wrapper]\n   * @return {Any}\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator\n   * if none is given. This is particularly useful for having a function be\n   * called on deferred statements.\n   *\n   * @method invoke\n   * @param {Function} func\n   * @param {Object} [context]\n   * @param {Array} [args]\n   * @chainable\n   */\n  invoke: function(func, context, args)\n  {\n    if ( isFunction( func ) )\n    {\n      func.apply( context || this, args || [] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Defers the method calls following this one to when the given event type\n   * (on or once) and event. To return this animator you need to call undefer()\n   * as many times as you called defer().\n   *\n   * @method defer\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} [callback]\n   * @return {DeferAnimator}\n   */\n  defer: function(eventType, event, callback)\n  {\n    return new DeferAnimator( this, this, eventType, event, callback );\n  },\n\n  /**\n   * Invokes the given callback when the last animation that was\n   * played/queued/transitioned starts.\n   *\n   * @method onCycleStart\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  onCycleStart: function(callback, context)\n  {\n    this.once( 'cycleStart:' + this.cycleNext, callback, context );\n\n    return this;\n  },\n\n  /**\n   * Invokes the given callback when the last animation that was\n   * played/queued/transitioned ends.\n   *\n   * @method onCycleEnd\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  onCycleEnd: function(callback, context)\n  {\n    this.once( 'cycleEnd:' + this.cycleNext, callback, context );\n\n    return this;\n  }\n\n});\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\neventize( Animator.prototype );\n\n\n/**\n * Instantiates an Array of {{#crossLink \"Animator\"}}{{/crossLink}} instances.\n *\n * @param {Array} [input]\n * @class Animators\n * @constructor\n * @extends {Array}\n */\nfunction Animators(input)\n{\n  this.$ = [];\n\n  if ( isArray( input ) )\n  {\n    this.fill( input );\n  }\n}\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nClass.define( Animators,\n{\n\n  /**\n   * Adds an animator to this set of animators.\n   *\n   * @param  {Animator} animator\n   * @chainable\n   */\n  push: function(animator)\n  {\n    this.$.push( animator );\n\n    return this;\n  },\n\n  /**\n   * Returns the number of animators in this set.\n   *\n   * @return {Number}\n   */\n  length: function()\n  {\n    return this.$.length;\n  },\n\n  /**\n   * Returns the animator at the given index.\n   *\n   * @param  {Number} index\n   * @return {Animator}\n   */\n  at: function(index)\n  {\n    return this.$[ index ];\n  },\n\n  /**\n   * Invokes a callback for each element in the array.\n   *\n   * @method each\n   * @param {Function} iterator\n   * @param {Object} context\n   * @chainable\n   */\n  each: function(iterator, context)\n  {\n    var array = this.$;\n\n    for (var i = 0; i < array.length; i++)\n    {\n      if ( iterator.call( context || array[i], array[i], i ) === false )\n      {\n        break;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @method fill\n   * @param {Array} animators\n   * @chainable\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if a true value is\n   * returned  that element is removed from the array.\n   *\n   * @method filter\n   * @param {Function} filterer\n   * @chainable\n   */\n  filter: function(filterer)\n  {\n    var array = this.$;\n    var alive = 0;\n\n    for (var i = 0; i < array.length; i++)\n    {\n      var remove = filterer( array[i] );\n\n      if ( !remove )\n      {\n        array[alive++] = array[i];\n      }\n    }\n\n    array.length = alive;\n\n    return this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a\n   * wrapper function before it's returned.\n   *\n   * @method getSubjects\n   * @param {Function} [wrapper]\n   * @return {Any}\n   */\n  getSubjects: function(wrapper)\n  {\n    var array = this.$;\n    var subjects = [];\n\n    for (var i = 0; i < array.length; i++)\n    {\n      subjects.push( array[i].subject );\n    }\n\n    if ( isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n\n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   *\n   * @method first\n   * @return {Animator}\n   */\n  first: function()\n  {\n    return this.$[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   *\n   * @method reverse\n   * @chainable\n   */\n  reverse: function()\n  {\n    var array = this.$;\n    var last = array.length - 1;\n    var mid = Math.floor( array.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = array[ i ];\n      var e1 = array[ last - i ];\n\n      array[ i ] = e1;\n      array[ last - i ] = e0;\n    }\n\n    return this;\n  },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   *\n   * @method activate\n   * @chainable\n   */\n  activate: function()\n  {\n    var array = this.$;\n\n    for (var i = 0; i < array.length; i++)\n    {\n      pushAnimator( array[i] );\n    }\n\n    activate();\n\n    return this;\n  },\n\n  /**\n   * Creates a sequence of events separated by a delay.\n   *\n   * @method sequence\n   * @param {String|Number} delay\n   * @param {String|Array|Function} easing\n   * @return {Sequence}\n   */\n  sequence: function(delay, easing)\n  {\n    return new Sequence( this, delay, easing );\n  },\n\n  /**\n   * Returns the maximum time remaining out of all Animators in the array.\n   *\n   * **See:** {{#crossLink \"Animating/timeRemaining:method\"}}{{/crossLink}}\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    var array = this.$;\n    var maxRemaining = 0;\n\n    for (var i = 0; i < array.length; i++)\n    {\n      maxRemaining = Math.max( maxRemaining, array[ i ].timeRemaining() );\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/preupdate:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method preupdate\n   * @chainable\n   */\n  preupdate: function(now, max)\n  {\n    var array = this.$;\n    var length = max || array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n      array[ i ].preupdate( now );\n    }\n\n    return this;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/update:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method update\n   * @chainable\n   */\n  update: function(now, max)\n  {\n    var array = this.$;\n    var length = max || array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n      array[ i ].update( now );\n    }\n\n    return this;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/apply:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method apply\n   * @chainable\n   */\n  apply: function(max)\n  {\n    var array = this.$;\n    var length = max || array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n      array[ i ].apply();\n    }\n\n    return this;\n  },\n\n  /**\n   * Handles an animator if it's finished, and returns false if the animator can\n   * be removed from the set of animators.\n   *\n   * @method handleFinished\n   * @param {Animator} animator\n   * @return {Boolean}\n   */\n  handleFinished: function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n\n    return animator.finished;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/restore:method\"}}{{/crossLink}} on each\n   * animator in the array and returns this.\n   *\n   * @method restore\n   * @chainable\n   */\n  restore               : delegate( 'restore', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/placeAttrimator:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method placeAttrimator\n   * @chainable\n   */\n  placeAttrimator       : delegate( 'placeAttrimator', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method applyInitialState\n   * @chainable\n   */\n  applyInitialState     : delegate( 'applyInitialState', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/trimAttrimators:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method trimAttrimators\n   * @chainable\n   */\n  trimAttrimators       : delegate( 'trimAttrimators', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/deactivate:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method deactivate\n   * @chainable\n   */\n  deactivate            : delegate( 'deactivate', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/destroy:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method destroy\n   * @chainable\n   */\n  destroy               : delegate( 'destroy', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/spring:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method spring\n   * @chainable\n   */\n  spring                : delegate( 'spring', delegate.RETURN_RESULTS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/play:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method play\n   * @chainable\n   */\n  play                  : delegate( 'play', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/playAttrimators:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method playAttrimators\n   * @chainable\n   * @protected\n   */\n  playAttrimators       : delegate( 'playAttrimators', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/queue:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method queue\n   * @chainable\n   */\n  queue                 : delegate( 'queue', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/queueAttrimators:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method queueAttrimators\n   * @chainable\n   * @protected\n   */\n  queueAttrimators      : delegate( 'queueAttrimators', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/transition:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method transition\n   * @chainable\n   */\n  transition            : delegate( 'transition', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/transitionAttrimators:method\"}}{{/crossLink}}\n   * on each animator in the array and returns this.\n   *\n   * @method transitionAttrimators\n   * @chainable\n   * @protected\n   */\n  transitionAttrimators : delegate( 'transitionAttrimators', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tween:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method tween\n   * @chainable\n   */\n  tween                 : delegate( 'tween', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenTo:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method tweenTo\n   * @chainable\n   */\n  tweenTo               : delegate( 'tweenTo', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenFrom:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method tweenFrom\n   * @chainable\n   */\n  tweenFrom             : delegate( 'tweenFrom', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenMany:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method tweenMany\n   * @chainable\n   */\n  tweenMany             : delegate( 'tweenMany', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenManyTo:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method tweenManyTo\n   * @chainable\n   */\n  tweenManyTo           : delegate( 'tweenManyTo', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenManyFrom:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method tweenManyFrom\n   * @chainable\n   */\n  tweenManyFrom         : delegate( 'tweenManyFrom', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/move:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method move\n   * @chainable\n   */\n  move                  : delegate( 'move', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/moveMany:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method moveMany\n   * @chainable\n   */\n  moveMany              : delegate( 'moveMany', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/follow:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method follow\n   * @chainable\n   */\n  follow                : delegate( 'follow', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/attrimatorsFor:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method attrimatorsFor\n   * @chainable\n   */\n  attrimatorsFor        : delegate( 'attrimatorsFor', delegate.RETURN_RESULTS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/stop:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method stop\n   * @chainable\n   */\n  stop                  : delegate( 'stop', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/end:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method end\n   * @chainable\n   */\n  end                   : delegate( 'end', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/finish:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method finish\n   * @chainable\n   */\n  finish                : delegate( 'finish', delegate.RETURN_THIS ),\n\n/**\n   * Calls {{#crossLink \"Animator/nopeat:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method nopeat\n   * @chainable\n   */\n  nopeat                : delegate( 'nopeat', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/pause:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method pause\n   * @chainable\n   */\n  pause                 : delegate( 'pause', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/resume:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method resume\n   * @chainable\n   */\n  resume                : delegate( 'resume', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/set:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method set\n   * @chainable\n   */\n  set                   : delegate( 'set', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/unset:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method unset\n   * @chainable\n   */\n  unset                 : delegate( 'unset', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/get:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method get\n   * @chainable\n   */\n  get                   : delegate( 'get', delegate.RETURN_FIRST ),\n\n  /**\n   * Calls {{#crossLink \"Animator/hasAttrimators:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method hasAttrimators\n   * @chainable\n   */\n  hasAttrimators        : delegate( 'hasAttrimators', delegate.RETURN_TRUE ),\n\n  /**\n   * Calls {{#crossLink \"Animator/invoke:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method invoke\n   * @chainable\n   */\n  invoke                : delegate( 'invoke', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/onCycleStart:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method onCycleStart\n   * @chainable\n   */\n  onCycleStart          : delegate( 'onCycleStart', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/onCycleEnd:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method onCycleEnd\n   * @chainable\n   */\n  onCycleEnd            : delegate( 'onCycleEnd', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/on:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method on\n   * @chainable\n   */\n  on                    : delegate( 'on', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/once:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method once\n   * @chainable\n   */\n  once                  : delegate( 'once', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/off:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method off\n   * @chainable\n   */\n  off                   : delegate( 'off', delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/trigger:method\"}}{{/crossLink}} on\n   * each animator in the array and returns this.\n   *\n   * @method trigger\n   * @chainable\n   */\n  trigger               : delegate( 'trigger', delegate.RETURN_THIS )\n\n});\n\n\n/**\n * Animates a single attribute over any period of time.\n *\n * @class Attrimator\n * @constructor\n */\nfunction Attrimator()\n{\n\n}\n\nClass.define( Attrimator,\n{\n\n  /**\n   * Resets this attrimator for the given attribute created by the given builder.\n   *\n   * @method reset\n   * @param {String} attribute\n   * @param {Builder} builder\n   * @param {Attrimator} [next]\n   */\n  reset: function(attribute, builder, next)\n  {\n    /**\n     * The name of the attribute this attrimator is animating.\n     *\n     * @property {String} attribute\n     */\n    this.attribute = attribute;\n\n    /**\n     * The builder that created this attrimator (if any).\n     *\n     * @property {Builder} builder\n     */\n    this.builder = builder;\n\n    /**\n     * The next attrimator to be played once this one has finished.\n     *\n     * @property {Attrimator} next\n     */\n    this.next = next;\n\n    /**\n     * The time the attrimator was started by the animator.\n     *\n     * @property {Number} startTime\n     */\n    this.startTime = 0;\n\n    /**\n     * The time the attrimator was last paused.\n     *\n     * @property {Number} pauseTime\n     */\n    this.pauseTime = 0;\n\n    /**\n     * The amount of time that has elapsed since the attrimator started.\n     *\n     * @property {Number} elapsed\n     */\n    this.elapsed = 0;\n\n    /**\n     * The time this attrimator should stop itself after it started in milliseconds.\n     *\n     * @property {Number} stopTime\n     */\n    this.stopTime = Number.POSITIVE_INFINITY;\n\n    /**\n     * Whether or not the attrimator is paused.\n     *\n     * @property {Boolean} paused\n     */\n    this.paused = false;\n\n    /**\n     * The cycle this attrimator belongs to.\n     *\n     * @type {Number} cycle\n     */\n    this.cycle = 0;\n\n    /**\n     * The amount of time in milliseconds this attrimator is delayed since start.\n     *\n     * @property {Number} delay\n     */\n    this.delay = 0;\n\n    /**\n     * The initial elapsed time in milliseconds when the attrimator is started.\n     *\n     * @property {Number} offset\n     */\n    this.offset = 0;\n  },\n\n  /**\n   * Prepares this attrimator for animation on the given subject animator. This\n   * is called as early as possible to establish the start time of the\n   * attrimator so when the user isn't on the page time can be kept accurately.\n   *\n   * @param {Number} now\n   * @param {Animator} animator\n   */\n  prestart: function(now)\n  {\n    if ( this.startTime === 0 )\n    {\n      this.startTime = now - this.offset;\n      this.elapsed = this.offset;\n      this.finished = false;\n      this.prestartNext();\n    }\n  },\n\n  /**\n   * Calls {{#crossLink \"Attrimator/prestart:method\"}}{{/crossLink}} on the next\n   * attrimator if it can be called.\n   *\n   * @method prestartNext\n   */\n  prestartNext: function( overrideNext )\n  {\n    // If there is a next attrimator and this attrimator has been prestarted...\n    if ( this.next && this.startTime !== 0 )\n    {\n      // If override next is specified, clear next's startTime\n      if ( overrideNext )\n      {\n        this.next.startTime = 0;\n      }\n\n      // We can only prestart next if it has no startTime.\n      if ( this.next.startTime === 0 )\n      {\n        var totalTime = this.totalTime();\n\n        // If this attrimator has a finite total amount of time, it's end can be calculated.\n        if ( !isNaN( totalTime ) )\n        {\n          this.next.prestart( this.startTime + totalTime );\n        }\n      }\n    }\n  },\n\n  /**\n   * Prepares this attrimator for animation on the given subject\n   * animator. This is called once in anim8.Animator.preupdate before the first\n   * time this attrimator is updated.\n   *\n   * @method start\n   * @param {Number} now\n   * @param {Animator} animator\n   */\n  start: function(now, animator)\n  {\n    this.prestart( now );\n  },\n\n  /**\n   * Invoked once when a new animation cycle is started on an Animator. If this\n   * attrimator updated the frame true must be returned.\n   *\n   * @method startCycle\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  startCycle: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Updates this attrimator given a time to animate to and the frame to\n   * provide with a new value. This method will return true if the attribute\n   * this is animating has been updated and needs to be applied to the subject.\n   *\n   * @method setTime\n   * @param {Number} now\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  setTime: function(now, frame)\n  {\n    if ( this.paused )\n    {\n      return false;\n    }\n\n    var updated = false;\n    var elapsed = now - this.startTime;\n    var updated = false;\n\n    if ( elapsed > this.stopTime )\n    {\n      updated = this.finish( frame );\n    }\n    else if ( elapsed >= this.delay )\n    {\n      updated = this.update( elapsed, frame );\n    }\n\n    this.elapsed = elapsed;\n\n    return updated;\n  },\n\n  /**\n   * Updates the attrimator given elapsed time in milliseconds, the frame to\n   * apply a value to, and returns whether the frame was updated or not.\n   *\n   * @method update\n   * @param {Number} elapsed\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  update: function(elapsed, frame)\n  {\n    throw 'Attrimator.update not implemented';\n  },\n\n  /**\n   * Returns the amount of time that has elapsed in milliseconds.\n   *\n   * @method getElapsed\n   * @return {Number}\n   */\n  getElapsed: function()\n  {\n    return this.elapsed;\n  },\n\n  /**\n   * Stops this attrimator in the given number of milliseconds.\n   *\n   * @method stopIn\n   * @param {Number} milliseconds\n   * @chainable\n   */\n  stopIn: function(milliseconds)\n  {\n    this.stopTime = this.getElapsed() + milliseconds;\n\n    return this;\n  },\n\n  /**\n   * If this attrimator repeats its animation this method will stop repitition\n   * after the next animation cycle.\n   *\n   * @chainable\n   */\n  nopeat: function()\n  {\n    return this;\n  },\n\n  /**\n   * Returns the value at the given time or returns false if it can't be\n   * calculated.\n   *\n   * @method valueAt\n   * @param {Number} time\n   * @param {Any} out\n   * @return {Any|False}\n   */\n  valueAt: function(time, out)\n  {\n    return false;\n  },\n\n  /**\n   * The total amount of time this attrimator will take in milliseconds. This\n   * may be an infinite number.\n   *\n   * @method totalTime\n   * @return {Number}\n   */\n  totalTime: function()\n  {\n    return this.stopTime;\n  },\n\n  /**\n   * The time remaining before this attrimator and any following will be\n   * finished.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * Clones this attrimator.\n   *\n   * @method clone\n   * @return {Attrimator}\n   */\n  clone: function()\n  {\n    throw 'AttributeAnimator.clone not implemented';\n  },\n\n  /**\n   * Returns whether this attrimator has computed values which need to be\n   * resolved by the subject animator calling prepare on this attrimator.\n   *\n   * @method hasComputed\n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return false;\n  },\n\n  /**\n   * Determines whether this attrimator will run infinitely.\n   *\n   * @method isInfinite\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * Pauses this attrimator if it isn't already paused.\n   *\n   * @method pause\n   * @chainable\n   */\n  pause: function()\n  {\n    if ( !this.paused )\n    {\n      this.pauseTime = now();\n      this.paused = true;\n    }\n\n    return this;\n  },\n\n  /**\n   * Resumes this attrimator if it's paused. This involves resetting the start\n   * time of the attrimator.\n   *\n   * @method resume\n   * @chainable\n   */\n  resume: function()\n  {\n    if ( this.paused )\n    {\n      var totalPausedTime = now() - this.pauseTime;\n      var delay = this;\n\n      while ( delay && delay.startTime !== 0 )\n      {\n        delay.startTime += totalPausedTime;\n        delay = delay.next;\n      }\n\n      this.paused = false;\n    }\n\n    return this;\n  },\n\n  /**\n   * Whether this attrimator is paused.\n   *\n   * @method isPaused\n   * @return {Boolean}\n   */\n  isPaused: function()\n  {\n    return this.paused;\n  },\n\n  /**\n   * Sets the final state of the attrimator to the frame if one exists and\n   * returns true, otherwise false is returned and frame remains unchanged.\n   *\n   * @method finish\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Whether this attrimator is finished.\n   *\n   * @method isFinished\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return false;\n  },\n\n  /**\n   * Returns the builder that created this attrimator (if any).\n   *\n   * @method getBuilder\n   * @return {Builder}\n   */\n  getBuilder: function()\n  {\n    return this.builder;\n  },\n\n  /**\n   * Places the given attrimator on the end of the chain of attrimators starting\n   * with this attrimator.\n   *\n   * @method queue\n   * @param {Attrimator} next\n   * @chainable\n   */\n  queue: function(next)\n  {\n    if ( this.next )\n    {\n      this.next.queue( next );\n    }\n    else\n    {\n      this.next = next;\n      this.prestartNext();\n    }\n\n    return this;\n  },\n\n  /**\n   * Parses a value with the calculator given a default value to fallback on.\n   *\n   * @method parseValue\n   * @param {Animator} animator\n   * @param {T|Function|True} value\n   * @param {T} defaultValue\n   * @return {T|Function}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( isComputed( parsed ) )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  }\n\n});\n\n\n/**\n * A map of attrimators by their attribute name.\n *\n * @class AttrimatorMap\n * @constructor\n * @extends FastMap\n */\nfunction AttrimatorMap()\n{\n  this.reset();\n}\n\nClass.extend( AttrimatorMap, FastMap,\n{\n\n  /**\n   * Sets the group identifier for attrimators in this map. If force is\n   * specified it will overwrite any existing group identifier on attrimators.\n   * If deep is true, then all next attrimators also could have their group\n   * identifiers set.\n   *\n   * @method setGroup\n   * @param {Number} groupId\n   * @param {Boolean} [force=false]\n   * @param {Boolean} [deep=false]\n   */\n  setGroup: function(groupId, force, deep)\n  {\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[ i ];\n\n      do\n      {\n        if ( !attrimator.groupId || force )\n        {\n          attrimator.groupId = groupId;\n        }\n\n        attrimator = attrimator.next;\n\n      } while ( deep && attrimator );\n    }\n  },\n\n  /**\n   * Queues the attrimator on this map. If the attribute is already on this map\n   * this is placed on the end of the Attrimator chain, otherwise the attrimator\n   * is added to the map. If there is an attrimator already on the map it's\n   * returned.\n   *\n   * @method queue\n   * @param {Attrimator} attrimator\n   * @return {Attrimator}\n   */\n  queue: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n    var current = this.get( attr );\n\n    if ( current )\n    {\n      current.queue( attrimator );\n    }\n    else\n    {\n      this.put( attr, attrimator );\n    }\n\n    return current;\n  },\n\n  /**\n   * Queues the given map to this map. The attrimators placed on this map are\n   * queued and delayed in a way that they all start at the same time. If a\n   * function is provided as the second argument it is invoked whenever an\n   * attrimator in the given map is new & added to this map.\n   *\n   * @method queueMap\n   * @param {AttrimatorMap} map\n   * @param {Function} [onNewAttribute]\n   * @param {Object} [context]\n   * @chainable   188703090\n   */\n  queueMap: function(map, onNewAttribute, context)\n  {\n    var maxRemaining = this.timeRemaining();\n    var attrimators = map.values;\n    var hasCallback = isFunction( onNewAttribute );\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n      var existing = this.get( attr );\n\n      if ( existing )\n      {\n        if ( existing.isInfinite() )\n        {\n          existing.stopIn( attrimator.delay + maxRemaining );\n        }\n        else\n        {\n          attrimator.delay += (maxRemaining - existing.timeRemaining());\n        }\n\n        existing.queue( attrimator );\n      }\n      else\n      {\n        attrimator.delay += maxRemaining;\n\n        this.put( attr, attrimator );\n\n        if ( hasCallback )\n        {\n          onNewAttribute.call( context || this, attrimator );\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the attrimator at the given index replacing it with the next\n   * attrimator if one exists.\n   *\n   * @method unqueueAt\n   * @param {Number} index\n   * @chainable\n   */\n  unqueueAt: function(index)\n  {\n    var current = this.values[ index ];\n\n    if ( current.next )\n    {\n      this.values[ index ] = current.next;\n    }\n    else\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Clones this map returning a deep clone where all attrimators are cloned.\n   *\n   * @method clone\n   * @return {AttrimatorMap}\n   */\n  clone: function()\n  {\n    var values = this.values;\n    var keys = this.keys;\n    var clone = new AttrimatorMap();\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      clone.values[i] = values[i].clone();\n      clone.keys[i] = keys[i];\n      clone.indices[ keys[i] ] = i;\n    }\n\n    return clone;\n  },\n\n  /**\n   * Returns the time remaining for all finite attrimators in this map. The time\n   * remaining includes queued attrimators.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    var maxRemaining = 0;\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n\n      if ( !attrimator.isInfinite() )\n      {\n        maxRemaining = Math.max( maxRemaining, attrimator.timeRemaining() );\n      }\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Sets the cycle of the attrimators in this map. If there are attrimators\n   * queued the are given the next cycle number. The final cycle number is\n   * returned.\n   *\n   * @method applyCycle\n   * @param {Number} nextCycle\n   * @return {Number}\n   */\n  applyCycle: function(nextCycle)\n  {\n    var currentDepth = this.values;\n    var nextDepth = null;\n\n    while ( currentDepth.length )\n    {\n      nextDepth = [];\n\n      for (var i = currentDepth.length - 1; i >= 0; i--)\n      {\n        var attrimator = currentDepth[ i ];\n\n        attrimator.cycle = nextCycle;\n\n        if ( attrimator.next )\n        {\n          nextDepth.push( attrimator.next );\n        }\n      }\n\n      if ( nextDepth.length )\n      {\n        nextCycle++;\n      }\n\n      currentDepth = nextDepth;\n    }\n\n    return nextCycle;\n  },\n\n  /**\n   * Iterates through all attrimators in this map, at any depth.\n   *\n   * @method iterate\n   * @param  {Function} callback\n   * @param  {Object} [context]\n   * @chainable\n   */\n  iterate: function(callback, context)\n  {\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n      var previous = null;\n      var depth = 0;\n\n      while ( attrimator )\n      {\n        callback.call( context || this, attrimator, depth++, previous );\n\n        attrimator = (previous = attrimator).next;\n      }\n    }\n\n    return this;\n  }\n\n});\n\n\n/**\n * Instantiates a new Builder. Builders are responsible for taking animation\n * definitions (an Object passed to {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}})\n * and generating & placing {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}}\n * onto an {{#crossLink \"AttrimatorMap\"}}{{/crossLink}}.\n *\n * Builders are added to the {{#crossLink \"anim8.builder\"}}{{/crossLink}} object\n * by a key and when that key exists in an animation definition, the animation\n * definition is passed to the {{#crossLink \"Builder/parse:method\"}}{{/crossLink}}\n * to generate {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}}.\n *\n * @class Builder\n * @constructor\n */\nfunction Builder()\n{\n\n}\n\n/**\n * Returns the next merge ID. Merge IDs are used when merging options into\n * attrimators to perform an optimal merge.\n *\n * @method nextMergeId\n * @static\n */\nBuilder.nextMergeId = (function()\n{\n  var id = 0;\n  return function() {\n    return id++;\n  };\n})();\n\nClass.define( Builder,\n{\n\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimatorMap to the given array.\n   *\n   * @method parse\n   * @param {Object} animation\n   * @param {Object} options\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {BuilderHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    throw 'Builder.parse not implemented';\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing\n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @method merge\n   * @param {Object} animation\n   * @param {Object} newOptions\n   * @param {Object} oldOptions\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {BuilderHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var builder = this;\n    var factory = $factory( animation.factory );\n\n    attrimatorMap.iterate(function(e)\n    {\n      if ( e.getBuilder() === builder )\n      {\n        builder.mergeAttrimator( e, e.attribute, helper, factory );\n      }\n    });\n  },\n\n  /**\n   * Merges new options contained in the helper into the given attrimator.\n   *\n   * @method mergeAttrimator\n   * @param {Attrimator} e\n   * @param {String} attr\n   * @param {BuilderHelper} helper\n   * @param {Factory} factory\n   */\n  mergeAttrimator: function( e, attr, helper, factory )\n  {\n    e.easing    = helper.mergeEasing( attr, e.easing );\n    e.repeat    = helper.mergeRepeat( attr, e.repeat );\n    e.delay     = helper.mergeDelay( attr, e.delay );\n    e.sleep     = helper.mergeSleep( attr, e.sleep );\n    e.duration  = helper.mergeDuration( attr, e.duration );\n    e.offset    = helper.mergeOffset( attr, e.offset );\n    e.scale     = helper.mergeScale( attr, e.scale );\n    e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n  },\n\n  /**\n   * Calls merge on all builders specified in the given animation definition.\n   *\n   * @method submerge\n   * @protected\n   * @param {Object} animation\n   * @param {Object} newOptions\n   * @param {Object} oldOptions\n   * @param {AttrimatorMap} attrimatorMap\n   */\n  submerge: function( animation, newOptions, oldOptions, attrimatorMap )\n  {\n    var helper = new BuilderHelper( animation, oldOptions, newOptions );\n\n    for (var builderName in animation)\n    {\n      var builder = $builder( builderName );\n\n      if ( builder !== false && builder.merge )\n      {\n        builder.merge( animation, newOptions, oldOptions, attrimatorMap, helper );\n      }\n    }\n  }\n});\n\n\n/**\n * Instantiates a new instance of Builder Helper.\n *\n * @param {Object} input\n * @param {Object} oldOptions\n * @param {Object} newOptions\n * @class BuilderHelper\n * @constructor\n */\nfunction BuilderHelper( input, oldOptions, newOptions )\n{\n  this.input = input;\n  this.oldOptions = oldOptions || {};\n  this.newOptions = newOptions || {};\n\n  this.prepareSpecifics( 'easings' );\n  this.prepareSpecifics( 'repeats' );\n  this.prepareSpecifics( 'delays' );\n  this.prepareSpecifics( 'sleeps' );\n  this.prepareSpecifics( 'durations' );\n  this.prepareSpecifics( 'offsets' );\n  this.prepareSpecifics( 'scales' );\n  this.prepareSpecifics( 'scaleBases' );\n}\n\nClass.define( BuilderHelper,\n{\n\n  /**\n   * If an object with the given name doesn't exist on the input it's created.\n   *\n   * @method prepareSpecifics\n   * @param {String} specifics\n   */\n  prepareSpecifics: function(specifics)\n  {\n    if ( !isObject( this.input[ specifics ] ) )\n    {\n      this.input[ specifics ] = {};\n    }\n  },\n\n  /* PARSING */\n\n  /**\n   * Parses an easing from the input.\n   *\n   * @method parseEasing\n   * @param  {String} attr\n   * @return {String|Function|Array}\n   */\n  parseEasing: function(attr)\n  {\n    return this.parseFirst( attr, 'easing', 'easings' );\n  },\n\n  /**\n   * Parses repeats from the input.\n   *\n   * @method parseRepeat\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseRepeat: function(attr)\n  {\n    return this.parseNumber( attr, $repeat, $repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * Parses delay from the input.\n   *\n   * @method parseDelay\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseDelay: function(attr)\n  {\n    return this.parseNumber( attr, $delay, $time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * Parses sleep from the input.\n   *\n   * @method parseSleep\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseSleep: function(attr)\n  {\n    return this.parseNumber( attr, $sleep, $time, 'sleep', 'sleepAdd', 'sleepScale', 'sleeps' );\n  },\n\n  /**\n   * Parses duration from the input.\n   *\n   * @method parseDuration\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseDuration: function(attr)\n  {\n    return this.parseNumber( attr, $duration, $time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * Parses offset from the input.\n   *\n   * @method parseOffset\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseOffset: function(attr)\n  {\n    return this.parseNumber( attr, $offset, $time, 'offset', 'offsetAdd', 'offsetScale', 'offsets' );\n  },\n\n  /**\n   * Parses scale from the input.\n   *\n   * @method parseScale\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseScale: function(attr)\n  {\n    return this.parseNumber( attr, $scale, $number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * Parses scale base from the input.\n   *\n   * @method parseScaleBase\n   * @param  {String} attr\n   * @return {Any}\n   */\n  parseScaleBase: function(attr)\n  {\n    return this.parseFirst( attr, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * Parses a value from the input given the attribute, option, and specific.\n   *\n   * @method parseFirst\n   * @param {String} attr\n   * @param {String} option\n   * @param {String} specifics\n   * @return {Any}\n   */\n  parseFirst: function(attr, option, specifics)\n  {\n    return coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n  },\n\n  /**\n   * Parses an event from the input given a path & builder for the event.\n   *\n   * @method parseEvent\n   * @param {String} attr\n   * @param {Path} path\n   * @param {Builder} builder\n   * @param {Boolean} hasInitialState\n   * @return {Event}\n   */\n  parseEvent: function(attr, path, builder, hasInitialState, mergeId)\n  {\n    var duration   = this.parseDuration( attr );\n    var easing     = this.parseEasing( attr );\n    var delay      = this.parseDelay( attr );\n    var sleep      = this.parseSleep( attr );\n    var repeat     = this.parseRepeat( attr );\n    var offset     = this.parseOffset( attr );\n    var scale      = this.parseScale( attr );\n    var scaleBase  = this.parseScaleBase( attr );\n    var event      = new Event( attr, path, duration, easing, delay, sleep, offset, repeat, scale, scaleBase, hasInitialState, builder, null, this.input );\n\n    return event;\n  },\n\n  /**\n   * Parses a number from the input given parse functions.\n   *\n   * @method parseNumber\n   * @param {String} attr\n   * @param {Function} parseFunction\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} optionAdd\n   * @param {String} optionScale\n   * @param {String} specifics\n   * @return {Number}\n   */\n  parseNumber: function(attr, parseFunction, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n    var base = parseFunction( baseRaw );\n    var add = parseOptionFunction( this.oldOptions[ optionAdd ], 0 );\n    var scale = coalesce( this.oldOptions[ optionScale ], 1 );\n\n    return (add === 0 && scale === 1) ? baseRaw : (base + add) * scale;\n  },\n\n  /* MERGING */\n\n  /**\n   * Merges easing based on the input, new options, and the current easing.\n   *\n   * @method mergeEasing\n   * @param {String} attr\n   * @param {Function} current\n   * @return {Function}\n   */\n  mergeEasing: function(attr, current)\n  {\n    return this.mergeFirst( attr, current, $easing, 'easing', 'easings' );\n  },\n\n  /**\n   * Merges repeats based on the input, new options, and the current repeat.\n   *\n   * @method mergeRepeat\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeRepeat: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, $repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * Merges delay based on the input, new options, and the current delay.\n   *\n   * @method mergeDelay\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeDelay: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, $time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * Merges sleep based on the input, new options, and the current sleep.\n   *\n   * @method mergeSleep\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeSleep: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, $time, 'sleep', 'sleepAdd', 'sleepScale', 'scales' );\n  },\n\n  /**\n   * Merges duration based on the input, new options, and the current duration.\n   *\n   * @method mergeDuration\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeDuration: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, $time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * Merges offset based on the input, new options, and the current offset.\n   *\n   * @method mergeOffset\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeOffset: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, $time, 'offset', 'offsetAdd', 'offsetScale', 'offsets' );\n  },\n\n  /**\n   * Merges scale based on the input, new options, and the current scale.\n   *\n   * @method mergeScale\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeScale: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, $number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * Merges scale base based on the input, new options, and the current scale\n   * base.\n   *\n   * @method mergeScaleBase\n   * @param {String} attr\n   * @param {T} current\n   * @param {Factory} factory\n   * @return {T}\n   */\n  mergeScaleBase: function(attr, current, factory)\n  {\n    var calc = factory.attribute( attr ).calculator;\n\n    var parseFunction = function(value, defaultValue) {\n      return calc.parse( value, defaultValue );\n    };\n\n    return this.mergeFirst( attr, current, parseFunction, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * Returns the first available option from input, new options, old options,\n   * and the current value.\n   *\n   * @method mergeFirst\n   * @param {String} attr\n   * @param {T} current\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} specifics\n   * @return {T}\n   */\n  mergeFirst: function(attr, current, parseOptionFunction, option, specifics)\n  {\n    var specific = this.input[ specifics ][ attr ];\n    var value = coalesce( specific, this.newOptions[ option ], this.oldOptions[ option ] );\n\n    return parseOptionFunction( value, current );\n  },\n\n  /**\n   * Merges a number by returning the first occurrence from input, new options,\n   * old options, and the current value.\n   *\n   * @method mergeNumber\n   * @param {String} attr\n   * @param {Number} current\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} optionAdd\n   * @param {String} optionScale\n   * @param {String} specifics\n   * @return {Number}\n   */\n  mergeNumber: function(attr, current, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] );\n    var base = parseOptionFunction( baseRaw, current );\n    var add = parseOptionFunction( coalesce( this.newOptions[ optionAdd ], this.oldOptions[ optionAdd ] ), 0 );\n    var scale = coalesce( this.newOptions[ optionScale ], this.oldOptions[ optionScale ], 1 );\n\n    return (base + add) * scale;\n  }\n\n});\n\n\n\n\n/**\n * Instantiates a new Calculator instance.\n *\n * @class Calculator\n * @constructor\n */\nfunction Calculator()\n{\n\n}\n\nClass.define( Calculator,\n{\n\n  /**\n   * Creates the constants for this calculator.\n   *\n   * @method createConstants\n   */\n  createConstants: function()\n  {\n    this.ZERO = this.create();\n    this.ONE = this.parse( 1.0, this.ZERO );\n    this.INFINITY = this.parse( Number.POSITIVE_INFINITY, this.ZERO );\n  },\n\n  /**\n   * Parses the given input for a value this calculator understands.\n   *\n   * @method parse\n   * @param  {T} x\n   * @param  {T} defaultValue\n   * @return {T|Function|False}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * Copies a value and places it in out and returns out.\n   *\n   * @method copy\n   * @param {T} out\n   * @param {T} copy\n   * @return {T}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * Clones the value and returns the clone.\n   *\n   * @method clone\n   * @param {T} clone\n   * @return {T}\n   */\n  clone: function(clone)\n  {\n    return this.copy( this.create(), clone );\n  },\n\n  /**\n   * Creates an empty value equivalent to zero.\n   *\n   * @method create\n   * @return {T}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * Scales out by the given scalar value and returns out.\n   *\n   * @method scale\n   * @param {T} out\n   * @param {Number} scale\n   * @return {T}\n   */\n  scale: function(out, scale)\n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * Adds an amount to out and returns out.\n   *\n   * @method add\n   * @param {T} out\n   * @param {T} amount\n   * @return {T}\n   */\n  add: function(out, amount)\n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * Adds an amount scaled by a scalar value to out and returns out.\n   *\n   * @method adds\n   * @param {T} out\n   * @param {T} amount\n   * @param {Number} amountScale\n   * @return {T}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * Subtracts an amount from out and returns out.\n   *\n   * @method sub\n   * @param {T} out\n   * @param {T} amount\n   * @return {T}\n   */\n  sub: function(out, amount)\n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * Multiplies out by some amount and returns out.\n   *\n   * @method mul\n   * @param {T} out\n   * @param {T} scale\n   * @return {T}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * Interpolates out between start & end given a delta value and returns out.\n   * A delta value typically lies between 0 and 1 inclusively.\n   *\n   * @method interpolate\n   * @param {T} out\n   * @param {T} start\n   * @param {T} end\n   * @param {Number} delta\n   * @return {T}\n   */\n  interpolate: function(out, start, end, delta)\n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n\n    return out;\n  },\n\n  /**\n   * Returns a random value between the given min and max.\n   *\n   * @method random\n   * @param {T} out\n   * @param {T} min\n   * @param {T} max\n   * @return {T}\n   */\n  random: function(out, min, max)\n  {\n    return this.interpolate( out, min, max, Math.random() );\n  },\n\n  /**\n   * Calculates the distance between the two values.\n   *\n   * @method distance\n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * Calculates the squared distance between the two values.\n   *\n   * @method distanceSq\n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * Returns the distance the given value is from zero.\n   *\n   * @method length\n   * @param {T} a\n   * @return {Number}\n   */\n  length: function(a)\n  {\n    return this.distance( a, this.ZERO );\n  },\n\n  /**\n   * Returns the squared distance the given value is from zero.\n   *\n   * @method lengthSq\n   * @param {T} a\n   * @return {Number}\n   */\n  lengthSq: function(a)\n  {\n    return this.distanceSq( a, this.ZERO );\n  },\n\n  /**\n   * Determines whether the given value is valid for this calculator.\n   *\n   * @method isValid\n   * @param {any} a\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * Returns whether the given value is not a number or has a component which is\n   * not a number.\n   *\n   * @method isNaN\n   * @param {T} a\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * Determines whether the given value is equivalent to zero given an\n   * acceptable distance from zero (epsilon).\n   *\n   * @method isZero\n   * @param {T} a\n   * @param {Number} epsilon\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * Determines whether the given values are equivalent up to an acceptable\n   * distance apart.\n   *\n   * @method isEqual\n   * @param {T} a\n   * @param {T} b\n   * @param {Number} epsilon\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * Sets out to the minimum value between the two values and returns out.\n   *\n   * @method min\n   * @param {T} out\n   * @param {T} a\n   * @param {T} b\n   * @return {T}\n   */\n  min: function(out, a, b)\n  {\n    throw 'Calculator.min not implemented';\n  },\n\n  /**\n   * Sets out to the maximum value between two values and returns out.\n   *\n   * @method max\n   * @param {T} out\n   * @param {T} a\n   * @param {T} b\n   * @return {T}\n   */\n  max: function(out, a, b)\n  {\n    throw 'Calculator.max not implemented';\n  },\n\n  /**\n   * Performs the dot product between two values.\n   *\n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  dot: function(a, b)\n  {\n    throw 'Calculator.dot not implemented';\n  },\n\n  /**\n   * Clamps out between the given minimum and maximum values and returns out.\n   *\n   * @method clamp\n   * @param {T} out\n   * @param {T} min\n   * @param {T} max\n   * @return {T}\n   */\n  clamp: function(out, min, max)\n  {\n    var distSq = this.distanceSq( out, this.ZERO );\n\n    if ( distSq < min * min )\n    {\n      return this.scale( out, min / Math.sqrt( distSq ) );\n    }\n    else if ( distSq > max * max )\n    {\n      return this.scale( out, max / Math.sqrt( distSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * Sets the length of the given value and returns the new value.\n   *\n   * @param {T} out\n   * @param {Number} length\n   * @return {T}\n   */\n  setLength: function(out, length)\n  {\n    var lengthSq = this.lengthSq( out );\n\n    if ( lengthSq !== 0 )\n    {\n      return this.scale( out, length / Math.sqrt( lengthSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * Determines whether the given value appears to be a relative value. Relative\n   * values are stored as strings starting with a plus or minus for positive or\n   * negative respectively.\n   *\n   * @method isRelative\n   * @param {Any} x\n   * @return {Boolean}\n   * @protected\n   */\n  isRelative: function(x)\n  {\n    return isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * Returns the relative amount of the given relative value. If the value is\n   * not a valid relative value false is returned.\n   *\n   * @method getRelativeAmount\n   * @param {String} x\n   * @return {Number}\n   * @protected\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n});\n\n\n/**\n * Instantiates a Defer instance. Defer instances keep track of method calls\n * to call at a later time - after an event occurs. The first argument needs\n * to be a function which returns an instance of anim8.Defer when it's invoked.\n * The second argument is an array of methods that can be deferred.\n *\n * @param {Function} factory\n * @param {Array} methods\n * @class Defer\n * @constructor\n */\nfunction Defer(factory, methods)\n{\n  this.$factory = factory;\n\n  for (var i = 0; i < methods.length; i++)\n  {\n    this[ methods[i] ] = this.$push( methods[i] );\n  }\n}\n\nClass.define( Defer,\n{\n  /**\n   * Resets the defer instance.\n   *\n   * @method $reset\n   * @param {Object} eventable\n   * @param {Any} previous\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} callback\n   */\n  $reset: function(eventable, previous, eventType, event, callback)\n  {\n    this.$eventable = eventable;\n    this.$previous = previous;\n    this.$eventType = eventType;\n    this.$event = event;\n    this.$callback = callback;\n    this.$calls = [];\n    this.$next = [];\n\n    if ( this.$isRoot() )\n    {\n      this.$register();\n    }\n  },\n\n  /**\n   * Determines whether this Defer instance is at the root.\n   *\n   * @method $isRoot\n   * @return {Boolean}\n   */\n  $isRoot: function()\n  {\n    return this.$eventable === this.$previous;\n  },\n\n  /**\n   * Registers this Defer instance with the eventable.\n   *\n   * @method $register\n   */\n  $register: function()\n  {\n    this.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n  },\n\n  /**\n   * Creates a defered function which passes the method and arguments for\n   * any method call into an array of calls on this Defer instance.\n   *\n   * @method $push\n   * @param {String} methodName\n   * @return {Function}\n   */\n  $push: function(methodName)\n  {\n    return function()\n    {\n      this.$calls.push( [methodName, arguments] );\n\n      return this;\n    };\n  },\n\n  /**\n   * Executes all defered method calls and starts any child Defer instances.\n   *\n   * @method $run\n   */\n  $run: function()\n  {\n    // Invoke the callback if one was given.\n    if ( isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n\n    for (var i = 0; i < this.$calls.length; i++)\n    {\n      var call = this.$calls[ i ];\n\n      this.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n    }\n\n    for (var k = 0; k < this.$next.length; k++)\n    {\n      this.$next[ k ].$register();\n    }\n  },\n\n  /**\n   * Returns the object before the defer statement.\n   *\n   * @method undefer\n   * @return {Any}\n   */\n  undefer: function()\n  {\n    return this.$previous;\n  },\n\n  /**\n   * Defers any following method calls to after the given event is triggered. A\n   * callback can be specified which is a function invoked after the event is\n   * triggered.\n   *\n   * @method defer\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} callback\n   * @return {Defer}\n   */\n  defer: function(eventType, event, callback)\n  {\n    var next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\n    this.$next.push( next );\n\n    return next;\n  }\n\n});\n\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n *\n * @class DeferAnimator\n * @constructor\n * @extends Defer\n */\nfunction DeferAnimator(animator, previous, eventType, event)\n{\n  this.$reset( animator, previous, eventType, event );\n}\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nDeferAnimator.prototype = new Defer( DeferAnimator,\n[\n  /**\n   * Defers the {{#crossLink \"Animator/restore:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'restore',\n\n  /**\n   * Defers the {{#crossLink \"Animator/placeAttrimator:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method placeAttrimator\n   */\n  'placeAttrimator',\n\n  /**\n   * Defers the {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method applyInitialState\n   */\n  'applyInitialState',\n\n  /**\n   * Defers the {{#crossLink \"Animator/preupdate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method preupdate\n   */\n  'preupdate',\n\n  /**\n   * Defers the {{#crossLink \"Animator/update:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method update\n   */\n  'update',\n\n  /**\n   * Defers the {{#crossLink \"Animator/apply:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method apply\n   */\n  'apply',\n\n  /**\n   * Defers the {{#crossLink \"Animator/trimAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   * @protected\n   */\n  'trimAttrimators',\n\n  /**\n   * Defers the {{#crossLink \"Animator/activate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'activate',\n\n  /**\n   * Defers the {{#crossLink \"Animator/deactivate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'deactivate',\n\n  /**\n   * Defers the {{#crossLink \"Animator/destroy:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'destroy',\n\n  /**\n   * Defers the {{#crossLink \"Animator/spring:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'spring',\n\n  /**\n   * Defers the {{#crossLink \"Animator/play:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'play',\n\n  /**\n   * Defers the {{#crossLink \"Animator/playAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   * @protected\n   */\n  'playAttrimators',\n\n  /**\n   * Defers the {{#crossLink \"Animator/queue:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method queue\n   */\n  'queue',\n\n  /**\n   * Defers the {{#crossLink \"Animator/queueAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method queueAttrimators\n   * @protected\n   */\n  'queueAttrimators',\n\n  /**\n   * Defers the {{#crossLink \"Animator/transition:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method transition\n   */\n  'transition',\n\n  /**\n   * Defers the {{#crossLink \"Animator/transitionAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method transitionAttrimators\n   * @protected\n   */\n  'transitionAttrimators',\n\n  /**\n   * Defers the {{#crossLink \"Animator/tween:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tween\n   */\n  'tween',\n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenTo:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenTo\n   */\n  'tweenTo',\n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenMany:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenMany\n   */\n  'tweenMany',\n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenManyTo:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenManyTo\n   */\n  'tweenManyTo',\n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenFrom:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenFrom\n   */\n  'tweenFrom',\n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenManyFrom:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenManyFrom\n   */\n  'tweenManyFrom',\n\n  /**\n   * Defers the {{#crossLink \"Animator/move:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method move\n   */\n  'move',\n\n  /**\n   * Defers the {{#crossLink \"Animator/moveMany:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method moveMany\n   */\n  'moveMany',\n\n  /**\n   * Defers the {{#crossLink \"Animator/follow:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method follow\n   */\n  'follow',\n\n  /**\n   * Defers the {{#crossLink \"Animator/stop:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method stop\n   */\n  'stop',\n\n  /**\n   * Defers the {{#crossLink \"Animator/end:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method end\n   */\n  'end',\n\n  /**\n   * Defers the {{#crossLink \"Animator/finish:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method finish\n   */\n  'finish',\n\n  /**\n   * Defers the {{#crossLink \"Animator/nopeat:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method nopeat\n   */\n  'nopeat',\n\n  /**\n   * Defers the {{#crossLink \"Animator/pause:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method pause\n   */\n  'pause',\n\n  /**\n   * Defers the {{#crossLink \"Animator/resume:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method resume\n   */\n  'resume',\n\n  /**\n   * Defers the {{#crossLink \"Animator/set:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method set\n   */\n  'set',\n\n  /**\n   * Defers the {{#crossLink \"Animator/unset:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method unset\n   */\n  'unset',\n\n  /**\n   * Defers the {{#crossLink \"Animator/get:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method get\n   */\n  'get',\n\n  /**\n   * Defers the {{#crossLink \"Animator/invoke:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method invoke\n   */\n  'invoke',\n\n  /**\n   * Defers the {{#crossLink \"Animator/onCycleStart:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method onCycleStart\n   */\n  'onCycleStart',\n\n  /**\n   * Defers the {{#crossLink \"Animator/onCycleEnd:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method onCycleEnd\n   */\n  'onCycleEnd'\n]);\n\n\nvar EasingTypes = {};\n\n/**\n * A collection of easing type functions. An easing type functions takes an\n * easing function as an argument and modifies it's input and output values.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n *\n * @class anim8.easingType\n */\n\n/**\n * Plays the animation forward normally.\n *\n * @method in\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nEasingTypes['in'] = function(easing)\n{\n  return function(x)\n  {\n    return easing( x );\n  };\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum.\n *\n * @method out\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nEasingTypes['out'] = function(easing)\n{\n  return function(x)\n  {\n    return 1.0 - easing( 1.0 - x );\n  };\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum halfway.\n *\n * @method inout\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nEasingTypes['inout'] = function(easing)\n{\n  return function(x)\n  {\n    if ( x < 0.5 )\n    {\n      return easing( 2.0 * x ) * 0.5;\n    }\n    else\n    {\n      return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n    }\n  };\n};\n\n/**\n * Plays the aninmation forwards with the given easing, and backwards with the same easing momentum.\n *\n * @method yoyo\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nEasingTypes['yoyo'] = function(easing)\n{\n  return function(x)\n  {\n    if ( x < 0.5 )\n    {\n      return easing( 2.0 * x );\n    }\n    else\n    {\n      return easing( 2.0 - 2.0 * x );\n    }\n  };\n};\n\n/**\n * Plays the animation forwards with the given easing, and backwards reflecting the easing's momentum.\n *\n * @method mirror\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nEasingTypes['mirror'] = function(easing)\n{\n  return function(x)\n  {\n    if ( x < 0.5 )\n    {\n      return easing( 2.0 * x );\n    }\n    else\n    {\n      return 1.0 - easing( 2.0 - 2.0 * x );\n    }\n  };\n};\n\n/**\n * Plays the animation backwards with using the same easing momentum.\n *\n * @method reverse\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nEasingTypes['reverse'] = function(easing)\n{\n  return function(x)\n  {\n    return easing( 1.0 - x );\n  };\n};\n\n/**\n * Plays the animation backwards by flipping the easing's momentum.\n *\n * @method flip\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nEasingTypes['flip'] = function(easing)\n{\n  return function(x)\n  {\n    return 1.0 - easing( x );\n  };\n};\n\n\n/**\n * A collection of easing functions. An easing functions takes a single number\n * as input that's between 0 and 1 inclusively and returns a number that\n * progresses from 0 to 1 but in-between values may return a number that's less\n * than 0 or greater than 1.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n *\n * @class anim8.Easings\n */\nvar Easings = {};\n\n\n/**\n * Returns true if the given string would result in returning an easing.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n *\n * @method anim8.isEasingName\n * @for Core\n * @param {String} easing\n * @return {Boolean}\n */\nfunction isEasingName(easing)\n{\n  if ( easing in Easings )\n  {\n    return true;\n  }\n\n  var pair = easing.split('-');\n  var e = pair[0];\n  var t = pair[1];\n\n  if ( pair.length >= 2 && e in Easings && t in EasingTypes )\n  {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method linear\n * @for anim8.easing\n */\nEasings['linear'] = function(x)\n{\n  return x;\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quad\n * @for anim8.easing\n */\nEasings['quad'] = function(x)\n{\n  return x * x;\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quad\n * @for anim8.easing\n */\nEasings['ease'] = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n\n  return eq1 * i + eq2 * x;\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method cubic\n * @for anim8.easing\n */\nEasings['cubic'] = function(x)\n{\n  return x * x * x;\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method quartic\n * @for anim8.easing\n */\nEasings['quartic'] = function(x)\n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quintic\n * @for anim8.easing\n */\nEasings['quintic'] = function(x)\n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method back\n * @for anim8.easing\n */\nEasings['back'] = function(x)\n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  return x3 + x2 - x;\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method sine\n * @for anim8.easing\n */\nEasings['sine'] = function(x)\n{\n  return Math.sin( x * 1.57079632679 );\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method overshot\n * @for anim8.easing\n */\nEasings['overshot'] = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method elastic\n * @for anim8.easing\n */\nEasings['elastic'] = function(x)\n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n  var wave = -Math.sin(x * 10.9955742876);\n  return scale * wave;\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method revisit\n * @for anim8.easing\n */\nEasings['revisit'] = function(x)\n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method lasso\n * @for anim8.easing\n */\nEasings['lasso'] = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method slowbounce\n * @for anim8.easing\n */\nEasings['slowbounce'] = function(x)\n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method bounce\n * @for anim8.easing\n */\nEasings['bounce'] = function(x)\n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method smallbounce\n * @for anim8.easing\n */\nEasings['smallbounce'] = function(x)\n{\n  var inv = 1.0 - x;\n  return (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method tinybounce\n * @for anim8.easing\n */\nEasings['tinybounce'] = function(x)\n{\n  var inv = 1.0 - x;\n  return (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method hesitant\n * @for anim8.easing\n */\nEasings['hesitant'] = function(x)\n{\n  return (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method sqrt\n * @for anim8.easing\n */\nEasings['sqrt'] = function(x)\n{\n  return Math.sqrt( x );\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method sqrtf\n * @for anim8.easing\n */\nEasings['sqrtf'] = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method log10\n * @for anim8.easing\n */\nEasings['log10'] = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method slingshot\n * @for anim8.easing\n */\nEasings['slingshot'] = function(x)\n{\n  if (x < 0.7) {\n    return (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method circular\n * @for anim8.easing\n */\nEasings['circular'] = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method gentle\n * @for anim8.easing\n */\nEasings['gentle'] = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * Generates a bezier easing function given the two middle control points. The\n * first point is {0,0} and the last point is {1, 1}.\n *\n * @method bezier\n * @for anim8.easing\n * @param {Number} mX1\n * @param {Number} mY1\n * @param {Number} mX2\n * @param {Number} mY2\n * @return {Function}\n */\nEasings['bezier'] = function(mX1, mY1, mX2, mY2)\n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n\n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\n\n/**\n * Possible states an event can be in.\n *\n * @type {Object}\n */\nvar EventState =\n{\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  FINISHED: 8\n};\n\n/**\n * Instantiates a new Event which extends Attrimator.\n *\n * @param {String} attribute\n * @param {Path} path\n * @param {String|Number} duration\n * @param {String|Function|Array} easing\n * @param {String|Number} delay\n * @param {String|Number} sleep\n * @param {String|Number} offset\n * @param {String|Number} repeat\n * @param {Number} scale\n * @param {T|Number} scaleBase\n * @param {Boolean} hasInitialState\n * @param {Builder} builder\n * @param {Attrimator} next\n * @param {Object} input\n * @param {Number} mergeId\n * @class Event\n * @constructor\n * @extends Attrimator\n */\nfunction Event(attribute, path, duration, easing, delay, sleep, offset, repeat, scale, scaleBase, hasInitialState, builder, next, input, mergeId)\n{\n  this.reset( attribute, builder, next );\n\n  /**\n   * The path the attribute will be animated along.\n   *\n   * @property {Path} path\n   */\n  this.path             = path;\n\n  /**\n   * The easing used to modify the delta value passed to the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.easing:method\"}}{{/crossLink}}\n   *\n   * @property {Function} easing\n   */\n  this.easing           = $easing( easing );\n\n  /**\n   * The amount of time in milliseconds to animate an attribute over the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.duration:method\"}}{{/crossLink}}\n   *\n   * @property {Number} duration\n   */\n  this.duration         = $duration( duration );\n\n  /**\n   * If this event repeats more than once, this is a pause between animations.\n   *\n   * **See:** {{#crossLink \"Core/anim8.sleep:method\"}}{{/crossLink}}\n   *\n   * @property {Number} sleep\n   */\n  this.sleep            = $sleep( sleep );\n\n  /**\n   * The number of times to repeat the animation.\n   *\n   * **See:** {{#crossLink \"Core/anim8.repeat:method\"}}{{/crossLink}}\n   *\n   * @property {Number} repeat\n   */\n  this.repeat           = $repeat( repeat );\n\n  /**\n   * The amount to scale the value computed from the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.scale:method\"}}{{/crossLink}}\n   *\n   * @property {T} scale\n   */\n  this.scale            = $scale( scale );\n\n  /**\n   * The base value from which to scale from. This is essentially this data\n   * types default value.\n   *\n   * @property {T} scaleBase\n   */\n  this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.ZERO );\n\n  /**\n   * Whether or not this event has an initial value which can be applied at the\n   * start of the animation (or when\n   * {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} is invoked).\n   *\n   * @property {Boolean} hasInitialState\n   */\n  this.hasInitialState  = coalesce( hasInitialState, true );\n\n  this.delay            = $delay( delay );\n  this.offset           = $offset( offset );\n\n  this.input            = input;\n  this.mergeId          = mergeId;\n}\n\nClass.extend( Event, Attrimator,\n{\n  /**\n   * Returns the computed value given a base value and a delta along the path.\n   *\n   * @method computeValue\n   * @param {T} baseValue\n   * @param {Number} delta\n   * @return {T}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * Applies the value to the frame and returns true, otherwise returns false.\n   *\n   * @method applyValue\n   * @param {Object} frame\n   * @param {T} baseValue\n   * @param {Number} delta\n   * @return {T}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n\n    if ( value !== false )\n    {\n      frame[ this.attribute ] = value;\n    }\n\n    return value;\n  },\n\n  nopeat: function()\n  {\n    var newRepeat = clamp( Math.ceil( ( this.elapsed - this.delay ) / ( this.duration + this.sleep ) ), 0, this.repeat );\n\n    if ( newRepeat !== this.repeat )\n    {\n      this.repeat = newRepeat;\n      this.prestartNext( true );\n    }\n\n    return this;\n  },\n  finish: function(frame)\n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = EventState.FINISHED;\n  },\n  start: function(now, animator)\n  {\n    this.prestart( now );\n\n    this.state = this.delay ? EventState.DELAYED : EventState.ANIMATING;\n\n    if ( this.hasComputed() )\n    {\n      this.path = this.path.replaceComputed( this, animator );\n    }\n  },\n  startCycle: function(frame)\n  {\n    if ( this.hasInitialState && this.attribute in frame )\n    {\n      return this.applyValue( frame, frame[ this.attribute ], 0 );\n    }\n\n    return false;\n  },\n  update: function(elapsed, frame)\n  {\n    var updated = false;\n    var delay = this.delay;\n    var duration = this.duration;\n    var sleep = this.sleep;\n    var repeat = this.repeat;\n    var oldState = this.state;\n    var newState = this.state;\n    var delta = 0;\n\n    elapsed -= delay;\n\n    var cycle = duration + sleep;\n    var iteration = Math.floor( ( elapsed + sleep ) / cycle );\n\n    if ( iteration >= repeat )\n    {\n      newState = EventState.FINISHED;\n      delta = 1;\n    }\n    else\n    {\n      elapsed -= iteration * cycle;\n\n      if ( elapsed > duration )\n      {\n        newState = EventState.SLEEPING;\n        delta = 1;\n      }\n      else\n      {\n        newState = EventState.ANIMATING;\n        delta = elapsed / duration;\n      }\n    }\n\n    if ( newState === EventState.ANIMATING ||\n       ( newState !== EventState.ANIMATING && oldState === EventState.ANIMATING ) )\n    {\n      this.applyValue( frame, frame[ this.attribute ], delta );\n      updated = true;\n    }\n\n    this.state = newState;\n\n    return updated;\n  },\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay && !this.hasInitialState )\n    {\n      return false;\n    }\n\n    var delta = 0;\n\n    if ( time >= this.delay )\n    {\n      var cycle = (this.duration + this.sleep);\n      var elapsed = (time - this.delay);\n      var iteration = Math.floor( ( elapsed + this.sleep ) / cycle );\n\n      if ( iteration >= this.repeat )\n      {\n        delta = 1.0;\n      }\n      else\n      {\n        delta = Math.min( 1.0, (elapsed % cycle) / this.duration );\n      }\n    }\n\n    return this.computeValue( out, delta );\n  },\n  totalTime: function()\n  {\n    return Math.min( this.stopTime, this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep) );\n  },\n  clone: function()\n  {\n    return new Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.offset, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.builder, this.next ? this.next.clone() : null, this.input );\n  },\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY) && (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n  isFinished: function()\n  {\n    return (this.state === EventState.FINISHED);\n  }\n\n});\n\n/**\n * Returns an Event given the attribute, the path, and a parsed options object.\n *\n * **See:** {{#crossLink \"Core/anim8.options:method\"}}anim8.options{{/crossLink}}\n *\n * @method fromOptions\n * @for Event\n * @param  {String} attr\n * @param  {Path} path\n * @param  {Object} options\n * @return {Event}\n */\nEvent.fromOptions = function(attr, path, options)\n{\n  return new Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.offset, options.repeat, options.scale, options.scaleBase );\n};\n\n\n/**\n * A factory creates Animator instances for subjects.\n *\n * @class Factory\n * @constructor\n */\nfunction Factory()\n{\n  this.priority = 0;\n}\n\nClass.define( Factory,\n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   *\n   * @method is\n   * @param  {Any} subject\n   * @return {Boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   *\n   * @method animatorFor\n   * @param  {Any} subject\n   * @return {Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   *\n   * @method animatorsFor\n   * @param {Any} subject\n   * @param {Array} animators\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   *\n   * @method destroy\n   * @param {Animator} animator\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute. An attribute\n   * descriptor is an object with at least the following properties:\n   *\n   * - `name` = the name of the attribute (same as `attr`)\n   * - `calculatorName` = the name of the calculator for the attribute\n   * - `calculator` = the calculator for the attribute\n   * - `defaultValue` = the default value for the attribute\n   * - `parse` = a method to pass a value and have the calculator parse it and\n   *             return the defaultValue if it was invalid\n   * - `cloneDefault` = a method which returns a clone of the default value\n   *\n   * @method attribute\n   * @param {String} attr\n   * @return {Object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n});\n\n\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @param {FastMap|Object} map\n * @class FastMap\n * @constructor\n */\nfunction FastMap(map)\n{\n  this.reset();\n\n  if ( map instanceof FastMap )\n  {\n    this.putMap( map );\n  }\n  else if ( isObject( map ) )\n  {\n    for (var prop in map)\n    {\n      this.put( prop, map[ prop ] );\n    }\n  }\n}\n\nClass.define( FastMap,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @method reset\n   * @chainable\n   */\n  reset: function()\n  {\n    /**\n     * An array of the values in this map.\n     *\n     * @property {Array} values\n     */\n    this.values = [];\n\n    /**\n     * An array of the keys in this map.\n     *\n     * @property {Array} keys\n     */\n    this.keys = [];\n\n    /**\n     * An object of key to index mappings.\n     *\n     * @property {Object} indices\n     */\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @method put\n   * @param {String} key\n   * @param {V} value\n   * @chainable\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   *\n   * @method putMap\n   * @param {FastMap} map\n   * @chainable\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @method get\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @method remove\n   * @param {String} key\n   * @chainable\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @method removeAt\n   * @param {Number} index\n   * @chainable\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   *\n   * @method indexOf\n   * @param {String} key\n   * @return {Number}\n   */\n  indexOf: function(key)\n  {\n    return coalesce( this.indices[ key ], -1 );\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @method has\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns whether the given input has overlap with keys in this map.\n   *\n   * @method hasOverlap\n   * @param {FastMap|Object} map\n   * @return {Boolean}\n   */\n  hasOverlap: function(map)\n  {\n    var keys = this.keys;\n    var indices = map.indices;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      if ( keys[i] in indices )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @method size\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Clears all keys & values from the map.\n   *\n   * @method clear\n   * @chainable\n   */\n  clear: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  }\n\n});\n\n\n// TODO\n\nfunction Movie()\n{\n  this.events = [];\n  this.currentTime = 0;\n  this.subjects = new Animators();\n  this.index = 0;\n}\n\nClass.define( Movie,\n{\n  select: function(subjects)\n  {\n\n  },\n  at: function(time)\n  {\n    var at = $time( time, false );\n\n    if ( at === false )\n    {\n      throw 'Invalid time in Movie.at: ' + time;\n    }\n\n    this.currentTime = at;\n  },\n  move: function(time)\n  {\n    var by = $time( time, false );\n\n    if ( by === false )\n    {\n      throw 'Invalid time in Movie.move: ' + time;\n    }\n\n    this.at( this.currentTime + by );\n  },\n  wait: function(time)\n  {\n\n  },\n  after: function(callback, context)\n  {\n\n  },\n  invoke: function(callback, context)\n  {\n\n  },\n  play: function(animation, options, all)\n  {\n    var attr = this.getAttrimators( animation, options );\n    var dura = attr.timeRemaining();\n\n  },\n  queue: function(animation, options)\n  {\n\n  },\n  transition: function(transition, animation, options, all)\n  {\n    var tran = $transition( transition );\n    var attr = this.getAttrimators( animation, options );\n\n  },\n  sequence: function(delay)\n  {\n\n  },\n  _add: function(event)\n  {\n\n  },\n  getAttrimators: function(animation, options)\n  {\n    return $attrimatorsFor( animation, options );\n  }\n});\n\neventize( Movie.prototype );\n\nfunction MovieEvent(time, type, parameters)\n{\n  this.time = time;\n  this.type = type;\n  this.parameters = parameters;\n}\n\nfunction MoviePlayer(movie)\n{\n  this.movie = movie;\n  this.startTime = 0;\n  this.referenceTime = 0;\n  this.direction = 1;\n  this.currentIndex = 0;\n}\n\n\n/**\n * Instantiates a new Oncer which extends Attrimator.\n *\n * @param {String} attribute\n * @param {T} value\n * @param {String|Number} delay\n * @param {Boolean} hasInitialState\n * @param {Builder} builder\n * @param {Attrimator} next\n * @class Oncer\n * @constructor\n * @extends Attrimator\n */\nfunction Oncer( attribute, value, delay, hasInitialState, builder, next, input )\n{\n  this.reset( attribute, builder, next );\n\n  /**\n   * The value that's set to the animator once.\n   *\n   * @property {T} value\n   */\n  this.value = value;\n\n  /**\n   * Whether or not this event has an initial value which can be applied at the\n   * start of the animation (or when\n   * {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} is invoked).\n   *\n   * @property {Boolean} hasInitialState\n   */\n  this.hasInitialState  = coalesce( hasInitialState, true );\n\n  this.delay            = $delay( delay );\n  this.applied          = false;\n  this.input            = input;\n}\n\nClass.extend( Oncer, Attrimator,\n{\n  /**\n   * Computes the value of this Oncer.\n   *\n   * @method getValue\n   * @return {T}\n   */\n  getValue: function()\n  {\n    return isFunction( this.value ) ? this.value() : this.value;\n  },\n\n  finish: function(frame)\n  {\n    var update = !this.applied;\n\n    if ( update )\n    {\n      frame[ this.attribute ] = this.getValue();\n\n      this.applied = true;\n    }\n\n    return update;\n  },\n\n  start: function(now, animator)\n  {\n    this.prestart( now );\n\n    this.value = animator.getAttribute( this.attribute ).parse( this.value );\n\n    if ( isComputed( this.value ) )\n    {\n      this.value = this.value( this, animator );\n    }\n\n    this.applied = false;\n  },\n\n  startCycle: function(frame)\n  {\n    return this.hasInitialState && this.finish( frame );\n  },\n\n  update: function(elapsed, frame)\n  {\n    return elapsed >= this.delay && this.finish( frame );\n  },\n\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay )\n    {\n      return false;\n    }\n\n    return this.getValue();\n  },\n\n  totalTime: function()\n  {\n    return Math.min( this.stopTime, this.delay );\n  },\n\n  clone: function()\n  {\n    return new Oncer( this.attribute, this.value, this.delay, this.hasInitialState, this.builder, this.next ? this.next.clone() : null );\n  },\n\n  hasComputed: function()\n  {\n    return isComputed( this.value );\n  },\n\n  isInfinite: function()\n  {\n    return false;\n  },\n\n  isFinished: function()\n  {\n    return this.applied;\n  }\n  \n});\n\n\n/**\n * Path class computes a value given a delta value [0, 1].\n *\n * @class Path\n * @constructor\n */\nfunction Path()\n{\n}\n\nClass.define( Path,\n{\n\n  /**\n   * Resets the path with the given name, calculator, and points.\n   *\n   * @method reset\n   * @param {String|false} name\n   * @param {anim8.Calculator} calculator\n   * @param {Array} points\n   */\n  reset: function(calculator, points)\n  {\n    this.calculator = $calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * Computes a value at the given delta setting and returning out.\n   *\n   * @method compute\n   * @param {T} out\n   * @param {Number} delta\n   * @return {T}\n   */\n  compute: function(out, delta)\n  {\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * Determines if this path has at least one computed value.\n   *\n   * **See:** {{#crossLink \"anim8.computed\"}}{{/crossLink}}\n   *\n   * @method reset\n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    var ps = this.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Replaces any computed values in this path with the result from invoking\n   * the function and returns a clone of this path.\n   *\n   * @method replaceComputed\n   * @return {anim8.Path}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n\n    return clone;\n  },\n\n  /**\n   * Resolves and returns the point at the given index.\n   *\n   * @method resolvePoint\n   * @param {Number} i\n   * @return {T}\n   */\n  resolvePoint: function(i)\n  {\n    return resolve( this.points[ i ] );\n  },\n\n  /**\n   * Returns whether the path is linear. Linear paths go directly from point to\n   * point where curved paths do not. Linear paths can have their length\n   * calculated fairly easily however curves you must compute length with a\n   * given granularity.\n   *\n   * @method isLinear\n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return true;\n  },\n\n  /**\n   * Computes the length of the Path with a given granularity. Granularity is\n   * used for non-linear paths - it's the number of segments are calculated on\n   * the path where the length of the segments are summed and returned as the\n   * length.\n   *\n   * @method length\n   * @param {Number} granularity\n   * @return {Number}\n   */\n  length: function(granularity)\n  {\n    var distance = 0;\n    var calc = this.calculator;\n\n    if ( this.isLinear() )\n    {\n      var prev = this.resolvePoint( 0 );\n\n      for (var i = 1; i < this.points.length; i++)\n      {\n        var next = this.resolvePoint( i );\n\n        distance += calc.distance( prev, next );\n\n        prev = next;\n      }\n    }\n    else\n    {\n      var deltadelta = 1.0 / granularity;\n      var delta = deltadelta;\n      var prev = calc.clone( this.resolvePoint( 0 ) );\n      var temp = calc.create();\n\n      for (var i = 1; i <= granularity; i++)\n      {\n        var next = this.compute( temp, delta );\n\n        distance += calc.distance( prev, next );\n        delta += deltadelta;\n\n        temp = prev;\n        prev = next;\n      }\n    }\n\n    return distance;\n  }\n\n});\n\n\n/**\n * Animates a single attribute with a velocity and acceleration.\n *\n * @param {String} attribute\n * @param {Builder} builder\n * @param {Calculator} calculator\n * @param {T} position\n * @param {T} velocity\n * @param {T} acceleration\n * @param {Number} terminal\n * @param {Number} stopTime\n * @class Physics\n * @constructor\n * @extends Attrimator\n */\nfunction Physics( attribute, builder, calculator, position, velocity, acceleration, terminal, stopTime )\n{\n  this.reset( attribute, builder, null );\n\n  this.calculator   = calculator;\n  this.position     = position;\n  this.velocity     = velocity;\n  this.acceleration = acceleration;\n  this.terminal     = $number( terminal, Number.POSITIVE_INFINITY );\n  this.stopTime     = $time( stopTime, Number.POSITIVE_INFINITY );\n  this.finished     = false;\n}\n\nClass.extend( Physics, Attrimator,\n{\n  /**\n   * Parses a value for the animator given a default value.\n   *\n   * @method parseValue\n   * @param {anim8.Animator} animator.\n   * @param {T} value\n   * @param {T} defaultValue\n   * @return {T}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( isComputed( parsed ) )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n\n  /**\n   * Resolves the velocity to a value.\n   *\n   * @method resolveVelocity\n   * @return {T}\n   */\n  resolveVelocity: function()\n  {\n    return resolve( this.velocity );\n  },\n\n  /**\n   * Resolves the acceleration to a value.\n   *\n   * @method resolveAcceleration\n   * @return {T}\n   */\n  resolveAcceleration: function()\n  {\n    return resolve( this.acceleration );\n  },\n\n  start: function(now, animator)\n  {\n    this.prestart( now );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = $calculator( coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator     = calc;\n    this.position       = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.initalPosition = calc.clone( this.position );\n    this.velocity       = this.parseValue( animator, this.velocity, calc.ZERO );\n    this.acceleration   = this.parseValue( animator, this.acceleration, calc.ZERO );\n    this.temp           = calc.create();\n  },\n\n  hasComputed: function()\n  {\n    return isComputed( this.position ) ||\n           isComputed( this.velocity ) ||\n           isComputed( this.acceleration );\n  },\n\n  update: function(elapsed, frame)\n  {\n    var value = this.valueAt( elapsed, this.temp, true );\n\n    if ( value !== false )\n    {\n      frame[ this.attribute ] = this.position = value;\n\n      return true;\n    }\n\n    var calc = this.calculator;\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, Physics.MAX_DT );\n    var vel = calc.copy( this.temp, this.resolveVelocity() );\n    var acc = this.resolveAcceleration();\n    var pos = this.position;\n\n    vel = calc.adds( vel, acc, dt );\n\n    if ( this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      vel = calc.clamp( vel, 0, this.terminal );\n    }\n\n    pos = calc.adds( pos, vel, dt );\n\n    this.position = pos;\n\n    if ( !isFunction( this.velocity ) )\n    {\n      this.velocity = calc.copy( this.velocity, vel );\n    }\n\n    frame[ this.attribute ] = pos;\n\n    return true;\n  },\n\n  valueAt: function(time, out, usePosition)\n  {\n    if ( isFunction( this.velocity ) || isFunction( this.acceleration ) || this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      return false;\n    }\n\n    time -= this.delay;\n    time *= 0.001;\n\n    var calc = this.calculator;\n    var value = usePosition ? calc.copy( this.position, this.initalPosition ) : calc.copy( out, this.initalPosition );\n    value = calc.adds( value, this.velocity, time );\n    value = calc.adds( value, this.acceleration, time * time );\n\n    return value;\n  },\n\n  clone: function()\n  {\n    return new Physics( this.attribute, this.builder, this.calculator, this.position, this.velocity, this.acceleration, this.terminal, this.stopTime );\n  },\n\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  isFinished: function()\n  {\n    return this.finished;\n  }\n\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nPhysics.MAX_DT = 0.1;\n\n\n/**\n * Creates a seqeuence for the given animators offseting animations be the given\n * delay and easing.\n *\n * @param {Animators} animators\n * @param {String|Number} delay\n * @param {String|Array|Function} easing\n * @class Sequence\n * @constructor\n */\nfunction Sequence(animators, delay, easing)\n{\n  /**\n   * The animators to play a sequence of animations against.\n   *\n   * @property {Animators} animators\n   */\n  this.animators = animators;\n\n  /**\n   * The delay in milliseconds between animations.\n   *\n   * @property {Number} delay\n   */\n  this.delay = $delay( delay );\n\n  /**\n   * The easing function to use to calculate the delay offset for an animation.\n   *\n   * @property {Function} easing\n   */\n  this.easing = $easing( easing );\n}\n\nClass.define( Sequence,\n{\n  /**\n   * Returns the maximum delay for delaying generated attrimators.\n   *\n   * @method maxDelay\n   * @return {Number}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length() - 1);\n  },\n\n  /**\n   * Creates an AttrimatorMap with the given options for the animator at the\n   * given index.\n   *\n   * @method createAttrimators\n   * @param {Animation} animation\n   * @param {Object} options\n   * @param {Number} i\n   * @return {AttrimatorMap}\n   */\n  createAttrimators: function(template, i)\n  {\n    var attrimatorMap = template.clone();\n    var attrimators = attrimatorMap.values;\n    var delta = i / (this.animators.length() - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n\n    for (var k = attrimators.length - 1; k >= 0; k--)\n    {\n      attrimators[ k ].delay += delayOffset;\n    }\n\n    return attrimatorMap;\n  },\n\n  /**\n   * Reverses the sequence by reversing the underlying array of animators.\n   *\n   * @method reverse\n   * @chainable\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n\n  /**\n   * Plays the animation across the animators in this sequence.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/play:method\"}}Animator.play{{/crossLink}}\n   *\n   * @method play\n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [all=false]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  play: function(animation, options, all, cache)\n  {\n    var template = $attrimatorsFor( animation, options, cache );\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( template, i );\n\n      animator.newCycle( attrimators );\n      animator.playAttrimators( attrimators, all );\n    });\n\n    return this.add();\n  },\n\n  /**\n   * Queues the animation across the animators in this sequence.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/queue:method\"}}Animator.queue{{/crossLink}}\n   *\n   * @method queue\n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  queue: function(animation, options, cache)\n  {\n    var template = $attrimatorsFor( animation, options, cache );\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n\n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var attrimatorMap = sequence.createAttrimators( template, i );\n      var attrimators = attrimatorMap.values;\n\n      for (var k = attrimators.length - 1; k >= 0; k--)\n      {\n        attrimators[ k ].delay += delayOffset;\n      }\n\n      animator.newCycle( attrimatorMap );\n      animator.queueAttrimators( attrimatorMap );\n    });\n\n    return this.add();\n  },\n\n  /**\n   * Transitions into the animation across the animators in this sequence.\n   *\n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/transition:method\"}}Animator.transition{{/crossLink}}\n   *\n   * @method transition\n   * @param {String|Array|Object} transition\n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [all=false]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = $transition( transition );\n    var template = $attrimatorsFor( animation, options, cache );\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( template, i );\n\n      animator.newCycle( attrimators );\n      animator.transitionAttrimators( transition, attrimators, all );\n    });\n\n    return this.add();\n  },\n\n  /**\n   * Activates all animators in this sequence and returns this.\n   *\n   * **See:** {{#crossLink \"Animator/activate:method\"}}Animator.activate{{/crossLink}}\n   *\n   * @method add\n   * @chainable\n   */\n  add: function()\n  {\n    this.animators.activate();\n\n    return this;\n  }\n\n});\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently\n * enacting on the position based on the implementing classes logic.\n *\n * @class Spring\n * @constructor\n * @extends Attrimator\n */\nfunction Spring()\n{\n}\n\nClass.extend( Spring, Attrimator,\n{\n\n  /**\n   * Resets the spring's properties.\n   *\n   * @method set\n   * @param {String} attribute\n   * @param {Calculator|String} calculator\n   * @param {T|Function|true} rest\n   * @param {T|Function|true} position\n   * @param {T|Function|true} velocity\n   * @param {T|Function|true} gravity\n   * @param {Boolean} finishOnRest\n   */\n  set: function(attribute, calculator, rest, position, velocity, gravity, finishOnRest)\n  {\n    this.reset( attribute, null, null );\n\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = velocity;\n    this.finishOnRest = finishOnRest;\n  },\n\n  /**\n   * Resolves the rest to the expected format.\n   *\n   * @method resolveRest\n   * @return {T}\n   */\n  resolveRest: function()\n  {\n    return resolve( this.rest );\n  },\n\n  /**\n   * Method that's invoked on each spring update.\n   *\n   * @method updateVelocity\n   * @param {Number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  },\n\n  start: function(now, animator)\n  {\n    this.prestart( now );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = $calculator( coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.ZERO );\n    this.velocity   = this.parseValue( animator, this.velocity, calc.ZERO );\n  },\n\n  hasComputed: function()\n  {\n    return isComputed( this.rest ) ||\n           isComputed( this.position ) ||\n           isComputed( this.gravity ) ||\n           isComputed( this.velocity );\n  },\n\n  update: function(elapsed, frame)\n  {\n    var calc = this.calculator;\n\n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, Spring.MAX_DT );\n\n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.clone( this.position );\n\n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n\n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, Spring.EPSILON );\n\n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    else if ( this.finishOnRest && calc.isZero( this.velocity ) )\n    {\n      this.finished = true;\n    }\n\n    return updated;\n  },\n\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  isFinished: function()\n  {\n    return this.finished;\n  }\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nSpring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nSpring.EPSILON = 0.0001;\n\n\n/**\n * @module anim8\n * @class Core\n */\n\n/**\n * Converts a subject into an animator and returns it. If the subject\n * is already an animator it's returned immediately. If the subject can't be\n * animated then false is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.factoryFor:method\"}}{{/crossLink}}\n *\n * @param {Any} subject\n * @return {Animator|false}\n * @method anim8\n */\nfunction anim8(subject)\n{\n  if ( subject instanceof Animator )\n  {\n    return subject;\n  }\n\n  var factory = $factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n}\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\neventize( anim8 );\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {Array} subject\n * @return {Animators}\n * @method anim8s\n */\nfunction anim8s(subjects)\n{\n  var factory = $factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new Animators( animators );\n  }\n\n  if ( !isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new Animators( animators );\n}\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n *\n * @property {Boolean} anim8.running\n * @readOnly\n */\nvar running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n *\n * @property {Boolean} anim8.live\n */\nvar live = false;\n\n/**\n * The anim8 instance for all active animators.\n *\n * @property {Animators} anim8.animating\n * @readOnly\n */\nvar animating = new Animators();\n\n\nfunction isRunning()\n{\n  return running;\n}\n\nfunction isLive()\n{\n  return live;\n}\n\nfunction setLive(newLive)\n{\n  live = newLive;\n}\n\n/**\n * Adds an animator to the list of animating if it isn't there already. If the\n * animation loop isn't currently running it's started.\n *\n * @method anim8.add\n * @param {Animator} animator\n */\nfunction activateAnimator(animator)\n{\n  pushAnimator( animator );\n\n  activate();\n}\n\nfunction pushAnimator(animator)\n{\n  if ( !animator.active )\n  {\n    animator.active = true;\n    animating.push( animator );\n  }\n}\n\nfunction activate()\n{\n  if ( !running )\n  {\n    running = true;\n\n    anim8.trigger('starting');\n\n    requestRun( run );\n  }\n}\n\n/**\n * The function to call if animations need to be done.\n *\n * @method anim8.requestRun\n * @param {Function} callback\n */\nvar requestRun = (function()\n{\n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = global.requestAnimationFrame;\n\n  for (var x = 0; x < vendors.length && !requestor; ++x)\n  {\n    requestor = global[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n\n  if (!requestor)\n  {\n    var lastTime = 0;\n\n    return function(callback)\n    {\n      var currentTime = now();\n      var timeToCall = Math.max( Defaults.pauseTime, Defaults.frameRate - (currentTime - lastTime) );\n      var id = global.setTimeout( function() { callback( currentTime + timeToCall ); }, timeToCall );\n      lastTime = currentTime + timeToCall;\n      return id;\n    };\n  }\n\n  return function(callback)\n  {\n    requestor( callback );\n  };\n\n})();\n\n/**\n * Executes an animation loop cycle which consists of four operations:\n *\n * 1. Call preupdate on all Animators\n * 2. Call update on all Animators\n * 3. Call apply on all Animators\n * 4. Remove finished Animators\n *\n * When there are no more animating the loop cycle is stopped.\n *\n * @method anim8.run\n */\nfunction run()\n{\n  anim8.trigger('begin');\n\n  var currentTime = now();\n  var active = animating.length();\n\n  // notify animators that we're about to update\n  animating.preupdate( currentTime, active );\n\n  // update animating based on the current time\n  animating.update( currentTime, active );\n\n  // apply the attributes calculated\n  animating.apply( active );\n\n  // if the animator is done remove it\n  animating.filter( animating.handleFinished );\n\n  // The loop has ended!\n  anim8.trigger('end');\n\n  // if there are animators still remaining call me again!\n  if ( animating.length() || live )\n  {\n    requestRun( run );\n  }\n  else\n  {\n    running = false;\n\n    anim8.trigger('finished');\n  }\n}\n\n/**\n * Pauses all animators.\n *\n * **See:** {{#crossLink \"Animator/pause:method\"}}{{/crossLink}}\n *\n * @method anim8.pause\n * @param {String|Array} attributes\n * @return {anim8}\n */\nfunction pause(attributes)\n{\n  animating.pause( attributes );\n\n  return anim8;\n}\n\n/**\n * Resumes all animators.\n *\n * **See:** {{#crossLink \"Animator/resume:method\"}}{{/crossLink}}\n *\n * @method anim8.resume\n * @param {String|Array} attributes\n * @return {anim8}\n */\nfunction resume(attributes)\n{\n  animating.resume( attributes );\n\n  return anim8;\n}\n\n/**\n * Stops all animators.\n *\n * **See:** {{#crossLink \"Animator/stop:method\"}}{{/crossLink}}\n *\n * @method anim8.stop\n * @param {String|Array} attributes\n * @return {anim8}\n */\nfunction stop(attributes)\n{\n  animating.stop( attributes );\n\n  return anim8;\n}\n\n/**\n * Ends all animators.\n *\n * **See:** {{#crossLink \"Animator/end:method\"}}{{/crossLink}}\n *\n * @method anim8.end\n * @param {String|Array} attributes\n * @return {anim8}\n */\nfunction end(attributes)\n{\n  animating.end( attributes );\n\n  return anim8;\n}\n\n/**\n * Finishes all animators.\n *\n * **See:** {{#crossLink \"Animator/finish:method\"}}{{/crossLink}}\n *\n * @method anim8.finish\n * @param {String|Array} attributes\n * @return {anim8}\n */\nfunction finish(attributes)\n{\n  animating.finish( attributes );\n\n  return anim8;\n}\n\n/**\n * Interrupts all animators from repeating currently running animations.\n *\n * **See:** {{#crossLink \"Animator/nopeat:method\"}}{{/crossLink}}\n *\n * @method anim8.nopeat\n * @param {String|Array} attributes\n * @return {anim8}\n */\nfunction nopeat(attributes)\n{\n  animating.nopeat( attributes );\n\n  return anim8;\n}\n\n\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n *\n * @method anim8.color\n * @for Core\n * @param {Number} [r=255]\n * @param {Number} [g=255]\n * @param {Number} [b=255]\n * @param {Number} [a=1]\n * @return {Object}\n */\nfunction Color(r, g, b, a)\n{\n  return {\n    r: coalesce( r, 255 ),\n    g: coalesce( g, 255 ),\n    b: coalesce( b, 255 ),\n    a: coalesce( a, 1.0 )\n  };\n}\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nColor.parsers =\n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, parseInt, 255),\n          g: this.parseComponent(input.g, parseInt, 255),\n          b: this.parseComponent(input.b, parseInt, 255),\n          a: this.parseComponent(input.a, parseFloat, 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = parseFunction(t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  },\n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @method anim8.color.parse\n * @for Core\n * @param {String} input\n * @return {Object|False}\n */\nColor.parse = function(input)\n{\n  var cp = Color.parsers;\n\n  for (var i = 0; i < cp.length; i++)\n  {\n    var parsed = cp[ i ].parse( input );\n\n    if (parsed !== false)\n    {\n      return parsed;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Formats a color to a string.\n *\n * @method anim8.color.format\n * @for Core\n * @param {Object} color\n * @return {String}\n */\nColor.format = function(color)\n{\n  var ca = clamp( coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( clamp( coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( clamp( coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( clamp( coalesce( color.b, 255 ), 0, 255 ) );\n\n  if (ca === 1.0)\n  {\n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n\n    if (r.length === 1) {\n      r = '0' + r;\n    }\n    if (g.length === 1) {\n      g = '0' + g;\n    }\n    if (b.length === 1) {\n      b = '0' + b;\n    }\n\n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};\n\n\n\n/**\n * A collection of computed functions. Computed functions are functions that\n * are invoked once at the start of an animation given the\n * {{#crossLink \"Attrimator\"}}{{/crossLink}} and\n * {{#crossLink \"Animator\"}}{{/crossLink}} and the result replaces the function.\n *\n * **See:** {{#crossLink \"anim8.computed/current:method\"}}{{/crossLink}},\n *          {{#crossLink \"anim8.computed/relative:method\"}}{{/crossLink}},\n *          {{#crossLink \"anim8.computed/random:method\"}}{{/crossLink}}\n *\n * @class anim8.computed\n */\nfunction computed(funcOrName, func)\n{\n  if ( isString( funcOrName ) && isFunction( func ) )\n  {\n    func.computed = true;\n\n    computed[ funcOrName ] = func;\n\n    return func;\n  }\n  else if ( isFunction( funcOrName ) )\n  {\n    funcOrName.computed = true;\n\n    return funcOrName;\n  }\n\n  throw funcOrName + ' and ' + func + ' are not valid parameters for creating a computed function.';\n}\n\n/**\n * Calculates and returns the current value for an\n * {{#crossLink \"Animator\"}}{{/crossLink}}. If the animator doesn't have a\n * current value the default value for the attribute is returned.\n *\n * @method current\n * @param {Attrimator} attrimator\n * @param {Animator} animator\n * @return {T}\n */\ncomputed('current', function(attrimator, animator)\n{\n  var attr = attrimator.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n});\n\n/**\n * Calculates a value relative to the attribute value currently in the animator.\n * A mask can be used for mixed relative & absolute values in a single value\n * where 1 makes it relative and 0 makes it absolute.\n *\n * **Examples:**\n *\n *     anim8.computed.relative( 40 ); // returns function which adds 40 to current value\n *     anim8.computed.relative( 40, 0.5 ); // returns function which adds 40 to half of the current value\n *     anim8.computed.relative( {x: 20, y: 10}, {x: 1, y: 0} ); // returns function which adds 20 to the x of the current value and sets the y of the current value to 10\n *\n * @method relative\n * @param {T} relativeAmount\n * @param {T} mask\n * @return {Function}\n */\ncomputed('relative', function(relativeAmount, mask)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(attrimator, animator)\n  {\n    var attr = attrimator.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = attribute.cloneDefault();\n    }\n\n    if ( mask )\n    {\n      current = calc.mul( current, mask );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  relativeFunction.relativeAmount = relativeAmount;\n  relativeFunction.mask = mask;\n\n  return relativeFunction;\n});\n\n/**\n * Returns a random value based on the given random selection.\n *\n * 1. If an array is given an item is randomly chosen from that array.\n * 2. If an instance of {{#crossLink \"Path\"}}{{/crossLink}} is given a point is randomly computed and returned.\n * 3. If an object with min & max values is given a random value between them is returned.\n *\n * **Examples:**\n *\n *     anim8.computed.random( [1, 2, 3] ); // returns function which returns a 1, 2, or 3\n *     anim8.computed.random( {min: 1, max: 5} ); // returns function which returns a value between 1 and 5\n *     anim8.computed.random( {min: {x: 0, y: 0}, max: {x: 100, y: 200}} ); // returns function which returns a point in the rectangle {0,0,100,200}\n *     anim8.computed.random( path ); // returns function which returns a value anywhere along the given path\n *\n * @method random\n * @param  {Array|Object|Path} randomSelection\n * @return {Function}\n */\ncomputed('random', function(randomSelection)\n{\n  var randomFunction = null;\n\n  if ( isArray( randomSelection ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var selected = randomSelection[ Math.floor( Math.random() * randomSelection.length ) ];\n\n      return calc.parse( selected, calc.ZERO );\n    };\n  }\n  else if ( randomSelection instanceof Path )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n\n      return randomSelection.compute( calc.create(), Math.random() );\n    };\n  }\n  else if ( isObject( randomSelection ) && isDefined( randomSelection.min ) && isDefined( randomSelection.max ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var resolvedMin = resolve( randomSelection.min );\n      var resolvedMax = resolve( randomSelection.max );\n      var min = calc.parse( resolvedMin, calc.ZERO );\n      var max = calc.parse( resolvedMax, calc.ZERO );\n\n      return calc.random( calc.create(), min, max );\n    };\n  }\n  else\n  {\n    throw 'Invalid random input: ' + randomSelection;\n  }\n\n  // Place the input on the function if the user wants to modify it live\n  randomFunction.randomSelection = randomSelection;\n\n  return computed( randomFunction );\n});\n\n/**\n * Determines whether the given value is a computed value. A computed value is\n * function with a variable 'computed' set to a true value.\n *\n * @param  {any} x\n * @return {Boolean}\n */\nfunction isComputed(x)\n{\n  return isFunction( x ) && x.computed;\n}\n\n\n/**\n * Creates a function which calls a method on all elements in the array or on\n * the first element.\n *\n * @method delegate\n * @param {String} functionName\n * @param {String} returning\n */\nfunction delegate(functionName, returning)\n{\n  switch (returning)\n  {\n  case delegate.RETURN_THIS:\n    return function()\n    {\n      var array = this.$ || this;\n\n      for (var i = 0; i < array.length; i++)\n      {\n        array[i][functionName].apply( array[i], arguments );\n      }\n\n      return this;\n    };\n\n  case delegate.RETURN_RESULTS:\n    return function()\n    {\n      var array = this.$ || this;\n      var results = [];\n\n      for (var i = 0; i < array.length; i++)\n      {\n        results.push( array[i][functionName].apply( array[i], arguments ) );\n      }\n\n      return results;\n    };\n\n  case delegate.RETURN_FIRST:\n    return function()\n    {\n      var array = this.$ || this;\n\n      return array.length === 0 ? undefined : array[0][functionName].apply( array[0], arguments );\n    };\n\n  case delegate.RETURN_TRUE:\n    return function()\n    {\n      var array = this.$ || this;\n\n      for (var i = 0; i < array.length; i++)\n      {\n        if ( array[i][functionName].apply( array[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n\n  return noop;\n}\n\n/**\n * this is returned at the end.\n *\n * @property RETURN_THIS\n * @for delegate\n */\ndelegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n *\n * @property RETURN_RESULTS\n * @for delegate\n */\ndelegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n *\n * @property RETURN_FIRST\n * @for delegate\n */\ndelegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n *\n * @property RETURN_TRUE\n * @for delegate\n */\ndelegate.RETURN_TRUE = 'true';\n\n\n/**\n * Creates a composite dyanmic attribute which is an object of existing\n * attributes which takes advantage of an object based calculator.\n *\n * **Example:**\n *\n *     anim8.object.attribute.topLeft = {\n *       dynamic: anim8.composite({x:'left', y:'top'}),\n *       calculator:'2d',\n *       defaultValue: {x: 0, y: 0},\n *       defaultUnit: 'px'\n *     };\n *\n * Which results in the values in 'topLeft' being placed in left and top.\n *\n * @method anim8.composite\n * @param  {Object} map\n * @for Core\n * @return {Function}\n */\nfunction composite( map )\n{\n  return function( value, frame )\n  {\n    for ( var prop in map )\n    {\n      frame[ map[ prop ] ] = value[ prop ];\n    }\n  };\n}\n\n/**\n * Creates a partial dynamic attribute which is a value that's placed in a\n * sub-property of an attribute.\n *\n * **Example:**\n *\n *     anim8.object.attribute.x = {\n *       dynamic: anim8.partial( 'position', 'x' ),\n *       calculator: 'number',\n *       defaultValue: 0,\n *       defaultUnit: 'px'\n *     };\n *\n * Which results in the values in 'x' being placed in position.x\n *\n * @method anim8.partial\n * @param {String} attribute\n * @param {String} subattribute\n * @for Core\n * @return {Function}\n */\nfunction partial( attribute, subattribute )\n{\n  return function( value, frame )\n  {\n    if ( !isObject( frame[ attribute ] ) )\n    {\n      frame[ attribute ] = {};\n    }\n\n    frame[ attribute ][ subattribute ] = value;\n  };\n}\n\n/**\n * Creates a dynamic attribute which spreads its value over several attributes.\n *\n * **Example:**\n *\n *     anim8.dom.attribute.padding = {\n *       dynamic: anim8.spread( ['paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom' ] ),\n *       calculator: 'number',\n *       defaultValue: 0,\n *       defaultUnit: 'px'\n *     };\n *\n * Which results in the value in 'padding' being placed in paddingLeft, paddingTop,\n * paddingRight, and paddingBottom.\n *\n * @param  {Array} attributes\n * @return {Function}\n */\nfunction spread( attributes )\n{\n  return function( value, frame )\n  {\n    for ( var i = 0; i < attributes.length; i++ )\n    {\n      frame[ attributes[ i ] ] = value;\n    }\n  };\n}\n\n\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( event, [argument] )\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger`\n *    functions to.\n */\nfunction eventize(target)\n{\n  Class.defineProperty( target, 'on', on );\n  Class.defineProperty( target, 'once', once );\n  Class.defineProperty( target, 'off', off );\n  Class.defineProperty( target, 'trigger', trigger );\n}\n\n  // Adds a listener to $this\nfunction addListener($this, property, events, callback, context)\n{\n  var events = toArray( events, ' ' );\n\n  if ( !isDefined( $this[ property ] ) )\n  {\n    Class.defineProperty( $this, property, {} );\n  }\n\n  for (var i = 0; i < events.length; i++)\n  {\n    if ( !isDefined( $this[ property ][ events[i] ] ) )\n    {\n      $this[ property ][ events[i] ] = [];\n    }\n\n    $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n  }\n}\n\n// Removes a listener from an array of listeners.\nfunction removeListeners(listeners, event, callback)\n{\n  if (listeners && event in listeners)\n  {\n    var eventListeners = listeners[ event ];\n\n    for (var k = eventListeners.length - 1; k >= 0; k--)\n    {\n      if (eventListeners[ k ][0] === callback)\n      {\n        eventListeners.splice( k, 1 );\n      }\n    }\n  }\n}\n\n// Deletes a property from the given object if it exists\nfunction deleteProperty(obj, prop)\n{\n  if ( obj && prop in obj )\n  {\n    delete obj[ prop ];\n  }\n}\n\n// Triggers listeneers for the given event\nfunction triggerListeners(listeners, event, argument, clear)\n{\n  if (listeners && event in listeners)\n  {\n    var eventListeners = listeners[ event ];\n    var max = eventListeners.length;\n\n    for (var i = 0; i < max; i++)\n    {\n      var callback = eventListeners[ i ];\n\n      callback[0].call( callback[1], argument );\n    }\n\n    if ( clear )\n    {\n      if ( eventListeners.length !== max )\n      {\n        listeners[ event ] = eventListeners.slice( max );\n      }\n      else\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n}\n\n/**\n * Listens for every occurrence of the given events and invokes the callback\n * each time any of them are triggered.\n *\n * @method on\n * @for eventize\n * @param {String|Array|Object} events\n * @param {Function} callback\n * @param {Object} [context]\n * @chainable\n */\nfunction on(events, callback, context)\n{\n  addListener( this, '$on', events, callback, context );\n\n  return this;\n}\n\n/**\n * Listens for the next occurrence for each of the given events and invokes\n * the callback when any of the events are triggered.\n *\n * @method once\n * @for eventize\n * @param {String|Array|Object} events\n * @param {Function} callback\n * @param {Object} [context]\n * @chainable\n */\nfunction once(events, callback, context)\n{\n  addListener( this, '$once', events, callback, context );\n\n  return this;\n}\n\n/**\n * Stops listening for a given callback for a given set of events.\n *\n * **Examples:**\n *\n *     target.off();           // remove all listeners\n *     target.off('a b');      // remove all listeners on events a & b\n *     target.off(['a', 'b']); // remove all listeners on events a & b\n *     target.off('a', x);     // remove listener x from event a\n *\n * @method off\n * @for eventize\n * @param {String|Array|Object} [events]\n * @param {Function} [callback]\n * @chainable\n */\nfunction off(events, callback)\n{\n  // Remove ALL listeners\n  if ( !isDefined( events ) )\n  {\n    delete this.$on;\n    delete this.$once;\n  }\n  else\n  {\n    var events = toArray( events, ' ' );\n\n    // Remove listeners for given events\n    if ( !isFunction( callback ) )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        deleteProperty( this.$on, events[i] );\n        deleteProperty( this.$once, events[i] );\n      }\n    }\n    // Remove specific listener\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        removeListeners( this.$on, events[i], callback );\n        removeListeners( this.$once, events[i], callback );\n      }\n    }\n  }\n\n  return this;\n}\n\n/**\n * Triggers a single event optionally passing an argument to any listeners.\n *\n * @method trigger\n * @for eventize\n * @param {String} event\n * @param {Any} argument\n * @chainable\n */\nfunction trigger(event, argument)\n{\n  triggerListeners( this.$on, event, argument, false );\n  triggerListeners( this.$once, event, argument, true );\n\n  return this;\n}\n\n\nvar Animations = {};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and\n * transitioned into at a later time providing the name and optionally options\n * to override with.\n *\n * **See:** {{#crossLink \"Core/anim8.animation:method\"}}anim8.animation{{/crossLink}},\n *          {{#crossLink \"Core/anim8.options:method\"}}anim8.options{{/crossLink}}\n *\n * @method anim8.save\n * @for Core\n * @param {String} name\n * @param {Animation|String|Object} animation\n * @param {String|Object} [options]\n */\nfunction save( name, animation, options )\n{\n  var animation = $animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n\n  Animations[ key ] = animation;\n}\n\n\n/*\n * A calculator for objects with an x and y component (number)\n *\n * @class Calculator2d\n * @constructor\n * @extends Calculator\n */\nfunction Calculator2d()\n{\n  this.createConstants();\n}\n\nClass.extend( Calculator2d, Calculator,\n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return computed.current;\n    }\n    // When a number is given a uniform point is returned.\n    if ( isNumber( x ) )\n    {\n      return {\n        x: x,\n        y: x\n      };\n    }\n    // When an array is given, assume [x, y]\n    if ( isArray( x ) )\n    {\n      x = { x: x[0], y: x[1] };\n    }\n    // When an object is given, check for relative values.\n    if ( isObject( x ) )\n    {\n      var cx = coalesce( x.x, defaultValue.x );\n      var cy = coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n\n        if ( ix || iy )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0\n          };\n\n          return computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return computed.relative( { x: rx, y: rx } );\n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n\n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n\n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n\n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n\n    // If no value was given but the default value was given, clone it.\n    if ( isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );\n    }\n\n    return false;\n  },\n  copy: function(out, copy)\n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function()\n  {\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out)\n  {\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale)\n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale)\n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  interpolate: function(out, start, end, delta)\n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    return out;\n  },\n  distanceSq: function(a, b)\n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    return dx * dx + dy * dy;\n  },\n  isValid: function(a)\n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a)\n  {\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon)\n  {\n    return Math.abs(a.x) < epsilon &&\n           Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon)\n  {\n    return Math.abs(a.x - b.x) < epsilon &&\n           Math.abs(a.y - b.y) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    return out;\n  }\n});\n\n\n/**\n * A calculator for objects with an x, y, and z component (number)\n *\n * @class Calculator3d\n * @constructor\n * @extends Calculator\n */\nfunction Calculator3d()\n{\n  this.createConstants();\n}\n\nClass.extend( Calculator3d, Calculator,\n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return computed.current;\n    }\n    // When a number is given a uniform point is returned.\n    if ( isNumber( x ) )\n    {\n      return {\n        x: x,\n        y: x,\n        z: x\n      };\n    }\n    // When an array is given, assume [x, y, z]\n    if ( isArray( x ) )\n    {\n      x = { x: x[0], y: x[1], z: x[2] };\n    }\n    // When an object is given, check for relative values.\n    if ( isObject( x ) )\n    {\n      var cx = coalesce( x.x, defaultValue.x );\n      var cy = coalesce( x.y, defaultValue.y );\n      var cz = coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n\n        if ( ix || iy || iz )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0\n          };\n\n          return computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return computed.relative( { x: rx, y: rx, z: rx } );\n      }\n    }\n\n    // If no value was given but the default value was given, clone it.\n    if ( isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );\n    }\n\n    return false;\n  },\n  copy: function(out, copy)\n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    out.z = copy.z;\n    return out;\n  },\n  create: function()\n  {\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out)\n  {\n    out.x = 0.0;\n    out.y = 0.0;\n    out.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale)\n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    out.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale)\n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  },\n  interpolate: function(out, start, end, delta)\n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    out.z = (end.z - start.z) * delta + start.z;\n    return out;\n  },\n  distanceSq: function(a, b)\n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    var dz = a.z - b.z;\n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a)\n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a)\n  {\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon)\n  {\n    return Math.abs(a.x) < epsilon &&\n           Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon)\n  {\n    return Math.abs(a.x - b.x) < epsilon &&\n           Math.abs(a.y - b.y) < epsilon &&\n           Math.abs(a.z - b.z) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y + a.z * b.z;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    return out;\n  }\n});\n\n\n\n/**\n * A calculator for number primitives.\n *\n * @class CalculatorNumber\n * @constructor\n * @extends Calculator\n */\nfunction CalculatorNumber()\n{\n  this.createConstants();\n}\n\nClass.extend( CalculatorNumber, Calculator,\n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return computed.current;\n    }\n    // A raw number\n    if ( isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n\n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n\n    return defaultValue;\n  },\n  copy: function(out, copy)\n  {\n    return copy;\n  },\n  create: function()\n  {\n    return 0.0;\n  },\n  zero: function(out)\n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale)\n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale)\n  {\n    return out *= scale;\n  },\n  interpolate: function(out, start, end, delta)\n  {\n    return (end - start) * delta + start;\n  },\n  distanceSq: function(a, b)\n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  distance: function(a, b)\n  {\n    return Math.abs( a - b );\n  },\n  length: function(a)\n  {\n    return Math.abs( a );\n  },\n  lengthSq: function(a)\n  {\n    return a * a;\n  },\n  isValid: function(a)\n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a)\n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon)\n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon)\n  {\n    return Math.abs(a - b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    return Math.min( a, b );\n  },\n  max: function(out, a, b)\n  {\n    return Math.max( a, b );\n  },\n  dot: function(a, b)\n  {\n    return a * b;\n  }\n});\n\n\n/**\n * A calculator for objects with an x, y, z, and angle components.\n *\n * @class CalculatorQuaternion\n * @constructor\n * @extends Calculator\n */\nfunction CalculatorQuaternion()\n{\n  this.createConstants();\n}\n\nClass.extend( CalculatorQuaternion, Calculator,\n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n    if ( isNumber( x ) )\n    {\n      return {\n        x: 0,\n        y: 0,\n        z: 1,\n        angle: x\n      };\n    }\n    // When an array is given, assume [x, y, z, angle]\n    if ( isArray( x ) )\n    {\n      x = { x: x[0], y: x[1], z: x[2], angle: x[3] };\n    }\n    // When an object is given, check for relative values.\n    if ( isObject( x ) )\n    {\n      var cx = coalesce( x.x, defaultValue.x );\n      var cy = coalesce( x.y, defaultValue.y );\n      var cz = coalesce( x.z, defaultValue.z );\n      var ca = coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n        var ia = this.isRelative( ca );\n\n        if ( ix || iy || iz || ia )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0,\n            angle: ia ? 1 : 0\n          };\n\n          return computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n    }\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return computed.relative( { x:0, y:0, z:1, angle: rx }, { x:0, y:0, z:0, angle:1 } );\n      }\n    }\n\n    // If no value was given but the default value was given, clone it.\n    if ( isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );\n    }\n\n    return false;\n  },\n  copy: function(out, copy)\n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    out.z = copy.z;\n    out.angle = copy.angle;\n    return out;\n  },\n  create: function()\n  {\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out)\n  {\n    out.x = 0.0;\n    out.y = 0.0;\n    out.z = 0.0;\n    out.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale)\n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    out.z += amount.z * amountScale;\n    out.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale)\n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    out.angle *= scale.angle;\n    return out;\n  },\n  interpolate: function(out, start, end, delta)\n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    out.z = (end.z - start.z) * delta + start.z;\n    out.angle = (end.angle - start.angle) * delta + start.angle;\n    return out;\n  },\n  distanceSq: function(a, b)\n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    var dz = a.z - b.z;\n    var da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a)\n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a)\n  {\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon)\n  {\n    return Math.abs(a.x) < epsilon &&\n           Math.abs(a.y) < epsilon &&\n           Math.abs(a.z) < epsilon &&\n           Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon)\n  {\n    return Math.abs(a.x - b.x) < epsilon &&\n           Math.abs(a.y - b.y) < epsilon &&\n           Math.abs(a.z - b.z) < epsilon &&\n           Math.abs(a.angle - b.angle) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    out.angle = Math.min(a.angle, b.angle);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    out.angle = Math.max(a.angle, b.angle);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y + a.z * b.z + a.angle * b.angle;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    out.angle = (max.angle - min.angle) * Math.random() + min.angle;\n    return out;\n  }\n});\n\n\n\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n *\n * @class CalculatorRGB\n * @constructor\n * @extends Calculator\n */\nfunction CalculatorRGB()\n{\n  this.createConstants();\n}\n\nClass.extend( CalculatorRGB, Calculator,\n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n    if ( isNumber( x ) )\n    {\n      return {\n        r: x,\n        g: x,\n        b: x\n      };\n    }\n    // When an array is given, assume [r, g, b]\n    if ( isArray( x ) )\n    {\n      x = { r: x[0], g: x[1], b: x[2] };\n    }\n    // When an object is given, check for relative values.\n    if ( isObject( x ) )\n    {\n      var cr = coalesce( x.r, defaultValue.r );\n      var cg = coalesce( x.g, defaultValue.g );\n      var cb = coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n\n        if ( ir || ig || ib )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0\n          };\n\n          return computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return computed.relative( { r: rx, g: rx, b: rx } );\n      }\n    }\n\n    // Try to parse the color.\n    var parsed = Color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n\n    // If no value was given but the default value was given, clone it.\n    if ( isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );\n    }\n\n    return false;\n  },\n  copy: function(out, copy)\n  {\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function()\n  {\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out)\n  {\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale)\n  {\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale)\n  {\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  interpolate: function(out, start, end, delta)\n  {\n    out.r = (end.r - start.r) * delta + start.r;\n    out.g = (end.g - start.g) * delta + start.g;\n    out.b = (end.b - start.b) * delta + start.b;\n    return out;\n  },\n  distanceSq: function(a, b)\n  {\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;\n    var db = a.b - b.b;\n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a)\n  {\n    return isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a)\n  {\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon)\n  {\n    return Math.abs(a.r) < epsilon &&\n           Math.abs(a.g) < epsilon &&\n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon)\n  {\n    return Math.abs(a.r - b.r) < epsilon &&\n           Math.abs(a.g - b.g) < epsilon &&\n           Math.abs(a.b - b.b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.r * b.r + a.g * b.g + a.b * b.b;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    return out;\n  }\n});\n\n\n/**\n * A calculator for objects with r, g, & b components\n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n *\n * @class CalculatorRGBA\n * @constructor\n * @extends Calculator\n */\nfunction CalculatorRGBA()\n{\n  this.createConstants();\n}\n\nClass.extend( CalculatorRGBA, Calculator,\n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n    if ( isNumber( x ) )\n    {\n      return {\n        r: x,\n        g: x,\n        b: x,\n        a: 1.0\n      };\n    }\n    // When an array is given, assume [r, g, b, a]\n    if ( isArray( x ) )\n    {\n      x = { r: x[0], g: x[1], b: x[2], a: x[3] };\n    }\n    // When an object is given, check for relative values.\n    if ( isObject( x ) )\n    {\n      var cr = coalesce( x.r, defaultValue.r );\n      var cg = coalesce( x.g, defaultValue.g );\n      var cb = coalesce( x.b, defaultValue.b );\n      var ca = coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n        var ia = this.isRelative( ca );\n\n        if ( ir || ig || ib || ia )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0,\n            a: ia ? 1 : 0\n          };\n\n          return computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return computed.relative( { r: rx, g: rx, b: rx, a: 0 } );\n      }\n    }\n\n    // Try to parse the color.\n    var parsed = Color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n\n    // If no value was given but the default value was given, clone it.\n    if ( isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );\n    }\n\n    return false;\n  },\n  copy: function(out, copy)\n  {\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function()\n  {\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out)\n  {\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale)\n  {\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale)\n  {\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  interpolate: function(out, start, end, delta)\n  {\n    out.r = (end.r - start.r) * delta + start.r;\n    out.g = (end.g - start.g) * delta + start.g;\n    out.b = (end.b - start.b) * delta + start.b;\n    out.a = (end.a - start.a) * delta + start.a;\n    return out;\n  },\n  distanceSq: function(a, b)\n  {\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;\n    var db = a.b - b.b;\n    var da = a.a - b.a;\n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a)\n  {\n    return isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a)\n  {\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon)\n  {\n    return Math.abs(a.r) < epsilon &&\n           Math.abs(a.g) < epsilon &&\n           Math.abs(a.b) < epsilon &&\n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon)\n  {\n    return Math.abs(a.r - b.r) < epsilon &&\n           Math.abs(a.g - b.g) < epsilon &&\n           Math.abs(a.b - b.b) < epsilon &&\n           Math.abs(a.a - b.a) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    out.a = Math.min(a.a, b.a);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    out.a = Math.max(a.a, b.a);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.r * b.r + a.g * b.g + a.b * b.b + a.a * b.a;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    out.a = (max.a - min.a) * Math.random() + min.a;\n    return out;\n  }\n});\n\n\n/**\n * A calculator for strings.\n *\n * @class CalculatorString\n * @constructor\n * @extends Calculator\n */\nfunction CalculatorString()\n{\n  this.createConstants();\n}\n\nClass.extend( CalculatorString, Calculator,\n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return computed.current;\n    }\n    // A raw string\n    if ( isString( x ) )\n    {\n      return x;\n    }\n\n    return defaultValue;\n  },\n  copy: function(out, copy)\n  {\n    return copy;\n  },\n  create: function()\n  {\n    return '';\n  },\n  zero: function(out)\n  {\n    return '';\n  },\n  adds: function(out, amount, amountScale)\n  {\n    return amount;\n  },\n  mul: function(out, scale)\n  {\n    return scale;\n  },\n  interpolate: function(out, start, end, delta)\n  {\n    return delta < 0.5 ? start : end;\n  },\n  distanceSq: function(a, b)\n  {\n    var d = Math.abs( a.length - b.length );\n    return d * d;\n  },\n  distance: function(a, b)\n  {\n    return Math.abs( a.length - b.length );\n  },\n  length: function(a)\n  {\n    return a.length;\n  },\n  lengthSq: function(a)\n  {\n    return a.length * a.length;\n  },\n  isValid: function(a)\n  {\n    return typeof a === 'string';\n  },\n  isNaN: function(a)\n  {\n    return false;\n  },\n  isZero: function(a, epsilon)\n  {\n    return a.length <= epsilon;\n  },\n  isEqual: function(a, b, epsilon)\n  {\n    return a === b;\n  },\n  min: function(out, a, b)\n  {\n    return a < b ? a : b;\n  },\n  max: function(out, a, b)\n  {\n    return a > b ? a : b;\n  },\n  dot: function(a, b)\n  {\n    return a.length * b.length;\n  }\n});\n\n\n/**\n * A factory for plain objects.\n *\n * @class FactoryObject\n * @constructor\n * @extends Factory\n */\nfunction FactoryObject()\n{\n  this.priority = 0;\n  this.attributes = {};\n}\n\nClass.extend( FactoryObject, Factory,\n{\n  is: function(subject)\n  {\n    return isObject( subject ) && !isArray( subject ); /* !isElement( subject ) && */\n  },\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n\n    if ( !animator )\n    {\n      animator = new Animator( subject );\n      animator.factory = this;\n\n      subject.$animator = animator;\n    }\n\n    return animator;\n  },\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = $calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n});\n\n/**\n * The Object namespace.\n *\n * @type {Object}\n */\nvar object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {Object|String} attr\n * @return {Object}\n */\nobject.attribute = function(attr)\n{\n  if ( isObject( attr ) && isDefined( attr.defaultValue ) )\n  {\n    return attr;\n  }\n  if ( isString( attr ) && attr in object.attribute )\n  {\n    return object.attribute[ attr ];\n  }\n\n  return object.attribute['default'];\n};\n\n/**\n * The default attribute.\n */\nobject.attribute['default']                 = {defaultValue: 0};\n\n\n/**\n * Instantiates a new parser for the 'and' animation type.\n *\n * @class BuilderAnd\n * @constructor\n * @extends Builder\n */\nfunction BuilderAnd()\n{\n\n}\n\nClass.extend( BuilderAnd, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var and = animation.and;\n\n    and.factory = coalesce( and.factory, animation.factory );\n\n    attrimatorMap.putMap( $attrimatorsFor( and, options ) );\n  },\n  \n  merge: function( input, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    this.submerge( input.and, newOptions, oldOptions, attrimatorMap );\n  }\n});\n\n\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n *\n * @class BuilderDeltas\n * @constructor\n * @extends Builder\n */\nfunction BuilderDeltas()\n{\n\n}\n\nClass.extend( BuilderDeltas, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the attrimators\n\n    var mergeId = Builder.nextMergeId();\n    var factory = $factory( animation.factory );\n    var deltas = animation.deltas;\n    var values = animation.values;\n\n    if ( !isDefined( deltas ) )\n    {\n      deltas = {};\n    }\n    else if ( isArray( deltas ) )\n    {\n      var deltaObject = {};\n\n      for (var attr in values)\n      {\n        deltaObject[attr] = deltas;\n      }\n\n      deltas = deltaObject;\n    }\n\n    for (var attr in values)\n    {\n      var value = values[ attr ];\n      var valueMax = value.length - 1;\n      var delta = deltas[ attr ];\n      var attribute = factory.attribute( attr );\n\n      for (var k = 0; k <= valueMax; k++)\n      {\n        value[k] = attribute.parse( value[k] );\n      }\n\n      if ( !isArray( delta ) )\n      {\n        delta = [];\n\n        for (var i = 0; i <= valueMax; i++)\n        {\n          delta[i] = i / valueMax;\n        }\n      }\n\n      var path      = new PathDelta( attr, attribute.calculator, value, delta );\n      var event     = helper.parseEvent( attr, path, this, true );\n\n      event.mergeId = mergeId;\n\n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n\n/**\n * Instantiates a new builder for the 'final' animation type.\n *\n * @class BuilderFinal\n * @constructor\n * @extends Builder\n */\nfunction BuilderFinal()\n{\n\n}\n\nClass.extend( BuilderFinal, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays and durations\n\n    var factory = $factory( animation.factory );\n    var values = animation.final;\n\n    for (var attr in values)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] );\n      var delay      = $delay( helper.parseDelay( attr ) );\n      var duration   = $duration( helper.parseDuration( attr ) );\n      var event      = new Oncer( attr, value, delay + duration, false, this, null, animation );\n\n      attrimatorMap.put( attr, event );\n    }\n  },\n  mergeAttrimator: function( e, attr, helper, factory )\n  {\n    e.delay = helper.mergeDelay( attr, e.delay ) +\n              helper.mergeDuration( attr, e.duration );\n  }\n});\n\n\n/**\n * Instantiates a new parser for the 'initial' animation type.\n *\n * @class BuilderInitial\n * @constructor\n * @extends Builder\n */\nfunction BuilderInitial()\n{\n\n}\n\nClass.extend( BuilderInitial, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays & scales\n\n    var factory    = $factory( animation.factory );\n    var values     = animation.initial;\n\n    for (var attr in values)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] );\n      var delay      = helper.parseDelay( attr );\n      var oncer      = new Oncer( attr, value, delay, true, this, null, animation );\n\n      attrimatorMap.put( attr, oncer );\n    }\n  },\n  mergeAttrimator: function( e, attr, helper, factory )\n  {\n    e.delay = helper.mergeDelay( attr, e.delay );\n  }\n});\n\n\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n *\n * @class BuilderKeyframe\n * @constructor\n * @extends Builder\n */\nfunction BuilderKeyframe()\n{\n\n}\n\nClass.extend( BuilderKeyframe, Builder,\n{\n  aliases: {\n    from:     '0',\n    start:    '0',\n    initial:  '0',\n    first:    '0',\n    half:     '50',\n    middle:   '50',\n    to:       '100',\n    end:      '100',\n    last:     '100'\n  },\n\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the attrimators\n\n    var factory = $factory( animation.factory );\n    var kframes = animation.keyframe;\n    var easings = animation.easings || {};\n    var teasing = $easing( coalesce( options.teasing, Defaults.teasing ) );\n\n    var sort = false;\n\n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in this.aliases )\n      {\n        kframes[ this.aliases[time] ] = kframes[ time ];\n\n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n\n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n\n        delete kframes[time];\n\n        sort = true;\n      }\n    }\n\n    var times = [];\n\n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n\n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n\n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n\n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n\n        lastTime = t;\n\n        maxTime = Math.max( maxTime, t );\n      }\n    }\n\n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b)\n      {\n        return a.order - b.order;\n      });\n\n      kframes = {};\n\n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n\n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n\n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = coalesce( frame.value.easing, options.easing );\n\n      delete frame.value.easing;\n\n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n\n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( $easing( coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n\n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = helper.parseDuration( attr );\n      var delay     = helper.parseDelay( attr );\n      var sleep     = helper.parseSleep( attr );\n      var offset    = helper.parseOffset( attr );\n      var repeat    = helper.parseRepeat( attr );\n      var scale     = helper.parseScale( attr );\n      var scaleBase = helper.parseScaleBase( attr );\n      var path      = new PathKeyframe( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new Event( attr, path, duration, teasing, delay, sleep, offset, repeat, scale, scaleBase, true, this, null, animation );\n\n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n\n/**\n * Instantiates a new parser for the 'move' animation type.\n *\n * @class BuilderMove\n * @constructor\n * @extends Builder\n */\nfunction BuilderMove()\n{\n\n}\n\nClass.extend( BuilderMove, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = $factory( animation.factory );\n    var move       = animation.move;\n\n    for (var attr in move)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[ attr ] );\n      var path       = new Tween( attr, attribute.calculator, computed.current, computed.relative( value ) );\n      var event      = helper.parseEvent( attr, path, this, true );\n\n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n\n/**\n * Instantiates a new parser for the 'path' animation type.\n *\n * @class BuilderPath\n * @constructor\n * @extends Builder\n */\nfunction BuilderPath()\n{\n\n}\n\nClass.extend( BuilderPath, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory = $factory( animation.factory );\n    var path    = animation.path;\n\n    for (var attr in path)\n    {\n      var attribute  = factory.attribute( attr );\n      var pathDefinition = path[ attr ];\n\n      if ( !( pathDefinition instanceof Path ) )\n      {\n        pathDefinition.name = attr;\n        pathDefinition.calculator = attribute.calculator;\n      }\n\n      var parsedPath = $path( pathDefinition );\n      var event      = helper.parseEvent( attr, parsedPath, this, true );\n\n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n\n/**\n * Instantiates a new builder for the 'physics' animation type.\n *\n * @class BuilderPhysics\n * @constructor\n * @extends Builder\n */\nfunction BuilderPhysics()\n{\n\n}\n\nClass.extend( BuilderPhysics, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = $factory( animation.factory );\n    var physics    = animation.physics;\n\n    for (var attr in physics)\n    {\n      var physic    = physics[ attr ];\n\n      var attrimator = new Physics(\n        attr,\n        this,\n        physic.calculator,\n        coalesce( physic.position, true ),\n        physic.velocity,\n        physic.acceleration,\n        physic.terminal,\n        physic.stopAt\n      );\n\n      attrimatorMap.put( attr, attrimator );\n    }\n  },\n\n  merge: false\n});\n\n\n/**\n * Instantiates a new parser for the 'and' animation type.\n *\n * @class BuilderQueue\n * @constructor\n * @extends Builder\n */\nfunction BuilderQueue()\n{\n\n}\n\nClass.extend( BuilderQueue, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var queue = animation.queue;\n\n    queue.factory = coalesce( queue.factory, animation.factory );\n\n    attrimatorMap.queueMap( $attrimatorsFor( queue, options ) );\n  },\n\n  merge: function( input, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    this.submerge( input.queue, newOptions, oldOptions, attrimatorMap );\n  }\n});\n\n\n/**\n * Instantiates a new parser for the 'springs' animation type.\n *\n * @class BuilderSpring\n * @constructor\n * @extends Builder\n */\nfunction BuilderSpring()\n{\n\n}\n\nClass.extend( BuilderSpring, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = $factory( animation.factory );\n    var springs    = animation.springs;\n\n    for (var attr in springs)\n    {\n      var spring     = springs[ attr ];\n\n      if ( !isDefined( spring.attribute ) )\n      {\n        spring.attribute = attr;\n      }\n\n      var parsed = $spring( spring );\n\n      if ( parsed !== false )\n      {\n        parsed.parser = this;\n\n        attrimatorMap.put( attr, parsed );\n      }\n    }\n  },\n\n  merge: false\n});\n\n\n/**\n * Instantiates a new parser for the 'travel' animation type.\n *\n * @class BuilderTravel\n * @constructor\n * @extends Builder\n */\nfunction BuilderTravel()\n{\n\n}\n\nClass.extend( BuilderTravel, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = $factory( animation.factory );\n    var travel     = animation.travel;\n\n    /**\n     * The computed function which returns a function which returns a value pointing\n     * to a given target given the current position of the animator.\n     *\n     * @param  {Number}\n     * @param  {any}\n     * @param  {Number}\n     * @return {Function}\n     */\n    var pointing = function(amount, target, epsilon, subtractVelocity)\n    {\n      return computed(function pointingFunction(attrimator, animator)\n      {\n        var attribute = animator.getAttribute( attrimator.attribute );\n        var calc = attribute.calculator;\n        var targetValue = isComputed( target ) ? target( attrimator, animator ) : target;\n        var temp = calc.create();\n\n        return function()\n        {\n          var position   = attrimator.position;\n          var current    = calc.copy( temp, resolve( targetValue ) );\n          var difference = calc.sub( current, position );\n          var distance   = calc.distance( difference, calc.ZERO );\n\n          if ( distance < epsilon )\n          {\n            attrimator.stopIn( 0 );\n          }\n          else\n          {\n            difference = calc.scale( difference, amount / distance );\n          }\n\n          if ( subtractVelocity )\n          {\n            difference = calc.sub( difference, attrimator.resolveVelocity() );\n          }\n\n          return difference;\n        };\n      });\n    };\n\n    for (var attr in travel)\n    {\n      var traveling     = travel[ attr ];\n      var attribute     = factory.attribute( attr );\n      var fromParsed    = attribute.parse( coalesce( traveling.from, true ) );\n      var toParsed      = attribute.parse( coalesce( traveling.to, true ) );\n      var velocity      = $number( traveling.velocity, 0 );\n      var acceleration  = $number( traveling.acceleration, 0 );\n      var terminal      = $number( coalesce( traveling.terminal, traveling.velocity ), Number.POSITIVE_INFINITY );\n      var epsilon       = $number( traveling.epsilon, 0.001 );\n\n      if ( acceleration !== 0 )\n      {\n        acceleration = pointing( acceleration, toParsed, epsilon, true );\n      }\n\n      if ( velocity !== 0 )\n      {\n        velocity = pointing( velocity, toParsed, epsilon, false );\n      }\n\n      var traveler = new Physics(\n        attr,\n        this,\n        attribute.calculator,\n        fromParsed,\n        velocity,\n        acceleration,\n        terminal\n      );\n\n      attrimatorMap.put( attr, traveler );\n    }\n  },\n\n  merge: false\n});\n\n\n/**\n * Instantiates a new builder for the 'tweenFrom' animation type.\n *\n * @class BuilderTweenFrom\n * @constructor\n * @extends Builder\n */\nfunction BuilderTweenFrom()\n{\n\n}\n\nClass.extend( BuilderTweenFrom, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = $factory( animation.factory );\n    var tweenFrom  = animation.tweenFrom;\n\n    for (var attr in tweenFrom)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenFrom[ attr ] );\n      var path       = new Tween( attr, attribute.calculator, value, computed.current );\n      var event      = helper.parseEvent( attr, path, this, true );\n\n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n *\n * @class BuilderTweenTo\n * @constructor\n * @extends Builder\n */\nfunction BuilderTweenTo()\n{\n\n}\n\nClass.extend( BuilderTweenTo, Builder,\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = $factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n\n    for (var attr in tweenTo)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[ attr ] );\n      var path       = new Tween( attr, attribute.calculator, computed.current, value );\n      var event      = helper.parseEvent( attr, path, this, true );\n\n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n\n/**\n * Instantiates a new PathCombo.\n *\n * @param {String|false} name\n * @param {Path[]} paths\n * @param {Boolean} [uniform]\n * @param {Number} [granularity]\n * @class PathCombo\n * @constructor\n * @extends Path\n */\nfunction PathCombo(name, paths, uniform, granularity)\n{\n  this.name = name;\n  this.set( paths, uniform, granularity );\n}\n\nClass.extend( PathCombo, Path,\n{\n  set: function(paths, uniform, granularity)\n  {\n    var calc = paths[0].calculator;\n    var points = [];\n    var deltas = [];\n    var linear = true;\n    var length = false;\n\n    for (var i = 0; i < paths.length; i++)\n    {\n      points.push.apply( points, paths[ i ].points );\n\n      deltas[ i ] = ( i + 1 ) / paths.length;\n\n      if ( !paths[ i ].isLinear() )\n      {\n        linear = false;\n      }\n    }\n\n    if ( uniform )\n    {\n      var lengthGranularity = coalesce( granularity, 100 );\n      var lengthTotal = 0;\n      var lengths = [];\n\n      for (var i = 0; i < paths.length; i++)\n      {\n        lengths[ i ] = paths[ i ].length( lengthGranularity );\n        lengthTotal += lengths[ i ];\n      }\n\n      var lengthCurrent = 0;\n\n      for (var i = 0; i < paths.length; i++)\n      {\n        lengthCurrent += lengths[ i ];\n        deltas[ i ] = lengthCurrent / lengthTotal;\n      }\n\n      length = lengthTotal;\n    }\n\n    this.reset( calc, points );\n    this.paths = paths;\n    this.deltas = deltas;\n    this.uniform = uniform;\n    this.granularity = granularity;\n    this.linear = linear;\n    this.cachedLength = length;\n  },\n\n  isLinear: function()\n  {\n    return this.linear;\n  },\n\n  length: function(granularity)\n  {\n    return this.cachedLength !== false ? this.cachedLength : this._length( granularity );\n  },\n\n  compute: function(out, delta)\n  {\n    var paths = this.paths;\n    var deltas = this.deltas;\n    var previousDelta = 0;\n    var i = 0;\n\n    while ( i < paths.length - 1 && deltas[ i ] < delta )\n    {\n      previousDelta = deltas[ i ];\n      i++;\n    }\n\n    return paths[ i ].compute( out, ( delta - previousDelta ) / ( deltas[ i ] - previousDelta ) );\n  },\n\n  copy: function()\n  {\n    return new PathCombo( this.name, this.paths, this.uniform, this.granularity );\n  }\n});\n\n\n/**\n * Instantiates a new PathCompiled.\n *\n * @param {String|false} name\n * @param {Path} path\n * @param {Number} pointCount\n * @class PathCompiled\n * @constructor\n * @extends Path\n */\nfunction PathCompiled(name, path, pointCount)\n{\n  this.name = name;\n  this.set( path, pointCount );\n}\n\nClass.extend( PathCompiled, Path,\n{\n  set: function(path, pointCount)\n  {\n    var calc = path.calculator;\n    var points = [];\n\n    for (var i = 0; i < pointCount; i++)\n    {\n      points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n    }\n\n    this.reset( calc, points );\n  },\n\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n\n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n\n  copy: function()\n  {\n    return new PathCompiled( this.name, this, this.points.length );\n  }\n});\n\n\n/**\n * Instantiates a new PathCubic.\n *\n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} p0\n * @param {T} p1\n * @param {T} p2\n * @param {T} p3\n * @class PathCubic\n * @constructor\n * @extends Path\n */\nfunction PathCubic(name, calculator, p0, p1, p2, p3)\n{\n  this.name = name;\n  this.set( calculator, p0, p1, p2, p3 );\n}\n\nClass.extend( PathCubic, Path,\n{\n  set: function(calculator, p0, p1, p2, p3)\n  {\n    this.reset( calculator, [p0, p1, p2, p3] );\n  },\n\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n\n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n\n    return out;\n  },\n\n  copy: function()\n  {\n    return new PathCubic( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  },\n\n  isLinear: function()\n  {\n    return false;\n  }\n});\n\n\n/**\n * Instantiates a new PathDelta.\n *\n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @param {Array} deltas\n * @class PathDelta\n * @constructor\n * @extends Path\n */\nfunction PathDelta(name, calculator, points, deltas)\n{\n  this.name = name;\n  this.set( calculator, points, deltas );\n}\n\nClass.extend( PathDelta, Path,\n{\n  set: function(calculator, points, deltas)\n  {\n    this.reset( calculator, points );\n    this.deltas = deltas;\n  },\n\n  compute: function(out, delta)\n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) {\n      i++;\n    }\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n\n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n\n  copy: function()\n  {\n    return new PathDelta( this.name, copy(this.points), copy(this.deltas), this.calculator );\n  }\n});\n\n\n/**\n * Instantiates a new PathJump.\n *\n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @class PathJump\n * @constructor\n * @extends Path\n */\nfunction PathJump(name, calculator, points)\n{\n  this.name = name;\n  this.set( calculator, points );\n}\n\nClass.extend( PathJump, Path,\n{\n  set: function(calculator, points)\n  {\n    this.reset( calculator, points );\n  },\n\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n\n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n\n  copy: function()\n  {\n    return new PathJump( this.name, this.calculator, copy(this.points) );\n  }\n});\n\n\n/**\n * Instantiates a new PathKeyframe.\n *\n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @param {Array} deltas\n * @param {Array} easings\n * @class PathKeyframe\n * @constructor\n * @extends Path\n */\nfunction PathKeyframe(name, calculator, points, deltas, easings)\n{\n  this.name = name;\n  this.set( calculator, points, deltas, easings );\n}\n\nClass.extend( PathKeyframe, Path,\n{\n  set: function(calculator, points, deltas, easings)\n  {\n    this.reset( calculator, points );\n    this.deltas = deltas;\n    this.easings = easings;\n  },\n\n  compute: function(out, delta)\n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n\n    if ( delta < ds[0] ) {\n      return false;\n    }\n\n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) {\n      i++;\n    }\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n\n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  copy: function()\n  {\n    return new PathKeyframe( this.name, this.calculator, copy(this.points), copy(this.deltas), copy(this.easings) );\n  }\n});\n\n\n/**\n * Instantiates a new PathQuadratic.\n *\n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} p0\n * @param {T} p1\n * @param {T} p2\n * @class PathQuadratic\n * @constructor\n * @extends Path\n */\nfunction PathQuadratic(name, calculator, p0, p1, p2)\n{\n  this.name = name;\n  this.set( calculator, [p0, p1, p2] );\n}\n\nClass.extend( PathQuadratic, Path,\n{\n  set: function(calculator, p0, p1, p2)\n  {\n    this.reset( calculator, [p0, p1, p2] );\n  },\n\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n\n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n\n    return out;\n  },\n\n  copy: function()\n  {\n    return new PathQuadratic( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  },\n\n  isLinear: function()\n  {\n    return false;\n  }\n});\n\n\n/**\n * Instantiates a new Tween.\n *\n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} start\n * @param {T} end\n * @class Tween\n * @constructor\n * @extends Path\n */\nfunction Tween(name, calculator, start, end)\n{\n  this.name = name;\n  this.set( calculator, start, end );\n}\n\nClass.extend( Tween, Path,\n{\n  set: function(calculator, start, end)\n  {\n    this.reset( calculator, [ start, end ] );\n  },\n\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n\n  copy: function()\n  {\n    return new Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n});\n\n\n/**\n * Instantiates a new SpringDistance.\n *\n * @param {String|false} attribute\n * @param {anim8.Calculator} calculator\n * @param {T} position\n * @param {T} rest\n * @param {Number} distance\n * @param {Number} damping\n * @param {Number} stiffness\n * @param {T} velocity\n * @param {T} gravity\n * @param {Boolean} finishOnRest\n * @class SpringDistance\n * @constructor\n * @extends Spring\n */\nfunction SpringDistance(attribute, calculator, position, rest, distance, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n\n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n}\n\nClass.extend( SpringDistance, Spring,\n{\n\n  start: function(now, animator)\n  {\n    this._start( now, animator );\n\n    this.temp = this.calculator.create();\n  },\n\n  clone: function()\n  {\n    return new SpringDistance( this.attribute, this.calculator, this.position, this.rest, this.distance, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n\n    var d = calc.distance( this.position, rest );\n\n    this.temp = calc.copy( this.temp, this.position );\n    this.temp = calc.sub( this.temp, rest );\n\n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n\n});\n\n\n/**\n * Instantiates a new SpringLinear.\n *\n * @param {String|false} attribute\n * @param {Calculator} calculator\n * @param {T} position\n * @param {T} rest\n * @param {T} damping\n * @param {T} stiffness\n * @param {T} velocity\n * @param {T} gravity\n * @param {Boolean} finishOnRest\n * @class SpringLinear\n * @constructor\n * @extends Spring\n */\nfunction SpringLinear(attribute, calculator, position, rest, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n\n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n}\n\nClass.extend( SpringLinear, Spring,\n{\n\n  start: function(now, animator)\n  {\n    this._start( now, animator );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  clone: function()\n  {\n    return new SpringLinear( this.attribute, this.calculator, this.position, this.rest, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  hasComputed: function()\n  {\n    return isComputed( this.rest ) ||\n           isComputed( this.position ) ||\n           isComputed( this.gravity ) ||\n           isComputed( this.velocity ) ||\n           isComputed( this.damping ) ||\n           isComputed( this.stiffness );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n\n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n\n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n\n});\n\n\nvar Builders = {};\n\n/**\n * Register the builder.\n */\nBuilders['values'] = new BuilderDeltas();\n\n/**\n * A builder which generates attrimators which tween from the current value to\n * the given values.\n *\n * **Examples:**\n *\n *     animator.play({\n *      ... other builders ...\n *      and: {\n *       ... more builders ...\n *      }\n *     });\n *\n *\n * @property {BuilderAnd} and\n * @for anim8.builder\n */\nBuilders['and'] = new BuilderAnd();\n\n/**\n * Register the builder.\n */\nBuilders['final'] = new BuilderFinal();\n\n\n/**\n * Register the builder.\n */\nBuilders['initial'] = new BuilderInitial();\n\n/**\n * Registers the builder.\n */\nBuilders['keyframe'] = new BuilderKeyframe();\n\n/**\n * Register the builder.\n */\nBuilders['move'] = new BuilderMove();\n\n/**\n * A builder which generates attrimators which follow a given path.\n *\n * **Examples:**\n *\n *     animator.play({\n *      path: {\n *       opacity: {\n *        type: 'quadratic',\n *        p0: 0,\n *        p1: 0.4,\n *        p2: 1.0\n *       }\n *      }\n *     });\n *\n *\n * @property {BuilderPath} path\n * @for anim8.builder\n */\nBuilders['path'] = new BuilderPath();\n\n/**\n * Register the builder.\n */\nBuilders['physics'] = new BuilderPhysics();\n\n/**\n * A builder which generates attrimators which tween from the current value to\n * the given values.\n *\n * **Examples:**\n *\n *     animator.play({\n *      ... other builders ...\n *      queue: {\n *       ... more builders to play after the others ...\n *      }\n *     });\n *\n *\n * @property {BuilderQueue} queue\n * @for anim8.builder\n */\nBuilders['queue'] = new BuilderQueue();\n\n/**\n * Register the builder.\n */\nBuilders['springs'] = new BuilderSpring();\n\n/**\n * Register the builder.\n */\nBuilders['travel'] = new BuilderTravel();\n\n/**\n * Register the builder.\n */\nBuilders['tweenFrom'] = new BuilderTweenFrom();\n\n/**\n * A builder which generates attrimators which tween from the current value to\n * the given values.\n *\n * **Examples:**\n *\n *     animator.play({\n *      tweenTo: {\n *       opacity: 1.0,       // absolute value\n *       left: '+40'         // 40 more units from current value\n *      }\n *     });\n *\n *\n * @property {BuilderTweenTo} tweenTo\n * @for anim8.builder\n */\nBuilders['tweenTo'] = new BuilderTweenTo();\n\n\n/**\n * A collection of calculators. A calculator is responsible for performing\n * mathematical operations for a specific animatable data type.\n *\n * @class anim8.calculator\n */\nvar Calculators = {};\n\n/**\n * A calculator for numbers.\n *\n * @property {CalculatorNumber} number\n * @for anim8.Calculators\n */\nCalculators['number'] = new CalculatorNumber();\n\n/**\n * A calculator for 2d points; objects with x & y Number components.\n *\n * @property {Calculator2d} 2d\n * @for anim8.Calculators\n */\nCalculators['2d'] = new Calculator2d();\n\n/**\n * A calculator for 3d points; objects with x, y, & z Number components.\n *\n * @property {Calculator3d} 3d\n * @for anim8.Calculators\n */\nCalculators['3d'] = new Calculator3d();\n\n/**\n * A calculator for quaternions; objects with x, y, z, & angle Number components.\n *\n * @property {CalculatorQuaternion} quaternion\n * @for anim8.Calculators\n */\nCalculators['quaternion'] = new CalculatorQuaternion();\n\n/**\n * A calculator for opaque colors; objects with r, g, & b Number components.\n *\n * @property {CalculatorRGB} rgb\n * @for anim8.Calculators\n */\nCalculators['rgb'] = new CalculatorRGB();\n\n/**\n * A calculator for colors; objects with r, g, b, & a Number components.\n *\n * @property {CalculatorRGBA} rgba\n * @for anim8.Calculators\n */\nCalculators['rgba'] = new CalculatorRGBA();\n\n/**\n * A calculator for strings.\n *\n * @property {CalculatorString} string\n * @for anim8.Calculators\n */\nCalculators['string'] = new CalculatorString();\n\n/**\n * The default calculator.\n *\n * @property {CalculatorNumber} default\n * @for anim8.Calculators\n */\nCalculators['default'] = Calculators['number'];\n\n\nvar Factories = {};\n\n/**\n * Registers the object factory.\n */\nFactories['object'] = new FactoryObject();\n\n/**\n * Registers the default factory.\n */\nFactories['default'] = Factories['object'];\n\n\nvar Paths = {};\n\n/**\n * Parses an object for a combo path.\n *\n * @param {Object} path\n * @return {PathCombo}\n */\nPaths['combo'] = function(path)\n{\n  var paths = path.paths;\n\n  for (var i = 0; i < paths.length; i++)\n  {\n    paths[ i ] = $path( paths[ i ] );\n  }\n\n  return new PathCombo(\n    path.name,\n    paths,\n    path.uniform,\n    path.granularity\n  );\n};\n\n\n/**\n * Parses an object for a compiled path.\n *\n * @param {Object} path\n * @return {PathCompiled}\n */\nPaths['compiled'] = function(path)\n{\n  return new PathCompiled(\n    path.name,\n    $path( path.path ),\n    path.pointCount\n  );\n};\n\n/**\n * Parses an object for a cubic path.\n *\n * @param {Object} path\n * @return {PathCubic}\n */\nPaths['cubic'] = function(path)\n{\n  var calc = $calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n\n  return new PathCubic(\n    path.name,\n    calc,\n    calc.parse( path.p0, defaultValue ),\n    calc.parse( path.p1, defaultValue ),\n    calc.parse( path.p2, defaultValue ),\n    calc.parse( path.p3, defaultValue )\n  );\n};\n\n/**\n * Parses an object for a delta path.\n *\n * @param {Object} path\n * @return {PathDelta}\n */\nPaths['delta'] = function(path)\n{\n  var calc = $calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n\n  if (!path.deltas)\n  {\n    path.deltas = [];\n\n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[ i ], defaultValue );\n  }\n\n  return new PathDelta(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n\n/**\n * Parses an object for a jump path.\n *\n * @param {Object} path\n * @return {PathJump}\n */\nPaths['jump'] = function(path)\n{\n  var calc = $calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[ i ], defaultValue );\n  }\n\n  return new PathJump(\n    path.name,\n    calc,\n    path.points\n  );\n};\n\n/**\n * Parses an object for a keyframe path.\n *\n * @param {Object} path\n * @return {PathKeyframe}\n */\nPaths['keyframe'] = function(path)\n{\n  var calc = $calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n\n  if (!path.deltas)\n  {\n    path.deltas = [];\n\n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  var defaultEasing = $easing( path.easings, null );\n\n  if ( !isDefined( path.easings ) || !isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n\n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n\n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = $easing( path.easings[ i ] );\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[ i ], defaultValue );\n  }\n\n  return new PathKeyframe(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n\n\n/**\n * Parses an object for a quadratic path.\n *\n * @param {Object} path\n * @return {PathQuadratic}\n */\nPaths['quadratic'] = function(path)\n{\n  var calc = $calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n\n  return new PathQuadratic(\n    path.name,\n    calc,\n    calc.parse( path.p0, defaultValue ),\n    calc.parse( path.p1, defaultValue ),\n    calc.parse( path.p2, defaultValue )\n  );\n};\n\n/**\n * Parses an object for a tween path.\n *\n * @param {Object} path\n * @return {Tween}\n */\nPaths['tween'] = function(path)\n{\n  var calc = $calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n\n  return new Tween(\n    path.name,\n    calc,\n    calc.parse( path.start, defaultValue ),\n    calc.parse( path.end, defaultValue )\n  );\n};\n\n\nvar Springs = {};\n\n/**\n * Register the spring builder.\n *\n * @param {Object}\n * @return {SpringDistance}\n */\nSprings['distance'] = function(spring)\n{\n  return new SpringDistance(\n    spring.attribute,\n    spring.calculator,\n    coalesce( spring.position, true ),\n    coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};\n\n/**\n * Register the spring builder.\n *\n * @param {Object}\n * @return {SpringLinear}\n */\nSprings['linear'] = function(spring)\n{\n  return new SpringLinear(\n    spring.attribute,\n    spring.calculator,\n    coalesce( spring.position, true ),\n    coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};\n\n\n/**\n * Returns an instance of {{#crossLink \"Animation\"}}{{/crossLink}} based on the\n * given input & options. If the input is a string the animation with that name\n * is returned. If the input is a string with an animation name and an option\n * string the animation with the given name modified by any additional options\n * is returned. Commas can be used to queue animation & option pairs one after\n * another. Ampersands can be used to play animations at the same time. If the\n * input is an object an anonymous animation is created. If no animation could\n * be determined then false is returned.\n *\n * **Examples:**\n *\n *     animation('wiggle');\n *     animation('wiggle ~1s 4s z40ms x5 !1.2');\n *     animation('wiggle', {...options...});\n *     animation('wiggle, tada ~50ms, fadeOut 2s');\n *     animation('wiggle & tada !3, fadeOut');\n *     animation({...definition...});\n *\n * If the given input is a string you can cache it. An example would be\n * 'wiggle ~1s 2s x3' - if `cache` is true and you call this method again it won't\n * need to be parsed again.\n *\n * **See:** {{#crossLink \"Core/options:method\"}}{{/crossLink}}\n *\n * @method animation\n * @for Core\n * @param {Animation|String|Object} animation\n * @param {String|Object} [options]\n * @param {Boolean} [cache=false]\n * @return {Animation|False}\n * @throws {String} The animation string has an invalid animation name or the\n *    animation fails to create attrimators from the animation definition.\n */\nfunction $animation(animation, options, cache)\n{\n  var options = $options( options, cache );\n  var hasOptions = !isEmpty( options );\n\n  if ( animation instanceof Animation )\n  {\n    if ( hasOptions )\n    {\n      var attrimators = animation.newAttrimators();\n\n      animation.merge( options, attrimators );\n\n      return new Animation( false, animation.input, options, attrimators);\n    }\n\n    return animation;\n  }\n  if ( isString( animation ) )\n  {\n    var key = animation.toLowerCase();\n\n    if ( key in animation && !hasOptions )\n    {\n      return animation[ key ];\n    }\n\n    var attrimators = $attrimatorsFor( animation, options, cache );\n\n    if ( key in animation && !hasOptions )\n    {\n      return animation[ key ];\n    }\n\n    return new Animation( false, {}, options, attrimators );\n  }\n  if ( isObject( animation ) )\n  {\n    var attrimators = $attrimatorsFor( animation, options, cache );\n\n    return new Animation( false, animation, options, attrimators );\n  }\n\n  return false;\n}\n\n\n\n/**\n * Generates an AttrimatorMap for the given animation and options. If the\n * animation given is an instance of {{#crossLink \"Animation\"}}{{/crossLink}}\n * then a copy of that animations attrimators is returned, and if options are\n * specified then they are merged into the generated attrimators. If the\n * animation given is an object it's properties are iterated and for each builder\n * with a matching name attrimators are generated. If the animation given is a\n * string of a cached or saved animation then it's handled as if an instance of\n * {{#crossLink \"Animation\"}}{{/crossLink}} was given. If the animation given\n * is a string which isn't saved or cached it goes through the following parsing\n * logic.\n *\n * - Split up the string into sections with `,` which queues animations.\n * - Split up each of the sections with `&` which enables animations to play\n *   simultaneously.\n * - For each of those sections, take the first word as the name of the\n *   animation and any remaining text as the options for that animation.\n *\n * If no attrimators could be parsed, an empty attrimator map is returned. If\n * the animation given is a string that specifies animations that don't exist\n * an error is thrown.\n *\n * **Examples:**\n *\n *     anim8.attrimatorsFor('wiggle');\n *     anim8.attrimatorsFor('wiggle ~1s 4s z40ms x5 !1.2');\n *     anim8.attrimatorsFor('wiggle', {...options...});\n *     anim8.attrimatorsFor('wiggle, tada ~50ms, fadeOut 2s');\n *     anim8.attrimatorsFor('wiggle & tada !3, fadeOut');\n *     anim8.attrimatorsFor({...definition...});\n *\n * If the given input is a string you can cache it. An example would be\n * 'wiggle ~1s 2s x3' - if `cache` is true and you call this method again it won't\n * need to be parsed again.\n *\n * **See:** {{#crossLink \"Core/options:method\"}}{{/crossLink}}\n *\n * @method anim8.attrimatorsFor\n * @for Core\n * @param {Object|String} animation\n * @param {Object|String} [options]\n * @param {Boolean} [cache=false]\n * @return {AttrimatorMap}\n */\nfunction $attrimatorsFor( animation, options, cache )\n{\n  var parsedOptions = $options( options, cache );\n  var hasOptions = !isEmpty( parsedOptions );\n  var attrimators = new AttrimatorMap();\n\n  if ( animation instanceof Animation )\n  {\n    attrimators.putMap( animation.newAttrimators() );\n\n    if ( hasOptions )\n    {\n      animation.merge( parsedOptions, attrimators );\n    }\n  }\n  else if ( isObject( animation ) )\n  {\n    var helper = new BuilderHelper( animation, parsedOptions );\n\n    for (var builderName in animation)\n    {\n      var builder = $builder( builderName );\n\n      if ( builder !== false )\n      {\n        builder.parse( animation, parsedOptions, attrimators, helper );\n      }\n    }\n  }\n  else if ( isString( animation ) )\n  {\n    var key = animation.toLowerCase();\n    var saved = Animations[ key ];\n    var cacheIt = coalesce( cache, Defaults.cache );\n\n    if ( saved )\n    {\n      attrimators.putMap( saved.newAttrimators() );\n\n      if ( hasOptions )\n      {\n        saved.merge( parsedOptions, attrimators );\n      }\n    }\n    else\n    {\n      var animationsQueued = animation.split( ',' );\n\n      for (var k = 0; k < animationsQueued.length; k++)\n      {\n        var animationsMerged = animationsQueued[ k ].split( '&' );\n        var base = new AttrimatorMap();\n\n        for (var j = 0; j < animationsMerged.length; j++)\n        {\n          var animationString = trim( animationsMerged[ j ].toLowerCase() );\n          var animationSplit = animationString.split( ' ' );\n          var parsedAnimation = Animations[ animationSplit[ 0 ] ];\n\n          if ( parsedAnimation )\n          {\n            var additionalOptions = $options( animationSplit.slice( 1 ), cache );\n            var hasAdditionalOptions = !isEmpty( additionalOptions );\n            var parsedAttrimators = parsedAnimation.newAttrimators();\n\n            if ( hasOptions && hasAdditionalOptions )\n            {\n              parsedAnimation.merge( extend( {}, parsedOptions, additionalOptions ), parsedAttrimators );\n            }\n            else if ( hasAdditionalOptions )\n            {\n              parsedAnimation.merge( additionalOptions, parsedAttrimators );\n            }\n            else if ( hasOptions )\n            {\n              parsedAnimation.merge( parsedOptions, parsedAttrimators );\n            }\n\n            base.putMap( parsedAttrimators );\n          }\n          else\n          {\n            throw animationString + ' is not a valid animation in \"' + animationsQueued[ k ] + '\"';\n          }\n        }\n\n        attrimators.queueMap( base );\n      }\n\n      if ( cacheIt && !hasOptions )\n      {\n        Animations[ key ] = new Animation( animation, {}, {}, attrimators );\n      }\n    }\n  }\n\n  return attrimators;\n}\n\n\n/**\n * A collection of {{#crossLink \"Builder\"}}builders{{/crossLink}} which takes\n * animation definitions (an Object passed to {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}})\n * and generates {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}}.\n *\n * @class anim8.builder\n */\n\n/**\n * Returns a builder based on the input. If the input is an instance of Builder\n * it's returned immediately. If the input is a string the builder with that name\n * is returned. If no builder could be determined then false is returned.\n *\n * **See:** {{#crossLink \"anim8.builder\"}}{{/crossLink}}\n *\n * @method anim8.builder\n * @for Core\n * @param {Builder|String} builderInput\n * @return {Builder|false}\n */\nfunction $builder(builderInput)\n{\n  if ( builderInput instanceof Builder )\n  {\n    return builderInput;\n  }\n  if ( isString( builderInput ) && builderInput in Builders )\n  {\n    return Builders[ builderInput ];\n  }\n\n  return false;\n}\n\n\n/**\n* Returns a calculator based on the input. If the input is an instance of\n* {{#crossLink \"Calculator\"}}{{/crossLink}} it is immediately returned. If the\n* input is a string the calculator with that name is returned. If no calculator\n* could be determined the default calculator is returned.\n*\n* @method anim8.calculator\n* @for Core\n* @param {Calculator|String} calculatorInput\n* @return {Calculator}\n*/\nfunction $calculator(calculatorInput)\n{\n if ( calculatorInput instanceof Calculator )\n {\n   return calculatorInput;\n }\n if ( isString( calculatorInput ) && calculatorInput in Calculators )\n {\n   return Calculators[ calculatorInput ];\n }\n\n return Calculators['default'];\n}\n\n\n\n/**\n * Parses delay from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/delay:property\"}}anim8.defaults.delay{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n *\n * @method anim8.delay\n * @param {String|Number} time\n */\nfunction $delay(time)\n{\n  return $time( time, Defaults.delay );\n}\n\n\n/**\n * Parses duration from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/duration:property\"}}anim8.defaults.duration{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n *\n * @method anim8.duration\n * @param {String|Number} time\n */\nfunction $duration(time)\n{\n  return $time( time, Defaults.duration );\n}\n\n\n/**\n * Returns an easing based on the given input. If the input is a function it's\n * assumed to be an easing function and is returned immediately. If the input is\n * a string the easing with that name is returned. If the input is a string in\n * the format 'easing-easingType' then an easing is returned that is a\n * combination of the easing with the given name and the easingType with the\n * given name. If the given input is an array with 4 elements it's assumed to be\n * a bezier path and one is created and returned. If no input is given the\n * default easing is returned. If an easing cannot be determined then an error\n * is thrown.\n *\n * **Examples:**\n *\n *     anim8.easing();               // anim8.defaults.easing\n *     anim8.easing( 'linear' );     // anim8.easing.linear\n *     anim8.easing( 'reverse' );    // anim8.easingType.reverse( anim8.defaults.easing )\n *     anim8.easing( 'ease-yoyo' );  // anim8.easingType.yoyo( anim8.easing.ease )\n *     anim8.easing( [0,0,1,1] );    // anim8.easing.bezier( 0, 0, 1, 1 )\n *     anim8.easing( 5, false );     // false\n *     anim8.easing( 'invalid', 1 ); // 1\n *     anim8.easing( [0,0,1], 1 );   // 1\n *\n * @method anim8.easing\n * @for Core\n * @param {Function|String|Array} easing\n * @param {E} [returnOnInvalid]\n * @return {Function|E}\n */\nfunction $easing(easing, returnOnInvalid)\n{\n  if ( isFunction( easing ) )\n  {\n    return easing;\n  }\n  if ( isString( easing ) )\n  {\n    if ( easing in Easings )\n    {\n      return Easings[ easing ];\n    }\n    if ( easing in EasingTypes )\n    {\n      return EasingTypes[ easing ]( $easing( Defaults.easing ) );\n    }\n\n    if ( easing.indexOf('-') !== -1 )\n    {\n      var pair = easing.split('-');\n      var e = pair[0];\n      var t = pair[1];\n\n      if ( pair.length >= 2 && e in Easings && t in EasingTypes )\n      {\n        return EasingTypes[ t ]( Easings[ e ] );\n      }\n    }\n  }\n  if ( isArray( easing ) && easing.length === 4 && isNumber( easing[0] ) && isNumber( easing[1] ) && isNumber( easing[2] ) && isNumber( easing[3] ) )\n  {\n    return Easings.bezier.apply( null, easing );\n  }\n  if ( !isDefined( easing ) )\n  {\n    return $easing( Defaults.easing );\n  }\n\n  if ( isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n\n  throw easing + ' is not a valid easing';\n}\n\n\n/**\n * Returns an easing type based on the input. If the input is a function that\n * function is immediately returned. If the input is a string the easing type\n * with that name is returned. If no easing type could be determined an error is\n * thrown.\n *\n * @param {Function|String} easingType\n * @param [Boolean] optional\n * @return {Function|false}\n */\nfunction $easingType(easingType, optional)\n{\n  if ( isFunction( easingType ) )\n  {\n    return easingType;\n  }\n  if ( isString( easingType ) && easingType in EasingTypes )\n  {\n    return EasingTypes[ easingType ];\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n\n  throw easingType + ' is not a valid easing type';\n}\n\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n *\n * @method factory\n * @for Core\n * @param {String|Factory} [factory]\n * @return {Factory}\n */\nfunction $factory(factoryInput)\n{\n  if ( factoryInput instanceof Factory )\n  {\n    return factoryInput;\n  }\n  if ( isString( factoryInput ) && factoryInput in Factories )\n  {\n    return Factories[ factoryInput ];\n  }\n\n  return Factories['default'];\n}\n\n\n/**\n * Returns a factory for the given subject and optionally throws an error if no\n * factory exists.\n *\n * @method factoryFor\n * @for Core\n * @param {Any} subject\n * @param {Boolean} [optional]\n * @return {Factory}\n */\nfunction $factoryFor(subject, optional)\n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in Factories)\n  {\n    var factory = Factories[ factoryName ];\n\n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {\n      highestPriorityFactory = factory;\n    }\n  }\n\n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n\n  throw 'No factory exists for subject ' + subject;\n}\n\n\n/**\n * Parses a number from the given input and if the input isn't a valid number\n * then returnOnInvalid is returned.\n *\n * **Examples:**\n *\n *     anim8.number( 5 );       // 5\n *     anim8.number( '5' );     // 5\n *     anim8.number( '5e4' );   // 50000\n *     anim8.number( 'x' );     // undefined\n *     anim8.number( 'x', 23 ); // 23\n *\n * @method anim8.number\n * @param {String|Number} value\n * @param {E} returnOnInvalid\n * @return {Number|E}\n */\nfunction $number(value, returnOnInvalid)\n{\n  var parsed = parseFloat( value );\n\n  return isNaN( parsed ) ? returnOnInvalid : parsed;\n}\n\n\n\n/**\n * Parses offset from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/offset:property\"}}anim8.defaults.offset{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n *\n * @method anim8.offset\n * @param {String|Number} time\n */\nfunction $offset(time)\n{\n  return $time( time, Defaults.offset );\n}\n\n\nvar Options = {};\n\n/**\n * Parses a value into an options object. If the given input is a string it's\n * expected to be in a similar format to:\n *\n *     [duration] x[repeat] z[sleep] ~[delay] @[offset] ![scale] [[easing][-easingType]]\n *\n * This is also a registry of options, you can add your own options that\n * can be used later with syntax like:\n *\n *     anim8.options['myOptions'] = anim8.options('1.5s x2 !2');\n *\n * So you can use 'myOptions' as the options input.\n *\n * You can also specify relative values & scaling values. If you have the\n * following options:\n *\n *     +2s x*2 ~-1s\n *\n * It will result in adding 2 seconds to the duration, repeating it twice as\n * much, and subtracting one second from the delay.\n *\n * For more information on acceptable values in options:\n *\n * **See:** {{#crossLink \"Core/anim8.duration:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.repeat:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.sleep:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.delay:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.scale:method\"}}{{/crossLink}}, and\n *          {{#crossLink \"Core/anim8.easing:method\"}}{{/crossLink}}\n *\n * @method anim8.options\n * @for Core\n * @param {Object|String|Array} options\n * @param {Boolean} [cache]\n * @return {Object}\n */\nfunction $options(options, cache)\n{\n  var originalInput = options;\n  var cacheIt = coalesce( cache, Defaults.cacheOptions );\n\n  if ( isString( options ) )\n  {\n    if ( options in Options )\n    {\n      return Options[ options ];\n    }\n\n    options = options.toLowerCase().split(' ');\n  }\n\n  if ( isArray( options ) )\n  {\n    var parsed = {};\n\n    for (var i = 0; i < options.length; i++)\n    {\n      var part = options[i];\n      var first = part.charAt( 0 );\n\n      // Repeats\n      if ( first === 'x' )\n      {\n        parseOptionProperty( part.substring(1), parsed, $repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n      }\n      // Sleeping\n      else if ( first === 'z' )\n      {\n        parseOptionProperty( part.substring(1), parsed, $time, 'sleep', 'sleepAdd', 'sleepScale' );\n      }\n      // Delay\n      else if ( first === '~' )\n      {\n        parseOptionProperty( part.substring(1), parsed, $time, 'delay', 'delayAdd', 'delayScale' );\n      }\n      // Scaling\n      else if ( first === '!' )\n      {\n        parseOptionProperty( part.substring(1), parsed, $number, 'scale', 'scaleAdd', 'scaleScale' );\n      }\n      // Offset\n      else if ( first === '@' )\n      {\n        parseOptionProperty( part.substring(1), parsed, $time, 'offset', 'offsetAdd', 'offsetScale' );\n      }\n      else\n      {\n        // Easing?\n        var easing = $easing( part, false );\n\n        if ( easing !== false )\n        {\n          parsed.easing = easing;\n        }\n\n        // Duration?\n        var duration = parseOptionProperty( part, parsed, $time, 'duration', 'durationAdd', 'durationScale' );\n\n        if ( duration === false )\n        {\n          // If not a duration, might be an alternative repeat? (doesn't start with x)\n          parseOptionProperty( part, parsed, $repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n        }\n      }\n    }\n\n    if ( isString( originalInput ) && cacheIt )\n    {\n      Options[ originalInput ] = parsed;\n    }\n\n    return parsed;\n  }\n\n  if ( isObject( options ) )\n  {\n    return options;\n  }\n\n  return Defaults.noOptions;\n}\n\nfunction parseOptionProperty(input, out, parseFunction, property, propertyAdd, propertyScale)\n{\n  var first = input.charAt( 0 );\n\n  if ( first === '*' )\n  {\n    parsed = $number( input.substring( 1 ), false );\n\n    if ( parsed !== false )\n    {\n      out[ propertyScale ] = parsed;\n    }\n  }\n  else\n  {\n    if ( first === '+' || first === '-' )\n    {\n      property = propertyAdd;\n      input = input.substring( 1 );\n    }\n\n    var parsed = parseFunction( input, false );\n\n    if ( parsed !== false )\n    {\n      out[ property ] = parsed;\n    }\n  }\n\n  return parsed;\n}\n\n\n/**\n * Parses a path given the input and returns an instance of anim8.Path or throws\n * an error if the path could not be parsed. If the input is an object and has\n * a type property with a value that maps to a path type the path's parsing\n * function is invoked with the object.\n *\n * @method anim8.path\n * @for Core\n * @param  {anim8.Path|String|Object} pathInput\n * @return {anim8.Path}\n * @throws {String} If the input is not a valid path.\n */\nfunction $path(pathInput)\n{\n  if ( pathInput instanceof Path )\n  {\n    return pathInput;\n  }\n  if ( isString( pathInput ) && pathInput in Paths )\n  {\n    return Paths[ pathInput ];\n  }\n  if ( isObject( pathInput ) && pathInput.type in Paths )\n  {\n    return Paths[ pathInput.type ]( pathInput );\n  }\n\n  throw pathInput + ' is not a valid path';\n}\n\n\n\n/**\n * Parses repeats from a string or number. If a valid repeat is not given then\n * `returnOnInvalid` is returned, if that is not given then\n * {{#crossLink \"anim8.defaults/repeat:property\"}}anim8.defaults.repeat{{/crossLink}}\n * is returned.\n *\n * **Examples:**\n *\n *     anim8.repeat( 5 );            // 5\n *     anim8.repeat( 'inf' );        // Infinity\n *     anim8.repeat( 'infinity' );   // Infinity\n *     anim8.repeat( 'infinite' );   // Infinity\n *     anim8.repeat( 'once' );       // 1\n *     anim8.repeat( 'twice' );      // 2\n *     anim8.repeat( 'thrice' );     // 3\n *     anim8.repeat( 'dozen' );      // 12\n *     anim8.repeat( 'random' );     // 4\n *     anim8.repeat( 'invalid', 6 ); // 6\n *     anim8.repeat( false, 7 );     // 7\n *     anim8.repeat();               // anim8.defaults.repeat\n *\n * @method anim8.repeat\n * @param {String|Number} time\n * @param {E} [returnOnInvalid]\n * @return {Number|E}\n */\nvar $repeat = (function()\n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return coalesce( returnOnInvalid, Defaults.repeat );\n  };\n\n})();\n\n\n/**\n * Parses scale from a string or number.\n *\n * **See:** {{#crossLink \"Core/anim8.number:method\"}}anim8.number{{/crossLink}}\n *\n * @method anim8.scale\n * @param {String|Number} scale\n * @return {Number}\n */\nfunction $scale(scale)\n{\n  return $number( scale, Defaults.scale );\n}\n\n\n\n/**\n * Parses sleep from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/sleep:property\"}}anim8.defaults.sleep{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n *\n * @method anim8.sleep\n * @param {String|Number} time\n */\nfunction $sleep(time)\n{\n  return $time( time, Defaults.sleep );\n}\n\n/**\n * Returns a spring if the provided argument is a spring, the name of a spring,\n * or an object with a spring type to be created. If none of these conditions\n * are true then an error is thrown.\n *\n * @method anim8.spring\n * @for Core\n * @param {Spring|String|Object} springInput\n * @return {Spring}\n */\nfunction $spring(springInput)\n{\n  if ( springInput instanceof Spring )\n  {\n    return springInput;\n  }\n  if ( isString( springInput ) && springInput in Springs )\n  {\n    return Springs[ springInput ];\n  }\n  if ( isObject( springInput ) && springInput.type in Springs )\n  {\n    return Springs[ springInput.type ]( springInput );\n  }\n\n  throw springInput + ' is not a valid spring';\n}\n\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's\n * assumed to be milliseconds and is returned immediately. If a string is given\n * a unit is looked for to determine how to scale the number into milliseconds.\n * If the given time is invalid and returnOnInvalid is not given then zero is\n * returned.\n *\n * **Examples:**\n *\n *     anim8.time( 45 );       // 45\n *     anim8.time( 45.9 );     // 45\n *     anim8.time( -4.1 );     // -5\n *     anim8.time( '5ms' );    // 5\n *     anim8.time( '23' );     // 23\n *     anim8.time( '5c' );     // 500\n *     anim8.time( '5cs' );    // 500\n *     anim8.time( '5jiffy' ); // 833\n *     anim8.time( '5third' ); // 833\n *     anim8.time( '10s' );    // 10000\n *     anim8.time( '10sec' );  // 10000\n *     anim8.time( '1.5m' );   // 90000\n *     anim8.time( '1.5min' ); // 90000\n *     anim8.time( '0.4h' );   // 144000\n *     anim8.time( '0.4hr' );  // 144000\n *\n * @method anim8.time\n * @param {String|Number} time\n * @param {Any} [returnOnInvalid]\n */\nvar $time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n\n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n\n  return function(time, returnOnInvalid)\n  {\n    if ( isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( isString( time ) )\n    {\n      var parsed = regex.exec( time );\n\n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n\n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n\n        return Math.floor( time );\n      }\n    }\n\n    return coalesce( returnOnInvalid, 0 );\n  };\n\n})();\n\n\nvar Transitions = {};\n\n/**\n * Parses a value into a transition object. If the given input is a string it's\n * expected to be in a similar format to:\n *\n *     [time] [easing[-easingType]] >[outro] <[intro] /[granularity] ^[lookup]\n *\n * This is also a registry of transitions, you can add your own transitions that\n * can be used later with syntax like:\n *\n *     anim8.transition['myTransition'] = anim8.transition('50ms 0.05 linear');\n *\n * So you can use 'myTransition' as the transition input.\n *\n *     animator.transition('myTransition', 'myAnimation');\n *\n * @method anim8.transition\n * @for Core\n * @param {Object|String|Array} options\n * @param {Boolean} [cache]\n * @return {Object}\n */\nfunction $transition(transition, cache)\n{\n  // 1. If it's a string, convert it into an array.\n  // 2. If it's an array, parse it and convert it into an object.\n  // 3. If it's an object, fill in any missing values with the defaults.\n\n  var originalInput = transition;\n\n  if ( isString( transition ) )\n  {\n    if ( transition in Transitions )\n    {\n      return Transitions[ transition ];\n    }\n\n    transition = transition.toLowerCase().split(' ');\n  }\n\n  if ( isArray( transition ) )\n  {\n    var transitionArray = transition;\n\n    transition = {};\n\n    for (var i = 0; i < transitionArray.length; i++)\n    {\n      var part = transitionArray[i];\n      var first = part.charAt( 0 );\n\n      // Introduction Time (into next event)\n      if ( first === '<' )\n      {\n        var intro = $time( part.substring(1), false );\n\n        if ( !isNaN( intro ) )\n        {\n          transition.intro = intro;\n        }\n      }\n      // Outroduction Time (out of current event)\n      else if ( first === '>' )\n      {\n        var outro = $time( part.substring(1), false );\n\n        if ( !isNaN( outro ) )\n        {\n          transition.outro = outro;\n        }\n      }\n      // Granularity (for velocity conscious transitions)\n      else if ( first === '/' )\n      {\n        var granularity = $number( part.substring(1), false );\n\n        if ( granularity !== false )\n        {\n          transition.granularity = granularity;\n        }\n      }\n      // Lookup (for velocity conscious transitions)\n      else if ( first === '^' )\n      {\n        var lookup = $time( part.substring(1), false );\n\n        if ( lookup !== false )\n        {\n          transition.lookup = lookup;\n        }\n      }\n      else\n      {\n        // Easing\n        var easing = $easing( part, false );\n\n        if ( easing !== false )\n        {\n          transition.easing = easing;\n        }\n\n        // Time\n        var time = $time( part, false );\n\n        if ( time !== false )\n        {\n          transition.time = time;\n        }\n      }\n    }\n  }\n\n  if ( isObject( transition ) )\n  {\n    transition.time        = $time( transition.time, Defaults.transitionTime );\n    transition.outro       = $time( transition.outro, Defaults.transitionOutro );\n    transition.intro       = $time( transition.intro, Defaults.transitionIntro );\n    transition.easing      = $easing( coalesce( transition.easing, Defaults.transitionEasing ) );\n    transition.granularity = $number( transition.granularity, Defaults.transitionGranularity );\n    transition.lookup      = $time( transition.lookup, Defaults.transitionLookup );\n\n    if ( isString( originalInput ) && coalesce( cache, Defaults.cacheTransitions ) )\n    {\n      Transitions[ originalInput ] = transition;\n    }\n\n    return transition;\n  }\n\n  return Defaults.noTransition;\n}\n\n\n  // Add events to the animation cycle: begin, end, finished, starting\n  eventize( anim8 );\n\n  // anim8.js\n  anim8.anim8s = anim8s;\n  anim8.fn = Animator.prototype;\n  anim8s.fn = Animators.prototype;\n  anim8.isRunning = isRunning;\n  anim8.isLive = isLive;\n  anim8.setLive = setLive;\n  anim8.animating = animating;\n  anim8.requestRun = requestRun;\n  anim8.activateAnimator = activateAnimator;\n  anim8.pushAnimator = pushAnimator;\n  anim8.activate = activate;\n  anim8.run = run;\n  anim8.pause = pause;\n  anim8.resume = resume;\n  anim8.stop = stop;\n  anim8.end = end;\n  anim8.finish = finish;\n  anim8.nopeat = nopeat;\n\n  // Core\n  anim8.noop = noop;\n  anim8.isDefined = isDefined;\n  anim8.isFunction = isFunction;\n  anim8.isNumber = isNumber;\n  anim8.isBoolean = isBoolean;\n  anim8.isString = isString;\n  anim8.isArray = isArray;\n  anim8.isObject = isObject;\n  anim8.isEmpty = isEmpty;\n  anim8.now = now;\n  anim8.trim = trim;\n  anim8.toArray = toArray;\n  anim8.copy = copy;\n  anim8.extend = extend;\n  anim8.coalesce = coalesce;\n  anim8.constant = constant;\n  anim8.resolve = resolve;\n  anim8.clamp = clamp;\n  anim8.id = id;\n  anim8.Class = Class;\n  anim8.Defaults = Defaults;\n\n  // Registries\n  anim8.Animations = Animations;\n  anim8.Calculators = Calculators;\n  anim8.Factories = Factories;\n  anim8.Builders = Builder;\n  anim8.Paths = Paths;\n  anim8.Springs = Springs;\n  anim8.Easings = Easings;\n  anim8.EasingTypes = EasingTypes;\n  anim8.Options = Options;\n  anim8.Transitions = Transitions;\n\n  // Parsing\n  anim8.animation = $animation;\n  anim8.attrimatorsFor = $attrimatorsFor;\n  anim8.calculator = $calculator;\n  anim8.delay = $delay;\n  anim8.duration = $duration;\n  anim8.easing = $easing;\n  anim8.easingType = $easingType;\n  anim8.factory = $factory;\n  anim8.factoryFor = $factoryFor;\n  anim8.number = $number;\n  anim8.offset = $offset;\n  anim8.options = $options;\n  anim8.builder = $builder;\n  anim8.path = $path;\n  anim8.repeat = $repeat;\n  anim8.scale = $scale;\n  anim8.sleep = $sleep;\n  anim8.spring = $spring;\n  anim8.time = $time;\n  anim8.transition = $transition;\n\n  // Modules\n  // - color.js\n  anim8.Color = Color;\n  // - computed.js\n  anim8.computed = computed;\n  anim8.isComputed = isComputed;\n  // - dynamic.js\n  anim8.composite = composite;\n  anim8.partial = partial;\n  anim8.spread = spread;\n  // - eventize.js\n  anim8.eventize = eventize;\n  // - save.js\n  anim8.save = save;\n\n  // Classes\n  anim8.Aninmation = Animation;\n  anim8.Animator = Animator;\n  anim8.Animators = Animators;\n  anim8.Attrimator = Attrimator;\n  anim8.AttrimatorMap = AttrimatorMap;\n  anim8.Calculator = Calculator;\n  anim8.Defer = Defer;\n  anim8.DeferAnimator = DeferAnimator;\n  anim8.Event = Event;\n  anim8.EventState = EventState;\n  anim8.Factory = Factory;\n  anim8.FastMap = FastMap;\n  anim8.Movie = Movie;\n  anim8.Oncer = Oncer;\n  anim8.Builder = Builder;\n  anim8.Path = Path;\n  anim8.Physics = Physics;\n  anim8.Sequence = Sequence;\n  anim8.Spring = Spring;\n\n  // Calculators\n  anim8.Calculator2d = Calculator2d;\n  anim8.Calculator3d = Calculator3d;\n  anim8.CalculatorNumber = CalculatorNumber;\n  anim8.CalculatorQuaternion = CalculatorQuaternion;\n  anim8.CalculatorRGB = CalculatorRGB;\n  anim8.CalculatorRGBA = CalculatorRGBA;\n  anim8.CalculatorString = CalculatorString;\n\n  // Factories\n  anim8.object = object;\n  anim8.FactoryObject = FactoryObject;\n\n  // Builders\n  anim8.BuilderAnd = BuilderAnd;\n  anim8.BuilderDeltas = BuilderDeltas;\n  anim8.BuilderFinal = BuilderFinal;\n  anim8.BuilderInitial = BuilderInitial;\n  anim8.BuilderKeyframe = BuilderKeyframe;\n  anim8.BuilderMove = BuilderMove;\n  anim8.BuilderPath = BuilderPath;\n  anim8.BuilderPhysics = BuilderPhysics;\n  anim8.BuilderQueue = BuilderQueue;\n  anim8.BuilderSpring = BuilderSpring;\n  anim8.BuilderTravel = BuilderTravel;\n  anim8.BuilderTweenFrom = BuilderTweenFrom;\n  anim8.BuilderTweenTo = BuilderTweenTo;\n\n  // Paths\n  anim8.PathCombo = PathCombo;\n  anim8.PathCompiled = PathCompiled;\n  anim8.PathCubic = PathCubic;\n  anim8.PathDelta = PathDelta;\n  anim8.PathJump = PathJump;\n  anim8.PathKeyframe = PathKeyframe;\n  anim8.PathQuadratic = PathQuadratic;\n  anim8.PathTween = Tween;\n\n  // Springs\n  anim8.SpringDistance = SpringDistance;\n  anim8.SpringLinear = SpringLinear;\n\n  return anim8;\n\n}));\n"],"sourceRoot":"/source/"}