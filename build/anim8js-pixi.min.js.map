{"version":3,"sources":["anim8js-core.js","anim8js-fast-map.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-point.js","anim8js-attrimator.js","anim8js-attrimator-map.js","anim8js-event.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-physics.js","anim8js-animation.js","anim8js-transition.js","anim8js-options.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tweenTo.js","anim8js-parser-tweenFrom.js","anim8js-parser-move.js","anim8js-parser-springs.js","anim8js-parser-physics.js","anim8js-parser-travel.js","anim8js-factory.js","anim8js-object.js","anim8js-pixi.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","defaults","duration","easing","teasing","delay","sleep","repeat","scale","offset","transitionTime","transitionOutro","transitionIntro","transitionEasing","transitionGranularity","transitionLookup","cache","cacheOptions","cacheTransitions","noOptions","noTransition","frameRate","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","trim","String","prototype","replace","isEmpty","prop","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","number","value","constant","variable","resolve","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","target","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","FastMap","map","reset","putMap","put","values","keys","indices","key","get","remove","removeAt","index","lastValue","pop","lastKey","indexOf","has","hasOverlap","size","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","easingType","pair","e","t","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","yoyo","mirror","reverse","flip","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attrimator","attr","attribute","getAttribute","frame","calculator","clone","cloneDefault","relative","relativeAmount","mask","isComputed","relativeFunction","calc","mul","add","randomSelection","randomFunction","selected","ZERO","Path","compute","create","resolvedMin","resolvedMax","Calculator","createConstants","ONE","INFINITY","adds","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","lengthSq","isValid","isZero","isEqual","dot","distSq","setLength","isRelative","getRelativeAmount","z","CalculatorNumber","defaultValue","amountScale","ab","epsilon","Calculator2d","y","cx","cy","rx","ry","ix","iy","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Calculator3d","cz","rz","iz","dz","CalculatorQuaternion","angle","ra","ia","da","CalculatorRGB","rr","rg","rb","ir","ig","ib","dr","dg","db","CalculatorRGBA","path","spring","type","name","points","hasComputed","ps","replaceComputed","resolvePoint","isLinear","granularity","prev","temp","Tween","PathCubic","p0","p1","p2","p3","d1","d2","d3","i1","i3","PathQuadratic","PathDelta","deltas","ds","d0","pd","PathJump","PathCompiled","pointCount","PathKeyframe","easings","ea","defaultEasing","PathPoint","point","Attrimator","parser","startTime","pauseTime","elapsed","stopTime","paused","cycle","finished","startCycle","setTime","updated","finish","update","getElapsed","stopIn","milliseconds","nopeat","valueAt","totalTime","timeRemaining","isInfinite","pause","resume","isPaused","isFinished","getParser","queue","parseValue","AttrimatorMap","queueMap","onNewAttribute","maxRemaining","attrimators","existing","unqueueAt","applyCycle","nextCycle","currentDepth","nextDepth","EventState","DELAYED","ANIMATING","SLEEPING","FINISHED","Event","scaleBase","hasInitialState","computeValue","baseValue","applyValue","ceil","state","oldState","newState","iteration","fromOptions","options","Spring","set","rest","position","velocity","gravity","finishOnRest","resolveRest","updateVelocity","dt","MAX_DT","starting","EPSILON","SpringLinear","damping","stiffness","temp0","temp1","SpringDistance","Physics","acceleration","terminal","resolveVelocity","resolveAcceleration","initalPosition","vel","acc","pos","usePosition","animation","Animation","animationsQueued","anim","last","animationsMerged","base","j","animationString","animationSplit","parsedAnimation","parsedOptions","extendedAnimation","attrimatorMap","helper","ParserHelper","parserName","save","isSaved","newAttrimators","merge","force","transition","originalInput","transitionArray","part","first","charAt","intro","substring","outro","lookup","parseProperty","propertyAdd","propertyScale","fn","attrimatorsAdded","active","cycleCurrent","cycleNext","cycleEnded","newCycle","applyCurrentCycle","endCurrentCycle","restore","applyInitialState","preupdate","aa","setDefault","wasFinished","minCycle","placeAttrimator","trimAttrimators","activate","deactivate","destroy","createAttrimators","onAnimation","queueAttrimators","play","all","playAttrimators","finishNotPresent","transitionAttrimators","curr","pastLookahead","pastVelocity","pastNegativeVelocity","past","outTime","outPoint","outNext","inTime","inPoint","inNext","outVelocity","outPerMillis","inVelocity","inPerMillis","compiled","lastPoint","totalDistance","distances","requiredTime","timeDelta","transitionEvent","tweenTo","tweenManyTo","targets","tweenFrom","tweenManyFrom","startings","tween","starts","ends","tweenMany","move","moveMany","amounts","ref","request","follow","attrimatorsFor","attributes","resulting","stop","unset","hasAttrimators","getSubject","wrapper","invoke","func","args","DeferAnimator","onCycleStart","onCycleEnd","fill","each","iterator","filter","filterer","alive","getSubjects","mid","e0","e1","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","id","setTimeout","maxDelay","delayOffset","remaining","Parser","newOptions","oldOptions","mergeEasing","mergeRepeat","mergeDelay","mergeSleep","mergeDuration","mergeOffset","mergeScale","mergeScaleBase","prepareSpecifics","specifics","parseEasing","parseFirst","parseRepeat","parseNumber","parseDelay","parseSleep","parseDuration","parseOffset","parseScale","parseScaleBase","option","parseEvent","parseOptionFunction","optionAdd","optionScale","baseRaw","mergeFirst","mergeNumber","ParserDeltas","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","keyframe","sort","from","half","to","times","maxTime","order","pathEasings","ParserTweenTo","ParserTweenFrom","ParserMove","ParseSpring","springs","ParsePhysics","physics","physic","stopAt","ParserTravel","travel","pointing","subtractVelocity","pointingFunction","targetValue","difference","traveling","traveler","highestPriorityFactory","factoryName","is","priority","Factory","FactoryObject","$animator","object","calculatorName","FactoryPixi","AnimatorPixi","pixi","dynamicName","dynamic","dynamics","getRGB","padding","sizeScalar","alpha","height","pivot","pivotX","pivotY","rotation","scaleX","width","dimension","blur","blurX","blurY","radius","step","offsetX","offsetY","blendMode","boundsPadding","fillAlpha","lineColor","lineWidth","tint","invert","tx","ty","noise","sepia","anchor","stroke","strokeThickness","wordWrapWidth","dropShadowAngle","PI","dropShadowDistance","dropShadowColor","tilePosition","tileScale","tileScaleOffset","gradientBlur","nm","scaleY"],"mappings":"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","file":"anim8js-pixi.min.js","sourcesContent":["\n/**\n * @module anim8\n * @class Core\n */\n\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately. If the subject can't be\n * animated then false is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.factoryFor:method\"}}{{/crossLink}}\n * \n * @param {Any} subject\n * @return {Animator|false}\n * @method anim8\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {Array} subject\n * @return {Animators}\n * @method anim8s\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n/**\n * The default values for anim8js properties.\n *\n * @property {Object} anim8.defaults\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   *\n   * @property {Number} duration\n   * @for anim8.defaults\n   * @default 1000\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @property {String|Function|Array} easing\n   * @for anim8.defaults\n   * @default 'ease'\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @property {String|Function|Array} teasing\n   * @for anim8.defaults\n   * @default 'linear'\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @property {Number} delay\n   * @for anim8.defaults\n   * @default 0\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @property {Number} sleep\n   * @for anim8.defaults\n   * @default 0\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @property {Number} repeat\n   * @for anim8.defaults\n   * @default 1\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @property scale\n   * @for anim8.defaults\n   * @default 1.0\n   * @type {Number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default animation offset in milliseconds.\n   *\n   * @property {Number} offset\n   * @for anim8.defaults\n   * @default 0\n   */\n  offset: 0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @property {Number} transitionTime\n   * @for anim8.defaults\n   * @default 500\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition outroduction time in milliseconds.\n   * \n   * @property {Number} transitionOutro\n   * @for anim8.defaults\n   * @default 100\n   */\n  transitionOutro: 100,\n\n  /**\n   * The default transition introduction time in milliseconds.\n   * \n   * @property {Number} transitionIntro\n   * @for anim8.defaults\n   * @default 100\n   */\n  transitionIntro: 100,\n\n  /**\n   * The default transition easing when none is specified.\n   * \n   * @property {String|Function|Array} transitionEasing\n   * @for anim8.defaults\n   * @default 'linear'\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * The default transition granularity. This is used for smooth transitions to\n   * provide a smooth transition from the outro velocity to the intro velocity,\n   * the cubic or quadratic path between the two is a curve with unknown length\n   * so the length needs to be calculated using a maximum number of points to\n   * calculate along the path - summing the distances between the consecutive points.\n   * \n   * @property {Number} transitionGranularity\n   * @for anim8.defaults\n   * @default 0\n   */\n  transitionGranularity: 0,\n\n  /**\n   * TODO\n   * \n   * @property {Number} transitionLookup\n   * @for anim8.defaults\n   * @default 10\n   */\n  transitionLookup: 10,\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}}\n   * \n   * @property {Boolean} cache\n   * @for anim8.defaults\n   * @default false\n   */\n  cache: false,\n\n  /**\n   * Whether parsed options are cached whenever possible. Options that can be\n   * cached must be strings.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @property {Boolean} cacheOptions\n   * @for anim8.defaults\n   * @default false\n   */\n  cacheOptions: false,\n\n  /**\n   * Whether parsed transitions are cached whenever possible. Transitions that can be\n   * cached must be strings.\n   * \n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}}\n   * \n   * @property {Boolean} cacheTransitions\n   * @for anim8.defaults\n   * @default false\n   */\n  cacheTransitions: false,\n\n  /**\n   * The value to return when options could not be parsed from input.\n   * \n   * @property {Object} noOptions\n   * @for anim8.defaults\n   * @default {}\n   */\n  noOptions: {},\n\n  /**\n   * The value to return when a transition could not be parsed from input.\n   * \n   * @property {Object} noTransition\n   * @for anim8.defaults\n   * @default {}\n   */\n  noTransition: {},\n\n  /**\n   * The target number of milliseconds between frames. This only applies if the\n   * browser doesn't support any of the requestAnimationFrame variations.\n   * \n   * @property {Number} frameRate\n   * @for anim8.defaults\n   * @default 33\n   */\n  frameRate: 33\n\n};\n\n/**\n * @class Core\n */\n\n/**\n * A function that does nothing.\n * \n * @property anim8.noop\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n *\n * **Examples:**\n *\n *     anim8.isDefined( 0 );     // true\n *     anim8.isDefined( false ); // true\n *     anim8.isDefined();        // false\n * \n * @method anim8.isDefined\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n *\n * @method anim8.isFunction\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n *\n * **Examples:**\n *\n *     anim8.isNumber( 0 );     // true\n *     anim8.isNumber( -45.6 ); // true\n *     anim8.isNumber( true );  // false\n *     anim8.isNumber( '1' );   // false\n *     anim8.isNumber();        // false\n *\n * @method anim8.isNumber\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n *\n * **Examples:**\n *\n *     anim8.isString( '' );    // true\n *     anim8.isString( '1' );   // true\n *     anim8.isString( 4.5 );   // false\n *     anim8.isString();        // false\n *\n * @method anim8.isString\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n *\n * **Examples:**\n *\n *     anim8.isArray( [] );     // true\n *     anim8.isArray( [4, 5] ); // true\n *     anim8.isArray( 4.5 );    // false\n *     anim8.isArray();         // false\n *\n * @method anim8.isArray\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object. Arrays are considered \n * objects.\n *\n * **Examples:**\n *\n *     anim8.isObject( {} );     // true\n *     anim8.isObject( [] );     // true\n *     anim8.isObject( 4.5 );    // false\n *     anim8.isObject();         // false\n *\n * @method anim8.isObject\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n *\n * @method anim8.isElement\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n *\n * @method anim8.now\n * @return {Number}\n */\nanim8.now = (function() \n{\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * Returns the trimmed version of the given string. A trimmed string has no\n * whitespace in the beginning or end of it.\n *\n * **Examples:**\n *\n *     anim8.trim( 'x' );     // 'x'\n *     anim8.trim( '   x' );  // 'x'\n *     anim8.trim( 'x   ' );  // 'x'\n *     anim8.trim( '  x ' );  // 'x'\n *     anim8.trim( '    ' );  // ''\n * \n * @method anim8.trim\n * @param  {String} x\n * @return {String}\n */\nanim8.trim = (function()\n{ \n  if (String.prototype.trim) {\n    return function(x) {\n      return x.trim();\n    };\n  }\n  return function(x) {\n    return x.replace(/^([\\s]*)|([\\s]*)$/g, '');\n  };\n})();\n\n/**\n * Determines whether the given variable is empty.\n *\n * **Examples:**\n *\n *     anim8.isEmpty( '' );        // true\n *     anim8.isEmpty( 0 );         // true\n *     anim8.isEmpty( [] );        // true\n *     anim8.isEmpty( {} );        // true\n *     anim8.isEmpty( null );      // true\n *     anim8.isEmpty( true );      // true\n *     anim8.isEmpty( false );     // true\n *     anim8.isEmpty( 'x' );       // false\n *     anim8.isEmpty( 0.3 );       // false\n *     anim8.isEmpty( [0] );       // false\n *     anim8.isEmpty( {x:3} );     // false\n *\n * @method anim8.isEmpty\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or \n * object a new instance of that type is created where the values are copied as \n * well. All other types can't be copied (most likely because they're scalar) so\n * they are returned as-is.\n *\n * @method anim8.copy\n * @param {T} x\n * @return {T}\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding \n * overriding any existing properties.\n * \n * @method anim8.extend\n * @param  {Object} out\n * @return {Object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding \n * existing properties where necessary.\n * \n * @method anim8.override\n * @param  {Object} out\n * @return {Object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n *\n * **Examples:**\n *\n *     anim8.coalesce( 1, 2, 3 );           // 1\n *     anim8.coalesce( undefined, 2, 3 );   // 2\n *     anim8.coalesce();                    // undefined\n * \n * @method anim8.coalesce\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's \n * assumed to be milliseconds and is returned immediately. If a string is given\n * a unit is looked for to determine how to scale the number into milliseconds.\n * If the given time is invalid and returnOnInvalid is not given then zero is\n * returned.\n *\n * **Examples:**\n *\n *     anim8.time( 45 );       // 45\n *     anim8.time( 45.9 );     // 45\n *     anim8.time( -4.1 );     // -5\n *     anim8.time( '5ms' );    // 5\n *     anim8.time( '23' );     // 23\n *     anim8.time( '5c' );     // 500\n *     anim8.time( '5cs' );    // 500\n *     anim8.time( '5jiffy' ); // 833\n *     anim8.time( '5third' ); // 833\n *     anim8.time( '10s' );    // 10000\n *     anim8.time( '10sec' );  // 10000\n *     anim8.time( '1.5m' );   // 90000\n *     anim8.time( '1.5min' ); // 90000\n *     anim8.time( '0.4h' );   // 144000\n *     anim8.time( '0.4hr' );  // 144000\n *\n * @method anim8.time\n * @param {String|Number} time\n * @param {Any} [returnOnInvalid]\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/delay:property\"}}anim8.defaults.delay{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n *\n * @method anim8.delay\n * @param {String|Number} time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/sleep:property\"}}anim8.defaults.sleep{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n *\n * @method anim8.sleep\n * @param {String|Number} time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/duration:property\"}}anim8.defaults.duration{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n * \n * @method anim8.duration\n * @param {String|Number} time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses offset from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/offset:property\"}}anim8.defaults.offset{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n * \n * @method anim8.offset\n * @param {String|Number} time\n */ \nanim8.offset = function(time)\n{\n  return anim8.time( time, anim8.defaults.offset );\n};\n\n/**\n * Parses repeats from a string or number. If a valid repeat is not given then\n * `returnOnInvalid` is returned, if that is not given then\n * {{#crossLink \"anim8.defaults/repeat:property\"}}anim8.defaults.repeat{{/crossLink}}\n * is returned.\n *\n * **Examples:**\n *\n *     anim8.repeat( 5 );            // 5\n *     anim8.repeat( 'inf' );        // Infinity\n *     anim8.repeat( 'infinity' );   // Infinity\n *     anim8.repeat( 'infinite' );   // Infinity\n *     anim8.repeat( 'once' );       // 1\n *     anim8.repeat( 'twice' );      // 2\n *     anim8.repeat( 'thrice' );     // 3\n *     anim8.repeat( 'dozen' );      // 12\n *     anim8.repeat( 'random' );     // 4\n *     anim8.repeat( 'invalid', 6 ); // 6\n *     anim8.repeat( false, 7 );     // 7\n *     anim8.repeat();               // anim8.defaults.repeat\n *\n * @method anim8.repeat\n * @param {String|Number} time\n * @param {E} [returnOnInvalid]\n * @return {Number|E}\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses a number from the given input and if the input isn't a valid number\n * then returnOnInvalid is returned.\n *\n * **Examples:**\n *\n *     anim8.number( 5 );       // 5\n *     anim8.number( '5' );     // 5\n *     anim8.number( '5e4' );   // 50000\n *     anim8.number( 'x' );     // undefined\n *     anim8.number( 'x', 23 ); // 23\n * \n * @method anim8.number\n * @param {String|Number} value\n * @param {E} returnOnInvalid\n * @return {Number|E}\n */\nanim8.number = function(value, returnOnInvalid)\n{\n  var parsed = parseFloat( value );\n\n  return isNaN( parsed ) ? returnOnInvalid : parsed;\n};\n\n/**\n * Parses scale from a string or number.\n *\n * **See:** {{#crossLink \"Core/anim8.number:method\"}}anim8.number{{/crossLink}}\n * \n * @method anim8.scale\n * @param {String|Number} scale\n * @return {Number}\n */\nanim8.scale = function(scale)\n{\n  return anim8.number( scale, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * **Examples:**\n *\n *     anim8.constant( 5 );   // function() { return 5; }\n *\n * @method anim8.constant\n * @param {T} variable\n * @return {Function}\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Resolves the given variable. If the variable is a function the result is \n * returned.\n *\n * **Examples:**\n *\n *     anim8.resolve( 5 );                     // 5\n *     anim8.resolve( true );                  // true\n *     anim8.resolve( function(){return 7;} ); // 7\n * \n * @method anim8.resolve\n * @param  {Function|E} variable\n * @return {E}\n */\nanim8.resolve = function(variable)\n{\n  return anim8.isFunction( variable ) ? variable() : variable;\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n *\n * **Examples:**\n *\n *     anim8.clamp( 5, 1, 6 );   // 5\n *     anim8.clamp( 0, 1, 6 );   // 1\n *     anim8.clamp( 7, 1, 6 );   // 6\n * \n * @method anim8.clamp\n * @param  {Number} v\n * @param  {Number} min\n * @param  {Number} max\n * @return {Number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on \n * the first element.\n *\n * @method anim8.delegate\n * @param {String} functionName\n * @param {String} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++)\n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n *\n * @property RETURN_THIS\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n *\n * @property RETURN_RESULTS\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n *\n * @property RETURN_FIRST\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n *\n * @property RETURN_TRUE\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( event, [argument] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method anim8.eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nanim8.eventize = function(target)\n{\n  /**\n   * **See:** {{#crossLink \"Core/anim8.eventize:method\"}}{{/crossLink}}\n   * \n   * @class anim8.eventize\n   */\n\n  // Adds a listener to $this\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for anim8.eventize\n   * @param {String} events\n   * @param {Function} callback\n   * @param {Object} context\n   * @chainable\n   */\n  target.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n\n    return this;\n  };\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for anim8.eventize\n   * @param {String} events\n   * @param {Function} callback\n   * @param {Object} context\n   * @chainable\n   */\n  target.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n\n    return this;\n  };\n  \n  // Removes a listener from an array of listeners.\n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * @method off\n   * @for anim8.eventize\n   * @param {String} events\n   * @param {Function} callback\n   * @chainable\n   */\n  target.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n\n    return this;\n  };\n  \n  // Triggers listeneers for the given event\n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var max = eventListeners.length;\n     \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n        if ( eventListeners.length !== max )\n        {\n          listeners[ event ] = eventListeners.slice( max );  \n        }\n        else\n        {\n          delete listeners[ event ];  \n        }\n      }\n    }\n  };\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for anim8.eventize\n   * @param {String} event\n   * @param {Any} argument\n   * @chainable\n   */\n  target.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n\n    return this;\n  };\n};\n\n","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @param {FastMap|Object} map\n * @class FastMap\n * @constructor\n */\nanim8.FastMap = function(map)\n{\n  this.reset();\n\n  if ( map instanceof anim8.FastMap )\n  {\n    this.putMap( map );\n  }\n  else if ( anim8.isObject( map ) )\n  {\n    for (var prop in map)\n    {\n      this.put( prop, map[ prop ] );\n    }\n  }\n};\n\nanim8.FastMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @method reset\n   * @chainable\n   */\n  reset: function()\n  {\n    /**\n     * An array of the values in this map.\n     * \n     * @property {Array} values\n     */\n    this.values = [];\n\n    /**\n     * An array of the keys in this map.\n     * \n     * @property {Array} keys\n     */\n    this.keys = [];\n\n    /**\n     * An object of key to index mappings.\n     * \n     * @property {Object} indices\n     */\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @method put\n   * @param {String} key\n   * @param {V} value\n   * @chainable\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   *\n   * @method putMap\n   * @param {FastMap} map\n   * @chainable\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @method get\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @method remove\n   * @param {String} key\n   * @chainable\n   */\n  remove: function(key)\n  {\n    if ( key in this.indices )\n    {\n      this.removeAt( this.indices[ key ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @method removeAt\n   * @param {Number} index\n   * @chainable\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   *\n   * @method indexOf\n   * @param {String} key\n   * @return {Number}\n   */\n  indexOf: function(key)\n  {\n    return anim8.coalesce( this.indices[ key ], -1 );\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @method has\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns whether the given input has overlap with keys in this map.\n   *\n   * @method hasOverlap\n   * @param {FastMap|Object} map\n   * @return {Boolean}\n   */\n  hasOverlap: function(map)\n  {\n    var keys = this.keys;\n    var indices = map.indices;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      if ( keys[i] in indices )\n      {\n        return true;\n      }\n    }\n   \n    return false;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @method size\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Clears all keys & values from the map.\n   *\n   * @method clear\n   * @chainable\n   */\n  clear: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  }\n\n};","\n/**\n * Instantiates a Defer instance. Defer instances keep track of method calls\n * to call at a later time - after an event occurs. The first argument needs\n * to be a function which returns an instance of anim8.Defer when it's invoked.\n * The second argument is an array of methods that can be deferred.\n * \n * @param {Function} factory\n * @param {Array} methods\n * @class Defer\n * @constructor\n */\nanim8.Defer = function(factory, methods)\n{\n  this.$factory = factory;\n  \n  for (var i = 0; i < methods.length; i++)\n  {  \n    this[ methods[i] ] = this.$push( methods[i] );\n  }\n};\n\nanim8.Defer.prototype = \n{  \n  /**\n   * Resets the defer instance.\n   *\n   * @method $reset\n   * @param {Object} eventable\n   * @param {Any} previous\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} callback\n   */\n  $reset: function(eventable, previous, eventType, event, callback)\n  {\n    this.$eventable = eventable;\n    this.$previous = previous;\n    this.$eventType = eventType;\n    this.$event = event;\n    this.$callback = callback;\n    this.$calls = [];\n    this.$next = [];\n    \n    if ( this.$isRoot() )\n    {\n      this.$register();\n    }\n  },\n\n  /**\n   * Determines whether this Defer instance is at the root.\n   *\n   * @method $isRoot\n   * @return {Boolean}\n   */\n  $isRoot: function()\n  {\n    return this.$eventable === this.$previous;\n  },\n\n  /**\n   * Registers this Defer instance with the eventable.\n   *\n   * @method $register\n   */\n  $register: function()\n  {\n    this.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n  },\n\n  /**\n   * Creates a defered function which passes the method and arguments for\n   * any method call into an array of calls on this Defer instance.\n   *\n   * @method $push\n   * @param {String} methodName\n   * @return {Function}\n   */\n  $push: function(methodName)\n  {\n    return function() \n    {\n      this.$calls.push( [methodName, arguments] );\n      \n      return this;\n    };\n  },\n\n  /**\n   * Executes all defered method calls and starts any child Defer instances.\n   *\n   * @method $run\n   */\n  $run: function() \n  {\n    // Invoke the callback if one was given.\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n    for (var i = 0; i < this.$calls.length; i++)\n    {\n      var call = this.$calls[ i ];\n      \n      this.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n    }\n    \n    for (var k = 0; k < this.$next.length; k++)\n    {\n      this.$next[ k ].$register();\n    }\n  },\n\n  /**\n   * Returns the object before the defer statement.\n   *\n   * @method undefer\n   * @return {Any}\n   */\n  undefer: function()\n  {\n    return this.$previous;\n  },\n\n  /**\n   * Defers any following method calls to after the given event is triggered. A\n   * callback can be specified which is a function invoked after the event is\n   * triggered.\n   *\n   * @method defer\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} callback\n   * @return {Defer}\n   */\n  defer: function(eventType, event, callback)\n  {\n    var next = new this.$factory( this.$eventable, this, eventType, event, callback );\n    \n    this.$next.push( next );\n    \n    return next;\n  }\n  \n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's \n * assumed to be an easing function and is returned immediately. If the input is\n * a string the easing with that name is returned. If the input is a string in \n * the format 'easing-easingType' then an easing is returned that is a \n * combination of the easing with the given name and the easingType with the \n * given name. If the given input is an array with 4 elements it's assumed to be\n * a bezier path and one is created and returned. If no input is given the \n * default easing is returned. If an easing cannot be determined then an error\n * is thrown.\n *\n * **Examples:**\n *\n *     anim8.easing();               // anim8.defaults.easing\n *     anim8.easing( 'linear' );     // anim8.easing.linear\n *     anim8.easing( 'reverse' );    // anim8.easingType.reverse( anim8.defaults.easing )\n *     anim8.easing( 'ease-yoyo' );  // anim8.easingType.yoyo( anim8.easing.ease )\n *     anim8.easing( [0,0,1,1] );    // anim8.easing.bezier( 0, 0, 1, 1 )\n *     anim8.easing( 5, false );     // false\n *     anim8.easing( 'invalid', 1 ); // 1\n *     anim8.easing( [0,0,1], 1 );   // 1\n *\n * @method anim8.easing\n * @for Core\n * @param {Function|String|Array} easing\n * @param {E} [returnOnInvalid]\n * @return {Function|E}\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n  {\n    return easing;\n  }\n  if ( anim8.isString( easing ) )\n  {\n    if ( easing in anim8.easing )\n    {\n      return anim8.easing[ easing ];\n    }\n    if ( easing in anim8.easingType )\n    {\n      return anim8.easingType[ easing ]( anim8.easing( anim8.defaults.easing ) );\n    }\n    \n    if ( easing.indexOf('-') !== -1 )\n    {\n      var pair = easing.split('-');\n      var e = pair[0];\n      var t = pair[1];\n      \n      if ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n      {        \n        return anim8.easingType[ t ]( anim8.easing[ e ] );\n      }\n    }\n  }\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n  {\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n  {\n    return anim8.easing( anim8.defaults.easing );\n  }\n  \n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n * \n * @method anim8.isEasingName\n * @for Core\n * @param {String} easing\n * @return {Boolean}\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n  var pair = easing.split('-');\n  var e = pair[0];\n  var t = pair[1];\n  \n  if ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n  {        \n    return true;\n  }\n  \n  return false;\n};\n\n/**\n * A collection of easing functions. An easing functions takes a single number\n * as input that's between 0 and 1 inclusively and returns a number that \n * progresses from 0 to 1 but in-between values may return a number that's less \n * than 0 or greater than 1.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n * \n * @class anim8.easing\n */\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method linear\n * @for anim8.easing\n */\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quad\n * @for anim8.easing\n */\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quad\n * @for anim8.easing\n */ \nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method cubic\n * @for anim8.easing\n */\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method quartic\n * @for anim8.easing\n */\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quintic\n * @for anim8.easing\n */\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method back\n * @for anim8.easing\n */\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  return x3 + x2 - x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method sine\n * @for anim8.easing\n */\nanim8.easing.sine = function(x) \n{\n  return Math.sin( x * 1.57079632679 );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method overshot\n * @for anim8.easing\n */\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method elastic\n * @for anim8.easing\n */\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n  var wave = -Math.sin(x * 10.9955742876);\n  return scale * wave;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method revisit\n * @for anim8.easing\n */\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method lasso\n * @for anim8.easing\n */\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method slowbounce\n * @for anim8.easing\n */\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method bounce\n * @for anim8.easing\n */\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method smallbounce\n * @for anim8.easing\n */\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n  return (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method tinybounce\n * @for anim8.easing\n */\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n  return (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method hesitant\n * @for anim8.easing\n */\nanim8.easing.hesitant = function(x) \n{\n  return (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method sqrt\n * @for anim8.easing\n */\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method sqrtf\n * @for anim8.easing\n */\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method log10\n * @for anim8.easing\n */\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method slingshot\n * @for anim8.easing\n */\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n    return (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method circular\n * @for anim8.easing\n */\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method gentle\n * @for anim8.easing\n */\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * Generates a bezier easing function given the two middle control points. The\n * first point is {0,0} and the last point is {1, 1}.\n *\n * @method bezier\n * @for anim8.easing\n * @param {Number} mX1\n * @param {Number} mY1\n * @param {Number} mX2\n * @param {Number} mY2\n * @return {Function}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n","\n/**\n * Returns an easing type based on the input. If the input is a function that \n * function is immediately returned. If the input is a string the easing type \n * with that name is returned. If no easing type could be determined an error is\n * thrown.\n *\n * @param {Function|String} easingType\n * @param [Boolean] optional\n * @return {Function|false}\n */\nanim8.easingType = function(easingType, optional)\n{\n  if ( anim8.isFunction( easingType ) )\n  {\n    return easingType;\n  }\n  if ( anim8.isString( easingType ) && easingType in anim8.easingType )\n  {\n    return anim8.easingType[ easingType ];\n  }\n  \n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw easingType + ' is not a valid easing type';\n};\n\n/**\n * A collection of easing type functions. An easing type functions takes an\n * easing function as an argument and modifies it's input and output values.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n * \n * @class anim8.easingType\n */\n\n/**\n * Plays the animation forward normally.\n *\n * @method in\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType['in'] = function(easing) \n{\n  return function(x) \n  {\n    return easing( x );\n  };\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum.\n * \n * @method out\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.out = function(easing) \n{\n  return function(x) \n  {\n    return 1.0 - easing( 1.0 - x );\n  };\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum halfway.\n * \n * @method inout\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.inout = function(easing) \n{\n  return function(x) \n  {\n    if ( x < 0.5 ) \n    {\n      return easing( 2.0 * x ) * 0.5;\n    } \n    else \n    {\n      return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n    }\n  };\n};\n\n/**\n * Plays the aninmation forwards with the given easing, and backwards with the same easing momentum.\n * \n * @method yoyo\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.yoyo = function(easing) \n{\n  return function(x) \n  {\n    if ( x < 0.5 ) \n    {\n      return easing( 2.0 * x );\n    } \n    else \n    {\n      return easing( 2.0 - 2.0 * x );\n    }\n  };\n};\n\n/**\n * Plays the animation forwards with the given easing, and backwards reflecting the easing's momentum.\n * \n * @method mirror\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.mirror = function(easing)\n{\n  return function(x)\n  {\n    if ( x < 0.5 )\n    {\n      return easing( 2.0 * x );\n    }\n    else\n    {\n      return 1.0 - easing( 2.0 - 2.0 * x );\n    }\n  };\n};\n\n/**\n * Plays the animation backwards with using the same easing momentum.\n * \n * @method reverse\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.reverse = function(easing)\n{\n  return function(x)\n  {\n    return easing( 1.0 - x );\n  };\n};\n\n/**\n * Plays the animation backwards by flipping the easing's momentum.\n * \n * @method flip\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.flip = function(easing)\n{\n  return function(x)\n  {\n    return 1.0 - easing( x );\n  };\n};\n","\n/**\n * Easings equivalent to the CSS animations. These are approximations since the\n * exact functions are not performant enough.\n */\n\nanim8.easing.cssEase      = anim8.easing.ease;\n\nanim8.easing.cssEaseIn    = anim8.easing.quad;\n\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\n\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\n\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n *\n * @method anim8.color\n * @for Core\n * @param {Number} [r=255]\n * @param {Number} [g=255]\n * @param {Number} [b=255]\n * @param {Number} [a=1]\n * @return {Object}\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @method anim8.color.parse\n * @for Core\n * @param {String} input\n * @return {Object|False}\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n *\n * @method anim8.color.format\n * @for Core\n * @param {Object} color\n * @return {String}\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * A collection of computed functions. Computed functions are functions that\n * are invoked once at the start of an animation given the \n * {{#crossLink \"Attrimator\"}}{{/crossLink}} and \n * {{#crossLink \"Animator\"}}{{/crossLink}} and the result replaces the function.\n *\n * **See:** {{#crossLink \"anim8.computed/current:method\"}}{{/crossLink}},\n *          {{#crossLink \"anim8.computed/relative:method\"}}{{/crossLink}},\n *          {{#crossLink \"anim8.computed/random:method\"}}{{/crossLink}}\n * \n * @class anim8.computed\n */\nanim8.computed = {};\n\n/**\n * Calculates and returns the current value for an \n * {{#crossLink \"Animator\"}}{{/crossLink}}. If the animator doesn't have a \n * current value the default value for the attribute is returned.\n *\n * @method current\n * @param {Attrimator} attrimator\n * @param {Animator} animator\n * @return {T}\n */\nanim8.computed.current = function(attrimator, animator)\n{\n  var attr = attrimator.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currently in the animator.\n * A mask can be used for mixed relative & absolute values in a single value\n * where 1 makes it relative and 0 makes it absolute.\n *\n * **Examples:**\n *\n *     anim8.computed.relative( 40 ); // returns function which adds 40 to current value\n *     anim8.computed.relative( 40, 0.5 ); // returns function which adds 40 to half of the current value\n *     anim8.computed.relative( {x: 20, y: 10}, {x: 1, y: 0} ); // returns function which adds 20 to the x of the current value and sets the y of the current value to 10\n * \n * @method relative\n * @param {T} relativeAmount\n * @param {T} mask\n * @return {Function}\n */\nanim8.computed.relative = function(relativeAmount, mask)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( anim8.isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(attrimator, animator)\n  { \n    var attr = attrimator.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = attribute.cloneDefault();\n    }\n\n    if ( mask )\n    {\n      current = calc.mul( current, mask );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  relativeFunction.relativeAmount = relativeAmount;\n  relativeFunction.mask = mask;\n\n  return relativeFunction;\n};\n\n/**\n * Returns a random value based on the given random selection.\n * \n * 1. If an array is given an item is randomly chosen from that array.\n * 2. If an instance of {{#crossLink \"Path\"}}{{/crossLink}} is given a point is randomly computed and returned.\n * 3. If an object with min & max values is given a random value between them is returned.\n *\n * **Examples:**\n *\n *     anim8.computed.random( [1, 2, 3] ); // returns function which returns a 1, 2, or 3\n *     anim8.computed.random( {min: 1, max: 5} ); // returns function which returns a value between 1 and 5\n *     anim8.computed.random( {min: {x: 0, y: 0}, max: {x: 100, y: 200}} ); // returns function which returns a point in the rectangle {0,0,100,200}\n *     anim8.computed.random( path ); // returns function which returns a value anywhere along the given path\n * \n * @method random\n * @param  {Array|Object|Path} randomSelection\n * @return {Function}\n */\nanim8.computed.random = function(randomSelection)\n{\n  var randomFunction = null;\n\n  if ( anim8.isArray( randomSelection ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var selected = randomSelection[ Math.floor( Math.random() * randomSelection.length ) ];\n\n      return calc.parse( selected, calc.ZERO );\n    };\n  }\n  else if ( randomSelection instanceof anim8.Path )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n\n      return randomSelection.compute( calc.create(), Math.random() );\n    };\n  }\n  else if ( anim8.isObject( randomSelection ) && anim8.isDefined( randomSelection.min ) && anim8.isDefined( randomSelection.max ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var resolvedMin = anim8.resolve( randomSelection.min );\n      var resolvedMax = anim8.resolve( randomSelection.max );\n      var min = calc.parse( resolvedMin, calc.ZERO );\n      var max = calc.parse( resolvedMax, calc.ZERO );\n\n      return calc.random( calc.create(), min, max );\n    };\n  }\n  else\n  {\n    throw 'Invalid random input: ' + randomSelection;\n  }\n\n  // Marks the function as computed which is a signal to paths & events.\n  randomFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  randomFunction.randomSelection = randomSelection;\n\n  return randomFunction;\n};\n\n/**\n * Determines whether the given value is a computed value. A computed value is\n * function with a variable 'computed' set to a true value.\n * \n * @param  {any} x\n * @return {Boolean}\n */\nanim8.isComputed = function(x)\n{\n  return anim8.isFunction( x ) && x.computed;\n};\n","/**\n * A collection of calculators. A calculator is responsible for performing\n * mathematical operations for a specific animatable data type.\n * \n * @class anim8.calculator\n */\n\n/**\n * Returns a calculator based on the input. If the input is an instance of\n * {{#crossLink \"Calculator\"}}{{/crossLink}} it is immediately returned. If the \n * input is a string the calculator with that name is returned. If no calculator \n * could be determined the default calculator is returned.\n *\n * @method anim8.calculator\n * @for Core\n * @param {Calculator|String} calc\n * @return {Calculator}\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n  if ( anim8.isString( calc ) && calc in anim8.calculator )\n  {\n    return anim8.calculator[ calc ];\n  }\n  \n  return anim8.calculator['default'];\n};\n\n/**\n * Instantiates a new Calculator instance.\n *\n * @class Calculator\n * @constructor\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n\n  /**\n   * Creates the constants for this calculator.\n   *\n   * @method createConstants\n   */\n  createConstants: function()\n  {\n    this.ZERO = this.create();\n    this.ONE = this.parse( 1.0, this.ZERO );\n    this.INFINITY = this.parse( Number.POSITIVE_INFINITY, this.ZERO );\n  },\n\n  /**\n   * Parses the given input for a value this calculator understands.\n   *\n   * @method parse\n   * @param  {T} x\n   * @param  {T} defaultValue\n   * @return {T|Function|False}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * Copies a value and places it in out and returns out.\n   *\n   * @method copy\n   * @param {T} out\n   * @param {T} copy\n   * @return {T}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * Clones the value and returns the clone.\n   *\n   * @method clone\n   * @param {T} clone\n   * @return {T}\n   */\n  clone: function(clone) \n  {\n    return this.copy( this.create(), clone );\n  },\n\n  /**\n   * Creates an empty value equivalent to zero.\n   * \n   * @method create\n   * @return {T}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * Scales out by the given scalar value and returns out.\n   * \n   * @method scale\n   * @param {T} out\n   * @param {Number} scale\n   * @return {T}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * Adds an amount to out and returns out.\n   * \n   * @method add\n   * @param {T} out\n   * @param {T} amount\n   * @return {T}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * Adds an amount scaled by a scalar value to out and returns out.\n   * \n   * @method adds\n   * @param {T} out\n   * @param {T} amount\n   * @param {Number} amountScale\n   * @return {T}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * Subtracts an amount from out and returns out.\n   * \n   * @method sub\n   * @param {T} out\n   * @param {T} amount\n   * @return {T}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * Multiplies out by some amount and returns out.\n   * \n   * @method mul\n   * @param {T} out\n   * @param {T} scale\n   * @return {T}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * Interpolates out between start & end given a delta value and returns out. \n   * A delta value typically lies between 0 and 1 inclusively.\n   * \n   * @method interpolate\n   * @param {T} out\n   * @param {T} start\n   * @param {T} end\n   * @param {Number} delta\n   * @return {T}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * Returns a random value between the given min and max.\n   * \n   * @method random\n   * @param {T} out\n   * @param {T} min\n   * @param {T} max\n   * @return {T}\n   */\n  random: function(out, min, max)\n  {\n    return this.interpolate( out, min, max, Math.random() );\n  },\n\n  /**\n   * Calculates the distance between the two values.\n   * \n   * @method distance\n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * Calculates the squared distance between the two values.\n   * \n   * @method distanceSq\n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * Returns the distance the given value is from zero.\n   * \n   * @method length\n   * @param {T} a\n   * @return {Number}\n   */\n  length: function(a)\n  {\n    return this.distance( a, this.ZERO );\n  },\n\n  /**\n   * Returns the squared distance the given value is from zero.\n   * \n   * @method lengthSq\n   * @param {T} a\n   * @return {Number}\n   */\n  lengthSq: function(a)\n  {\n    return this.distanceSq( a, this.ZERO );\n  },\n\n  /**\n   * Determines whether the given value is valid for this calculator.\n   * \n   * @method isValid\n   * @param {any} a\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * Returns whether the given value is not a number or has a component which is\n   * not a number.\n   * \n   * @method isNaN\n   * @param {T} a\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * Determines whether the given value is equivalent to zero given an \n   * acceptable distance from zero (epsilon).\n   * \n   * @method isZero\n   * @param {T} a\n   * @param {Number} epsilon\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * Determines whether the given values are equivalent up to an acceptable\n   * distance apart.\n   * \n   * @method isEqual\n   * @param {T} a\n   * @param {T} b\n   * @param {Number} epsilon\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * Sets out to the minimum value between the two values and returns out.\n   * \n   * @method min\n   * @param {T} out\n   * @param {T} a\n   * @param {T} b\n   * @return {T}\n   */\n  min: function(out, a, b)\n  {\n    throw 'Calculator.min not implemented';\n  },\n\n  /**\n   * Sets out to the maximum value between two values and returns out.\n   * \n   * @method max\n   * @param {T} out\n   * @param {T} a\n   * @param {T} b\n   * @return {T}\n   */\n  max: function(out, a, b)\n  {\n    throw 'Calculator.max not implemented';\n  },\n\n  /**\n   * Performs the dot product between two values.\n   * \n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  dot: function(a, b)\n  {\n    throw 'Calculator.dot not implemented';\n  },\n\n  /**\n   * Clamps out between the given minimum and maximum values and returns out.\n   * \n   * @method clamp\n   * @param {T} out\n   * @param {T} min\n   * @param {T} max\n   * @return {T}\n   */\n  clamp: function(out, min, max)\n  {\n    var distSq = this.distanceSq( out, this.ZERO );\n\n    if ( distSq < min * min )\n    {\n      return this.scale( out, min / Math.sqrt( distSq ) );\n    }\n    else if ( distSq > max * max )\n    {\n      return this.scale( out, max / Math.sqrt( distSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * Sets the length of the given value and returns the new value.\n   * \n   * @param {T} out\n   * @param {Number} length\n   * @return {T}\n   */\n  setLength: function(out, length)\n  {\n    var lengthSq = this.lengthSq( out );\n\n    if ( lengthSq !== 0 )\n    {\n      return this.scale( out, length / Math.sqrt( lengthSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * Determines whether the given value appears to be a relative value. Relative\n   * values are stored as strings starting with a plus or minus for positive or\n   * negative respectively.\n   * \n   * @method isRelative\n   * @param {Any} x\n   * @return {Boolean}\n   * @protected\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * Returns the relative amount of the given relative value. If the value is \n   * not a valid relative value false is returned.\n   * \n   * @method getRelativeAmount\n   * @param {String} x\n   * @return {Number}\n   * @protected\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n *\n * @class CalculatorNumber\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorNumber = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorNumber.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    return (end - start) * delta + start;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  distance: function(a, b)\n  {\n    return Math.abs( a - b );\n  },\n  length: function(a)\n  {\n    return Math.abs( a );\n  },\n  lengthSq: function(a)\n  {\n    return a * a;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    return Math.min( a, b );\n  },\n  max: function(out, a, b)\n  {\n    return Math.max( a, b );\n  },\n  dot: function(a, b)\n  {\n    return a * b;\n  }\n});\n\n/**\n * A calculator for numbers.\n *\n * @property {CalculatorNumber} number\n * @for anim8.calculator\n */\nanim8.calculator['number'] = new anim8.CalculatorNumber();\n\n/**\n * The default calculator.\n *\n * @property {CalculatorNumber} default\n * @for anim8.calculator\n */\nanim8.calculator['default'] = anim8.calculator['number'];","\n/*\n * A calculator for objects with an x and y component (number)\n *\n * @class Calculator2d\n * @constructor\n * @extends Calculator\n */\nanim8.Calculator2d = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Calculator2d.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: x,\n        y: x\n      };\n    }\n    // When an array is given, assume [x, y]\n    if ( anim8.isArray( x ) )\n    {\n      x = { x: x[0], y: x[1] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n\n        if ( ix || iy )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n  {\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    return out;\n  }\n});\n\n/**\n * A calculator for 2d points; objects with x & y Number components.\n *\n * @property {Calculator2d} 2d\n * @for anim8.calculator\n */\nanim8.calculator['2d'] = new anim8.Calculator2d();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n *\n * @class Calculator3d\n * @constructor\n * @extends Calculator\n */\nanim8.Calculator3d = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Calculator3d.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: x,\n        y: x,\n        z: x\n      };\n    }\n    // When an array is given, assume [x, y, z]\n    if ( anim8.isArray( x ) )\n    {\n      x = { x: x[0], y: x[1], z: x[2] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n\n        if ( ix || iy || iz )\n        { \n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    out.z = copy.z;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n  { \n    out.x = 0.0;\n    out.y = 0.0;\n    out.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    out.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    out.z = (end.z - start.z) * delta + start.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n    var dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon && \n           Math.abs(a.z - b.z) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y + a.z * b.z;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    return out;\n  }\n});\n\n/**\n * A calculator for 3d points; objects with x, y, & z Number components.\n *\n * @property {Calculator3d} 3d\n * @for anim8.calculator\n */\nanim8.calculator['3d'] = new anim8.Calculator3d();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n *\n * @class CalculatorQuaternion\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorQuaternion = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorQuaternion.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: 0,\n        y: 0,\n        z: 1,\n        angle: x\n      };\n    }\n    // When an array is given, assume [x, y, z, angle]\n    if ( anim8.isArray( x ) )\n    {\n      x = { x: x[0], y: x[1], z: x[2], angle: x[3] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n        var ia = this.isRelative( ca );\n\n        if ( ix || iy || iz || ia )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0,\n            angle: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n    }\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx }, { x:0, y:0, z:0, angle:1 } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    out.z = copy.z;\n    out.angle = copy.angle;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n  {\n    out.x = 0.0;\n    out.y = 0.0;\n    out.z = 0.0;\n    out.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    out.z += amount.z * amountScale;\n    out.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    out.angle *= scale.angle;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    out.z = (end.z - start.z) * delta + start.z;\n    out.angle = (end.angle - start.angle) * delta + start.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n    var dz = a.z - b.z; \n    var da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon && \n           Math.abs(a.z) < epsilon && \n           Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon && \n           Math.abs(a.z - b.z) < epsilon && \n           Math.abs(a.angle - b.angle) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    out.angle = Math.min(a.angle, b.angle);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    out.angle = Math.max(a.angle, b.angle);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y + a.z * b.z + a.angle * b.angle;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    out.angle = (max.angle - min.angle) * Math.random() + min.angle;\n    return out;\n  }\n});\n\n/**\n * A calculator for quaternions; objects with x, y, z, & angle Number components.\n *\n * @property {CalculatorQuaternion} quaternion\n * @for anim8.calculator\n */\nanim8.calculator['quaternion'] = new anim8.CalculatorQuaternion();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n *\n * @class CalculatorRGB\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorRGB = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorRGB.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        r: x,\n        g: x,\n        b: x\n      };\n    }\n    // When an array is given, assume [r, g, b]\n    if ( anim8.isArray( x ) )\n    {\n      x = { r: x[0], g: x[1], b: x[2] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n\n        if ( ir || ig || ib )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n  },\n  copy: function(out, copy) \n  {\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n  {\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n  {\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.r = (end.r - start.r) * delta + start.r;\n    out.g = (end.g - start.g) * delta + start.g;\n    out.b = (end.b - start.b) * delta + start.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n  {\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.r * b.r + a.g * b.g + a.b * b.b;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    return out;\n  }\n});\n\n/**\n * A calculator for opaque colors; objects with r, g, & b Number components.\n *\n * @property {CalculatorRGB} rgb\n * @for anim8.calculator\n */\nanim8.calculator['rgb'] = new anim8.CalculatorRGB();\n","\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n *\n * @class CalculatorRGBA\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorRGBA = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorRGBA.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        r: x,\n        g: x,\n        b: x,\n        a: 1.0\n      };\n    }\n    // When an array is given, assume [r, g, b, a]\n    if ( anim8.isArray( x ) )\n    {\n      x = { r: x[0], g: x[1], b: x[2], a: x[3] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n        var ia = this.isRelative( ca );\n\n        if ( ir || ig || ib || ia )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0,\n            a: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n  },\n  copy: function(out, copy) \n  {\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n  {\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n  {\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.r = (end.r - start.r) * delta + start.r;\n    out.g = (end.g - start.g) * delta + start.g;\n    out.b = (end.b - start.b) * delta + start.b;\n    out.a = (end.a - start.a) * delta + start.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n  {\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    out.a = Math.min(a.a, b.a);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    out.a = Math.max(a.a, b.a);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.r * b.r + a.g * b.g + a.b * b.b + a.a * b.a;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    out.a = (max.a - min.a) * Math.random() + min.a;\n    return out;\n  }\n});\n\n/**\n * A calculator for colors; objects with r, g, b, & a Number components.\n *\n * @property {CalculatorRGBA} rgba\n * @for anim8.calculator\n */\nanim8.calculator['rgba'] = new anim8.CalculatorRGBA();\n","\n/**\n * Parses a path given the input and returns an instance of anim8.Path or throws\n * an error if the path could not be parsed. If the input is an object and has\n * a type property with a value that maps to a path type the path's parsing\n * function is invoked with the object.\n *\n * @method anim8.path\n * @for Core\n * @param  {anim8.Path|String|Object} path\n * @return {anim8.Path}\n * @throws {String} If the input is not a valid path.\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  throw path + ' is not a valid path';\n};\n\n/**\n * Path class computes a value given a delta value [0, 1].\n *\n * @class Path\n * @constructor\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * Resets the path with the given name, calculator, and points.\n   * \n   * @method reset\n   * @param {String|false} name\n   * @param {anim8.Calculator} calculator\n   * @param {Array} points\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * Computes a value at the given delta setting and returning out.\n   * \n   * @method compute\n   * @param {T} out\n   * @param {Number} delta\n   * @return {T}\n   */\n  compute: function(out, delta) \n  {\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * Determines if this path has at least one computed value.\n   *\n   * **See:** {{#crossLink \"anim8.computed\"}}{{/crossLink}}\n   * \n   * @method reset\n   * @return {Boolean}\n   */\n  hasComputed: function() \n  {\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Replaces any computed values in this path with the result from invoking\n   * the function and returns a clone of this path.\n   * \n   * @method replaceComputed\n   * @return {anim8.Path}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * Resolves and returns the point at the given index.\n   * \n   * @method resolvePoint\n   * @param {Number} i\n   * @return {T}\n   */\n  resolvePoint: function(i)\n  {\n    return anim8.resolve( this.points[ i ] );\n  },\n\n  /**\n   * Returns whether the path is linear. Linear paths go directly from point to\n   * point where curved paths do not. Linear paths can have their length \n   * calculated fairly easily however curves you must compute length with a \n   * given granularity.\n   * \n   * @method isLinear\n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return true;\n  },\n\n  /**\n   * Computes the length of the Path with a given granularity. Granularity is \n   * used for non-linear paths - it's the number of segments are calculated on \n   * the path where the length of the segments are summed and returned as the \n   * length.\n   * \n   * @method length\n   * @param {Number} granularity\n   * @return {Number}\n   */\n  length: function(granularity)\n  {\n    var distance = 0;\n    var calc = this.calculator;\n\n    if ( this.isLinear() )\n    {\n      var prev = this.resolvePoint( 0 );\n\n      for (var i = 1; i < this.points.length; i++)\n      {\n        var next = this.resolvePoint( i );\n\n        distance += calc.distance( prev, next );\n\n        prev = next;\n      }\n    }\n    else\n    {\n      var deltadelta = 1.0 / granularity;\n      var delta = delta;\n      var prev = calc.clone( this.resolvePoint( 0 ) );\n      var temp = calc.create();\n\n      for (var i = 1; i <= granularity; i++)\n      {\n        var next = this.compute( temp, delta );\n\n        distance += calc.distance( prev, next );\n\n        temp = prev;\n        prev = next;\n      }\n    }\n\n    return distance;\n  }\n\n};\n","\n/**\n * Instantiates a new Tween.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} start\n * @param {T} end\n * @class Tween\n * @constructor\n * @extends Path\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n});\n\n\n/**\n * Parses an object for a tween path.\n * \n * @param {Object} path\n * @return {Tween}\n */\nanim8.path['tween'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, calc.ZERO ),\n    calc.parse( path.end, calc.ZERO )\n  );\n};\n","\n/**\n * Instantiates a new PathCubic.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} p0\n * @param {T} p1\n * @param {T} p2\n * @param {T} p3\n * @class PathCubic\n * @constructor\n * @extends Path\n */\nanim8.PathCubic = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.PathCubic.prototype = new anim8.Path(),\n{\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  copy: function() \n  {\n    return new anim8.PathCubic( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  },\n  isLinear: function()\n  {\n    return false;\n  }\n});\n\n/**\n * Parses an object for a cubic path.\n * \n * @param {Object} path\n * @return {PathCubic}\n */\nanim8.path['cubic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PathCubic(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * Instantiates a new PathQuadratic.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} p0\n * @param {T} p1\n * @param {T} p2\n * @class PathQuadratic\n * @constructor\n * @extends Path\n */\nanim8.PathQuadratic = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.PathQuadratic.prototype = new anim8.Path(),\n{\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n  copy: function() \n  {\n    return new anim8.PathQuadratic( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  },\n  isLinear: function()\n  {\n    return false;\n  }\n});\n\n\n/**\n * Parses an object for a quadratic path.\n * \n * @param {Object} path\n * @return {PathQuadratic}\n */\nanim8.path['quadratic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PathQuadratic(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * Instantiates a new PathDelta.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @param {Array} deltas\n * @class PathDelta\n * @constructor\n * @extends Path\n */\nanim8.PathDelta = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.PathDelta.prototype = new anim8.Path(),\n{\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  copy: function() \n  {\n    return new anim8.PathDelta( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n});\n\n/**\n * Parses an object for a delta path.\n * \n * @param {Object} path\n * @return {PathDelta}\n */\nanim8.path['delta'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.PathDelta(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * Instantiates a new PathJump.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @class PathJump\n * @constructor\n * @extends Path\n */\nanim8.PathJump = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.PathJump.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  copy: function() \n  {\n    return new anim8.PathJump( this.name, this.calculator, anim8.copy(this.points) );\n  }\n});\n\n/**\n * Parses an object for a jump path.\n * \n * @param {Object} path\n * @return {PathJump}\n */\nanim8.path['jump'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.PathJump(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * Instantiates a new PathCompiled.\n * \n * @param {String|false} name\n * @param {Path} path\n * @param {Number} pointCount\n * @class PathCompiled\n * @constructor\n * @extends Path\n */\nanim8.PathCompiled = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.PathCompiled.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  copy: function() \n  {\n    return new anim8.PathCompiled( this.name, this, this.points.length );\n  }\n});\n\n/**\n * Parses an object for a compiled path.\n * \n * @param {Object} path\n * @return {PathCompiled}\n */\nanim8.path['compiled'] = function(path)\n{\n  return new anim8.PathCompiled(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * Instantiates a new PathKeyframe.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @param {Array} deltas\n * @param {Array} easings\n * @class PathKeyframe\n * @constructor\n * @extends Path\n */\nanim8.PathKeyframe = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.PathKeyframe.prototype = new anim8.Path(),\n{\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  copy: function() \n  {\n    return new anim8.PathKeyframe( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n});\n\n/**\n * Parses an object for a keyframe path.\n * \n * @param {Object} path\n * @return {PathKeyframe}\n */\nanim8.path['keyframe'] = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.PathKeyframe(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * Instantiates a new PathPoint.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} point\n * @class PathPoint\n * @constructor\n * @extends Path\n */\nanim8.PathPoint = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.override( anim8.PathPoint.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    return this.calculator.copy( out, this.resolvePoint( 0 ) );\n  },\n  copy: function() \n  {\n    return new anim8.PathPoint( this.name, this.calculator, this.points[0] );\n  }\n});\n\n\n/**\n * Parses an object for a point path.\n * \n * @param {Object} path\n * @return {PathPoint}\n */\nanim8.path['point'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PathPoint(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n","\n/**\n * Animates a single attribute over any period of time.\n *\n * @class Attrimator\n * @constructor\n */\nanim8.Attrimator = function()\n{\n\n};\n\nanim8.Attrimator.prototype =\n{\n\n  /**\n   * Resets this attrimator for the given attribute created by the given parser.\n   *\n   * @method reset\n   * @param {String} attribute\n   * @param {Parser} parser\n   * @param {Attrimator} [next]\n   */\n  reset: function(attribute, parser, next)\n  {\n    /**\n     * The name of the attribute this attrimator is animating.\n     * \n     * @property {String} attribute\n     */\n    this.attribute = attribute;\n\n    /**\n     * The parser that created this attrimator (if any).\n     * \n     * @property {Parser} parser\n     */\n    this.parser = parser;\n\n    /**\n     * The next attrimator to be played once this one has finished.\n     * \n     * @property {Attrimator} next\n     */\n    this.next = next;\n\n    /**\n     * The time the attrimator was started by the animator.\n     * \n     * @property {Number} startTime\n     */\n    this.startTime = 0;\n\n    /**\n     * The time the attrimator was last paused.\n     * \n     * @property {Number} pauseTime\n     */\n    this.pauseTime = 0;\n\n    /**\n     * The amount of time that has elapsed since the attrimator started.\n     * \n     * @property {Number} elapsed\n     */\n    this.elapsed = 0;\n\n    /**\n     * The time this attrimator should stop itself after it started in milliseconds.\n     * \n     * @property {Number} stopTime\n     */\n    this.stopTime = Number.POSITIVE_INFINITY;\n\n    /**\n     * Whether or not the attrimator is paused.\n     * \n     * @property {Boolean} paused\n     */\n    this.paused = false;\n\n    /**\n     * The cycle this attrimator belongs to.\n     * \n     * @type {Number} cycle\n     */\n    this.cycle = 0;\n\n    /**\n     * The amount of time in milliseconds this attrimator is delayed since start.\n     * \n     * @property {Number} delay\n     */\n    this.delay = 0;\n\n    /**\n     * The initial elapsed time in milliseconds when the attrimator is started.\n     * \n     * @property {Number} offset\n     */\n    this.offset = 0;\n  },\n\n  /**\n   * Prepares this attrimator for animation on the given subject \n   * animator. This is called once in anim8.Animator.preupdate before the first \n   * time this attrimator is updated.\n   *\n   * @method start\n   * @param {Number} now\n   * @param {Animator} animator\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now - this.offset;\n    this.elapsed = this.offset;\n    this.finished = false;\n  },\n\n  /**\n   * Invoked once when a new animation cycle is started on an Animator. If this\n   * attrimator updated the frame true must be returned.\n   *\n   * @method startCycle\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  startCycle: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Updates this attrimator given a time to animate to and the frame to\n   * provide with a new value. This method will return true if the attribute\n   * this is animating has been updated and needs to be applied to the subject.\n   *\n   * @method setTime\n   * @param {Number} now\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  setTime: function(now, frame)\n  {\n    if ( this.paused )\n    {\n      return false;\n    }\n\n    var updated = false;\n    var elapsed = now - this.startTime;\n    var updated = false;\n\n    if ( elapsed > this.stopTime )\n    {\n      updated = this.finish( frame );\n    }\n    else if ( elapsed >= this.delay )\n    {\n      updated = this.update( elapsed, frame );\n    }\n\n    this.elapsed = elapsed;\n\n    return updated;\n  },\n\n  /**\n   * Updates the attrimator given elapsed time in milliseconds, the frame to \n   * apply a value to, and returns whether the frame was updated or not.\n   *\n   * @method update\n   * @param {Number} elapsed\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  update: function(elapsed, frame)\n  {\n    throw 'Attrimator.update not implemented';\n  },\n\n  /**\n   * Returns the amount of time that has elapsed in milliseconds.\n   *\n   * @method getElapsed\n   * @return {Number}\n   */\n  getElapsed: function()\n  {\n    return this.elapsed;\n  },\n\n  /**\n   * Stops this attrimator in the given number of milliseconds.\n   *\n   * @method stopIn\n   * @param {Number} milliseconds\n   * @chainable\n   */\n  stopIn: function(milliseconds)\n  {\n    this.stopTime = this.getElapsed() + milliseconds;\n\n    return this;\n  },\n\n  /**\n   * If this attrimator repeats its animation this method will stop repitition\n   * after the next animation cycle.\n   * \n   * @chainable\n   */\n  nopeat: function()\n  {\n    return this;\n  },\n\n  /**\n   * Returns the value at the given time or returns false if it can't be\n   * calculated.\n   *\n   * @method valueAt\n   * @param {Number} time\n   * @param {Any} out\n   * @return {Any|False}\n   */\n  valueAt: function(time, out)\n  {\n    return false;\n  },\n\n  /**\n   * The total amount of time this attrimator will take in milliseconds. This \n   * may be an infinite number.\n   *\n   * @method totalTime\n   * @return {Number}\n   */\n  totalTime: function()\n  {\n    return this.stopTime;\n  },\n\n  /**\n   * The time remaining before this attrimator and any following will be \n   * finished.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * Clones this attrimator.\n   *\n   * @method clone\n   * @return {Attrimator}\n   */\n  clone: function()\n  {\n    throw 'AttributeAnimator.clone not implemented';\n  },\n\n  /**\n   * Returns whether this attrimator has computed values which need to be \n   * resolved by the subject animator calling prepare on this attrimator.\n   *\n   * @method hasComputed\n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return false;\n  },\n\n  /**\n   * Determines whether this attrimator will run infinitely.\n   *\n   * @method isInfinite\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * Pauses this attrimator if it isn't already paused.\n   *\n   * @method pause\n   * @chainable\n   */\n  pause: function()\n  {\n    if ( !this.paused )\n    {\n      this.pauseTime = anim8.now();\n      this.paused = true;\n    }\n\n    return this;\n  },\n\n  /**\n   * Resumes this attrimator if it's paused. This involves resetting the start\n   * time of the attrimator.\n   *\n   * @method resume\n   * @chainable\n   */\n  resume: function()\n  {\n    if ( this.paused )\n    {\n      this.startTime += anim8.now() - this.pauseTime;\n      this.paused = false;\n    }\n\n    return this;\n  },\n\n  /**\n   * Whether this attrimator is paused.\n   *\n   * @method isPaused\n   * @return {Boolean}\n   */\n  isPaused: function()\n  {\n    return this.paused;\n  },\n\n  /**\n   * Sets the final state of the attrimator to the frame if one exists and \n   * returns true, otherwise false is returned and frame remains unchanged.\n   *\n   * @method finish\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Whether this attrimator is finished.\n   *\n   * @method isFinished\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return false;\n  },\n\n  /**\n   * Returns the parser that created this attrimator (if any).\n   *\n   * @method getParser\n   * @return {Parser}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * Places the given attrimator on the end of the chain of attrimators starting\n   * with this attrimator.\n   *\n   * @method queue\n   * @param {Attrimator} next\n   * @chainable\n   */\n  queue: function(next)\n  {\n    if ( this.next )\n    {\n      this.next.queue( next );\n    }\n    else\n    {\n      this.next = next;\n    }\n\n    return this;\n  },\n\n  /**\n   * Parses a value with the calculator given a default value to fallback on.\n   *\n   * @method parseValue\n   * @param {Animator} animator\n   * @param {T|Function|True} value\n   * @param {T} defaultValue\n   * @return {T|Function}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isComputed( parsed ) )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  }\n\n};","\n/**\n * A map of attrimators by their attribute name.\n *\n * @class AttrimatorMap\n * @constructor\n * @extends FastMap\n */\nanim8.AttrimatorMap = function()\n{\n  this.reset();\n};\n\nanim8.override( anim8.AttrimatorMap.prototype = new anim8.FastMap(),\n{\n\n  /**\n   * Queues the attrimator on this map. If the attribute is already on this map\n   * this is placed on the end of the Attrimator chain, otherwise the attrimator\n   * is added to the map. If there is an attrimator already on the map it's\n   * returned.\n   *\n   * @method queue\n   * @param {Attrimator} attrimator\n   * @return {Attrimator}\n   */\n  queue: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n    var current = this.get( attr );\n\n    if ( current )\n    {\n      current.queue( attrimator );\n    }\n    else\n    {\n      this.put( attr, attrimator );\n    }\n\n    return current;\n  },\n\n  /**\n   * Queues the given map to this map. The attrimators placed on this map are\n   * queued and delayed in a way that they all start at the same time. If a\n   * function is provided as the second argument it is invoked whenever an \n   * attrimator in the given map is new & added to this map.\n   *\n   * @method queueMap\n   * @param {AttrimatorMap} map\n   * @param {Function} [onNewAttribute]\n   * @param {Object} [context]\n   * @chainable\n   */\n  queueMap: function(map, onNewAttribute, context)\n  {\n    var maxRemaining = this.timeRemaining();\n    var attrimators = map.values;\n    \n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n      var existing = this.get( attr );\n\n      if ( existing )\n      {\n        if ( existing.isInfinite() )\n        {\n          existing.stopIn( attrimator.delay + maxRemaining );\n        }\n        else\n        {\n          attrimator.delay += (maxRemaining - existing.timeRemaining());\n        }\n\n        existing.queue( attrimator );\n      }\n      else\n      {\n        attrimator.delay += maxRemaining;\n\n        this.put( attr, attrimator );\n\n        if ( anim8.isFunction( onNewAttribute ) )\n        {\n          onNewAttribute.call( context || this, attrimator );\n        }\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Removes the attrimator at the given index replacing it with the next\n   * attrimator if one exists.\n   *\n   * @method unqueueAt\n   * @param {Number} index\n   * @chainable\n   */\n  unqueueAt: function(index)\n  {\n    var current = this.values[ index ];\n\n    if ( current.next )\n    {\n      this.values[ index ] = current.next;\n    }\n    else\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Clones this map returning a deep clone where all attrimators are cloned.\n   *\n   * @method clone\n   * @return {AttrimatorMap}\n   */\n  clone: function()\n  {\n    var values = this.values;\n    var keys = this.keys;\n    var clone = new anim8.AttrimatorMap();\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      clone.values[i] = values[i].clone();\n      clone.keys[i] = keys[i];\n      clone.indices[ keys[i] ] = i;\n    }\n\n    return clone;\n  },\n\n  /**\n   * Returns the time remaining for all finite attrimators in this map. The time\n   * remaining includes queued attrimators.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    var maxRemaining = 0;\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n\n      if ( !attrimator.isInfinite() )\n      {\n        maxRemaining = Math.max( maxRemaining, attrimator.timeRemaining() );\n      }\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Sets the cycle of the attrimators in this map. If there are attrimators\n   * queued the are given the next cycle number. The final cycle number is\n   * returned.\n   *\n   * @method applyCycle\n   * @param {Number} nextCycle\n   * @return {Number}\n   */\n  applyCycle: function(nextCycle)\n  {\n    var currentDepth = this.values;\n    var nextDepth = null;\n\n    while ( currentDepth.length )\n    {\n      nextDepth = [];\n\n      for (var i = currentDepth.length - 1; i >= 0; i--)\n      {\n        var attrimator = currentDepth[ i ];\n\n        attrimator.cycle = nextCycle;\n\n        if ( attrimator.next )\n        {\n          nextDepth.push( attrimator.next );\n        }\n      }\n\n      if ( nextDepth.length )\n      {\n        nextCycle++;\n      }\n\n      currentDepth = nextDepth;\n    }\n\n    return nextCycle;\n  }\n\n});","\n/**\n * Possible states an event can be in.\n * \n * @type {Object}\n */\nanim8.EventState = \n{\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  FINISHED: 8\n};\n\n/**\n * Instantiates a new Event which extends Attrimator.\n * \n * @param {String} attribute\n * @param {Path} path\n * @param {String|Number} duration\n * @param {String|Function|Array} easing\n * @param {String|Number} delay\n * @param {String|Number} sleep\n * @param {String|Number} offset\n * @param {String|Number} repeat\n * @param {Number} scale\n * @param {T|Number} scaleBase\n * @param {Boolean} hasInitialState\n * @param {Parser} parser\n * @param {Attrimator} next\n * @class Event\n * @constructor\n * @extends Attrimator\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, offset, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  this.reset( attribute, parser, next )\n\n  /**\n   * The path the attribute will be animated along.\n   * \n   * @property {Path} path\n   */\n  this.path             = path;\n\n  /**\n   * The easing used to modify the delta value passed to the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.easing:method\"}}{{/crossLink}}\n   * \n   * @property {Function} easing\n   */\n  this.easing           = anim8.easing( easing );\n\n  /**\n   * The amount of time in milliseconds to animate an attribute over the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.duration:method\"}}{{/crossLink}}\n   * \n   * @property {Number} duration\n   */\n  this.duration         = anim8.duration( duration );\n\n  /**\n   * If this event repeats more than once, this is a pause between animations.\n   *\n   * **See:** {{#crossLink \"Core/anim8.sleep:method\"}}{{/crossLink}}\n   * \n   * @property {Number} sleep\n   */\n  this.sleep            = anim8.sleep( sleep );\n\n  /**\n   * The number of times to repeat the animation.\n   *\n   * **See:** {{#crossLink \"Core/anim8.repeat:method\"}}{{/crossLink}}\n   * \n   * @property {Number} repeat\n   */\n  this.repeat           = anim8.repeat( repeat );\n\n  /**\n   * The amount to scale the value computed from the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.scale:method\"}}{{/crossLink}}\n   * \n   * @property {T} scale\n   */\n  this.scale            = anim8.scale( scale );\n\n  /**\n   * The base value from which to scale from. This is essentially this data\n   * types default value.\n   * \n   * @property {T} scaleBase\n   */\n  this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.ZERO );\n\n  /**\n   * Whether or not this event has an initial value which can be applied at the\n   * start of the animation (or when \n   * {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} is invoked).\n   * \n   * @property {Boolean} hasInitialState\n   */\n  this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n\n  this.delay            = anim8.delay( delay );\n  this.offset           = anim8.sleep( sleep );\n};\n\nanim8.override( anim8.Event.prototype = new anim8.Attrimator(),\n{\n  /**\n   * Returns the computed value given a base value and a delta along the path.\n   *\n   * @method computeValue\n   * @param {T} baseValue\n   * @param {Number} delta\n   * @return {T}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * Applies the value to the frame and returns true, otherwise returns false.\n   *\n   * @method applyValue\n   * @param {Object} frame\n   * @param {T} baseValue\n   * @param {Number} delta\n   * @return {T}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[ this.attribute ] = value;\n    }\n\n    return value;\n  },\n\n  nopeat: function()\n  {\n    this.repeat = anim8.clamp( Math.ceil( ( this.elapsed - this.delay ) / ( this.duration + this.sleep ) ), 0, this.repeat );\n    \n    return this;\n  },\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n  },\n  start: function(now, animator)\n  {\n    anim8.Attrimator.prototype.start.apply( this, arguments );\n    \n    this.state = this.delay ? anim8.EventState.DELAYED : anim8.EventState.ANIMATING;\n\n    if ( this.hasComputed() )\n    {\n      this.path = this.path.replaceComputed( this, animator );\n    }\n  },\n  startCycle: function(frame)\n  {\n    if ( this.hasInitialState )\n    {\n      return this.applyValue( frame, frame[ this.attribute ], 0 );\n    }\n\n    return false;\n  },\n  update: function(elapsed, frame)\n  {\n    var updated = false;\n    var delay = this.delay;\n    var duration = this.duration;\n    var sleep = this.sleep;\n    var repeat = this.repeat;\n    var oldState = this.state;\n    var newState = this.state;\n    var delta = 0;\n\n    elapsed -= delay;\n\n    var cycle = duration + sleep;\n    var iteration = Math.floor( ( elapsed + sleep ) / cycle );\n\n    if ( iteration >= repeat )\n    {\n      newState = anim8.EventState.FINISHED;\n      delta = 1;\n    }\n    else\n    {\n      elapsed -= iteration * cycle;\n\n      if ( elapsed > duration )\n      {\n        newState = anim8.EventState.SLEEPING;\n        delta = 1;\n      }\n      else\n      {\n        newState = anim8.EventState.ANIMATING;\n        delta = elapsed / duration;\n      }\n    }\n    \n    if ( newState === anim8.EventState.ANIMATING || \n       ( newState !== anim8.EventState.ANIMATING && oldState === anim8.EventState.ANIMATING ) )\n    {\n      this.applyValue( frame, frame[ this.attribute ], delta );\n      updated = true;\n    }\n\n    this.state = newState;\n\n    return updated;\n  },\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay && !this.hasInitialState )\n    {\n      return false;\n    }\n\n    var delta = 0;\n\n    if ( time >= this.delay )\n    {\n      var cycle = (this.duration + this.sleep);\n      var elapsed = (time - this.delay);\n      var iteration = Math.floor( ( elapsed + this.sleep ) / cycle );\n\n      if ( iteration >= this.repeat )\n      {\n        delta = 1.0;\n      }\n      else\n      {\n        delta = Math.min( 1.0, (elapsed % cycle) / this.duration );        \n      }\n    }\n\n    return this.computeValue( out, delta );\n  },\n  totalTime: function()\n  {\n    return Math.min( this.stopTime, this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep) );\n  },\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.offset, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY) && (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n  isFinished: function()\n  {\n    return (this.state === anim8.EventState.FINISHED);\n  }\n\n});\n\n/**\n * Returns an Event given the attribute, the path, and a parsed options object.\n *\n * **See:** {{#crossLink \"Core/anim8.options:method\"}}anim8.options{{/crossLink}}\n * \n * @method fromOptions\n * @for Event\n * @param  {String} attr\n * @param  {Path} path\n * @param  {Object} options\n * @return {Event}\n */\nanim8.Event.fromOptions = function(attr, path, options)\n{\n  return new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.offset, options.repeat, options.scale, options.scaleBase );\n}\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, \n * or an object with a spring type to be created. If none of these conditions \n * are true then an error is thrown.\n *\n * @method anim8.spring\n * @for Core\n * @param {Spring|String|Object} spring\n * @return {Spring}\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n\n  throw spring + ' is not a valid spring';\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently \n * enacting on the position based on the implementing classes logic.\n *\n * @class Spring\n * @constructor\n * @extends Attrimator\n */\nanim8.Spring = function()\n{\n};\n\nanim8.override( anim8.Spring.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Resets the spring's properties.\n   *\n   * @method set\n   * @param {String} attribute\n   * @param {Calculator|String} calculator\n   * @param {T|Function|true} rest\n   * @param {T|Function|true} position\n   * @param {T|Function|true} velocity\n   * @param {T|Function|true} gravity\n   * @param {Boolean} finishOnRest\n   */\n  set: function(attribute, calculator, rest, position, velocity, gravity, finishOnRest)\n  { \n    this.reset( attribute, null, null );\n\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = velocity;\n    this.finishOnRest = finishOnRest;\n  },\n  \n  /**\n   * Resolves the rest to the expected format.\n   * \n   * @method resolveRest\n   * @return {T}\n   */\n  resolveRest: function()\n  {\n    return anim8.resolve( this.rest );\n  },\n  \n  /**\n   * Method that's invoked on each spring update.\n   *\n   * @method updateVelocity\n   * @param {Number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  },\n\n  start: function(now, animator)\n  {\n    anim8.Attrimator.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.ZERO );\n    this.velocity   = this.parseValue( animator, this.velocity, calc.ZERO );\n  },\n\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity );\n  },\n\n  update: function(elapsed, frame)\n  {\n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.clone( this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    else if ( this.finishOnRest && calc.isZero( this.velocity ) )\n    {\n      this.finished = true;\n    }\n    \n    return updated;\n  },\n\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  isFinished: function()\n  {\n    return this.finished;\n  }\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * Instantiates a new SpringLinear.\n * \n * @param {String|false} attribute\n * @param {Calculator} calculator\n * @param {T} position\n * @param {T} rest\n * @param {T} damping\n * @param {T} stiffness\n * @param {T} velocity\n * @param {T} gravity\n * @param {Boolean} finishOnRest\n * @class SpringLinear\n * @constructor\n * @extends Spring\n */\nanim8.SpringLinear = function(attribute, calculator, position, rest, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.SpringLinear.prototype = new anim8.Spring(), \n{\n\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  clone: function()\n  {\n    return new anim8.SpringLinear( this.attribute, this.calculator, this.position, this.rest, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.damping ) || \n           anim8.isComputed( this.stiffness );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n\n});\n\n/**\n * Register the spring parser.\n *\n * @param {Object}\n * @return {SpringLinear}\n */\nanim8.spring['linear'] = function(spring)\n{ \n  return new anim8.SpringLinear(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Instantiates a new SpringDistance.\n * \n * @param {String|false} attribute\n * @param {anim8.Calculator} calculator\n * @param {T} position\n * @param {T} rest\n * @param {Number} distance\n * @param {Number} damping\n * @param {Number} stiffness\n * @param {T} velocity\n * @param {T} gravity\n * @param {Boolean} finishOnRest\n * @class SpringDistance\n * @constructor\n * @extends Spring\n */\nanim8.SpringDistance = function(attribute, calculator, position, rest, distance, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.SpringDistance.prototype = new anim8.Spring(), \n{\n\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n\n  clone: function()\n  {\n    return new anim8.SpringDistance( this.attribute, this.calculator, this.position, this.rest, this.distance, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n  \n});\n\n/**\n * Register the spring parser.\n * \n * @param {Object}\n * @return {SpringDistance}\n */\nanim8.spring['distance'] = function(spring)\n{ \n  return new anim8.SpringDistance(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Animates a single attribute with a velocity and acceleration.\n *\n * @param {String} attribute\n * @param {Parser} parser\n * @param {Calculator} calculator\n * @param {T} position\n * @param {T} velocity\n * @param {T} acceleration\n * @param {Number} terminal\n * @param {Number} stopTime\n * @class Physics\n * @constructor\n * @extends Attrimator\n */\nanim8.Physics = function( attribute, parser, calculator, position, velocity, acceleration, terminal, stopTime )\n{\n  this.reset( attribute, parser, null );\n\n  this.calculator   = calculator;\n  this.position     = position;\n  this.velocity     = velocity;\n  this.acceleration = acceleration;\n  this.terminal     = anim8.number( terminal, Number.POSITIVE_INFINITY );\n  this.stopTime     = anim8.time( stopTime, Number.POSITIVE_INFINITY );\n  this.finished     = false;\n};\n\nanim8.override( anim8.Physics.prototype = new anim8.Attrimator(),\n{\n  /**\n   * Parses a value for the animator given a default value.\n   *\n   * @method parseValue\n   * @param {anim8.Animator} animator.\n   * @param {T} value\n   * @param {T} defaultValue\n   * @return {T}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isComputed( parsed ) )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n\n  /**\n   * Resolves the velocity to a value.\n   *\n   * @method resolveVelocity\n   * @return {T}\n   */\n  resolveVelocity: function()\n  {\n    return anim8.resolve( this.velocity );\n  },\n\n  /**\n   * Resolves the acceleration to a value.\n   *\n   * @method resolveAcceleration\n   * @return {T}\n   */\n  resolveAcceleration: function()\n  {\n    return anim8.resolve( this.acceleration );\n  },\n\n  start: function(now, animator)\n  {\n    anim8.Attrimator.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator     = calc;\n    this.position       = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.initalPosition = calc.clone( this.position );\n    this.velocity       = this.parseValue( animator, this.velocity, calc.ZERO );\n    this.acceleration   = this.parseValue( animator, this.acceleration, calc.ZERO );\n    this.temp           = calc.create();\n  },\n\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.position ) || \n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.acceleration );\n  },\n\n  update: function(elapsed, frame)\n  {\n    var value = this.valueAt( elapsed, this.temp, true );\n\n    if ( value !== false )\n    {\n      frame[ this.attribute ] = this.position = value;\n\n      return true;\n    }\n\n    var calc = this.calculator;\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Physics.MAX_DT );\n    var vel = calc.copy( this.temp, this.resolveVelocity() );\n    var acc = this.resolveAcceleration();\n    var pos = this.position;\n\n    vel = calc.adds( vel, acc, dt );\n\n    if ( this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      vel = calc.clamp( vel, 0, this.terminal );\n    }\n\n    pos = calc.adds( pos, vel, dt );\n    \n    this.position = pos;\n\n    if ( !anim8.isFunction( this.velocity ) )\n    {\n      this.velocity = calc.copy( this.velocity, vel );\n    }\n\n    frame[ this.attribute ] = pos;\n\n    return true;\n  },\n\n  valueAt: function(time, out, usePosition)\n  {\n    if ( anim8.isFunction( this.velocity ) || anim8.isFunction( this.acceleration ) || this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      return false;\n    }\n\n    time -= this.delay;\n    time *= 0.001;\n\n    var calc = this.calculator;\n    var value = usePosition ? calc.copy( this.position, this.initalPosition ) : calc.copy( out, this.initalPosition );\n    value = calc.adds( value, this.velocity, time );\n    value = calc.adds( value, this.acceleration, time * time );\n\n    return value;\n  },\n\n  clone: function()\n  {\n    return new anim8.Physics( this.attribute, this.parser, this.calculator, this.position, this.velocity, this.acceleration, this.terminal, this.stopTime );\n  },\n\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  isFinished: function()\n  {\n    return this.finished;\n  }\n  \n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Physics.MAX_DT = 0.1;\n","\n/**\n * Returns an instance of anim8.Animation based on the given input & options. If \n * the input is an instance of anim8.Animation that instance is immediately \n * returned. If the input is a string the animation with that name is returned. \n * If the input is a string with an animation name and an option string the\n * animation with the given name modified by any additional options is returned.\n * Commas can be used to queue animation & option pairs one after another. If \n * the input is an object an anonymous animation is created. If no animation\n * could be determined then false is returned.\n *\n * **Examples:**\n * \n *     anim8.animation('wiggle');\n *     anim8.animation('wiggle ~1s 4s z40ms x5 !1.2');\n *     anim8.animation('wiggle', {...options...});\n *     anim8.animation('wiggle, tada ~50ms, fadeOut 2s');\n *     anim8.animation({...definition...});\n * \n * If the given input is a string you can cache it. An example would be\n * 'wiggle ~1s 2s x3' - if `cache` is true and you call this method again it won't\n * need to be parsed again.\n *\n * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n * \n * @method anim8.animation\n * @for Core\n * @param {Animation|String|Object} animation\n * @param {String|Object} [options]\n * @param {Boolean} [cache=false]\n * @return {Animation|False}\n * @throws {String} The animation string has an invalid animation name or the\n *    animation fails to create attrimators from the animation definition.\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n  if ( anim8.isString( animation ) )\n  {\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationsQueued = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationsQueued.length; k++)\n    {\n      var animationsMerged = animationsQueued[ k ].split( '&' );\n      var base = false;\n\n      for (var j = 0; j < animationsMerged.length; j++)\n      {\n        var animationString = anim8.trim( animationsMerged[ j ].toLowerCase() );\n        var animationSplit = animationString.split( ' ' );\n        var parsedAnimation = anim8.animation[ animationSplit[ 0 ] ];\n        var parsedOptions = anim8.options( animationSplit.slice( 1 ) );\n\n        if ( parsedAnimation )\n        {\n          var extendedAnimation = parsedAnimation.extend( parsedOptions, true );\n\n          if ( base === false )\n          {\n            base = extendedAnimation;\n\n            if ( anim === false )\n            {\n              last = anim = base;\n            }\n            else\n            {\n              last = last.next = base;\n            }\n          }\n          else\n          {\n            base.attrimators.putMap( extendedAnimation.attrimators );\n          }\n        }\n        else\n        {\n          throw parsedAnimation + ' is not a valid animation in \"' + animationsQueued[ k ] + '\"';\n        }\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n  }\n  if ( anim8.isObject( animation ) )\n  {\n    var attrimatorMap = new anim8.AttrimatorMap();\n    var options = anim8.options( options );\n    var helper = new anim8.ParserHelper( animation, options );\n    \n    for (var parserName in animation)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.parse( animation, options, attrimatorMap, helper );\n      }\n    }\n    \n    if (attrimatorMap.size())\n    {\n      return new anim8.Animation( false, animation, options, attrimatorMap );\n    }\n    else\n    {\n      throw 'Failed to create any attrimators in anim8.animation';\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and \n * transitioned into at a later time providing the name and optionally options \n * to override with.\n *\n * **See:** {{#crossLink \"Core/anim8.animation:method\"}}anim8.animation{{/crossLink}},\n *          {{#crossLink \"Core/anim8.options:method\"}}anim8.options{{/crossLink}}\n *\n * @method anim8.save\n * @for Core\n * @param {String} name\n * @param {Animation|String|Object} animation\n * @param {String|Object} [options]\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and \n * the attrimators that were generated from the input & options. If the name is \n * false this is an anonymous animation. Input & Options are used by parsers to \n * generate attrimators, options allow for an animations default properties to \n * be overriden.\n *\n * @param {String|Boolean} name\n * @param {Object} input\n * @param {Object} options\n * @param {AttrimatorMap} attrimators\n * @class Animation\n * @constructor\n */\nanim8.Animation = function(name, input, options, attrimators)\n{\n  /**\n   * The name of the animation, or false if it's an anonymous animation. \n   *\n   * @property {String|False} name\n   */\n  this.name = name;\n\n  /**\n   * The object which created the animation.\n   *\n   * @property {Object} input\n   */\n  this.input = input;\n\n  /**\n   * The options given when the animation was created.\n   *\n   * @property {Object} [options]\n   */\n  this.options = options;\n\n  /**\n   * The name of the animation, or false if it's an anonymous animation. \n   *\n   * @property {AttrimatorMap} name\n   */\n  this.attrimators = attrimators;\n\n  /**\n   * The animation to play after this animation is finished playing.\n   *\n   * @property {Animation} [next]\n   */\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an \n   * anonymous one and false is returned. Anonymous animations are typically\n   * generated once and won't be used again.\n   *\n   * @method isSaved\n   * @return {Boolean} \n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an map of event instances from the attrimators in this animation.\n   *\n   * @method newAttrimators\n   * @return {AttrimatorMap}\n   */\n  newAttrimators: function()\n  {\n    return this.attrimators.clone();\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @method merge\n   * @param {Object} [options]\n   * @param {AttrimatorMap} attrimatorMap\n   * @return {AttrimatorMap}\n   */\n  merge: function(options, attrimatorMap)\n  {\n    var helper = new anim8.ParserHelper( this.input, this.options, options );\n\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, attrimatorMap, helper );\n      }\n    }\n\n    return attrimatorMap;\n  },\n\n  /**\n   * Extends this animation and returns an anonymous animation modified with the \n   * given options. If an empty set of options is given this animation instance\n   * may be returned. This can be overriden if the second argument is true.\n   *\n   * @method extend\n   * @param {Object} [options]\n   * @param {Boolean} [force]\n   * @return {Animation}\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var attrimatorMap = this.newAttrimators();\n\n    this.merge( options, attrimatorMap );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, attrimatorMap );\n  }\n\n};","\n/**\n * Parses a value into a transition object. If the given input is a string it's\n * expected to be in a similar format to:\n * \n *     [time] [easing[-easingType]] >[outro] <[intro] /[granularity] ^[lookup]\n * \n * This is also a registry of transitions, you can add your own transitions that\n * can be used later with syntax like:\n * \n *     anim8.transition['myTransition'] = anim8.transition('50ms 0.05 linear');\n * \n * So you can use 'myTransition' as the transition input.\n * \n *     animator.transition('myTransition', 'myAnimation');\n * \n * @method anim8.transition\n * @for Core\n * @param {Object|String|Array} options\n * @param {Boolean} [cache]\n * @return {Object}\n */\nanim8.transition = function(transition, cache) \n{\n  // 1. If it's a string, convert it into an array.\n  // 2. If it's an array, parse it and convert it into an object.\n  // 3. If it's an object, fill in any missing values with the defaults.\n\n  var originalInput = transition;\n\n  if ( anim8.isString( transition ) )\n  {\n    if ( transition in anim8.transition )\n    {\n      return anim8.transition[ transition ];\n    }\n\n    transition = transition.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( transition ) )\n  {\n    var transitionArray = transition;\n\n    transition = {};\n\n    for (var i = 0; i < transitionArray.length; i++)\n    {\n      var part = transitionArray[i];\n      var first = part.charAt( 0 );\n\n      // Introduction Time (into next event)\n      if ( first === '<' )\n      {\n        var intro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( intro ) )\n        {\n          transition.intro = intro;\n        }\n      }\n      // Outroduction Time (out of current event)\n      else if ( first === '>' )\n      {\n        var outro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( outro ) )\n        {\n          transition.outro = outro;\n        }\n      }\n      // Granularity (for velocity conscious transitions)\n      else if ( first === '/' )\n      {\n        var granularity = anim8.number( part.substring(1), false );\n\n        if ( granularity !== false )\n        {\n          transition.granularity = granularity;\n        }\n      }\n      // Lookup (for velocity conscious transitions)\n      else if ( first === '^' )\n      {\n        var lookup = anim8.time( part.substring(1), false );\n\n        if ( lookup !== false )\n        {\n          transition.lookup = lookup;\n        }\n      }\n      else\n      {\n        // Easing\n        var easing = anim8.easing( part, false );\n\n        if ( easing !== false )\n        {\n          transition.easing = easing;\n        }\n\n        // Time\n        var time = anim8.time( part, false );\n\n        if ( time !== false )\n        {\n          transition.time = time;\n        }\n      }\n    }\n  }\n\n  if ( anim8.isObject( transition ) )\n  {\n    transition.time        = anim8.time( transition.time, anim8.defaults.transitionTime );\n    transition.outro       = anim8.time( transition.outro, anim8.defaults.transitionOutro );\n    transition.intro       = anim8.time( transition.intro, anim8.defaults.transitionIntro );\n    transition.easing      = anim8.easing( anim8.coalesce( transition.easing, anim8.defaults.transitionEasing ) );\n    transition.granularity = anim8.number( transition.granularity, anim8.defaults.transitionGranularity );\n    transition.lookup      = anim8.time( transition.lookup, anim8.defaults.transitionLookup );\n    \n    if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheTransitions ) )\n    {\n      anim8.transition[ originalInput ] = transition;\n    }\n\n    return transition;\n  }\n\n  return anim8.defaults.noTransition;\n};\n","\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n * \n *     [duration] x[repeat] z[sleep] ~[delay] @[offset] ![scale] [[easing][-easingType]]\n * \n * This is also a registry of options, you can add your own options that\n * can be used later with syntax like:\n * \n *     anim8.options['myOptions'] = anim8.options('1.5s x2 !2');\n * \n * So you can use 'myOptions' as the options input.\n *\n * You can also specify relative values & scaling values. If you have the \n * following options:\n *\n *     +2s x*2 ~-1s\n *\n * It will result in adding 2 seconds to the duration, repeating it twice as\n * much, and subtracting one second from the delay.\n *\n * For more information on acceptable values in options:\n *\n * **See:** {{#crossLink \"Core/anim8.duration:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.repeat:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.sleep:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.delay:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.scale:method\"}}{{/crossLink}}, and\n *          {{#crossLink \"Core/anim8.easing:method\"}}{{/crossLink}}\n * \n * @method anim8.options\n * @for Core\n * @param {Object|String|Array} options\n * @param {Boolean} [cache]\n * @return {Object}\n */\nanim8.options = (function()\n{\n  function parseProperty(input, out, parseFunction, property, propertyAdd, propertyScale)\n  {\n    var first = input.charAt( 0 );\n\n    if ( first === '*' )\n    {\n      parsed = anim8.number( input.substring( 1 ), false );\n\n      if ( parsed !== false )\n      {\n        out[ propertyScale ] = parsed;\n      }\n    }\n    else\n    {\n      if ( first === '+' || first === '-' )\n      {\n        property = propertyAdd;\n        input = input.substring( 1 );\n      }\n\n      var parsed = parseFunction( input, false )\n\n      if ( parsed !== false )\n      {\n        out[ property ] = parsed;\n      }  \n    }\n\n    return parsed;\n  }\n\n  return function(options, cache)\n  {\n    var originalInput = options;\n\n    if ( anim8.isString( options ) )\n    {\n      if ( options in anim8.options )\n      {\n        return anim8.options[ options ];\n      }\n\n      options = options.toLowerCase().split(' ');\n    }\n\n    if ( anim8.isArray( options ) )\n    {\n      var parsed = {};\n\n      for (var i = 0; i < options.length; i++)\n      {\n        var part = options[i];\n        var first = part.charAt( 0 );\n\n        // Repeats\n        if ( first === 'x' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n        }\n        // Sleeping\n        else if ( first === 'z' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'sleep', 'sleepAdd', 'sleepScale' );\n        }\n        // Delay\n        else if ( first === '~' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'delay', 'delayAdd', 'delayScale' );\n        }\n        // Scaling\n        else if ( first === '!' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.number, 'scale', 'scaleAdd', 'scaleScale' );\n        }\n        // Offset\n        else if ( first === '@' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'offset', 'offsetAdd', 'offsetScale' );\n        }\n        else\n        {\n          // Easing?\n          var easing = anim8.easing( part, false );\n\n          if ( easing !== false )\n          {\n            parsed.easing = easing;\n          }\n\n          // Duration?\n          var duration = parseProperty( part, parsed, anim8.time, 'duration', 'durationAdd', 'durationScale' );\n\n          if ( duration === false )\n          {\n            // If not a duration, might be an alternative repeat? (doesn't start with x)\n            parseProperty( part, parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n          }\n        }\n      }\n\n      if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheOptions ) )\n      {\n        anim8.options[ originalInput ] = parsed;\n      }\n\n      return parsed; \n    }\n\n    if ( anim8.isObject( options ) )\n    {\n      return options;\n    }\n\n    return anim8.defaults.noOptions;\n  };\n\n})();","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {Any} e\n * @class Animator\n * @constructor\n * @extends anim8.eventize\n */\nanim8.Animator = function(e) \n{\n  this.reset( e );\n};\n\n/**\n * The event triggered after preupdate is called. Pre-update is used to run any\n * preparations on the subject before updates are made and attributes are \n * applied.\n * \n * @event preupdate\n */\n\n/**\n * The event triggered after all attrimators are updated and any new values\n * have been applied to the current values (frame) on the animator.\n * \n * @event update\n */\n\n/**\n * The event triggered after the current values (frame) on the animator are\n * applied to the subject.\n * \n * @event apply\n */\n\n/**\n * The event triggered when the given animation cycle starts (and initial \n * values are applied) for all attrimators in the cycle.\n * \n * @event cycleStart:#\n * @param {Number} cycleID\n */\n\n/**\n * The event triggered when the given animation cycle ends which occurs when the\n * last attrimator for an animation finishes or is interrupted by commands like \n * play, queue, transition, end, finish, & stop.\n * \n * @event cycleEnd:#\n * @param {Number} cycleID\n */\n\n/**\n * The event triggered when all animations on the animator have finished.\n * \n * @event finished\n * @param {Animator} animator\n */\n\n/**\n * The event triggered when an animator is deactivated which occurs when an \n * animator has finished animating and is being taken off the list of live\n * animators (anim8.animating).\n * \n * @event deactivate\n */\n\n/**\n * The event triggered after the user calls destroy on an animator.\n * \n * @event destroyed\n */\n\nanim8.fn = anim8.Animator.prototype = \n{\n\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @method reset\n   * @param {Any} subject\n   * @chainable\n   * @protected\n   */\n  reset: function(subject)\n  {\n    /**\n     * The subject which is being animated.\n     *\n     * @property {Any} subject\n     */\n    this.subject = subject;\n\n    /**\n     * The map of attrimators animating the subject.\n     *\n     * @property attrimators\n     * @type {AttrimatorMap}\n     */\n    this.attrimators = new anim8.AttrimatorMap();\n\n    /**\n     * The array of attrimators recently added to the animator that\n     * are ready to be started.\n     *\n     * @property {Array} attrimatorsAdded\n     * @protected\n     */\n    this.attrimatorsAdded = [];\n\n    /**\n     * The object which stores the attribute values being animated.\n     *\n     * @property {Object} frame\n     */\n    this.frame = {};\n\n    /**\n     * The object which stores the attributes last updated.\n     *\n     * @property {Object} updated\n     */\n    this.updated = {};\n\n    /**\n     * Whether or not this animator has completely finished animating it's subject.\n     *\n     * @property {Boolean} finished\n     */\n    this.finished = false;\n\n    /**\n     * The factory which created this Animator given a subject.\n     *\n     * @property {Factory} factory\n     */\n    this.factory = null;\n\n    /**\n     * Whether or not this animator is actively being updated.\n     *\n     * @property {Boolean} active\n     */\n    this.active = false;\n\n    /**\n     * The current cycle being animated. Multiple cycles can be animated at once, this is the first one.\n     *\n     * @property {Number} cycleCurrent\n     * @protected\n     */\n    this.cycleCurrent = 0;\n\n    /**\n     * The ID of the next cycle of animations to be added to this Animator.\n     *\n     * @property {Number} cycleNext\n     * @protected\n     */\n    this.cycleNext = 0;\n\n    /**\n     * The last cycle that was ended.\n     *\n     * @property {Number} cycleEnded\n     * @protected\n     */\n    this.cycleEnded = 0;\n    \n    return this;\n  },\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are \n   * placed to group them together so we know when to apply their initial value.\n   *\n   * @method newCycle\n   * @param {Attrimator|AttrimatorMap} attrimators\n   * @chainable\n   * @protected\n   */\n  newCycle: function(attrimators)\n  {\n    this.cycleNext++;\n\n    if ( attrimators instanceof anim8.AttrimatorMap )\n    {\n      this.cycleNext = attrimators.applyCycle( this.cycleNext );\n    }\n    else if ( attrimators instanceof anim8.Attrimator )\n    {\n      attrimators.cycle = this.cycleNext;\n    }\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all attrimators with the \n   * same cycle identifier and applying their initial state.\n   * \n   * @method applyCurrentCycle\n   * @chainable\n   * @protected\n   */\n  applyCurrentCycle: function()\n  {\n    var cycle = this.cycleCurrent;\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      if ( attrimator.cycle === cycle )\n      {\n        this.updated[ attr ] = (attrimator.startCycle( this.frame ) !== false) || this.updated[ attr ];\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Ends the current cycle which calls any listening functions.\n   * \n   * @method endCurrentCycle\n   * @chainable\n   * @protected\n   */\n  endCurrentCycle: function()\n  {\n    if ( this.cycleCurrent > this.cycleEnded )\n    {\n      this.cycleEnded = this.cycleCurrent;\n      this.trigger( 'cycleEnd:' + this.cycleCurrent, this.cycleCurrent ); \n    }\n  },\n\n  /**\n   * Returns the attribute descriptor given the name of the attribute.\n   * \n   * @method getAttribute\n   * @param  {String} attr\n   * @return {Object}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   *\n   * @method restore\n   * @chainable\n   */\n  restore: function()\n  { \n    return this;\n  },\n\n  /**\n   * Applies the initial state of recently added attrimators immediately.\n   * \n   * @method applyInitialState\n   * @chainable\n   */\n  applyInitialState: function()\n  {\n    var now = anim8.now();\n\n    this.preupdate( now );\n    this.update( now );\n    this.apply();\n\n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are \n   * called. This is used to make any necessary preparations before the animator\n   * is updated.\n   *\n   * @method preupdate\n   * @param {Number} now\n   * @chainable\n   */\n  preupdate: function(now)\n  {\n    // If there are attribute placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the attribute.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      for (var i = 0; i < aa.length; i++)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        if ( attr in this.subject )\n        {\n          this.frame[ attr ] = this.subject[ attr ];\n        }\n        else\n        {\n          this.setDefault( attr );\n        }\n\n        attrimator.start( now, this );     \n      }\n\n      aa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this \n   * Animator if there's no value there.\n   * \n   * @method setDefault\n   * @param {String} attr\n   * @protected\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n  \n  /**\n   * Updates all attrimators in this animator with the given time.\n   *\n   * @method update\n   * @param {Number} now\n   * @chainable\n   */\n  update: function(now) \n  {  \n    this.wasFinished = this.finished;\n    this.finished = true;\n\n    var attrimators = this.attrimators.values;\n    var minCycle = this.cycleNext;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      this.updated[ attr ] = attrimator.setTime( now, this.frame );\n\n      this.finished = this.finished && attrimator.isFinished();\n\n      minCycle = Math.min( minCycle, attrimator.cycle );\n    }\n\n    if ( this.cycleCurrent < minCycle )\n    {\n      while ( this.cycleCurrent < minCycle )\n      {\n        this.endCurrentCycle();\n        this.cycleCurrent++;\n      }\n\n      this.cycleCurrent = minCycle;\n      this.applyCurrentCycle();\n      this.trigger( 'cycleStart:' + this.cycleCurrent, this.cycleCurrent );\n    }\n\n    if ( !this.wasFinished && this.finished )\n    {\n      this.endCurrentCycle();\n    }\n\n    this.trigger('update');\n    \n    return this;\n  },\n\n  /**\n   * Places the attribute animator in this animator replacing any existing \n   * animator for the same attribute. The next time the animator is updated the \n   * attribute animator will be started. The previous (if any) attrimator is\n   * returned.\n   * \n   * @method placeAttrimator\n   * @param {Attrimator} attrimator\n   * @return {Attrimator}\n   */\n  placeAttrimator: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n    var existing = this.attrimators.get( attr );\n\n    this.attrimators.put( attr, attrimator );\n    this.attrimatorsAdded.push( attrimator );\n\n    this.finished = false;\n\n    return existing;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with \n   * all of the other animators at the end of the animation cycle.\n   *\n   * @method apply\n   * @chainable\n   */\n  apply: function()\n  {\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n        this.updated[ attr ] = false;\n      }\n    }\n  \n    this.trigger('apply');\n  \n    this.trimAttrimators();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished attrimators and places any queued attrimators. If the\n   * animator previously wasn't finished but now is the 'finished' event will\n   * be triggered.\n   *\n   * @method trimAttrimators\n   * @chainable\n   * @protected\n   */\n  trimAttrimators: function()\n  {\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( attrimator.isFinished() )\n      {\n        if ( attrimator.next )\n        {\n          this.placeAttrimator( attrimator.next );\n        }\n        else\n        {\n          this.attrimators.removeAt( i );\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n\n    return this;\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the \n   * attribute is not or has not animated).\n   *\n   * @method value\n   * @param {String} attr\n   * @return {Any}\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there \n   * already.\n   * \n   * @method activate\n   * @chainable\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed \n   * from the list of currently animating Animators.\n   *\n   * @method deactivate\n   * @chainable\n   */\n  deactivate: function()\n  { \n    this.trigger('deactivate', this);\n\n    return this;\n  },\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any \n   * relationship between the subject and animator. The next time an animator is\n   * generated for the subject a new animator will be created.\n   *\n   * @method destroy\n   * @chainable\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n\n    return this;\n  },\n  \n  /**\n   * Creates a map of attrimators based on the animation and options given. For\n   * each anim8.Animation instance thats being converted into attrimators,\n   * the onAnimation(animation, option, attrimatorMap) function is invoked.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method createAttrimators\n   * @param {Animation|String|Object} animation\n   * @param {String|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @return {AttrimatorMap}\n   * @protected\n   */\n  createAttrimators: function(animation, options, cache)\n  {\n    var options = anim8.options( options );    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var attrimators = animation.newAttrimators();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, attrimators );\n    }\n    \n    this.onAnimation( animation, options, attrimators );\n\n    while ( animation.next !== null )\n    {\n      animation = animation.next;\n\n      var queueAttrimators = animation.newAttrimators();\n\n      this.onAnimation( animation, options, queueAttrimators );\n\n      attrimators.queueMap( queueAttrimators );\n    }\n\n    return attrimators;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @method onAnimation\n   * @param {Animation} animation\n   * @param {Object} options\n   * @param {AttrimatorMap} attrimatorMap\n   * @protected\n   */\n  onAnimation: function(animation, options, attrimatorMap)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing attrimator for the \n   * same attribute. A spring object can be given, an instance of anim8.Spring, \n   * or a name of a saved Spring. The spring added to the animator is returned.\n   * \n   * @method spring\n   * @param {Spring|String|Object} spring\n   * @return {Spring}\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.newCycle( spring );\n    this.placeAttrimator( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Plays an animation. Attributes in the animation that are currently being\n   * animated will be stopped and replaced with the new attrimators. If `all` is\n   * true then any attrimators animating not specified in the given animation\n   * will be stopped.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method play\n   * @param {Animation|String|Object} animation\n   * @param {String|Object} [options]\n   * @param {Boolean} [all=false] \n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  play: function(animation, options, all, cache)\n  {\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n    \n    this.newCycle( attrimatorMap );\n    this.playAttrimators( attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Plays a map of attrimators. Attributes in the attrimator map that are \n   * currently being animated will be stopped and replaced with the new\n   * attrimators. If \"all\" is true then any attrimators animating not specified\n   * in the given attrimator map will be stopped. This method will not activate \n   * the Animator, that has to be done manually.\n   * \n   * @method playAttrimators\n   * @param {AttrimatorMap} animatorMap\n   * @param {Boolean} [all]\n   * @chainable\n   * @protected\n   */\n  playAttrimators: function(attrimatorMap, all)\n  {\n    if ( all )\n    {\n      this.finishNotPresent( attrimatorMap, 0 );\n    }\n\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      this.placeAttrimator( attrimators[i] );\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation. The attrimators generated from the given animation \n   * will be started at the same time - as soon as all finite attrimators for\n   * the same attributes are finished. Any infinite attrimators will be \n   * automatically stopped when all queued attrimators are set to start.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method queue\n   * @param {Animation|String|Object} animation\n   * @param {String|Object} [options]\n   * @param {Boolean} [cache]\n   * @chainable\n   */\n  queue: function(animation, options, cache)\n  {\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n        \n    this.newCycle( attrimatorMap );\n    this.queueAttrimators( attrimatorMap );\n\n    return this.activate();\n  },\n\n  /**\n   * Queues a map of attrimators. The map of attrimators will be started at the\n   * same time - as soon as all finished attrimators for the same attribute are\n   * finished. Any infinite attrimators will be automatically stopped when all\n   * queued attrimators are set to start.\n   * \n   * @method queueAttrimators\n   * @param {AttrimatorMap} attrimatorMap\n   * @chainable\n   * @protected\n   */\n  queueAttrimators: function(attrimatorMap)\n  {\n    this.attrimators.queueMap( attrimatorMap, this.placeAttrimator, this );\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing attrimators into the beginning of a \n   * new animation. Several parameters can be specified in the transition object\n   * which determine how the transition is made. If \"all\" is true then any \n   * attrimators animating not specified in the given animation will be stopped.\n   *\n   * time: the total time to take to transition into a new animation.\n   * outro: time to look into the future for the current attrimator to curve to.\n   * intro: time to look into the future for the next attrimator to curve into.\n   * lookup: time to look into the future to calculate velocity which is used\n   *   for negative intros and maintaing consistent exit & entrance velocity.\n   * granularity: when greater than 2 it activates smooth transitions where the\n   *    velocity of the new & old attrimators is maintained over the transition.\n   * \n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method transition\n   * @param {String|Array|Object} transition\n   * @param {String|Object|Animation} animation\n   * @param {Object} [options]\n   * @param {Boolean} [all]\n   * @param {Boolean} [cache]\n   * @chainable\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n\n    this.newCycle( attrimatorMap );\n    this.transitionAttrimators( transition, attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing attrimators into the beginning of a\n   * new animation. Several parameters can be specified in the transition object\n   * which determine how the transition is made. If \"all\" is true then any \n   * attrimators animating not specified in the given attrimator map will be \n   * stopped.\n   *\n   * time: the total time to take to transition into a new animation.\n   * outro: time to look into the future for the current attrimator to curve to.\n   * intro: time to look into the future for the next attrimator to curve into.\n   * lookup: time to look into the future to calculate velocity which is used\n   *   for negative intros and maintaing consistent exit & entrance velocity.\n   * granularity: when greater than 2 it activates smooth transitions where the\n   *    velocity of the new & old attrimators is maintained over the transition.\n   *\n   * @method transitionAttrimators\n   * @param {Object} transition\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {Boolean} [all]\n   * @chainable\n   * @protected\n   */\n  transitionAttrimators: function(transition, attrimatorMap, all)\n  {\n    // TRANSITIONING:\n    // If the animator doesn't have an attrimator for the given attribute just add the attrimator adding the total delay\n    // If the animator has an attrimator currently...\n    //   If the current attrimator or new attrimator don't have values at the desired times...\n    //      Stop the current attrimator after the total delay (adding the delay of the new attrimator as well)\n    //      Queue the new attrimator\n    //   Else\n    //      Create a path using the methods detailed above\n    // If all is true and there's an attrimator left on the animator that isn't being transitioned, stop it after the total delay.\n\n    // CREATING A TRANSITION PATH:\n    // If intro & outro are 0, use Tween\n    // If intro is 0, use Quadratic Path between current value, outro point, and first point on new path.\n    // If outro is 0, use Quadratic Path between current value, first point on new path, and intro point.\n    // If intro & outro are not 0, use Cubic Path between current value, outro point, first point on new path, and intro point.\n    // If granularity is given > 1 then compile the path, compute intro & outro velocities, and compute deltas for new \n    //    compiled path based on interpolated velocity over the path (knowing it's length and transition time)\n\n    var current = this.attrimators;\n    var attrimators = attrimatorMap.values;\n\n    // If transition all attributes, \n    if ( all )\n    {\n      this.finishNotPresent( attrimatorMap, transition.time );\n    }\n\n    // Only transition if we need to\n    if ( current.hasOverlap( attrimatorMap ) )\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var next = attrimators[ i ];\n        var attr = next.attribute;\n        var curr = current.get( attr );\n\n        if ( curr && anim8.isDefined( this.frame[ attr ] ) )\n        {\n          var attribute = this.getAttribute( attr );\n          var calc = attribute.calculator;\n\n          var p2 = next.valueAt( 0, calc.create() );\n          \n          if ( p2 !== false )\n          {\n            var transitionTime = transition.time;\n            var p0 = calc.clone( this.frame[ attr ] );            \n            var p1 = transition.outro ? curr.valueAt( curr.getElapsed() + transition.outro, calc.create() ) : false;\n            var p3 = transition.intro ? next.valueAt( transition.intro, calc.create() ) : false;\n            var path = null;\n\n            // If the intro is negative we can look into the past by looking a little bit into\n            // the future and assume the past is going in the same direction (only the opposite). \n            if ( p3 !== false && transition.intro < 0 && transition.lookup > 0 )\n            {\n              var pastLookahead = next.valueAt( transition.lookup, calc.create() );\n              var pastVelocity = calc.sub( pastLookahead, p2 );\n\n              if ( pastVelocity !== false )\n              {\n                var pastNegativeVelocity = calc.scale( pastVelocity, transition.intro / transition.lookup );\n                var past = calc.add( pastNegativeVelocity, p2 );\n                \n                p3 = p2;\n                p2 = past;\n              }\n            }\n\n            // Build a path with as many of the points as possible.\n            if ( p1 === false && p3 === false )\n            {\n              path = new anim8.Tween( attr, calc, p0, p2 );\n            }\n            else if ( p1 === false )\n            {\n              path = new anim8.PathQuadratic( attr, calc, p0, p2, p3 );\n            }\n            else if ( p3 === false )\n            {\n              path = new anim8.PathQuadratic( attr, calc, p0, p1, p2 );\n            }\n            else\n            {\n              path = new anim8.PathCubic( attr, calc, p0, p1, p2, p3 );\n            }\n            \n            // If granularity is specified we will try to make the transition \n            // smooth by maintaining exit (outro) velocity from the current attrimator\n            // and interpolating it to the entrance (intro) velocity for the \n            // attrimator we're transitioning into.\n            if ( transition.granularity > 2 && transition.lookup > 0 )\n            { \n              var outTime  = p1 === false ? curr.getElapsed() : curr.getElapsed() + transition.outro;\n              var outPoint = p1 === false ? p0 : p1;\n              var outNext  = curr.valueAt( outTime + transition.lookup, calc.create() );\n\n              var inTime   = p3 === false ? 0 : transition.intro;\n              var inPoint  = p3 === false ? p2 : p3;\n              var inNext   = next.valueAt( inTime + transition.lookup, calc.create() );\n\n              // We can only proceed if we have reference points to calculate\n              // exit & entrance velocity.\n              if ( outNext !== false && inNext !== false )\n              {\n                var outVelocity  = calc.sub( calc.clone( outNext ), outPoint );\n                var outPerMillis = calc.length( outVelocity ) / transition.lookup;\n\n                var inVelocity   = calc.sub( calc.clone( inNext ), inPoint );\n                var inPerMillis  = calc.length( inVelocity ) / transition.lookup;\n\n                var compiled = new anim8.PathCompiled( attr, path, transition.granularity );\n                var points = compiled.points;\n                var lastPoint = points.length - 1;\n                var totalDistance = 0;\n                var distances = [];\n\n                for (var k = 0; k < lastPoint; k++)\n                {\n                  distances[ k ] = totalDistance;\n                  totalDistance += calc.distance( points[ k ], points[ k + 1 ] );\n                }\n                distances[ lastPoint ] = totalDistance;\n\n                if ( !isNaN( totalDistance ) )\n                {\n                  var requiredTime = 2.0 * totalDistance / (outPerMillis + inPerMillis);\n                  var acceleration = 0.5 * (inPerMillis - outPerMillis) / requiredTime;\n                  var timeDelta = requiredTime / lastPoint;\n                  var deltas = [];\n\n                  for (var k = 0; k < lastPoint; k++)\n                  { \n                    var time = k * timeDelta;\n                    var position = outPerMillis * time + acceleration * time * time;\n\n                    deltas[ k ] = position / totalDistance;\n                  }\n                  deltas[ lastPoint ] = 1.0;\n\n                  path = new anim8.PathDelta( attr, calc, points, deltas );\n                  transitionTime = requiredTime;\n                }\n              }\n            }\n\n            var transitionEvent = new anim8.Event( attr, path, transitionTime, transition.easing, 0, 0, 0, 1 );\n          \n            transitionEvent.next = next;\n            transitionEvent.cycle = next.cycle;\n\n            next.offset = transition.intro;\n\n            this.placeAttrimator( transitionEvent );\n          }\n          else\n          {\n            curr.stopIn( transition.time + next.delay );\n            curr.queue( next );\n            next.delay = 0;\n          }\n        }\n        else\n        {\n          next.delay += transition.time;\n          \n          this.placeAttrimator( next );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        this.placeAttrimator( attrimators[ i ] );\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Finishes any attrimators on this animator that are not present in the given\n   * map of attrimators. Optionally a delay in stopping them can be given.\n   * \n   * @method finishNotPresent\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {Number} [delay=0]\n   * @chainable\n   * @protected\n   */\n  finishNotPresent: function(attrimatorMap, delay)\n  {\n    var attrimators = this.attrimators.values;\n    var stopIn = delay || 0;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( !attrimatorMap.has( attrimator.attribute ) )\n      {\n        attrimator.stopIn( stopIn );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenTo\n   * @param {String} attr\n   * @param {T} target\n   * @param {String|Array|Object} [options]\n   * @chainable\n   */\n  tweenTo: function(attr, target, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens multiple attributes to target values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenManyTo\n   * @param {Object} targets\n   * @param {String|Array|Object} [options]\n   * @chainable\n   */\n  tweenManyTo: function(targets, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n\n  /**\n   * Tweens a single attribute from a starting value to the current value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenFrom\n   * @param {String} attr\n   * @param {T} starting\n   * @param {String|Array|Object} [options]\n   * @chainable\n   */\n  tweenFrom: function(attr, starting, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starting );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, anim8.computed.current );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens multiple attributes from starting values to the current values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenManyFrom\n   * @param {Object} startings\n   * @param {String|Array|Object} [options]\n   * @chainable\n   */\n  tweenManyFrom: function(startings, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in startings )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( startings[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, anim8.computed.current );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tween\n   * @param {String} attr\n   * @param {T} starts\n   * @param {T} ends\n   * @param {String|Array|Object} [options]\n   * @chainable\n   */\n  tween: function(attr, starts, ends, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenMany\n   * @param {Object} starts\n   * @param {Object} ends\n   * @param {String|Array|Object} [options]\n   * @chainable\n   */\n  tweenMany: function(starts, ends, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n\n  /**\n   * Moves an attribute relative to its current value.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method move\n   * @param {String} attr\n   * @param {T} amount\n   * @param {String|Array|Object} [options]\n   * @chainable\n   */\n  move: function(attr, amount, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var relative  = attribute.parse( amount );\n    var start     = anim8.computed.current;\n    var end       = anim8.isComputed( relative ) ? relative : anim8.computed.relative( relative );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n\n  /**\n   * Moves multiple attribute relative to their current value.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method moveMany\n   * @param {Object} amounts\n   * @param {String|Array|Object} [options]\n   * @chainable\n   */\n  moveMany: function(amounts, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in amounts )\n    {\n      var attribute = this.getAttribute( attr );\n      var relative  = attribute.parse( amounts[ attr ] );\n      var start     = anim8.computed.current;\n      var end       = anim8.isComputed( relative ) ? relative : anim8.computed.relative( relative );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute \n   * when invoked. The returned function can be given as values for paths & \n   * springs that are evaluated every frame.\n   * \n   * @method ref\n   * @param {String} attr\n   * @return {Function}\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n    \n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n      \n      request[ attr ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n      \n      return attribute.defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method follow\n   * @param {String} attr\n   * @param {Path|Object|String} path\n   * @param {Object} [options]\n   * @chainable\n   */\n  follow: function(attr, path, options)\n  {\n    var options = anim8.options( options );\n    var path    = anim8.path( path );\n    var event   = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that iterates over given attributes. If callback is specified\n   * it is invoked for each attrimator in this animator for the given \n   * attributes. If no callback is given an array of anim8.Attrimators is \n   * returned for each attrimator in this animator for the given attributes.\n   *\n   * @method attrimatorsFor\n   * @param {String|Array} attributes\n   * @param {Function} callback\n   * @return {this|Array}\n   */\n  attrimatorsFor: function(attributes, callback)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      attributes = attributes.split( ' ' );\n    }\n   \n    var attrimatorMap = this.attrimators; \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n    if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        var attrimator = attrimatorMap.get( attr );\n        \n        if ( attrimator )\n        {\n          if ( resulting )\n          {\n            results.push( attrimator );\n          }\n          else\n          {\n            callback.call( this, attrimator, attr );\n          }\n        }\n      }\n    }\n    else\n    {\n      var attrimators = attrimatorMap.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n\n        if ( resulting )\n        {\n          results.push( attrimator );\n        }\n        else\n        {\n          callback.call( this, attrimator, attrimator.attribute );\n        }\n      }\n    }\n    \n    return resulting ? results : this;\n  },\n  \n  /**\n   * Stops all attributes for the specified attributes. Attribute names can be \n   * given as an array or a space separated string. If no attributes are given \n   * all attributes are assumed.\n   *\n   * @method stop\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  stop: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator, attr) \n    {\n      this.attrimators.remove( attr );\n    });\n  },\n  \n  /**\n   * Ends all attributes for the specified attributes. If attributes are queued \n   * the last value of the last attribute is applied to this Animator before \n   * being completely removed. Attribute names can be given as an array or a \n   * space separated string. If no attributes are given all attributes are \n   * assumed.\n   *\n   * @method end\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  end: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator) \n    {\n      while (attrimator.next)\n      {\n        attrimator = attrimator.next;\n      }\n      \n      attrimator.finish( this.frame );\n    });\n  },\n  \n  /**\n   * Finishes all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @method finish\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  finish: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.finish( this.frame );\n    });\n  },\n\n  /**\n   * Calls nopeat on all current attrimators for the specified attributes.\n   * Attribute names can be given as an array or a space separated string. If\n   * no attributes are given all attributes are assumed. \n   *\n   * **See:** {{#crossLink \"Attrimator/nopeat:method\"}}Attrimator.nopeat{{/crossLink}}\n   * \n   * @method nopeat\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  nopeat: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.nopeat();\n    });\n  },\n  \n  /**\n   * Pauses all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @method pause\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  pause: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.pause();\n    });\n  },\n  \n  /**\n   * Resumes all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @method resume\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  resume: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.resume();\n    });\n  },\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @method set\n   * @param {Object} attributes\n   * @chainable\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n      this.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attributes. \n   * Unsetting involves removing all attrimators and the current value in the \n   * frame,\n   * \n   * @method unset\n   * @param {String|Array|Object} attributes\n   * @chainable\n   */\n  unset: function(attributes)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      this.attrimators.remove( attributes );\n      delete this.frame[ attributes ];\n    }\n    else if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        this.unset( attributes[ i ] );\n      }\n    }\n    else if ( anim8.isObject( attributes ) )\n    {\n      for (var attr in attributes)\n      {\n        this.unset( attr );\n      }\n    }\n\n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The \n   * argument must be an object where the key is the name of an attribute.\n   *\n   * @method get\n   * @param {Object} attributes\n   * @return {Object}\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns the amount of finite time remaining before the animator is done\n   * animating. Attrimators that don't have a known end time are not included.\n   * If there are no attrimators with end times then zero is returned.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    return this.attrimators.timeRemaining();\n  },\n  \n  /**\n   * Returns true if there are any attrimators on this Animator.\n   *\n   * @method hasAttrimators\n   * @return {Boolean}\n   */\n  hasAttrimators: function()\n  {\n    return this.attrimators.size() > 0;\n  },\n  \n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @method getSubject\n   * @param {Function} [wrapper]\n   * @return {Any}\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator \n   * if none is given. This is particularly useful for having a function be \n   * called on deferred statements.\n   * \n   * @method invoke\n   * @param {Function} func\n   * @param {Object} [context]\n   * @param {Array} [args]\n   * @chainable\n   */\n  invoke: function(func, context, args)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, args || [] );\n    }\n\n    return this;\n  },\n  \n  /**\n   * Defers the method calls following this one to when the given event type \n   * (on or once) and event. To return this animator you need to call undefer() \n   * as many times as you called defer().\n   *\n   * @method defer\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} [callback]\n   * @return {DeferAnimator}\n   */\n  defer: function(eventType, event, callback)\n  {\n    return new anim8.DeferAnimator( this, this, eventType, event, callback );\n  },\n\n  /**\n   * Invokes the given callback when the last animation that was \n   * played/queued/transitioned starts.\n   * \n   * @method onCycleStart\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  onCycleStart: function(callback, context)\n  {\n    this.once( 'cycleStart:' + this.cycleNext, callback, context );\n\n    return this;\n  },\n\n  /**\n   * Invokes the given callback when the last animation that was\n   * played/queued/transitioned ends.\n   * \n   * @method onCycleEnd\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  onCycleEnd: function(callback, context)\n  {\n    this.once( 'cycleEnd:' + this.cycleNext, callback, context );\n\n    return this;\n  }\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n *\n * @class DeferAnimator\n * @constructor\n * @extends Defer\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n  this.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  /**\n   * Defers the {{#crossLink \"Animator/restore:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'restore', \n\n  /**\n   * Defers the {{#crossLink \"Animator/placeAttrimator:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method placeAttrimator\n   */\n  'placeAttrimator', \n\n  /**\n   * Defers the {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method applyInitialState\n   */\n  'applyInitialState',\n\n  /**\n   * Defers the {{#crossLink \"Animator/preupdate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method preupdate\n   */\n  'preupdate', \n\n  /**\n   * Defers the {{#crossLink \"Animator/update:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method update\n   */\n  'update', \n\n  /**\n   * Defers the {{#crossLink \"Animator/apply:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method apply\n   */\n  'apply', \n\n  /**\n   * Defers the {{#crossLink \"Animator/trimAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   * @protected\n   */\n  'trimAttrimators',\n\n  /**\n   * Defers the {{#crossLink \"Animator/activate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'activate', \n\n  /**\n   * Defers the {{#crossLink \"Animator/deactivate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'deactivate', \n\n  /**\n   * Defers the {{#crossLink \"Animator/destroy:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'destroy', \n\n  /**\n   * Defers the {{#crossLink \"Animator/spring:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'spring', \n\n  /**\n   * Defers the {{#crossLink \"Animator/play:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'play', \n\n  /**\n   * Defers the {{#crossLink \"Animator/playAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   * @protected\n   */\n  'playAttrimators', \n\n  /**\n   * Defers the {{#crossLink \"Animator/queue:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'queue',\n\n  /**\n   * Defers the {{#crossLink \"Animator/queueAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   * @protected\n   */\n  'queueAttrimators', \n\n  /**\n   * Defers the {{#crossLink \"Animator/transition:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'transition', \n\n  /**\n   * Defers the {{#crossLink \"Animator/transitionAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   * @protected\n   */\n  'transitionAttrimators', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tween:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'tween', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenTo:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'tweenTo', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenMany:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'tweenMany', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenManyTo:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'tweenManyTo', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenFrom:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'tweenFrom', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenManyFrom:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'tweenManyFrom',\n\n  /**\n   * Defers the {{#crossLink \"Animator/move:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'move', \n\n  /**\n   * Defers the {{#crossLink \"Animator/moveMany:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'moveMany',\n\n  /**\n   * Defers the {{#crossLink \"Animator/follow:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'follow', \n\n  /**\n   * Defers the {{#crossLink \"Animator/stop:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'stop', \n\n  /**\n   * Defers the {{#crossLink \"Animator/end:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'end', \n\n  /**\n   * Defers the {{#crossLink \"Animator/finish:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'finish', \n\n  /**\n   * Defers the {{#crossLink \"Animator/pause:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'pause', \n\n  /**\n   * Defers the {{#crossLink \"Animator/resume:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'resume',\n\n  /**\n   * Defers the {{#crossLink \"Animator/set:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'set', \n\n  /**\n   * Defers the {{#crossLink \"Animator/unset:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'unset', \n\n  /**\n   * Defers the {{#crossLink \"Animator/get:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'get', \n\n  /**\n   * Defers the {{#crossLink \"Animator/invoke:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'invoke', \n\n  /**\n   * Defers the {{#crossLink \"Animator/onCycleStart:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'onCycleStart', \n\n  /**\n   * Defers the {{#crossLink \"Animator/onCycleEnd:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'onCycleEnd'\n]);\n","\n/**\n * Instantiates an Array of {{#crossLink \"Animator\"}}{{/crossLink}} instances.\n * \n * @param {Array} [input]\n * @class Animators\n * @constructor\n * @extends {Array}\n */\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.override( anim8s.fn = anim8.Animators.prototype = new Array(),\n{\n\n  /**\n   * Invokes a callback for each element in the array.\n   *\n   * @method each\n   * @param {Function} iterator\n   * @param {Object} context\n   * @chainable\n   */\n  each: function(iterator, context) \n  {\n    for (var i = 0; i < this.length; i++) \n    {\n      if ( iterator.call( context || this[i], this[i], i ) === false ) \n      {\n        break;\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @method fill\n   * @param {Array} animators\n   * @chainable\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if a true value is\n   * returned  that element is removed from the array.\n   *\n   * @method filter\n   * @param {Function} filterer\n   * @chainable\n   */\n  filter: function(filterer)\n  {  \n    var alive = 0;\n    \n    for (var i = 0; i < this.length; i++)\n    {\n      var remove = filterer( this[i] );\n      \n      if ( !remove )\n      {\n        this[alive++] = this[i];\n      }\n    }\n    \n    this.length = alive;\n    \n    return this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a \n   * wrapper function before it's returned.\n   *\n   * @method getSubjects\n   * @param {Function} [wrapper]\n   * @return {Any}\n   */\n  getSubjects: function(wrapper)\n  {\n    var subjects = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      subjects.push( this[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   *\n   * @method first\n   * @return {Animator}\n   */\n  first: function()\n  {\n    return this[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   *\n   * @method reverse\n   * @chainable\n   */\n  reverse: function()\n  {\n    var last = this.length - 1;\n    var mid = Math.floor( this.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = this[ i ];\n      var e1 = this[ last - i ];\n\n      this[ i ] = e1;\n      this[ last - i ] = e0;\n    }\n\n    return this;\n  },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   *\n   * @method activate\n   * @chainable\n   */\n  activate: function()\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var animator = this[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Creates a sequence of events separated by a delay.\n   *\n   * @method sequence\n   * @param {String|Number} delay\n   * @param {String|Array|Function} easing\n   * @return {Sequence}\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * Returns the maximum time remaining out of all Animators in the array.\n   *\n   * **See:** {{#crossLink \"Animating/timeRemaining:method\"}}{{/crossLink}}\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    var maxRemaining = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      maxRemaining = Math.max( maxRemaining, this[ i ].timeRemaining() );\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/restore:method\"}}{{/crossLink}} on each \n   * animator in the array and returns this.\n   * \n   * @method restore\n   * @chainable\n   */\n  restore               : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/placeAttrimator:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method placeAttrimator\n   * @chainable\n   */\n  placeAttrimator       : anim8.delegate( 'placeAttrimator', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method applyInitialState\n   * @chainable\n   */\n  applyInitialState     : anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/preupdate:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method preupdate\n   * @chainable\n   */\n  preupdate             : anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/update:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method update\n   * @chainable\n   */\n  update                : anim8.delegate( 'update', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/apply:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method apply\n   * @chainable\n   */\n  apply                 : anim8.delegate( 'apply', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/trimAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method trimAttrimators\n   * @chainable\n   */\n  trimAttrimators       : anim8.delegate( 'trimAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/activate:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method activate\n   * @chainable\n   */\n  activate              : anim8.delegate( 'activate', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/deactivate:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method deactivate\n   * @chainable\n   */\n  deactivate            : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/destroy:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method destroy\n   * @chainable\n   */\n  destroy               : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/spring:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method spring\n   * @chainable\n   */\n  spring                : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/play:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method play\n   * @chainable\n   */\n  play                  : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/playAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method playAttrimators\n   * @chainable\n   * @protected\n   */\n  playAttrimators       : anim8.delegate( 'playAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/queue:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method queue\n   * @chainable\n   */\n  queue                 : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/queueAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method queueAttrimators\n   * @chainable\n   * @protected\n   */\n  queueAttrimators      : anim8.delegate( 'queueAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/transition:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method transition\n   * @chainable\n   */\n  transition            : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/transitionAttrimators:method\"}}{{/crossLink}} \n   * on each animator in the array and returns this.\n   * \n   * @method transitionAttrimators\n   * @chainable\n   * @protected\n   */\n  transitionAttrimators : anim8.delegate( 'transitionAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tween:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tween\n   * @chainable\n   */\n  tween                 : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenTo:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenTo\n   * @chainable\n   */\n  tweenTo               : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenFrom:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenFrom\n   * @chainable\n   */\n  tweenFrom             : anim8.delegate( 'tweenFrom', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenMany:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenMany\n   * @chainable\n   */\n  tweenMany             : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenManyTo:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenManyTo\n   * @chainable\n   */\n  tweenManyTo           : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenManyFrom:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenManyFrom\n   * @chainable\n   */\n  tweenManyFrom         : anim8.delegate( 'tweenManyFrom', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/move:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method move\n   * @chainable\n   */\n  move                  : anim8.delegate( 'move', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/moveMany:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method moveMany\n   * @chainable\n   */\n  moveMany              : anim8.delegate( 'moveMany', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/follow:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method follow\n   * @chainable\n   */\n  follow                : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/attrimatorsFor:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method attrimatorsFor\n   * @chainable\n   */\n  attrimatorsFor        : anim8.delegate( 'attrimatorsFor', anim8.delegate.RETURN_RESULTS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/stop:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method stop\n   * @chainable\n   */\n  stop                  : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/end:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method end\n   * @chainable\n   */\n  end                   : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/finish:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method finish\n   * @chainable\n   */\n  finish                : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/pause:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method pause\n   * @chainable\n   */\n  pause                 : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/resume:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method resume\n   * @chainable\n   */\n  resume                : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/set:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method set\n   * @chainable\n   */\n  set                   : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/unset:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method unset\n   * @chainable\n   */\n  unset                 : anim8.delegate( 'unset', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/get:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method get\n   * @chainable\n   */\n  get                   : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n\n  /**\n   * Calls {{#crossLink \"Animator/hasAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method hasAttrimators\n   * @chainable\n   */\n  hasAttrimators        : anim8.delegate( 'hasAttrimators', anim8.delegate.RETURN_TRUE ),\n\n  /**\n   * Calls {{#crossLink \"Animator/invoke:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method invoke\n   * @chainable\n   */\n  invoke                : anim8.delegate( 'invoke', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/onCycleStart:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method onCycleStart\n   * @chainable\n   */\n  onCycleStart          : anim8.delegate( 'onCycleStart', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/onCycleEnd:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method onCycleEnd\n   * @chainable\n   */\n  onCycleEnd            : anim8.delegate( 'onCycleEnd', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/on:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method on\n   * @chainable\n   */\n  on                    : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/once:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method once\n   * @chainable\n   */\n  once                  : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/off:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method off\n   * @chainable\n   */\n  off                   : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/trigger:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method trigger\n   * @chainable\n   */\n  trigger               : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n});\n","\n/**\n * @class Core\n */\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n *\n * @property {Boolean} anim8.running\n * @readOnly\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n *\n * @property {Boolean} anim8.live\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n *\n * @property {Animators} anim8.animating\n * @readOnly\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @method anim8.requestRun\n * @param {Function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 1, anim8.defaults.frameRate - (now - lastTime) );\n      var id = window.setTimeout( function() { callback( now + timeToCall ); }, timeToCall );\n      lastTime = now + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list of animating if it isn't there already. If the \n * animation loop isn't currently running it's started.\n *\n * @method anim8.add\n * @param {Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation loop cycle which consists of four operations:\n * \n * 1. Call preupdate on all Animators\n * 2. Call update on all Animators\n * 3. Call apply on all Animators\n * 4. Remove finished Animators\n * \n * When there are no more animating the loop cycle is stopped.\n *\n * @method anim8.run\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate( now );\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Pauses all animators.\n *\n * **See:** {{#crossLink \"Animator/pause:method\"}}{{/crossLink}}\n *\n * @method anim8.pause\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.pause = function(attributes)\n{\n  anim8.animating.pause( attributes );\n\n  return anim8;\n};\n\n/**\n * Resumes all animators.\n * \n * **See:** {{#crossLink \"Animator/resume:method\"}}{{/crossLink}}\n *\n * @method anim8.resume\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.resume = function(attributes)\n{\n  anim8.animating.resume( attributes );\n\n  return anim8;\n};\n\n/**\n * Stops all animators.\n * \n * **See:** {{#crossLink \"Animator/stop:method\"}}{{/crossLink}}\n * \n * @method anim8.stop\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.stop = function(attributes)\n{\n  anim8.animating.stop( attributes );\n\n  return anim8;\n};\n\n/**\n * Ends all animators.\n * \n * **See:** {{#crossLink \"Animator/end:method\"}}{{/crossLink}}\n *\n * @method anim8.end\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.end = function(attributes)\n{\n  anim8.animating.end( attributes );\n\n  return anim8;\n};\n\n/**\n * Finishes all animators.\n * \n * **See:** {{#crossLink \"Animator/finish:method\"}}{{/crossLink}}\n *\n * @method anim8.finish\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.finish = function(attributes)\n{\n  anim8.animating.finish( attributes );\n\n  return anim8;\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * Creates a seqeuence for the given animators offseting animations be the given\n * delay and easing.\n * \n * @param {Animators} animators\n * @param {String|Number} delay\n * @param {String|Array|Function} easing\n * @class Sequence\n * @constructor\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  /**\n   * The animators to play a sequence of animations against.\n   * \n   * @property {Animators} animators\n   */\n  this.animators = animators;\n\n  /**\n   * The delay in milliseconds between animations.\n   * \n   * @property {Number} delay\n   */\n  this.delay = anim8.delay( delay );\n\n  /**\n   * The easing function to use to calculate the delay offset for an animation.\n   * \n   * @property {Function} easing\n   */\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * Returns the maximum delay for delaying generated attrimators.\n   *\n   * @method maxDelay\n   * @return {Number}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  /**\n   * Creates an AttrimatorMap with the given options for the animator at the \n   * given index.\n   *\n   * @method createAttrimators\n   * @param {Animation} animation\n   * @param {Object} options\n   * @param {Number} i\n   * @return {AttrimatorMap}\n   */\n  createAttrimators: function(animation, options, i)\n  {\n    var attrimatorMap = animation.newAttrimators();\n    var attrimators = attrimatorMap.values;\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = attrimators.length - 1; k >= 0; k--)\n    {\n      attrimators[ k ].delay += delayOffset;\n    }\n\n    animation.merge( options, attrimatorMap );\n    \n    return attrimatorMap;\n  },\n\n  /**\n   * Reverses the sequence by reversing the underlying array of animators.\n   *\n   * @method reverse\n   * @chainable\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * Plays the animation across the animators in this sequence.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/play:method\"}}Animator.play{{/crossLink}}\n   *\n   * @method play \n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [all=false]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  play: function(animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( anim, options, i );\n      animator.newCycle( attrimators );\n      animator.playAttrimators( attrimators, all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * Queues the animation across the animators in this sequence.\n   * \n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/queue:method\"}}Animator.queue{{/crossLink}}\n   *\n   * @method queue\n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  queue: function(animation, options, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var attrimatorMap = sequence.createAttrimators( anim, options, i );\n      var attrimators = attrimatorMap.values;\n\n      for (var k = attrimators.length - 1; k >= 0; k--)\n      {\n        attrimators[ k ].delay += delayOffset;\n      }\n      \n      animator.newCycle( attrimatorMap );\n      animator.queueAttrimators( attrimatorMap );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * Transitions into the animation across the animators in this sequence.\n   * \n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/transition:method\"}}Animator.transition{{/crossLink}}\n   * \n   * @method transition\n   * @param {String|Array|Object} transition\n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [all=false]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( anim, options, i );\n      animator.newCycle( attrimators );\n      animator.transitionAttrimators( transition, attrimators, all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * Activates all animators in this sequence and returns this.\n   *\n   * **See:** {{#crossLink \"Animator/activate:method\"}}Animator.activate{{/crossLink}}\n   * \n   * @method add\n   * @chainable\n   */\n  add: function()\n  {\n    this.animators.activate();\n    \n    return this;\n  }\n  \n};","\n/**\n * A collection of {{#crossLink \"Parser\"}}parsers{{/crossLink}} which takes \n * animation definitions (an Object passed to {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}})\n * and generates {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}}.\n * \n * @class anim8.parser\n */\n\n/**\n * Returns a parser based on the input. If the input is an instance of Parser\n * it's returned immediately. If the input is a string the parser with that name \n * is returned. If no parser could be determined then false is returned.\n *\n * **See:** {{#crossLink \"anim8.parser\"}}{{/crossLink}}\n * \n * @method anim8.parser\n * @for Core\n * @param {Parser|String} parser\n * @return {Parser|false}\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n  if ( anim8.isString( parser ) && parser in anim8.parser )\n  {\n    return anim8.parser[ parser ];\n  }\n  \n  return false;\n};\n\n\n/**\n * Instantiates a new Parser. Parsers are responsible for taking animation\n * definitions (an Object passed to {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}})\n * and generating & placing {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}} \n * onto an {{#crossLink \"AttrimatorMap\"}}{{/crossLink}}.\n *\n * Parsers are added to the {{#crossLink \"anim8.parser\"}}{{/crossLink}} object\n * by a key and when that key exists in an animation definition, the animation\n * definition is passed to the {{#crossLink \"Parser/parse:method\"}}{{/crossLink}}\n * to generate {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}}.\n *\n * @class Parser\n * @constructor\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimatorMap to the given array.\n   *\n   * @method parse\n   * @param {Object} animation\n   * @param {Object} options\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @method merge\n   * @param {Object} animation\n   * @param {Object} newOptions\n   * @param {Object} oldOptions\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  { \n    var factory = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[ i ];\n      var attr = e.attribute;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = helper.mergeEasing( attr, e.easing );\n      e.repeat    = helper.mergeRepeat( attr, e.repeat );\n      e.delay     = helper.mergeDelay( attr, e.delay );\n      e.sleep     = helper.mergeSleep( attr, e.sleep );\n      e.duration  = helper.mergeDuration( attr, e.duration );\n      e.offset    = helper.mergeOffset( attr, e.offset );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n    }\n  }\n};\n\n\n/**\n * Instantiates a new instance of Parser Helper.\n *\n * @param {Object} input\n * @param {Object} oldOptions\n * @param {Object} newOptions\n * @class ParserHelper\n * @constructor\n */\nanim8.ParserHelper = function( input, oldOptions, newOptions )\n{\n  this.input = input;\n  this.oldOptions = oldOptions || {};\n  this.newOptions = newOptions || {};\n\n  this.prepareSpecifics( 'easings' );\n  this.prepareSpecifics( 'repeats' );\n  this.prepareSpecifics( 'delays' );\n  this.prepareSpecifics( 'sleeps' );\n  this.prepareSpecifics( 'durations' );\n  this.prepareSpecifics( 'offsets' );\n  this.prepareSpecifics( 'scales' );\n  this.prepareSpecifics( 'scaleBases' );\n};\n\nanim8.ParserHelper.prototype = \n{\n\n  /**\n   * If an object with the given name doesn't exist on the input it's created.\n   *\n   * @method prepareSpecifics\n   * @param {String} specifics\n   */\n  prepareSpecifics: function(specifics)\n  {\n    if ( !anim8.isObject( this.input[ specifics ] ) )\n    {\n      this.input[ specifics ] = {};\n    }\n  },\n\n  /* PARSING */\n\n  /**\n   * Parses an easing from the input.\n   *\n   * @method parseEasing\n   * @param  {String} attr\n   * @return {String|Function|Array}\n   */\n  parseEasing: function(attr)\n  {\n    return this.parseFirst( attr, 'easing', 'easings' );\n  },\n\n  /**\n   * Parses repeats from the input.\n   * \n   * @method parseRepeat\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseRepeat: function(attr)\n  {\n    return this.parseNumber( attr, anim8.repeat, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * Parses delay from the input.\n   * \n   * @method parseDelay\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseDelay: function(attr)\n  {\n    return this.parseNumber( attr, anim8.delay, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * Parses sleep from the input.\n   * \n   * @method parseSleep\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseSleep: function(attr)\n  {\n    return this.parseNumber( attr, anim8.sleep, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'sleeps' );\n  },\n\n  /**\n   * Parses duration from the input.\n   * \n   * @method parseDuration\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseDuration: function(attr)\n  {\n    return this.parseNumber( attr, anim8.duration, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * Parses offset from the input.\n   * \n   * @method parseOffset\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseOffset: function(attr)\n  {\n    return this.parseNumber( attr, anim8.offset, anim8.time, 'offset', 'offsetAdd', 'offsetScale', 'offsets' );\n  },\n\n  /**\n   * Parses scale from the input.\n   * \n   * @method parseScale\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseScale: function(attr)\n  {\n    return this.parseNumber( attr, anim8.scale, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * Parses scale base from the input.\n   * \n   * @method parseScaleBase\n   * @param  {String} attr\n   * @return {Any}\n   */\n  parseScaleBase: function(attr)\n  {\n    return this.parseFirst( attr, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * Parses a value from the input given the attribute, option, and specific.\n   * \n   * @method parseFirst\n   * @param {String} attr\n   * @param {String} option\n   * @param {String} specifics\n   * @return {Any}\n   */\n  parseFirst: function(attr, option, specifics)\n  {\n    return anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n  },\n\n  /**\n   * Parses an event from the input given a path & parser for the event.\n   * \n   * @method parseEvent\n   * @param {String} attr\n   * @param {Path} path\n   * @param {Parser} parser\n   * @param {Boolean} hasInitialState\n   * @return {Event}\n   */\n  parseEvent: function(attr, path, parser, hasInitialState)\n  {\n    var duration   = this.parseDuration( attr );\n    var easing     = this.parseEasing( attr );\n    var delay      = this.parseDelay( attr );\n    var sleep      = this.parseSleep( attr );\n    var repeat     = this.parseRepeat( attr );\n    var offset     = this.parseOffset( attr );\n    var scale      = this.parseScale( attr );\n    var scaleBase  = this.parseScaleBase( attr );\n    var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, offset, repeat, scale, scaleBase, hasInitialState, parser );\n\n    return event;\n  },\n\n  /**\n   * Parses a number from the input given parse functions.\n   * \n   * @method parseNumber\n   * @param {String} attr\n   * @param {Function} parseFunction\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} optionAdd\n   * @param {String} optionScale\n   * @param {String} specifics\n   * @return {Number}\n   */\n  parseNumber: function(attr, parseFunction, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n    var base = parseFunction( baseRaw );\n    var add = parseOptionFunction( this.oldOptions[ optionAdd ], 0 );\n    var scale = anim8.coalesce( this.oldOptions[ optionScale ], 1 );\n\n    return (add === 0 && scale === 1) ? baseRaw : (base + add) * scale;\n  },\n\n  /* MERGING */\n\n  /**\n   * Merges easing based on the input, new options, and the current easing.\n   * \n   * @method mergeEasing\n   * @param {String} attr\n   * @param {Function} current\n   * @return {Function}\n   */\n  mergeEasing: function(attr, current)\n  {\n    return this.mergeFirst( attr, current, anim8.easing, 'easing', 'easings' );\n  },\n\n  /**\n   * Merges repeats based on the input, new options, and the current repeat.\n   * \n   * @method mergeRepeat\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeRepeat: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * Merges delay based on the input, new options, and the current delay.\n   * \n   * @method mergeDelay\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeDelay: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * Merges sleep based on the input, new options, and the current sleep.\n   * \n   * @method mergeSleep\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeSleep: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'scales' );\n  },\n\n  /**\n   * Merges duration based on the input, new options, and the current duration.\n   * \n   * @method mergeDuration\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeDuration: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * Merges offset based on the input, new options, and the current offset.\n   * \n   * @method mergeOffset\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeOffset: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'offset', 'offsetAdd', 'offsetScale', 'offsets' );\n  },\n\n  /**\n   * Merges scale based on the input, new options, and the current scale.\n   * \n   * @method mergeScale\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeScale: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * Merges scale base based on the input, new options, and the current scale \n   * base.\n   * \n   * @method mergeScaleBase\n   * @param {String} attr\n   * @param {T} current\n   * @param {Factory} factory\n   * @return {T}\n   */\n  mergeScaleBase: function(attr, current, factory)\n  {\n    var calc = factory.attribute( attr ).calculator;\n    var parseFunction = function(value, defaultValue) {\n      return calc.parse( value, defaultValue );\n    };\n\n    return this.mergeFirst( attr, current, parseFunction, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * Returns the first available option from input, new options, old options,\n   * and the current value.\n   * \n   * @method mergeFirst\n   * @param {String} attr\n   * @param {T} current\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} specifics\n   * @return {T}\n   */\n  mergeFirst: function(attr, current, parseOptionFunction, option, specifics)\n  {\n    return parseOptionFunction( anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] ), current );\n  },\n\n  /**\n   * Merges a number by returning the first occurrence from input, new options,\n   * old options, and the current value.\n   * \n   * @method mergeNumber\n   * @param {String} attr\n   * @param {Number} current\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} optionAdd\n   * @param {String} optionScale\n   * @param {String} specifics\n   * @return {Number}\n   */\n  mergeNumber: function(attr, current, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] );\n    var base = parseOptionFunction( baseRaw, current );\n    var add = parseOptionFunction( anim8.coalesce( this.newOptions[ optionAdd ], this.oldOptions[ optionAdd ] ), 0 );\n    var scale = anim8.coalesce( this.newOptions[ optionScale ], this.oldOptions[ optionScale ], 1 );\n\n    return (base + add) * scale;\n  }\n\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n *\n * @class ParserDeltas\n * @constructor\n * @extends Parser\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var deltas = animation.deltas;\n    var values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      var valueCount = 0;\n      \n      for (var attr in values)\n      {\n        valueCount++; \n      }\n      \n      deltas = [];\n      \n      for (var i = 0; i < valueCount; i++)\n      {\n        deltas[i] = i / (valueCount - 1);\n      }\n    }\n    if ( anim8.isArray( deltas ) )\n    {\n      var deltaObject = {};\n      \n      for (var attr in values)\n      {\n        deltaObject[attr] = deltas;  \n      }\n      \n      deltas = deltaObject;\n    }\n    \n    for (var attr in values)\n    {\n      var value = values[ attr ];\n      var attribute = factory.attribute( attr );\n      \n      for (var k = 0; k < value.length; k++)\n      {\n        value[k] = attribute.parse( value[k] );\n      }\n\n      var path      = new anim8.PathDelta( attr, attribute.calculator, values[ attr ], deltas[ attr ] );\n      var event     = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['values'] = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n *\n * @class ParserFinal\n * @constructor\n * @extends Parser\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n    var values = animation.final;\n    \n    for (var attr in values)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] );\n      var delay      = anim8.delay( helper.parseDelay( attr ) );\n      var duration   = anim8.duration( helper.parseDuration( attr ) );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.PathPoint( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing(), delay + duration, 0, 0, 1, scale, scaleBase, false, this );\n      \n      attrimatorMap.put( attr, event );\n    }\n  },\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var factory = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n      var attr = e.attribute;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.delay     = helper.mergeDelay( attr, e.delay ) + helper.mergeDuration( attr, e.duration );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory ); \n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['final'] = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n *\n * @class ParserInitial\n * @constructor\n * @extends Parser\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays\n    \n    var factory    = anim8.factory( animation.factory );\n    var values     = animation.initial;\n    \n    for (var attr in values)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = helper.parseDelay( attr );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.PathPoint( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing(), delay, 0, 0, 1, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n    }\n  },\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n      var attr = e.attribute;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      e.delay     = helper.mergeDelay( attr, e.delay );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['initial'] = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n *\n * @class ParserKeyframe\n * @constructor\n * @extends Parser\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    var easings = animation.easings || {};\n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) \n      {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n        \n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n    \n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = helper.parseDuration( attr );\n      var delay     = helper.parseDelay( attr );\n      var sleep     = helper.parseSleep( attr );\n      var offset    = helper.parseOffset( attr );\n      var repeat    = helper.parseRepeat( attr );\n      var scale     = helper.parseScale( attr );\n      var scaleBase = helper.parseScaleBase( attr );\n      var path      = new anim8.PathKeyframe( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new anim8.Event( attr, path, duration, teasing, delay, sleep, offset, repeat, scale, scaleBase, true, this );\n\n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser['keyframe'] = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n *\n * @class ParserTweenTo\n * @constructor\n * @extends Parser\n */\nanim8.ParserTweenTo = function()\n{\n  \n};\n\n// ParserTweenTo extends anim8.Parser()\nanim8.override( anim8.ParserTweenTo.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n\n    for (var attr in tweenTo)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, value );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * A parser which generates attrimators which tween from the current value to \n * the given values.\n *\n * **Examples:**\n * \n *     animator.play({\n *      tweenTo: {\n *       opacity: 1.0,       // absolute value\n *       left: '+40'         // 40 more units from current value  \n *      }\n *     });\n * \n *\n * @property {ParserTweenTo} tweenTo\n * @for anim8.parser\n */\nanim8.parser['tweenTo'] = new anim8.ParserTweenTo();\n","\n/**\n * Instantiates a new parser for the 'tweenFrom' animation type.\n *\n * @class ParserTweenFrom\n * @constructor\n * @extends Parser\n */\nanim8.ParserTweenFrom = function()\n{\n  \n};\n\n// ParserTweenFrom extends anim8.Parser()\nanim8.override( anim8.ParserTweenFrom.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenFrom  = animation.tweenFrom;\n\n    for (var attr in tweenFrom)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenFrom[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, value, anim8.computed.current );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenFrom'] = new anim8.ParserTweenFrom();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n *\n * @class ParserMove\n * @constructor\n * @extends Parser\n */\nanim8.ParserMove = function()\n{\n  \n};\n\n// ParserMove extends anim8.Parser()\nanim8.override( anim8.ParserMove.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var move       = animation.move;\n\n    for (var attr in move)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, anim8.computed.relative( value ) );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['move'] = new anim8.ParserMove();\n","\n/**\n * Instantiates a new parser for the 'springs' animation type.\n *\n * @class ParserSpring\n * @constructor\n * @extends Parser\n */\nanim8.ParseSpring = function()\n{\n  \n};\n\n// ParseSpring extends anim8.Parser()\nanim8.override( anim8.ParseSpring.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var springs    = animation.springs;\n\n    for (var attr in springs)\n    {\n      var spring     = springs[ attr ];\n\n      if ( !anim8.isDefined( spring.attribute ) )\n      {\n        spring.attribute = attr;\n      }\n\n      var parsed = anim8.spring( spring );\n      \n      if ( parsed !== false )\n      {\n        parsed.parser = this;\n\n        attrimatorMap.put( attr, parsed );  \n      }\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['springs'] = new anim8.ParseSpring();\n","\n/**\n * Instantiates a new parser for the 'physics' animation type.\n *\n * @class ParserPhysics\n * @constructor\n * @extends Parser\n */\nanim8.ParsePhysics = function()\n{\n  \n};\n\n// ParsePhysics extends anim8.Parser()\nanim8.override( anim8.ParsePhysics.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var physics    = animation.physics;\n\n    for (var attr in physics)\n    {\n      var physic    = physics[ attr ];\n\n      var attrimator = new anim8.Physics(\n        attr, \n        this, \n        physic.calculator, \n        anim8.coalesce( physic.position, true ), \n        physic.velocity, \n        physic.acceleration, \n        physic.terminal,\n        physic.stopAt\n      );\n\n      attrimatorMap.put( attr, attrimator );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['physics'] = new anim8.ParsePhysics();\n","\n/**\n * Instantiates a new parser for the 'travel' animation type.\n *\n * @class ParserTravel\n * @constructor\n * @extends Parser\n */\nanim8.ParserTravel = function()\n{\n  \n};\n\n// ParserTravel extends anim8.Parser()\nanim8.override( anim8.ParserTravel.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var travel     = animation.travel;\n\n    /**\n     * The computed function which returns a function which returns a value pointing\n     * to a given target given the current position of the animator.\n     * \n     * @param  {Number}\n     * @param  {any}\n     * @param  {Number}\n     * @return {Function}\n     */\n    var pointing = function(amount, target, epsilon, subtractVelocity)\n    {\n      var pointingFunction = function(attrimator, animator)\n      {\n        var attribute = animator.getAttribute( attrimator.attribute );\n        var calc = attribute.calculator;\n        var targetValue = anim8.isComputed( target ) ? target( attrimator, animator ) : target;\n        var temp = calc.create();\n\n        return function()\n        {\n          var position   = attrimator.position;\n          var current    = calc.copy( temp, anim8.resolve( targetValue ) );\n          var difference = calc.sub( current, position );\n          var distance   = calc.distance( difference, calc.ZERO );\n\n          if ( distance < epsilon )\n          {\n            attrimator.stopIn( 0 );\n          }\n          else\n          {\n            difference = calc.scale( difference, amount / distance );\n          }\n          \n          if ( subtractVelocity )\n          {\n            difference = calc.sub( difference, attrimator.resolveVelocity() );\n          }\n\n          return difference;\n        };\n      };\n\n      pointingFunction.computed = true;\n\n      return pointingFunction;\n    };\n\n    for (var attr in travel)\n    {\n      var traveling     = travel[ attr ];\n      var attribute     = factory.attribute( attr );\n      var from          = attribute.parse( anim8.coalesce( traveling.from, true ) );\n      var to            = attribute.parse( anim8.coalesce( traveling.to, true ) );\n      var velocity      = anim8.number( traveling.velocity, 0 );\n      var acceleration  = anim8.number( traveling.acceleration, 0 );\n      var terminal      = anim8.number( anim8.coalesce( traveling.terminal, traveling.velocity ), Number.POSITIVE_INFINITY );\n      var epsilon       = anim8.number( traveling.epsilon, 0.001 );\n\n      if ( acceleration !== 0 )\n      {\n        acceleration = pointing( acceleration, to, epsilon, true );\n      }\n\n      if ( velocity !== 0 )\n      {\n        velocity = pointing( velocity, to, epsilon, false );\n      }\n\n      var traveler = new anim8.Physics(\n        attr,\n        this,\n        attribute.calculator,\n        from,\n        velocity,\n        acceleration,\n        terminal\n      );\n      \n      attrimatorMap.put( attr, traveler );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['travel'] = new anim8.ParserTravel();\n","\n\n/**\n * Returns a factory for the given subject and optionally throws an error if no\n * factory exists.\n *\n * @method anim8.factoryFor\n * @for Core\n * @param {Any} subject\n * @param {Boolean} [optional]\n * @return {Factory}\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n *\n * @method anim8.factory\n * @for Core\n * @param {String|Factory} [factory]\n * @return {Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory['default'];\n};\n\n/**\n * A factory creates Animator instances for subjects.\n *\n * @class Factory\n * @constructor\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   *\n   * @method is\n   * @param  {Any} subject\n   * @return {Boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   *\n   * @method animatorFor\n   * @param  {Any} subject\n   * @return {Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   *\n   * @method animatorsFor\n   * @param {Any} subject\n   * @param {Array} animators\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   *\n   * @method destroy\n   * @param {Animator} animator\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute. An attribute\n   * descriptor is an object with at least the following properties:\n   *\n   * - `name` = the name of the attribute (same as `attr`)\n   * - `calculatorName` = the name of the calculator for the attribute\n   * - `calculator` = the calculator for the attribute\n   * - `defaultValue` = the default value for the attribute\n   * - `parse` = a method to pass a value and have the calculator parse it and\n   *             return the defaultValue if it was invalid\n   * - `cloneDefault` = a method which returns a clone of the default value\n   *\n   * @method attribute\n   * @param {String} attr\n   * @return {Object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n *\n * @class FactoryObject\n * @constructor\n * @extends Factory\n */\nanim8.FactoryObject = function()\n{\n  this.priority = 0;\n  this.attributes = {};\n};\n\nanim8.override( anim8.FactoryObject.prototype = new anim8.Factory(),\n{\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;      \n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory['default'] = anim8.factory['object'] = new anim8.FactoryObject();\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {Object|String} attr\n * @return {Object}\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.object.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute['default'];\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute['default']                 = {defaultValue: 0};\n","\n/**\n * A factory for plain objects.\n */\nanim8.FactoryPixi = function()\n{\n  this.priority = 3;\n  this.attributes = {};\n};\n\nanim8.override( anim8.FactoryPixi.prototype = new anim8.Factory(),\n{\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isArray( subject );\n  },\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.AnimatorPixi( subject );\n      animator.factory = this;      \n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.pixi.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n      var dynamicName = attribute.dynamic;\n      var dynamic = anim8.pixi.dynamic( dynamicName );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.dynamicName = dynamicName;\n      attribute.dynamic = dynamic;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory['pixi'] = new anim8.FactoryPixi();\n\nanim8.AnimatorPixi = function( subject )\n{\n  this.reset( subject );\n  this.dynamics = new anim8.FastMap();\n};\n\nanim8.override( anim8.AnimatorPixi.prototype = new anim8.Animator(),\n{\n  placeAttrimator: function( attrimator )\n  {\n    anim8.fn.placeAttrimator.apply( this, arguments );\n    \n    // Place any dynamic function on this animator.\n    var attr = attrimator.attribute;\n    var attribute = this.getAttribute( attr );\n    var dynamic = attribute.dynamic;\n\n    if ( dynamic )\n    {\n      this.dynamics.put( attr, dynamic );\n    }\n\n    return this;\n  },\n  apply: function()\n  {\n    // If a dynamic attribute has been updated, call the dynamic function and\n    // mark the attribute as not needing to be updated.\n    for (var attr in this.frame)\n    {\n      var dynamic = this.dynamics.get( attr );\n\n      if ( this.updated[ attr ] && dynamic )\n      {\n        dynamic( this.frame[ attr ], this.subject );\n\n        this.updated[ attr ] = false;\n      }\n    }\n\n    // Call the parent apply\n    anim8.fn.apply.apply( this, arguments );\n\n    return this;\n  }\n});\n\n/**\n * =============================================================================\n * Attributes defined in Pixi.js:\n * =============================================================================\n * AbstractFilter: \n *    padding\n * AsciiFilter: \n *    size\n * DisplayObjectContainer: \n *    alpha, height, pivot(2d), position(2d), rotation, scale(2d), width, x, y\n * BlurFilter: \n *    blur, blurX, blurY\n * Circle: \n *    radius\n * ColorStepFilter: \n *    step\n * DisplacementFilter: \n *    offset(2d)\n * DotScreenFilter: \n *    angle\n * Graphics: \n *    blendMode, boundsPadding, fillAlpha, lineColor(rgba), lineWidth, tint(rgba)\n * GrayFilter: \n *    gray\n * InvertFilter: \n *    invert\n * Matrix: \n *    a, b, c, d, tx, ty\n * NoiseFilter: \n *    noise\n * PixelateFilter: \n *    size\n * SepiaFilter: \n *    sepia\n * SmartBlurFilter: \n *    blur\n * Sprite: \n *    anchor(2d)\n * Text.style: \n *    fill(rgba), stroke, strokeThickness, wordWrapWidth, dropShadowAngle, dropShadowDistance\n * TilingSprite: \n *    tilePosition, tileScale, tileScaleOffset\n * TiltShiftFilter: \n *    end, gradientBlur, start\n */\n\n/**\n * =============================================================================\n * Dynamic Attributes defined in anim8js\n * =============================================================================\n * number: scaleX, scaleY, pivotX, pivotY, offsetX, offsetY, anchorX, anchorY\n * 2d: dimension\n * rgba: \n */\n\nanim8.pixi = {};\n\nanim8.pixi.getRGB = function(color)\n{\n  var r = anim8.clamp( Math.floor( color.r ), 0, 255 );\n  var g = anim8.clamp( Math.floor( color.g ), 0, 255 );\n  var b = anim8.clamp( Math.floor( color.b ), 0, 255 );\n\n  return (r << 16) | (g << 8) | b;\n};\n\nanim8.pixi.attribute = function(attr)\n{\n  if ( anim8.isString( attr ) && attr in anim8.pixi.attribute )\n  {\n    return anim8.pixi.attribute[ attr ];\n  }\n\n  return anim8.pixi.attribute['default'];\n}\n\n// Attributes\nanim8.pixi.attribute['default']      = {defaultValue: 0};\nanim8.pixi.attribute.padding         = {defaultValue: 0};\nanim8.pixi.attribute.sizeScalar      = {defaultValue: 0, dynamic: 'sizeScalar'};\nanim8.pixi.attribute.alpha           = {defaultValue: 1};\nanim8.pixi.attribute.height          = {defaultValue: 0};\nanim8.pixi.attribute.pivot           = {defaultValue: 0, calculator: '2d'};\nanim8.pixi.attribute.pivotX          = {defaultValue: 0, dynamic: 'pivotX'};\nanim8.pixi.attribute.pivotY          = {defaultValue: 0, dynamic: 'pivotY'};\nanim8.pixi.attribute.position        = {defaultValue: 0, calculator: '2d'};\nanim8.pixi.attribute.rotation        = {defaultValue: 0};\nanim8.pixi.attribute.scale           = {defaultValue: 1, calculator: '2d'};\nanim8.pixi.attribute.scaleX          = {defaultValue: 1, dynamic: 'scaleX'};\nanim8.pixi.attribute.scaleX          = {defaultValue: 1, dynamic: 'scaleY'};\nanim8.pixi.attribute.width           = {defaultValue: 0};\nanim8.pixi.attribute.dimension       = {defaultValue: 0, calculator:'2d', dynamic: 'dimension'};\nanim8.pixi.attribute.x               = {defaultValue: 0};\nanim8.pixi.attribute.y               = {defaultValue: 0};\nanim8.pixi.attribute.blur            = {defaultValue: 2};\nanim8.pixi.attribute.blurX           = {defaultValue: 2};\nanim8.pixi.attribute.blurY           = {defaultValue: 2};\nanim8.pixi.attribute.radius          = {defaultValue: 0};\nanim8.pixi.attribute.step            = {defaultValue: 0};\nanim8.pixi.attribute.offset          = {defaultValue: 0, calculator: '2d'};\nanim8.pixi.attribute.offsetX         = {defaultValue: 0, dynamic: 'offsetX'};\nanim8.pixi.attribute.offsetY         = {defaultValue: 0, dynamic: 'offsetY'};\nanim8.pixi.attribute.angle           = {defaultValue: 0};\nanim8.pixi.attribute.blendMode       = {defaultValue: 0};\nanim8.pixi.attribute.boundsPadding   = {defaultValue: 0};\nanim8.pixi.attribute.fillAlpha       = {defaultValue: 1};\nanim8.pixi.attribute.lineColor       = {defaultValue: anim8.color(), calculator: 'rgba', dynamic: 'lineColor'};\nanim8.pixi.attribute.lineWidth       = {defaultValue: 0};\nanim8.pixi.attribute.tint            = {defaultValue: anim8.color(), calculator: 'rgb', dynamic: 'tint'};\nanim8.pixi.attribute.gray            = {defaultValue: 1};\nanim8.pixi.attribute.invert          = {defaultValue: 1};\nanim8.pixi.attribute.a               = {defaultValue: 1};\nanim8.pixi.attribute.b               = {defaultValue: 0};\nanim8.pixi.attribute.c               = {defaultValue: 0};\nanim8.pixi.attribute.d               = {defaultValue: 1};\nanim8.pixi.attribute.tx              = {defaultValue: 0};\nanim8.pixi.attribute.ty              = {defaultValue: 0};\nanim8.pixi.attribute.noise           = {defaultValue: 0.5};\nanim8.pixi.attribute.size            = {defaultValue: 10, calculator: '2d'};\nanim8.pixi.attribute.sepia           = {defaultValue: 1};\nanim8.pixi.attribute.anchor          = {defaultValue: 0, calculator: '2d'};\nanim8.pixi.attribute.fill            = {defaultValue: anim8.color(), calculator: 'rgba', dynamic: 'fill'};\nanim8.pixi.attribute.stroke          = {defaultValue: anim8.color(), calculator: 'rgba', dynamic: 'stroke'};\nanim8.pixi.attribute.strokeThickness = {defaultValue: 0};\nanim8.pixi.attribute.wordWrapWidth   = {defaultValue: 100};\nanim8.pixi.attribute.dropShadowAngle = {defaultValue: Math.PI / 4};\nanim8.pixi.attribute.dropShadowDistance = {defaultValue: 5};\nanim8.pixi.attribute.dropShadowColor = {defaultValue: anim8.color(0,0,0), calculator:'rgba', dynamic: 'dropShadowColor'};\nanim8.pixi.attribute.tilePosition    = {defaultValue: 0, calculator: '2d'};\nanim8.pixi.attribute.tileScale       = {defaultValue: 1, calculator: '2d'};\nanim8.pixi.attribute.tileScaleOffset = {defaultValue: 1, calculator: '2d'};\nanim8.pixi.attribute.start           = {defaultValue: 0};\nanim8.pixi.attribute.end             = {defaultValue: 0};\nanim8.pixi.attribute.gradientBlur    = {defaultValue: 0};\n\n// Dynamic Attributes\nanim8.pixi.dynamic = function(nm)\n{\n  if ( anim8.isString( nm ) && nm in anim8.pixi.dynamic )\n  {\n    return anim8.pixi.dynamic[ nm ];\n  }\n\n  return false;\n};\n\nanim8.pixi.dynamic.scaleX = function(attr, subject)\n{\n  subject.scale.x = attr;\n};\n\nanim8.pixi.dynamic.scaleY = function(attr, subject)\n{\n  subject.scale.y = attr;\n};\n\nanim8.pixi.dynamic.pivotX = function(attr, subject)\n{\n  subject.pivot.x = attr;\n};\n\nanim8.pixi.dynamic.pivotY = function(attr, subject)\n{\n  subject.pivot.y = attr;\n};\n\nanim8.pixi.dynamic.offsetX = function(attr, subject)\n{\n  subject.offset.x = attr;\n};\n\nanim8.pixi.dynamic.offsetY = function(attr, subject)\n{\n  subject.offset.y = attr;\n};\n\nanim8.pixi.dynamic.dimension = function(attr, subject)\n{\n  subject.width = attr.x;\n  subject.height = attr.y;\n};\n\nanim8.pixi.dynamic.color = function(attr, subject)\n{\n  subject.color = anim8.color.format( attr );\n};\n\nanim8.pixi.dynamic.lineColor = function(attr, subject)\n{\n  subject.lineColor = anim8.pixi.getRGB( attr );\n};\n\nanim8.pixi.dynamic.fill = function(attr, subject)\n{\n  subject.fill = anim8.color.format( attr );\n};\n\nanim8.pixi.dynamic.stroke = function(attr, subject)\n{\n  subject.stroke = anim8.color.format( attr );\n};\n\nanim8.pixi.dynamic.dropShadowColor = function(attr, subject)\n{\n  subject.dropShadowColor = anim8.color.format( attr );\n};\n\nanim8.pixi.dynamic.tint = function(attr, subject)\n{\n  subject.tint = anim8.pixi.getRGB( attr );\n};\n\nanim8.pixi.dynamic.sizeScalar = function(attr, subject)\n{\n  subject.size = attr;\n};"],"sourceRoot":"/source/"}