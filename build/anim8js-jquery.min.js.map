{"version":3,"sources":["anim8js-core.js","anim8js-fast-map.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-dynamic.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-combo.js","anim8js-attrimator.js","anim8js-attrimator-map.js","anim8js-event.js","anim8js-oncer.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-physics.js","anim8js-animation.js","anim8js-transition.js","anim8js-options.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-and.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tweenTo.js","anim8js-parser-tweenFrom.js","anim8js-parser-move.js","anim8js-parser-queue.js","anim8js-parser-springs.js","anim8js-parser-physics.js","anim8js-parser-travel.js","anim8js-parser-path.js","anim8js-factory.js","anim8js-object.js","anim8js-dom-core.js","anim8js-dom-property.js","anim8js-dom-attribute.js","anim8js-dom-animator.js","anim8js-jquery.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","defaults","duration","easing","teasing","delay","sleep","repeat","scale","offset","transitionTime","transitionOutro","transitionIntro","transitionEasing","transitionGranularity","transitionLookup","cache","cacheOptions","cacheTransitions","noOptions","noTransition","frameRate","pauseTime","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isBoolean","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","trim","String","prototype","replace","isEmpty","prop","toArray","split","props","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","number","value","constant","variable","resolve","clamp","v","max","delegate","functionName","returning","RETURN_THIS","array","this","$","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","target","onListeners","$this","property","events","callback","context","on","offListeners","listeners","event","eventListeners","k","splice","deleteProperty","obj","off","$on","$once","triggerListeners","argument","clear","slice","trigger","FastMap","map","reset","putMap","put","values","keys","indices","key","get","remove","index","removeAt","lastValue","pop","lastKey","indexOf","has","hasOverlap","size","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","easingType","pair","e","t","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","yoyo","mirror","reverse","flip","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","funcOrName","func","attrimator","attr","attribute","getAttribute","frame","calculator","clone","cloneDefault","relativeAmount","mask","isComputed","relativeFunction","calc","current","mul","add","randomSelection","randomFunction","selected","ZERO","Path","compute","create","resolvedMin","resolvedMax","composite","partial","subattribute","spread","attributes","Calculator","createConstants","ONE","INFINITY","adds","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","lengthSq","isValid","isZero","isEqual","dot","distSq","setLength","isRelative","getRelativeAmount","z","CalculatorNumber","defaultValue","relative","amountScale","ab","epsilon","Calculator2d","y","cx","cy","rx","ry","ix","iy","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Calculator3d","cz","rz","iz","dz","CalculatorQuaternion","angle","ra","ia","da","CalculatorRGB","rr","rg","rb","ir","ig","ib","dr","dg","db","CalculatorRGBA","path","type","name","points","hasComputed","ps","replaceComputed","resolvePoint","isLinear","granularity","prev","deltadelta","temp","Tween","PathCubic","p0","p1","p2","p3","d1","d2","d3","i1","i3","PathQuadratic","PathDelta","deltas","ds","d0","pd","PathJump","PathCompiled","pointCount","PathKeyframe","easings","ea","defaultEasing","PathCombo","paths","uniform","lengthGranularity","lengthTotal","lengths","lengthCurrent","cachedLength","previousDelta","Attrimator","parser","startTime","elapsed","stopTime","paused","cycle","prestart","finished","prestartNext","overrideNext","totalTime","startCycle","setTime","updated","finish","update","getElapsed","stopIn","milliseconds","nopeat","valueAt","timeRemaining","isInfinite","pause","resume","totalPausedTime","isPaused","isFinished","getParser","queue","parseValue","AttrimatorMap","queueMap","onNewAttribute","maxRemaining","attrimators","existing","unqueueAt","applyCycle","nextCycle","currentDepth","nextDepth","iterate","depth","EventState","DELAYED","ANIMATING","SLEEPING","FINISHED","Event","scaleBase","hasInitialState","computeValue","baseValue","applyValue","newRepeat","ceil","state","oldState","newState","iteration","fromOptions","options","Oncer","applied","getValue","spring","Spring","set","rest","position","velocity","gravity","finishOnRest","resolveRest","updateVelocity","dt","MAX_DT","starting","EPSILON","SpringLinear","damping","stiffness","temp0","temp1","SpringDistance","Physics","acceleration","terminal","resolveVelocity","resolveAcceleration","initalPosition","vel","acc","pos","usePosition","animation","hasOptions","Animation","newAttrimators","merge","attrimatorsFor","helper","ParserHelper","parserName","saved","cacheIt","animationsQueued","animationsMerged","base","j","animationString","animationSplit","parsedAnimation","parsedOptions","hasParsedOptions","parsedAttrimators","save","attrimatorMap","transition","originalInput","transitionArray","part","first","charAt","intro","substring","outro","lookup","parseProperty","propertyAdd","propertyScale","fn","attrimatorsAdded","active","cycleCurrent","cycleNext","cycleEnded","newCycle","applyCurrentCycle","endCurrentCycle","restore","applyInitialState","preupdate","aa","setDefault","wasFinished","minCycle","placeAttrimator","trimAttrimators","activate","deactivate","destroy","play","all","playAttrimators","finishNotPresent","queueAttrimators","transitionAttrimators","curr","pastLookahead","pastVelocity","pastNegativeVelocity","past","outTime","outPoint","outNext","inTime","inPoint","inNext","outVelocity","outPerMillis","inVelocity","inPerMillis","compiled","lastPoint","totalDistance","distances","requiredTime","timeDelta","transitionEvent","tweenTo","tweenManyTo","targets","tweenFrom","tweenManyFrom","startings","tween","starts","ends","tweenMany","move","moveMany","amounts","ref","request","follow","resulting","stop","unset","hasAttrimators","getSubject","wrapper","invoke","args","DeferAnimator","onCycleStart","onCycleEnd","fill","at","each","iterator","filter","filterer","alive","getSubjects","last","mid","e0","e1","animating","running","requestRun","run","sequence","Sequence","handleFinished","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","id","setTimeout","maxDelay","createAttrimators","template","delayOffset","remaining","Parser","ID","newOptions","oldOptions","mergeAttrimator","mergeEasing","mergeRepeat","mergeDelay","mergeSleep","mergeDuration","mergeOffset","mergeScale","mergeScaleBase","prepareSpecifics","specifics","parseEasing","parseFirst","parseRepeat","parseNumber","parseDelay","parseSleep","parseDuration","parseOffset","parseScale","parseScaleBase","option","parseEvent","parseOptionFunction","optionAdd","optionScale","baseRaw","mergeFirst","mergeNumber","specific","ParserAnd","and","ParserDeltas","deltaObject","valueMax","ParserFinal","ParserInitial","initial","oncer","ParserKeyframe","kframes","keyframe","sort","from","half","to","times","maxTime","order","pathEasings","ParserTweenTo","ParserTweenFrom","ParserMove","ParserQueue","ParseSpring","springs","ParsePhysics","physics","physic","stopAt","ParserTravel","travel","pointing","subtractVelocity","pointingFunction","targetValue","difference","traveling","traveler","ParserPath","pathDefinition","parsedPath","highestPriorityFactory","factoryName","is","priority","Factory","FactoryObject","$animator","object","calculatorName","FactoryDom","cached","ids","elementAttribute","animatorId","AnimatorDom","setAttribute","dom","propertyName","defaultUnit","style","hyphenated","hyphenize","str","currentStyle","document","defaultView","getComputedStyle","getPropertyValue","prefix","createElement","prefixes","convert","toPixels","baseUnit","defaultRate","body","div","appendChild","width","pixels","offsetWidth","removeChild","getFontSize","notUnit","fontSize","getConverterScale","px","relativeTo","variables","parentWidth","parentNode","scrollWidth","parentHeight","scrollHeight","height","offsetHeight","parentFontSize","htmlFontSize","htmlElement","getElementsByTagName","rad","PI","given","converter","toUnit","fromUnit","converter1","converter2","combined","anim","css","clearedValue","styles","nm","converted","units","factoryDerivable","deriver","factoryColor","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","outlineWidth","textIndent","borderSpacing","lineHeight","letterSpacing","zIndex","backgroundColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","borderColor","outlineColor","minWidth","maxWidth","minHeight","maxHeight","offsetTop","offsetLeft","visibility","backface","transformOrigin","keywords","setOriginAttribute","setOrigin","origin","originZ","valueOr","transform","desiredUnit","getter1d","getter2d","getter3d","getter4d","setter1d","setter2d","setter3d","setter4d","combine","ax","ay","bx","by","ascl","bscl","place1d","place2d","valueX","valueY","relativeToX","relativeToY","place3d","valueZ","relativeToZ","place4d","valueRotate","relativeToRotate","regexes","translate","translate3d","translateX","translateY","translateZ","scale3d","scaleX","scaleY","scaleZ","rotate","skew","skewX","skewY","rotate3d","rotateX","rotateY","rotateZ","matrix","getters","setters","attrs","matrixParsed","tx","ty","atan2","transforms","join","opacity","shadow","parsePart","updating","parts","inset","shift","blur","shadowPosition","parsedX","parsedY","shadowInset","shadowColor","shadowBlur","shadowSpread","textShadow","textShadowPosition","textShadowColor","textShadowBlur","textShadowSpread","grayscale","sepia","saturate","hueRotate","invert","brightness","contrast","patterns","RegExp","filters","ccx","ccy","centerX","centerY","preset","rw","rh","orbit","DEGREE_TO_RADIAN","RADIAN_TO_DEGREE","ox","oy","orbitOffset","cunit","cox","coy","orbitX","orbitY","originUnit","originX","originY","outlineOffset","saturation","textShadowX","textShadowY","shadowX","shadowY","properties","propertiesPreset","attributeToProperty","styled","stylesUpdated","presets","getStyles","flash","source","other","subproperty","applyProperties","convertExisting","convertExistingMany","jQueryFactory","jQuery","cloner","removeAttr","dataPlay","animationAttribute","animationText","data","dataQueue","dataTransition","html","wrapCharacters","find","tagName","tagBegin","tagEnd","contents","text","previousSpace","space","outer","outerHTML","firstChild","quotes"],"mappings":"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","file":"anim8js-jquery.min.js","sourcesContent":["\n/**\n * @module anim8\n * @class Core\n */\n\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately. If the subject can't be\n * animated then false is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.factoryFor:method\"}}{{/crossLink}}\n * \n * @param {Any} subject\n * @return {Animator|false}\n * @method anim8\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {Array} subject\n * @return {Animators}\n * @method anim8s\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n/**\n * The default values for anim8js properties.\n *\n * @property {Object} anim8.defaults\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   *\n   * @property {Number} duration\n   * @for anim8.defaults\n   * @default 1000\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @property {String|Function|Array} easing\n   * @for anim8.defaults\n   * @default 'ease'\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @property {String|Function|Array} teasing\n   * @for anim8.defaults\n   * @default 'linear'\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @property {Number} delay\n   * @for anim8.defaults\n   * @default 0\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @property {Number} sleep\n   * @for anim8.defaults\n   * @default 0\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @property {Number} repeat\n   * @for anim8.defaults\n   * @default 1\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @property scale\n   * @for anim8.defaults\n   * @default 1.0\n   * @type {Number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default animation offset in milliseconds.\n   *\n   * @property {Number} offset\n   * @for anim8.defaults\n   * @default 0\n   */\n  offset: 0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @property {Number} transitionTime\n   * @for anim8.defaults\n   * @default 500\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition outroduction time in milliseconds.\n   * \n   * @property {Number} transitionOutro\n   * @for anim8.defaults\n   * @default 100\n   */\n  transitionOutro: 100,\n\n  /**\n   * The default transition introduction time in milliseconds.\n   * \n   * @property {Number} transitionIntro\n   * @for anim8.defaults\n   * @default 100\n   */\n  transitionIntro: 100,\n\n  /**\n   * The default transition easing when none is specified.\n   * \n   * @property {String|Function|Array} transitionEasing\n   * @for anim8.defaults\n   * @default 'linear'\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * The default transition granularity. This is used for smooth transitions to\n   * provide a smooth transition from the outro velocity to the intro velocity,\n   * the cubic or quadratic path between the two is a curve with unknown length\n   * so the length needs to be calculated using a maximum number of points to\n   * calculate along the path - summing the distances between the consecutive points.\n   * \n   * @property {Number} transitionGranularity\n   * @for anim8.defaults\n   * @default 0\n   */\n  transitionGranularity: 0,\n\n  /**\n   * TODO\n   * \n   * @property {Number} transitionLookup\n   * @for anim8.defaults\n   * @default 10\n   */\n  transitionLookup: 10,\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}}\n   * \n   * @property {Boolean} cache\n   * @for anim8.defaults\n   * @default false\n   */\n  cache: false,\n\n  /**\n   * Whether parsed options are cached whenever possible. Options that can be\n   * cached must be strings.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @property {Boolean} cacheOptions\n   * @for anim8.defaults\n   * @default false\n   */\n  cacheOptions: false,\n\n  /**\n   * Whether parsed transitions are cached whenever possible. Transitions that can be\n   * cached must be strings.\n   * \n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}}\n   * \n   * @property {Boolean} cacheTransitions\n   * @for anim8.defaults\n   * @default false\n   */\n  cacheTransitions: false,\n\n  /**\n   * The value to return when options could not be parsed from input.\n   * \n   * @property {Object} noOptions\n   * @for anim8.defaults\n   * @default {}\n   */\n  noOptions: {},\n\n  /**\n   * The value to return when a transition could not be parsed from input.\n   * \n   * @property {Object} noTransition\n   * @for anim8.defaults\n   * @default {}\n   */\n  noTransition: {},\n\n  /**\n   * The target number of milliseconds between frames. This only applies if the\n   * browser doesn't support any of the requestAnimationFrame variations.\n   * \n   * @property {Number} frameRate\n   * @for anim8.defaults\n   * @default 33\n   */\n  frameRate: 16,\n\n  /**\n   * The number of milliseconds to pause between looping to let the UI react\n   * to user events.\n   *\n   * @property {Number} pauseTime\n   * @for anim8.defaults\n   * @default 5\n   */\n  pauseTime: 5\n\n};\n\n/**\n * @class Core\n */\n\n/**\n * A function that does nothing.\n * \n * @property anim8.noop\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n *\n * **Examples:**\n *\n *     anim8.isDefined( 0 );     // true\n *     anim8.isDefined( false ); // true\n *     anim8.isDefined();        // false\n * \n * @method anim8.isDefined\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n *\n * @method anim8.isFunction\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n *\n * **Examples:**\n *\n *     anim8.isNumber( 0 );     // true\n *     anim8.isNumber( -45.6 ); // true\n *     anim8.isNumber( true );  // false\n *     anim8.isNumber( '1' );   // false\n *     anim8.isNumber();        // false\n *\n * @method anim8.isNumber\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a boolean variable.\n *\n * **Examples:**\n *\n *     anim8.isBoolean( 0 );     // false\n *     anim8.isBoolean( -45.6 ); // false\n *     anim8.isBoolean( true );  // true\n *     anim8.isBoolean( false ); // true\n *     anim8.isBoolean( '1' );   // false\n *     anim8.isBoolean();        // false\n *\n * @method anim8.isBoolean\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isBoolean = function(x) \n{\n  return typeof x === 'boolean';\n};\n\n/**\n * Returns true if the given variable is a string.\n *\n * **Examples:**\n *\n *     anim8.isString( '' );    // true\n *     anim8.isString( '1' );   // true\n *     anim8.isString( 4.5 );   // false\n *     anim8.isString();        // false\n *\n * @method anim8.isString\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n *\n * **Examples:**\n *\n *     anim8.isArray( [] );     // true\n *     anim8.isArray( [4, 5] ); // true\n *     anim8.isArray( 4.5 );    // false\n *     anim8.isArray();         // false\n *\n * @method anim8.isArray\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object. Arrays are considered \n * objects.\n *\n * **Examples:**\n *\n *     anim8.isObject( {} );     // true\n *     anim8.isObject( [] );     // true\n *     anim8.isObject( 4.5 );    // false\n *     anim8.isObject();         // false\n *     anim8.isObject( null );   // false\n *\n * @method anim8.isObject\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object' && x !== null;\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n *\n * @method anim8.isElement\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n *\n * @method anim8.now\n * @return {Number}\n */\nanim8.now = (function() \n{\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * Returns the trimmed version of the given string. A trimmed string has no\n * whitespace in the beginning or end of it.\n *\n * **Examples:**\n *\n *     anim8.trim( 'x' );     // 'x'\n *     anim8.trim( '   x' );  // 'x'\n *     anim8.trim( 'x   ' );  // 'x'\n *     anim8.trim( '  x ' );  // 'x'\n *     anim8.trim( '    ' );  // ''\n * \n * @method anim8.trim\n * @param  {String} x\n * @return {String}\n */\nanim8.trim = (function()\n{ \n  if (String.prototype.trim) {\n    return function(x) {\n      return x.trim();\n    };\n  }\n  return function(x) {\n    return x.replace(/^([\\s]*)|([\\s]*)$/g, '');\n  };\n})();\n\n/**\n * Determines whether the given variable is empty.\n *\n * **Examples:**\n *\n *     anim8.isEmpty( '' );        // true\n *     anim8.isEmpty( 0 );         // true\n *     anim8.isEmpty( [] );        // true\n *     anim8.isEmpty( {} );        // true\n *     anim8.isEmpty( null );      // true\n *     anim8.isEmpty( true );      // true\n *     anim8.isEmpty( false );     // true\n *     anim8.isEmpty( 'x' );       // false\n *     anim8.isEmpty( 0.3 );       // false\n *     anim8.isEmpty( [0] );       // false\n *     anim8.isEmpty( {x:3} );     // false\n *\n * @method anim8.isEmpty\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Parses the given input and returns an array.\n *\n * **Examples:**\n *\n *     anim8.toArray();            // []\n *     anim8.toArray('a b');       // ['a b']\n *     anim8.toArray('a b', ' ');  // ['a', 'b']\n *     anim8.toArray({a:0,b:0});   // ['a', 'b']\n *     anim8.toArray(['a', 'b']);  // ['a', 'b']\n *     anim8.toArray(3.2);         // [3.2]\n *     anim8.toArray(true);        // [true]\n * \n * @param  {Any} x\n * @param  {String} [split]\n * @return {Array}\n */\nanim8.toArray = function( x, split )\n{\n  if ( anim8.isString( x ) )\n  {\n    return split ? x.split( split ) : [ x ];\n  }\n  else if ( anim8.isArray ( x ) )\n  {\n    return x;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var props = [];\n\n    for ( var prop in x )\n    {\n      props.push( prop );\n    }\n\n    return props;\n  }\n  else if ( anim8.isDefined( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or \n * object a new instance of that type is created where the values are copied as \n * well. All other types can't be copied (most likely because they're scalar) so\n * they are returned as-is.\n *\n * @method anim8.copy\n * @param {T} x\n * @return {T}\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding \n * overriding any existing properties.\n * \n * @method anim8.extend\n * @param  {Object} out\n * @return {Object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding \n * existing properties where necessary.\n * \n * @method anim8.override\n * @param  {Object} out\n * @return {Object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n *\n * **Examples:**\n *\n *     anim8.coalesce( 1, 2, 3 );           // 1\n *     anim8.coalesce( undefined, 2, 3 );   // 2\n *     anim8.coalesce();                    // undefined\n * \n * @method anim8.coalesce\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's \n * assumed to be milliseconds and is returned immediately. If a string is given\n * a unit is looked for to determine how to scale the number into milliseconds.\n * If the given time is invalid and returnOnInvalid is not given then zero is\n * returned.\n *\n * **Examples:**\n *\n *     anim8.time( 45 );       // 45\n *     anim8.time( 45.9 );     // 45\n *     anim8.time( -4.1 );     // -5\n *     anim8.time( '5ms' );    // 5\n *     anim8.time( '23' );     // 23\n *     anim8.time( '5c' );     // 500\n *     anim8.time( '5cs' );    // 500\n *     anim8.time( '5jiffy' ); // 833\n *     anim8.time( '5third' ); // 833\n *     anim8.time( '10s' );    // 10000\n *     anim8.time( '10sec' );  // 10000\n *     anim8.time( '1.5m' );   // 90000\n *     anim8.time( '1.5min' ); // 90000\n *     anim8.time( '0.4h' );   // 144000\n *     anim8.time( '0.4hr' );  // 144000\n *\n * @method anim8.time\n * @param {String|Number} time\n * @param {Any} [returnOnInvalid]\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/delay:property\"}}anim8.defaults.delay{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n *\n * @method anim8.delay\n * @param {String|Number} time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/sleep:property\"}}anim8.defaults.sleep{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n *\n * @method anim8.sleep\n * @param {String|Number} time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/duration:property\"}}anim8.defaults.duration{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n * \n * @method anim8.duration\n * @param {String|Number} time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses offset from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/offset:property\"}}anim8.defaults.offset{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n * \n * @method anim8.offset\n * @param {String|Number} time\n */ \nanim8.offset = function(time)\n{\n  return anim8.time( time, anim8.defaults.offset );\n};\n\n/**\n * Parses repeats from a string or number. If a valid repeat is not given then\n * `returnOnInvalid` is returned, if that is not given then\n * {{#crossLink \"anim8.defaults/repeat:property\"}}anim8.defaults.repeat{{/crossLink}}\n * is returned.\n *\n * **Examples:**\n *\n *     anim8.repeat( 5 );            // 5\n *     anim8.repeat( 'inf' );        // Infinity\n *     anim8.repeat( 'infinity' );   // Infinity\n *     anim8.repeat( 'infinite' );   // Infinity\n *     anim8.repeat( 'once' );       // 1\n *     anim8.repeat( 'twice' );      // 2\n *     anim8.repeat( 'thrice' );     // 3\n *     anim8.repeat( 'dozen' );      // 12\n *     anim8.repeat( 'random' );     // 4\n *     anim8.repeat( 'invalid', 6 ); // 6\n *     anim8.repeat( false, 7 );     // 7\n *     anim8.repeat();               // anim8.defaults.repeat\n *\n * @method anim8.repeat\n * @param {String|Number} time\n * @param {E} [returnOnInvalid]\n * @return {Number|E}\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses a number from the given input and if the input isn't a valid number\n * then returnOnInvalid is returned.\n *\n * **Examples:**\n *\n *     anim8.number( 5 );       // 5\n *     anim8.number( '5' );     // 5\n *     anim8.number( '5e4' );   // 50000\n *     anim8.number( 'x' );     // undefined\n *     anim8.number( 'x', 23 ); // 23\n * \n * @method anim8.number\n * @param {String|Number} value\n * @param {E} returnOnInvalid\n * @return {Number|E}\n */\nanim8.number = function(value, returnOnInvalid)\n{\n  var parsed = parseFloat( value );\n\n  return isNaN( parsed ) ? returnOnInvalid : parsed;\n};\n\n/**\n * Parses scale from a string or number.\n *\n * **See:** {{#crossLink \"Core/anim8.number:method\"}}anim8.number{{/crossLink}}\n * \n * @method anim8.scale\n * @param {String|Number} scale\n * @return {Number}\n */\nanim8.scale = function(scale)\n{\n  return anim8.number( scale, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * **Examples:**\n *\n *     anim8.constant( 5 );   // function() { return 5; }\n *\n * @method anim8.constant\n * @param {T} variable\n * @return {Function}\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Resolves the given variable. If the variable is a function the result is \n * returned.\n *\n * **Examples:**\n *\n *     anim8.resolve( 5 );                     // 5\n *     anim8.resolve( true );                  // true\n *     anim8.resolve( function(){return 7;} ); // 7\n * \n * @method anim8.resolve\n * @param  {Function|E} variable\n * @return {E}\n */\nanim8.resolve = function(variable)\n{\n  return anim8.isFunction( variable ) ? variable() : variable;\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n *\n * **Examples:**\n *\n *     anim8.clamp( 5, 1, 6 );   // 5\n *     anim8.clamp( 0, 1, 6 );   // 1\n *     anim8.clamp( 7, 1, 6 );   // 6\n * \n * @method anim8.clamp\n * @param  {Number} v\n * @param  {Number} min\n * @param  {Number} max\n * @return {Number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on \n * the first element.\n *\n * @method anim8.delegate\n * @param {String} functionName\n * @param {String} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      var array = this.$ || this;\n\n      for (var i = 0; i < array.length; i++) \n      {\n        array[i][functionName].apply( array[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var array = this.$ || this;\n      var results = [];\n    \n      for (var i = 0; i < array.length; i++)\n      {\n        results.push( array[i][functionName].apply( array[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      var array = this.$ || this;\n\n      return array.length === 0 ? undefined : array[0][functionName].apply( array[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      var array = this.$ || this;\n\n      for (var i = 0; i < array.length; i++)\n      {\n        if ( array[i][functionName].apply( array[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n *\n * @property RETURN_THIS\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n *\n * @property RETURN_RESULTS\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n *\n * @property RETURN_FIRST\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n *\n * @property RETURN_TRUE\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( event, [argument] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method anim8.eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nanim8.eventize = function(target)\n{\n  /**\n   * **See:** {{#crossLink \"Core/anim8.eventize:method\"}}{{/crossLink}}\n   * \n   * @class anim8.eventize\n   */\n\n  // Adds a listener to $this\n  var onListeners = function($this, property, events, callback, context)\n  {\n    var events = anim8.toArray( events, ' ' );\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for anim8.eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  target.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n\n    return this;\n  };\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for anim8.eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  target.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n\n    return this;\n  };\n  \n  // Removes a listener from an array of listeners.\n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n\n  // Deletes a property from the given object if it exists\n  var deleteProperty = function(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  };\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   * \n   * @method off\n   * @for anim8.eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  target.off = function(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !anim8.isDefined( events ) )\n    {\n      deleteProperty( this, '$on' );\n      deleteProperty( this, '$once' );\n    }\n    else\n    {\n      var events = anim8.toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !anim8.isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$on, events[i] );\n          deleteProperty( this.$once, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$on, events[i], callback );\n          offListeners( this.$once, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  };\n  \n  // Triggers listeneers for the given event\n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var max = eventListeners.length;\n     \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n        if ( eventListeners.length !== max )\n        {\n          listeners[ event ] = eventListeners.slice( max );  \n        }\n        else\n        {\n          delete listeners[ event ];  \n        }\n      }\n    }\n  };\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for anim8.eventize\n   * @param {String} event\n   * @param {Any} argument\n   * @chainable\n   */\n  target.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n\n    return this;\n  };\n};\n\n","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @param {FastMap|Object} map\n * @class FastMap\n * @constructor\n */\nanim8.FastMap = function(map)\n{\n  this.reset();\n\n  if ( map instanceof anim8.FastMap )\n  {\n    this.putMap( map );\n  }\n  else if ( anim8.isObject( map ) )\n  {\n    for (var prop in map)\n    {\n      this.put( prop, map[ prop ] );\n    }\n  }\n};\n\nanim8.FastMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @method reset\n   * @chainable\n   */\n  reset: function()\n  {\n    /**\n     * An array of the values in this map.\n     * \n     * @property {Array} values\n     */\n    this.values = [];\n\n    /**\n     * An array of the keys in this map.\n     * \n     * @property {Array} keys\n     */\n    this.keys = [];\n\n    /**\n     * An object of key to index mappings.\n     * \n     * @property {Object} indices\n     */\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @method put\n   * @param {String} key\n   * @param {V} value\n   * @chainable\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   *\n   * @method putMap\n   * @param {FastMap} map\n   * @chainable\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @method get\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @method remove\n   * @param {String} key\n   * @chainable\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( anim8.isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @method removeAt\n   * @param {Number} index\n   * @chainable\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   *\n   * @method indexOf\n   * @param {String} key\n   * @return {Number}\n   */\n  indexOf: function(key)\n  {\n    return anim8.coalesce( this.indices[ key ], -1 );\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @method has\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns whether the given input has overlap with keys in this map.\n   *\n   * @method hasOverlap\n   * @param {FastMap|Object} map\n   * @return {Boolean}\n   */\n  hasOverlap: function(map)\n  {\n    var keys = this.keys;\n    var indices = map.indices;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      if ( keys[i] in indices )\n      {\n        return true;\n      }\n    }\n   \n    return false;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @method size\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Clears all keys & values from the map.\n   *\n   * @method clear\n   * @chainable\n   */\n  clear: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  }\n\n};","\n/**\n * Instantiates a Defer instance. Defer instances keep track of method calls\n * to call at a later time - after an event occurs. The first argument needs\n * to be a function which returns an instance of anim8.Defer when it's invoked.\n * The second argument is an array of methods that can be deferred.\n * \n * @param {Function} factory\n * @param {Array} methods\n * @class Defer\n * @constructor\n */\nanim8.Defer = function(factory, methods)\n{\n  this.$factory = factory;\n  \n  for (var i = 0; i < methods.length; i++)\n  {  \n    this[ methods[i] ] = this.$push( methods[i] );\n  }\n};\n\nanim8.Defer.prototype = \n{  \n  /**\n   * Resets the defer instance.\n   *\n   * @method $reset\n   * @param {Object} eventable\n   * @param {Any} previous\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} callback\n   */\n  $reset: function(eventable, previous, eventType, event, callback)\n  {\n    this.$eventable = eventable;\n    this.$previous = previous;\n    this.$eventType = eventType;\n    this.$event = event;\n    this.$callback = callback;\n    this.$calls = [];\n    this.$next = [];\n    \n    if ( this.$isRoot() )\n    {\n      this.$register();\n    }\n  },\n\n  /**\n   * Determines whether this Defer instance is at the root.\n   *\n   * @method $isRoot\n   * @return {Boolean}\n   */\n  $isRoot: function()\n  {\n    return this.$eventable === this.$previous;\n  },\n\n  /**\n   * Registers this Defer instance with the eventable.\n   *\n   * @method $register\n   */\n  $register: function()\n  {\n    this.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n  },\n\n  /**\n   * Creates a defered function which passes the method and arguments for\n   * any method call into an array of calls on this Defer instance.\n   *\n   * @method $push\n   * @param {String} methodName\n   * @return {Function}\n   */\n  $push: function(methodName)\n  {\n    return function() \n    {\n      this.$calls.push( [methodName, arguments] );\n      \n      return this;\n    };\n  },\n\n  /**\n   * Executes all defered method calls and starts any child Defer instances.\n   *\n   * @method $run\n   */\n  $run: function() \n  {\n    // Invoke the callback if one was given.\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n    for (var i = 0; i < this.$calls.length; i++)\n    {\n      var call = this.$calls[ i ];\n      \n      this.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n    }\n    \n    for (var k = 0; k < this.$next.length; k++)\n    {\n      this.$next[ k ].$register();\n    }\n  },\n\n  /**\n   * Returns the object before the defer statement.\n   *\n   * @method undefer\n   * @return {Any}\n   */\n  undefer: function()\n  {\n    return this.$previous;\n  },\n\n  /**\n   * Defers any following method calls to after the given event is triggered. A\n   * callback can be specified which is a function invoked after the event is\n   * triggered.\n   *\n   * @method defer\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} callback\n   * @return {Defer}\n   */\n  defer: function(eventType, event, callback)\n  {\n    var next = new this.$factory( this.$eventable, this, eventType, event, callback );\n    \n    this.$next.push( next );\n    \n    return next;\n  }\n  \n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's \n * assumed to be an easing function and is returned immediately. If the input is\n * a string the easing with that name is returned. If the input is a string in \n * the format 'easing-easingType' then an easing is returned that is a \n * combination of the easing with the given name and the easingType with the \n * given name. If the given input is an array with 4 elements it's assumed to be\n * a bezier path and one is created and returned. If no input is given the \n * default easing is returned. If an easing cannot be determined then an error\n * is thrown.\n *\n * **Examples:**\n *\n *     anim8.easing();               // anim8.defaults.easing\n *     anim8.easing( 'linear' );     // anim8.easing.linear\n *     anim8.easing( 'reverse' );    // anim8.easingType.reverse( anim8.defaults.easing )\n *     anim8.easing( 'ease-yoyo' );  // anim8.easingType.yoyo( anim8.easing.ease )\n *     anim8.easing( [0,0,1,1] );    // anim8.easing.bezier( 0, 0, 1, 1 )\n *     anim8.easing( 5, false );     // false\n *     anim8.easing( 'invalid', 1 ); // 1\n *     anim8.easing( [0,0,1], 1 );   // 1\n *\n * @method anim8.easing\n * @for Core\n * @param {Function|String|Array} easing\n * @param {E} [returnOnInvalid]\n * @return {Function|E}\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n  {\n    return easing;\n  }\n  if ( anim8.isString( easing ) )\n  {\n    if ( easing in anim8.easing )\n    {\n      return anim8.easing[ easing ];\n    }\n    if ( easing in anim8.easingType )\n    {\n      return anim8.easingType[ easing ]( anim8.easing( anim8.defaults.easing ) );\n    }\n    \n    if ( easing.indexOf('-') !== -1 )\n    {\n      var pair = easing.split('-');\n      var e = pair[0];\n      var t = pair[1];\n      \n      if ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n      {        \n        return anim8.easingType[ t ]( anim8.easing[ e ] );\n      }\n    }\n  }\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n  {\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n  {\n    return anim8.easing( anim8.defaults.easing );\n  }\n  \n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n * \n * @method anim8.isEasingName\n * @for Core\n * @param {String} easing\n * @return {Boolean}\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n  var pair = easing.split('-');\n  var e = pair[0];\n  var t = pair[1];\n  \n  if ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n  {        \n    return true;\n  }\n  \n  return false;\n};\n\n/**\n * A collection of easing functions. An easing functions takes a single number\n * as input that's between 0 and 1 inclusively and returns a number that \n * progresses from 0 to 1 but in-between values may return a number that's less \n * than 0 or greater than 1.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n * \n * @class anim8.easing\n */\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method linear\n * @for anim8.easing\n */\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quad\n * @for anim8.easing\n */\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quad\n * @for anim8.easing\n */ \nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method cubic\n * @for anim8.easing\n */\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method quartic\n * @for anim8.easing\n */\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quintic\n * @for anim8.easing\n */\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method back\n * @for anim8.easing\n */\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  return x3 + x2 - x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method sine\n * @for anim8.easing\n */\nanim8.easing.sine = function(x) \n{\n  return Math.sin( x * 1.57079632679 );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method overshot\n * @for anim8.easing\n */\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method elastic\n * @for anim8.easing\n */\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n  var wave = -Math.sin(x * 10.9955742876);\n  return scale * wave;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method revisit\n * @for anim8.easing\n */\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method lasso\n * @for anim8.easing\n */\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method slowbounce\n * @for anim8.easing\n */\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method bounce\n * @for anim8.easing\n */\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method smallbounce\n * @for anim8.easing\n */\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n  return (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method tinybounce\n * @for anim8.easing\n */\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n  return (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method hesitant\n * @for anim8.easing\n */\nanim8.easing.hesitant = function(x) \n{\n  return (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method sqrt\n * @for anim8.easing\n */\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method sqrtf\n * @for anim8.easing\n */\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method log10\n * @for anim8.easing\n */\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method slingshot\n * @for anim8.easing\n */\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n    return (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method circular\n * @for anim8.easing\n */\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method gentle\n * @for anim8.easing\n */\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * Generates a bezier easing function given the two middle control points. The\n * first point is {0,0} and the last point is {1, 1}.\n *\n * @method bezier\n * @for anim8.easing\n * @param {Number} mX1\n * @param {Number} mY1\n * @param {Number} mX2\n * @param {Number} mY2\n * @return {Function}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n","\n/**\n * Returns an easing type based on the input. If the input is a function that \n * function is immediately returned. If the input is a string the easing type \n * with that name is returned. If no easing type could be determined an error is\n * thrown.\n *\n * @param {Function|String} easingType\n * @param [Boolean] optional\n * @return {Function|false}\n */\nanim8.easingType = function(easingType, optional)\n{\n  if ( anim8.isFunction( easingType ) )\n  {\n    return easingType;\n  }\n  if ( anim8.isString( easingType ) && easingType in anim8.easingType )\n  {\n    return anim8.easingType[ easingType ];\n  }\n  \n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw easingType + ' is not a valid easing type';\n};\n\n/**\n * A collection of easing type functions. An easing type functions takes an\n * easing function as an argument and modifies it's input and output values.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n * \n * @class anim8.easingType\n */\n\n/**\n * Plays the animation forward normally.\n *\n * @method in\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType['in'] = function(easing) \n{\n  return function(x) \n  {\n    return easing( x );\n  };\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum.\n * \n * @method out\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.out = function(easing) \n{\n  return function(x) \n  {\n    return 1.0 - easing( 1.0 - x );\n  };\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum halfway.\n * \n * @method inout\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.inout = function(easing) \n{\n  return function(x) \n  {\n    if ( x < 0.5 ) \n    {\n      return easing( 2.0 * x ) * 0.5;\n    } \n    else \n    {\n      return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n    }\n  };\n};\n\n/**\n * Plays the aninmation forwards with the given easing, and backwards with the same easing momentum.\n * \n * @method yoyo\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.yoyo = function(easing) \n{\n  return function(x) \n  {\n    if ( x < 0.5 ) \n    {\n      return easing( 2.0 * x );\n    } \n    else \n    {\n      return easing( 2.0 - 2.0 * x );\n    }\n  };\n};\n\n/**\n * Plays the animation forwards with the given easing, and backwards reflecting the easing's momentum.\n * \n * @method mirror\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.mirror = function(easing)\n{\n  return function(x)\n  {\n    if ( x < 0.5 )\n    {\n      return easing( 2.0 * x );\n    }\n    else\n    {\n      return 1.0 - easing( 2.0 - 2.0 * x );\n    }\n  };\n};\n\n/**\n * Plays the animation backwards with using the same easing momentum.\n * \n * @method reverse\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.reverse = function(easing)\n{\n  return function(x)\n  {\n    return easing( 1.0 - x );\n  };\n};\n\n/**\n * Plays the animation backwards by flipping the easing's momentum.\n * \n * @method flip\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.flip = function(easing)\n{\n  return function(x)\n  {\n    return 1.0 - easing( x );\n  };\n};\n","\n/**\n * Easings equivalent to the CSS animations. These are approximations since the\n * exact functions are not performant enough.\n */\n\nanim8.easing.cssEase      = anim8.easing.ease;\n\nanim8.easing.cssEaseIn    = anim8.easing.quad;\n\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\n\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\n\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n *\n * @method anim8.color\n * @for Core\n * @param {Number} [r=255]\n * @param {Number} [g=255]\n * @param {Number} [b=255]\n * @param {Number} [a=1]\n * @return {Object}\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @method anim8.color.parse\n * @for Core\n * @param {String} input\n * @return {Object|False}\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n *\n * @method anim8.color.format\n * @for Core\n * @param {Object} color\n * @return {String}\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * A collection of computed functions. Computed functions are functions that\n * are invoked once at the start of an animation given the \n * {{#crossLink \"Attrimator\"}}{{/crossLink}} and \n * {{#crossLink \"Animator\"}}{{/crossLink}} and the result replaces the function.\n *\n * **See:** {{#crossLink \"anim8.computed/current:method\"}}{{/crossLink}},\n *          {{#crossLink \"anim8.computed/relative:method\"}}{{/crossLink}},\n *          {{#crossLink \"anim8.computed/random:method\"}}{{/crossLink}}\n * \n * @class anim8.computed\n */\nanim8.computed = function(funcOrName, func)\n{\n  if ( anim8.isString( funcOrName ) && anim8.isFunction( func ) )\n  {\n    func.computed = true;\n\n    anim8.computed[ funcOrName ] = func;\n\n    return func;\n  }\n  else if ( anim8.isFunction( funcOrName ) )\n  {\n    funcOrName.computed = true;\n\n    return funcOrName;\n  }\n\n  throw funcOrName + ' and ' + func + ' are not valid parameters for creating a computed function.';\n};\n\n/**\n * Calculates and returns the current value for an \n * {{#crossLink \"Animator\"}}{{/crossLink}}. If the animator doesn't have a \n * current value the default value for the attribute is returned.\n *\n * @method current\n * @param {Attrimator} attrimator\n * @param {Animator} animator\n * @return {T}\n */\nanim8.computed('current', function(attrimator, animator)\n{\n  var attr = attrimator.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n});\n\n/**\n * Calculates a value relative to the attribute value currently in the animator.\n * A mask can be used for mixed relative & absolute values in a single value\n * where 1 makes it relative and 0 makes it absolute.\n *\n * **Examples:**\n *\n *     anim8.computed.relative( 40 ); // returns function which adds 40 to current value\n *     anim8.computed.relative( 40, 0.5 ); // returns function which adds 40 to half of the current value\n *     anim8.computed.relative( {x: 20, y: 10}, {x: 1, y: 0} ); // returns function which adds 20 to the x of the current value and sets the y of the current value to 10\n * \n * @method relative\n * @param {T} relativeAmount\n * @param {T} mask\n * @return {Function}\n */\nanim8.computed('relative', function(relativeAmount, mask)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( anim8.isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(attrimator, animator)\n  { \n    var attr = attrimator.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = attribute.cloneDefault();\n    }\n\n    if ( mask )\n    {\n      current = calc.mul( current, mask );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  relativeFunction.relativeAmount = relativeAmount;\n  relativeFunction.mask = mask;\n\n  return relativeFunction;\n});\n\n/**\n * Returns a random value based on the given random selection.\n * \n * 1. If an array is given an item is randomly chosen from that array.\n * 2. If an instance of {{#crossLink \"Path\"}}{{/crossLink}} is given a point is randomly computed and returned.\n * 3. If an object with min & max values is given a random value between them is returned.\n *\n * **Examples:**\n *\n *     anim8.computed.random( [1, 2, 3] ); // returns function which returns a 1, 2, or 3\n *     anim8.computed.random( {min: 1, max: 5} ); // returns function which returns a value between 1 and 5\n *     anim8.computed.random( {min: {x: 0, y: 0}, max: {x: 100, y: 200}} ); // returns function which returns a point in the rectangle {0,0,100,200}\n *     anim8.computed.random( path ); // returns function which returns a value anywhere along the given path\n * \n * @method random\n * @param  {Array|Object|Path} randomSelection\n * @return {Function}\n */\nanim8.computed.random = function(randomSelection)\n{\n  var randomFunction = null;\n\n  if ( anim8.isArray( randomSelection ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var selected = randomSelection[ Math.floor( Math.random() * randomSelection.length ) ];\n\n      return calc.parse( selected, calc.ZERO );\n    };\n  }\n  else if ( randomSelection instanceof anim8.Path )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n\n      return randomSelection.compute( calc.create(), Math.random() );\n    };\n  }\n  else if ( anim8.isObject( randomSelection ) && anim8.isDefined( randomSelection.min ) && anim8.isDefined( randomSelection.max ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var resolvedMin = anim8.resolve( randomSelection.min );\n      var resolvedMax = anim8.resolve( randomSelection.max );\n      var min = calc.parse( resolvedMin, calc.ZERO );\n      var max = calc.parse( resolvedMax, calc.ZERO );\n\n      return calc.random( calc.create(), min, max );\n    };\n  }\n  else\n  {\n    throw 'Invalid random input: ' + randomSelection;\n  }\n\n  // Place the input on the function if the user wants to modify it live\n  randomFunction.randomSelection = randomSelection;\n\n  return anim8.computed( randomFunction );\n};\n\n/**\n * Determines whether the given value is a computed value. A computed value is\n * function with a variable 'computed' set to a true value.\n * \n * @param  {any} x\n * @return {Boolean}\n */\nanim8.isComputed = function(x)\n{\n  return anim8.isFunction( x ) && x.computed;\n};\n","\n/**\n * Creates a composite dyanmic attribute which is an object of existing \n * attributes which takes advantage of an object based calculator.\n *\n * **Example:**\n * \n *     anim8.object.attribute.topLeft = { \n *       dynamic: anim8.composite({x:'left', y:'top'}), \n *       calculator:'2d', \n *       defaultValue: {x: 0, y: 0}, \n *       defaultUnit: 'px' \n *     };\n *\n * Which results in the values in 'topLeft' being placed in left and top.\n * \n * @method anim8.composite\n * @param  {Object} map\n * @for Core\n * @return {Function}\n */\nanim8.composite = function( map )\n{\n  return function( value, frame )\n  {\n    for ( var prop in map )\n    {\n      frame[ map[ prop ] ] = value[ prop ];\n    }\n  };\n};\n\n/**\n * Creates a partial dynamic attribute which is a value that's placed in a \n * sub-property of an attribute.\n *\n * **Example:**\n * \n *     anim8.object.attribute.x = {\n *       dynamic: anim8.partial( 'position', 'x' ),\n *       calculator: 'number',\n *       defaultValue: 0,\n *       defaultUnit: 'px'\n *     };\n *\n * Which results in the values in 'x' being placed in position.x\n *\n * @method anim8.partial\n * @param {String} attribute\n * @param {String} subattribute\n * @for Core\n * @return {Function}\n */\nanim8.partial = function( attribute, subattribute )\n{\n  return function( value, frame )\n  {\n    if ( !anim8.isObject( frame[ attribute ] ) )\n    {\n      frame[ attribute ] = {};\n    }\n\n    frame[ attribute ][ subattribute ] = value;\n  }\n};\n\n/**\n * Creates a dynamic attribute which spreads its value over several attributes.\n *\n * **Example:**\n * \n *     anim8.dom.attribute.padding = {\n *       dynamic: anim8.spread( ['paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom' ] ),\n *       calculator: 'number',\n *       defaultValue: 0,\n *       defaultUnit: 'px'\n *     };\n *\n * Which results in the value in 'padding' being placed in paddingLeft, paddingTop,\n * paddingRight, and paddingBottom.\n * \n * @param  {Array} attributes\n * @return {Function}\n */\nanim8.spread = function( attributes )\n{\n  return function( value, frame )\n  {\n    for ( var i = 0; i < attributes.length; i++ )\n    {\n      frame[ attributes[ i ] ] = value;\n    }\n  };\n};","/**\n * A collection of calculators. A calculator is responsible for performing\n * mathematical operations for a specific animatable data type.\n * \n * @class anim8.calculator\n */\n\n/**\n * Returns a calculator based on the input. If the input is an instance of\n * {{#crossLink \"Calculator\"}}{{/crossLink}} it is immediately returned. If the \n * input is a string the calculator with that name is returned. If no calculator \n * could be determined the default calculator is returned.\n *\n * @method anim8.calculator\n * @for Core\n * @param {Calculator|String} calc\n * @return {Calculator}\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n  if ( anim8.isString( calc ) && calc in anim8.calculator )\n  {\n    return anim8.calculator[ calc ];\n  }\n  \n  return anim8.calculator['default'];\n};\n\n/**\n * Instantiates a new Calculator instance.\n *\n * @class Calculator\n * @constructor\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n\n  /**\n   * Creates the constants for this calculator.\n   *\n   * @method createConstants\n   */\n  createConstants: function()\n  {\n    this.ZERO = this.create();\n    this.ONE = this.parse( 1.0, this.ZERO );\n    this.INFINITY = this.parse( Number.POSITIVE_INFINITY, this.ZERO );\n  },\n\n  /**\n   * Parses the given input for a value this calculator understands.\n   *\n   * @method parse\n   * @param  {T} x\n   * @param  {T} defaultValue\n   * @return {T|Function|False}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * Copies a value and places it in out and returns out.\n   *\n   * @method copy\n   * @param {T} out\n   * @param {T} copy\n   * @return {T}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * Clones the value and returns the clone.\n   *\n   * @method clone\n   * @param {T} clone\n   * @return {T}\n   */\n  clone: function(clone) \n  {\n    return this.copy( this.create(), clone );\n  },\n\n  /**\n   * Creates an empty value equivalent to zero.\n   * \n   * @method create\n   * @return {T}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * Scales out by the given scalar value and returns out.\n   * \n   * @method scale\n   * @param {T} out\n   * @param {Number} scale\n   * @return {T}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * Adds an amount to out and returns out.\n   * \n   * @method add\n   * @param {T} out\n   * @param {T} amount\n   * @return {T}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * Adds an amount scaled by a scalar value to out and returns out.\n   * \n   * @method adds\n   * @param {T} out\n   * @param {T} amount\n   * @param {Number} amountScale\n   * @return {T}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * Subtracts an amount from out and returns out.\n   * \n   * @method sub\n   * @param {T} out\n   * @param {T} amount\n   * @return {T}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * Multiplies out by some amount and returns out.\n   * \n   * @method mul\n   * @param {T} out\n   * @param {T} scale\n   * @return {T}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * Interpolates out between start & end given a delta value and returns out. \n   * A delta value typically lies between 0 and 1 inclusively.\n   * \n   * @method interpolate\n   * @param {T} out\n   * @param {T} start\n   * @param {T} end\n   * @param {Number} delta\n   * @return {T}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * Returns a random value between the given min and max.\n   * \n   * @method random\n   * @param {T} out\n   * @param {T} min\n   * @param {T} max\n   * @return {T}\n   */\n  random: function(out, min, max)\n  {\n    return this.interpolate( out, min, max, Math.random() );\n  },\n\n  /**\n   * Calculates the distance between the two values.\n   * \n   * @method distance\n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * Calculates the squared distance between the two values.\n   * \n   * @method distanceSq\n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * Returns the distance the given value is from zero.\n   * \n   * @method length\n   * @param {T} a\n   * @return {Number}\n   */\n  length: function(a)\n  {\n    return this.distance( a, this.ZERO );\n  },\n\n  /**\n   * Returns the squared distance the given value is from zero.\n   * \n   * @method lengthSq\n   * @param {T} a\n   * @return {Number}\n   */\n  lengthSq: function(a)\n  {\n    return this.distanceSq( a, this.ZERO );\n  },\n\n  /**\n   * Determines whether the given value is valid for this calculator.\n   * \n   * @method isValid\n   * @param {any} a\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * Returns whether the given value is not a number or has a component which is\n   * not a number.\n   * \n   * @method isNaN\n   * @param {T} a\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * Determines whether the given value is equivalent to zero given an \n   * acceptable distance from zero (epsilon).\n   * \n   * @method isZero\n   * @param {T} a\n   * @param {Number} epsilon\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * Determines whether the given values are equivalent up to an acceptable\n   * distance apart.\n   * \n   * @method isEqual\n   * @param {T} a\n   * @param {T} b\n   * @param {Number} epsilon\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * Sets out to the minimum value between the two values and returns out.\n   * \n   * @method min\n   * @param {T} out\n   * @param {T} a\n   * @param {T} b\n   * @return {T}\n   */\n  min: function(out, a, b)\n  {\n    throw 'Calculator.min not implemented';\n  },\n\n  /**\n   * Sets out to the maximum value between two values and returns out.\n   * \n   * @method max\n   * @param {T} out\n   * @param {T} a\n   * @param {T} b\n   * @return {T}\n   */\n  max: function(out, a, b)\n  {\n    throw 'Calculator.max not implemented';\n  },\n\n  /**\n   * Performs the dot product between two values.\n   * \n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  dot: function(a, b)\n  {\n    throw 'Calculator.dot not implemented';\n  },\n\n  /**\n   * Clamps out between the given minimum and maximum values and returns out.\n   * \n   * @method clamp\n   * @param {T} out\n   * @param {T} min\n   * @param {T} max\n   * @return {T}\n   */\n  clamp: function(out, min, max)\n  {\n    var distSq = this.distanceSq( out, this.ZERO );\n\n    if ( distSq < min * min )\n    {\n      return this.scale( out, min / Math.sqrt( distSq ) );\n    }\n    else if ( distSq > max * max )\n    {\n      return this.scale( out, max / Math.sqrt( distSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * Sets the length of the given value and returns the new value.\n   * \n   * @param {T} out\n   * @param {Number} length\n   * @return {T}\n   */\n  setLength: function(out, length)\n  {\n    var lengthSq = this.lengthSq( out );\n\n    if ( lengthSq !== 0 )\n    {\n      return this.scale( out, length / Math.sqrt( lengthSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * Determines whether the given value appears to be a relative value. Relative\n   * values are stored as strings starting with a plus or minus for positive or\n   * negative respectively.\n   * \n   * @method isRelative\n   * @param {Any} x\n   * @return {Boolean}\n   * @protected\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * Returns the relative amount of the given relative value. If the value is \n   * not a valid relative value false is returned.\n   * \n   * @method getRelativeAmount\n   * @param {String} x\n   * @return {Number}\n   * @protected\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n *\n * @class CalculatorNumber\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorNumber = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorNumber.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    return (end - start) * delta + start;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  distance: function(a, b)\n  {\n    return Math.abs( a - b );\n  },\n  length: function(a)\n  {\n    return Math.abs( a );\n  },\n  lengthSq: function(a)\n  {\n    return a * a;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    return Math.min( a, b );\n  },\n  max: function(out, a, b)\n  {\n    return Math.max( a, b );\n  },\n  dot: function(a, b)\n  {\n    return a * b;\n  }\n});\n\n/**\n * A calculator for numbers.\n *\n * @property {CalculatorNumber} number\n * @for anim8.calculator\n */\nanim8.calculator['number'] = new anim8.CalculatorNumber();\n\n/**\n * The default calculator.\n *\n * @property {CalculatorNumber} default\n * @for anim8.calculator\n */\nanim8.calculator['default'] = anim8.calculator['number'];","\n/*\n * A calculator for objects with an x and y component (number)\n *\n * @class Calculator2d\n * @constructor\n * @extends Calculator\n */\nanim8.Calculator2d = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Calculator2d.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: x,\n        y: x\n      };\n    }\n    // When an array is given, assume [x, y]\n    if ( anim8.isArray( x ) )\n    {\n      x = { x: x[0], y: x[1] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n\n        if ( ix || iy )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n  {\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    return out;\n  }\n});\n\n/**\n * A calculator for 2d points; objects with x & y Number components.\n *\n * @property {Calculator2d} 2d\n * @for anim8.calculator\n */\nanim8.calculator['2d'] = new anim8.Calculator2d();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n *\n * @class Calculator3d\n * @constructor\n * @extends Calculator\n */\nanim8.Calculator3d = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Calculator3d.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: x,\n        y: x,\n        z: x\n      };\n    }\n    // When an array is given, assume [x, y, z]\n    if ( anim8.isArray( x ) )\n    {\n      x = { x: x[0], y: x[1], z: x[2] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n\n        if ( ix || iy || iz )\n        { \n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    out.z = copy.z;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n  { \n    out.x = 0.0;\n    out.y = 0.0;\n    out.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    out.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    out.z = (end.z - start.z) * delta + start.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n    var dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon && \n           Math.abs(a.z - b.z) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y + a.z * b.z;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    return out;\n  }\n});\n\n/**\n * A calculator for 3d points; objects with x, y, & z Number components.\n *\n * @property {Calculator3d} 3d\n * @for anim8.calculator\n */\nanim8.calculator['3d'] = new anim8.Calculator3d();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n *\n * @class CalculatorQuaternion\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorQuaternion = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorQuaternion.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: 0,\n        y: 0,\n        z: 1,\n        angle: x\n      };\n    }\n    // When an array is given, assume [x, y, z, angle]\n    if ( anim8.isArray( x ) )\n    {\n      x = { x: x[0], y: x[1], z: x[2], angle: x[3] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n        var ia = this.isRelative( ca );\n\n        if ( ix || iy || iz || ia )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0,\n            angle: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n    }\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx }, { x:0, y:0, z:0, angle:1 } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    out.z = copy.z;\n    out.angle = copy.angle;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n  {\n    out.x = 0.0;\n    out.y = 0.0;\n    out.z = 0.0;\n    out.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    out.z += amount.z * amountScale;\n    out.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    out.angle *= scale.angle;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    out.z = (end.z - start.z) * delta + start.z;\n    out.angle = (end.angle - start.angle) * delta + start.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n    var dz = a.z - b.z; \n    var da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon && \n           Math.abs(a.z) < epsilon && \n           Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon && \n           Math.abs(a.z - b.z) < epsilon && \n           Math.abs(a.angle - b.angle) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    out.angle = Math.min(a.angle, b.angle);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    out.angle = Math.max(a.angle, b.angle);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y + a.z * b.z + a.angle * b.angle;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    out.angle = (max.angle - min.angle) * Math.random() + min.angle;\n    return out;\n  }\n});\n\n/**\n * A calculator for quaternions; objects with x, y, z, & angle Number components.\n *\n * @property {CalculatorQuaternion} quaternion\n * @for anim8.calculator\n */\nanim8.calculator['quaternion'] = new anim8.CalculatorQuaternion();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n *\n * @class CalculatorRGB\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorRGB = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorRGB.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        r: x,\n        g: x,\n        b: x\n      };\n    }\n    // When an array is given, assume [r, g, b]\n    if ( anim8.isArray( x ) )\n    {\n      x = { r: x[0], g: x[1], b: x[2] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n\n        if ( ir || ig || ib )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n  },\n  copy: function(out, copy) \n  {\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n  {\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n  {\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.r = (end.r - start.r) * delta + start.r;\n    out.g = (end.g - start.g) * delta + start.g;\n    out.b = (end.b - start.b) * delta + start.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n  {\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.r * b.r + a.g * b.g + a.b * b.b;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    return out;\n  }\n});\n\n/**\n * A calculator for opaque colors; objects with r, g, & b Number components.\n *\n * @property {CalculatorRGB} rgb\n * @for anim8.calculator\n */\nanim8.calculator['rgb'] = new anim8.CalculatorRGB();\n","\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n *\n * @class CalculatorRGBA\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorRGBA = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorRGBA.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        r: x,\n        g: x,\n        b: x,\n        a: 1.0\n      };\n    }\n    // When an array is given, assume [r, g, b, a]\n    if ( anim8.isArray( x ) )\n    {\n      x = { r: x[0], g: x[1], b: x[2], a: x[3] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n        var ia = this.isRelative( ca );\n\n        if ( ir || ig || ib || ia )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0,\n            a: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n  },\n  copy: function(out, copy) \n  {\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n  {\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n  {\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.r = (end.r - start.r) * delta + start.r;\n    out.g = (end.g - start.g) * delta + start.g;\n    out.b = (end.b - start.b) * delta + start.b;\n    out.a = (end.a - start.a) * delta + start.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n  {\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    out.a = Math.min(a.a, b.a);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    out.a = Math.max(a.a, b.a);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.r * b.r + a.g * b.g + a.b * b.b + a.a * b.a;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    out.a = (max.a - min.a) * Math.random() + min.a;\n    return out;\n  }\n});\n\n/**\n * A calculator for colors; objects with r, g, b, & a Number components.\n *\n * @property {CalculatorRGBA} rgba\n * @for anim8.calculator\n */\nanim8.calculator['rgba'] = new anim8.CalculatorRGBA();\n","\n/**\n * Parses a path given the input and returns an instance of anim8.Path or throws\n * an error if the path could not be parsed. If the input is an object and has\n * a type property with a value that maps to a path type the path's parsing\n * function is invoked with the object.\n *\n * @method anim8.path\n * @for Core\n * @param  {anim8.Path|String|Object} path\n * @return {anim8.Path}\n * @throws {String} If the input is not a valid path.\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ path ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  throw path + ' is not a valid path';\n};\n\n/**\n * Path class computes a value given a delta value [0, 1].\n *\n * @class Path\n * @constructor\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * Resets the path with the given name, calculator, and points.\n   * \n   * @method reset\n   * @param {String|false} name\n   * @param {anim8.Calculator} calculator\n   * @param {Array} points\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * Computes a value at the given delta setting and returning out.\n   * \n   * @method compute\n   * @param {T} out\n   * @param {Number} delta\n   * @return {T}\n   */\n  compute: function(out, delta) \n  {\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * Determines if this path has at least one computed value.\n   *\n   * **See:** {{#crossLink \"anim8.computed\"}}{{/crossLink}}\n   * \n   * @method reset\n   * @return {Boolean}\n   */\n  hasComputed: function() \n  {\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Replaces any computed values in this path with the result from invoking\n   * the function and returns a clone of this path.\n   * \n   * @method replaceComputed\n   * @return {anim8.Path}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * Resolves and returns the point at the given index.\n   * \n   * @method resolvePoint\n   * @param {Number} i\n   * @return {T}\n   */\n  resolvePoint: function(i)\n  {\n    return anim8.resolve( this.points[ i ] );\n  },\n\n  /**\n   * Returns whether the path is linear. Linear paths go directly from point to\n   * point where curved paths do not. Linear paths can have their length \n   * calculated fairly easily however curves you must compute length with a \n   * given granularity.\n   * \n   * @method isLinear\n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return true;\n  },\n\n  /**\n   * Computes the length of the Path with a given granularity. Granularity is \n   * used for non-linear paths - it's the number of segments are calculated on \n   * the path where the length of the segments are summed and returned as the \n   * length.\n   * \n   * @method length\n   * @param {Number} granularity\n   * @return {Number}\n   */\n  length: function(granularity)\n  {\n    var distance = 0;\n    var calc = this.calculator;\n\n    if ( this.isLinear() )\n    {\n      var prev = this.resolvePoint( 0 );\n\n      for (var i = 1; i < this.points.length; i++)\n      {\n        var next = this.resolvePoint( i );\n\n        distance += calc.distance( prev, next );\n\n        prev = next;\n      }\n    }\n    else\n    {\n      var deltadelta = 1.0 / granularity;\n      var delta = deltadelta;\n      var prev = calc.clone( this.resolvePoint( 0 ) );\n      var temp = calc.create();\n\n      for (var i = 1; i <= granularity; i++)\n      {\n        var next = this.compute( temp, delta );\n\n        distance += calc.distance( prev, next );\n        delta += deltadelta;\n\n        temp = prev;\n        prev = next;\n      }\n    }\n\n    return distance;\n  }\n\n};\n","\n/**\n * Instantiates a new Tween.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} start\n * @param {T} end\n * @class Tween\n * @constructor\n * @extends Path\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n});\n\n\n/**\n * Parses an object for a tween path.\n * \n * @param {Object} path\n * @return {Tween}\n */\nanim8.path['tween'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, defaultValue ),\n    calc.parse( path.end, defaultValue )\n  );\n};\n","\n/**\n * Instantiates a new PathCubic.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} p0\n * @param {T} p1\n * @param {T} p2\n * @param {T} p3\n * @class PathCubic\n * @constructor\n * @extends Path\n */\nanim8.PathCubic = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.PathCubic.prototype = new anim8.Path(),\n{\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  copy: function() \n  {\n    return new anim8.PathCubic( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  },\n  isLinear: function()\n  {\n    return false;\n  }\n});\n\n/**\n * Parses an object for a cubic path.\n * \n * @param {Object} path\n * @return {PathCubic}\n */\nanim8.path['cubic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n  \n  return new anim8.PathCubic(\n    path.name,\n    calc,\n    calc.parse( path.p0, defaultValue ),\n    calc.parse( path.p1, defaultValue ),\n    calc.parse( path.p2, defaultValue ),\n    calc.parse( path.p3, defaultValue )\n  );\n};\n","\n/**\n * Instantiates a new PathQuadratic.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} p0\n * @param {T} p1\n * @param {T} p2\n * @class PathQuadratic\n * @constructor\n * @extends Path\n */\nanim8.PathQuadratic = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.PathQuadratic.prototype = new anim8.Path(),\n{\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n  copy: function() \n  {\n    return new anim8.PathQuadratic( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  },\n  isLinear: function()\n  {\n    return false;\n  }\n});\n\n\n/**\n * Parses an object for a quadratic path.\n * \n * @param {Object} path\n * @return {PathQuadratic}\n */\nanim8.path['quadratic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n  \n  return new anim8.PathQuadratic(\n    path.name,\n    calc,\n    calc.parse( path.p0, defaultValue ),\n    calc.parse( path.p1, defaultValue ),\n    calc.parse( path.p2, defaultValue )\n  );\n};\n","\n/**\n * Instantiates a new PathDelta.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @param {Array} deltas\n * @class PathDelta\n * @constructor\n * @extends Path\n */\nanim8.PathDelta = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.PathDelta.prototype = new anim8.Path(),\n{\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  copy: function() \n  {\n    return new anim8.PathDelta( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n});\n\n/**\n * Parses an object for a delta path.\n * \n * @param {Object} path\n * @return {PathDelta}\n */\nanim8.path['delta'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[ i ], defaultValue );\n  }\n  \n  return new anim8.PathDelta(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * Instantiates a new PathJump.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @class PathJump\n * @constructor\n * @extends Path\n */\nanim8.PathJump = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.PathJump.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  copy: function() \n  {\n    return new anim8.PathJump( this.name, this.calculator, anim8.copy(this.points) );\n  }\n});\n\n/**\n * Parses an object for a jump path.\n * \n * @param {Object} path\n * @return {PathJump}\n */\nanim8.path['jump'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[ i ], defaultValue );\n  }\n  \n  return new anim8.PathJump(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * Instantiates a new PathCompiled.\n * \n * @param {String|false} name\n * @param {Path} path\n * @param {Number} pointCount\n * @class PathCompiled\n * @constructor\n * @extends Path\n */\nanim8.PathCompiled = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.PathCompiled.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  copy: function() \n  {\n    return new anim8.PathCompiled( this.name, this, this.points.length );\n  }\n});\n\n/**\n * Parses an object for a compiled path.\n * \n * @param {Object} path\n * @return {PathCompiled}\n */\nanim8.path['compiled'] = function(path)\n{\n  return new anim8.PathCompiled(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * Instantiates a new PathKeyframe.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @param {Array} deltas\n * @param {Array} easings\n * @class PathKeyframe\n * @constructor\n * @extends Path\n */\nanim8.PathKeyframe = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.PathKeyframe.prototype = new anim8.Path(),\n{\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  copy: function() \n  {\n    return new anim8.PathKeyframe( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n});\n\n/**\n * Parses an object for a keyframe path.\n * \n * @param {Object} path\n * @return {PathKeyframe}\n */\nanim8.path['keyframe'] = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  var defaultValue = calc.parse( path.defaultValue, calc.ZERO );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[ i ], defaultValue );\n  }\n  \n  return new anim8.PathKeyframe(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * Instantiates a new PathCombo.\n * \n * @param {String|false} name\n * @param {Path[]} paths\n * @param {Boolean} [uniform]\n * @param {Number} [granularity]\n * @class PathCombo\n * @constructor\n * @extends Path\n */\nanim8.PathCombo = function(name, paths, uniform, granularity)\n{\n  var calc = paths[0].calculator;\n  var points = [];\n  var deltas = [];\n  var linear = true;\n  var length = false;\n\n  for (var i = 0; i < paths.length; i++) \n  {\n    points.push.apply( points, paths[ i ].points );\n\n    deltas[ i ] = ( i + 1 ) / paths.length;  \n\n    if ( !paths[ i ].isLinear() )\n    {\n      linear = false;\n    }\n  }\n\n  if ( uniform ) \n  {\n    var lengthGranularity = anim8.coalesce( granularity, 100 );\n    var lengthTotal = 0;\n    var lengths = [];\n\n    for (var i = 0; i < paths.length; i++) \n    {\n      lengths[ i ] = paths[ i ].length( lengthGranularity );\n      lengthTotal += lengths[ i ];\n    }\n\n    var lengthCurrent = 0;\n\n    for (var i = 0; i < paths.length; i++) \n    {\n      lengthCurrent += lengths[ i ];\n      deltas[ i ] = lengthCurrent / lengthTotal;\n    }\n\n    length = lengthTotal;\n  }\n\n  this.reset( name, calc, points );\n  this.paths = paths;\n  this.deltas = deltas;\n  this.uniform = uniform;\n  this.granularity = granularity;\n  this.linear = linear;\n  this.cachedLength = length;\n};\n\nanim8.override( anim8.PathCombo.prototype = new anim8.Path(),\n{\n  isLinear: function()\n  {\n    return this.linear;\n  },\n  length: function(granularity)\n  {\n    return this.cachedLength !== false ? this.cachedLength : anim8.Path.length.apply( this, arguments );\n  },\n  compute: function(out, delta)\n  {\n    var paths = this.paths;\n    var deltas = this.deltas;\n    var previousDelta = 0;\n    var i = 0;\n\n    while ( i < paths.length - 1 && deltas[ i ] < delta )\n    {\n      previousDelta = deltas[ i ];\n      i++;\n    }\n\n    return paths[ i ].compute( out, ( delta - previousDelta ) / ( deltas[ i ] - previousDelta ) );\n  },\n  copy: function() \n  {\n    return new anim8.PathCombo( this.name, this.paths, this.uniform, this.granularity );\n  }\n});\n\n/**\n * Parses an object for a combo path.\n * \n * @param {Object} path\n * @return {PathCombo}\n */\nanim8.path['combo'] = function(path)\n{\n  var paths = path.paths;\n\n  for (var i = 0; i < paths.length; i++)\n  {\n    paths[ i ] = anim8.path( paths[ i ] );\n  }\n\n  return new anim8.PathCombo(\n    path.name,\n    paths,\n    path.uniform,\n    path.granularity\n  );\n};\n","\n/**\n * Animates a single attribute over any period of time.\n *\n * @class Attrimator\n * @constructor\n */\nanim8.Attrimator = function()\n{\n\n};\n\nanim8.Attrimator.prototype =\n{\n\n  /**\n   * Resets this attrimator for the given attribute created by the given parser.\n   *\n   * @method reset\n   * @param {String} attribute\n   * @param {Parser} parser\n   * @param {Attrimator} [next]\n   */\n  reset: function(attribute, parser, next)\n  {\n    /**\n     * The name of the attribute this attrimator is animating.\n     * \n     * @property {String} attribute\n     */\n    this.attribute = attribute;\n\n    /**\n     * The parser that created this attrimator (if any).\n     * \n     * @property {Parser} parser\n     */\n    this.parser = parser;\n\n    /**\n     * The next attrimator to be played once this one has finished.\n     * \n     * @property {Attrimator} next\n     */\n    this.next = next;\n\n    /**\n     * The time the attrimator was started by the animator.\n     * \n     * @property {Number} startTime\n     */\n    this.startTime = 0;\n\n    /**\n     * The time the attrimator was last paused.\n     * \n     * @property {Number} pauseTime\n     */\n    this.pauseTime = 0;\n\n    /**\n     * The amount of time that has elapsed since the attrimator started.\n     * \n     * @property {Number} elapsed\n     */\n    this.elapsed = 0;\n\n    /**\n     * The time this attrimator should stop itself after it started in milliseconds.\n     * \n     * @property {Number} stopTime\n     */\n    this.stopTime = Number.POSITIVE_INFINITY;\n\n    /**\n     * Whether or not the attrimator is paused.\n     * \n     * @property {Boolean} paused\n     */\n    this.paused = false;\n\n    /**\n     * The cycle this attrimator belongs to.\n     * \n     * @type {Number} cycle\n     */\n    this.cycle = 0;\n\n    /**\n     * The amount of time in milliseconds this attrimator is delayed since start.\n     * \n     * @property {Number} delay\n     */\n    this.delay = 0;\n\n    /**\n     * The initial elapsed time in milliseconds when the attrimator is started.\n     * \n     * @property {Number} offset\n     */\n    this.offset = 0;\n  },\n\n  /**\n   * Prepares this attrimator for animation on the given subject animator. This\n   * is called as early as possible to establish the start time of the \n   * attrimator so when the user isn't on the page time can be kept accurately.\n   * \n   * @param {Number} now\n   * @param {Animator} animator\n   */\n  prestart: function(now)\n  {\n    if ( this.startTime === 0 )\n    {\n      this.startTime = now - this.offset;\n      this.elapsed = this.offset;\n      this.finished = false;\n      this.prestartNext();\n    }\n  },\n\n  /**\n   * Calls {{#crossLink \"Attrimator/prestart:method\"}}{{/crossLink}} on the next\n   * attrimator if it can be called.\n   * \n   * @method prestartNext\n   */\n  prestartNext: function( overrideNext )\n  {\n    // If there is a next attrimator and this attrimator has been prestarted...\n    if ( this.next && this.startTime !== 0 )\n    {\n      // If override next is specified, clear next's startTime\n      if ( overrideNext )\n      {\n        this.next.startTime = 0;\n      }\n\n      // We can only prestart next if it has no startTime.\n      if ( this.next.startTime === 0 )\n      {\n        var totalTime = this.totalTime();\n\n        // If this attrimator has a finite total amount of time, it's end can be calculated.\n        if ( !isNaN( totalTime ) )\n        {\n          this.next.prestart( this.startTime + totalTime );\n        }\n      }\n    }\n  },\n\n  /**\n   * Prepares this attrimator for animation on the given subject \n   * animator. This is called once in anim8.Animator.preupdate before the first \n   * time this attrimator is updated.\n   *\n   * @method start\n   * @param {Number} now\n   * @param {Animator} animator\n   */\n  start: function(now, animator)\n  {\n    this.prestart( now );\n  },\n\n  /**\n   * Invoked once when a new animation cycle is started on an Animator. If this\n   * attrimator updated the frame true must be returned.\n   *\n   * @method startCycle\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  startCycle: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Updates this attrimator given a time to animate to and the frame to\n   * provide with a new value. This method will return true if the attribute\n   * this is animating has been updated and needs to be applied to the subject.\n   *\n   * @method setTime\n   * @param {Number} now\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  setTime: function(now, frame)\n  {\n    if ( this.paused )\n    {\n      return false;\n    }\n\n    var updated = false;\n    var elapsed = now - this.startTime;\n    var updated = false;\n\n    if ( elapsed > this.stopTime )\n    {\n      updated = this.finish( frame );\n    }\n    else if ( elapsed >= this.delay )\n    {\n      updated = this.update( elapsed, frame );\n    }\n\n    this.elapsed = elapsed;\n\n    return updated;\n  },\n\n  /**\n   * Updates the attrimator given elapsed time in milliseconds, the frame to \n   * apply a value to, and returns whether the frame was updated or not.\n   *\n   * @method update\n   * @param {Number} elapsed\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  update: function(elapsed, frame)\n  {\n    throw 'Attrimator.update not implemented';\n  },\n\n  /**\n   * Returns the amount of time that has elapsed in milliseconds.\n   *\n   * @method getElapsed\n   * @return {Number}\n   */\n  getElapsed: function()\n  {\n    return this.elapsed;\n  },\n\n  /**\n   * Stops this attrimator in the given number of milliseconds.\n   *\n   * @method stopIn\n   * @param {Number} milliseconds\n   * @chainable\n   */\n  stopIn: function(milliseconds)\n  {\n    this.stopTime = this.getElapsed() + milliseconds;\n\n    return this;\n  },\n\n  /**\n   * If this attrimator repeats its animation this method will stop repitition\n   * after the next animation cycle.\n   * \n   * @chainable\n   */\n  nopeat: function()\n  {\n    return this;\n  },\n\n  /**\n   * Returns the value at the given time or returns false if it can't be\n   * calculated.\n   *\n   * @method valueAt\n   * @param {Number} time\n   * @param {Any} out\n   * @return {Any|False}\n   */\n  valueAt: function(time, out)\n  {\n    return false;\n  },\n\n  /**\n   * The total amount of time this attrimator will take in milliseconds. This \n   * may be an infinite number.\n   *\n   * @method totalTime\n   * @return {Number}\n   */\n  totalTime: function()\n  {\n    return this.stopTime;\n  },\n\n  /**\n   * The time remaining before this attrimator and any following will be \n   * finished.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * Clones this attrimator.\n   *\n   * @method clone\n   * @return {Attrimator}\n   */\n  clone: function()\n  {\n    throw 'AttributeAnimator.clone not implemented';\n  },\n\n  /**\n   * Returns whether this attrimator has computed values which need to be \n   * resolved by the subject animator calling prepare on this attrimator.\n   *\n   * @method hasComputed\n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return false;\n  },\n\n  /**\n   * Determines whether this attrimator will run infinitely.\n   *\n   * @method isInfinite\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * Pauses this attrimator if it isn't already paused.\n   *\n   * @method pause\n   * @chainable\n   */\n  pause: function()\n  {\n    if ( !this.paused )\n    {\n      this.pauseTime = anim8.now();\n      this.paused = true;\n    }\n\n    return this;\n  },\n\n  /**\n   * Resumes this attrimator if it's paused. This involves resetting the start\n   * time of the attrimator.\n   *\n   * @method resume\n   * @chainable\n   */\n  resume: function()\n  {\n    if ( this.paused )\n    {\n      var totalPausedTime = anim8.now() - this.pauseTime;\n      var delay = this;\n\n      while ( delay && delay.startTime !== 0 )\n      {\n        delay.startTime += totalPausedTime;\n        delay = delay.next;\n      }\n\n      this.paused = false;\n    }\n\n    return this;\n  },\n\n  /**\n   * Whether this attrimator is paused.\n   *\n   * @method isPaused\n   * @return {Boolean}\n   */\n  isPaused: function()\n  {\n    return this.paused;\n  },\n\n  /**\n   * Sets the final state of the attrimator to the frame if one exists and \n   * returns true, otherwise false is returned and frame remains unchanged.\n   *\n   * @method finish\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Whether this attrimator is finished.\n   *\n   * @method isFinished\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return false;\n  },\n\n  /**\n   * Returns the parser that created this attrimator (if any).\n   *\n   * @method getParser\n   * @return {Parser}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * Places the given attrimator on the end of the chain of attrimators starting\n   * with this attrimator.\n   *\n   * @method queue\n   * @param {Attrimator} next\n   * @chainable\n   */\n  queue: function(next)\n  {\n    if ( this.next )\n    {\n      this.next.queue( next );\n    }\n    else\n    {\n      this.next = next;\n      this.prestartNext();\n    }\n\n    return this;\n  },\n\n  /**\n   * Parses a value with the calculator given a default value to fallback on.\n   *\n   * @method parseValue\n   * @param {Animator} animator\n   * @param {T|Function|True} value\n   * @param {T} defaultValue\n   * @return {T|Function}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isComputed( parsed ) )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  }\n\n};","\n/**\n * A map of attrimators by their attribute name.\n *\n * @class AttrimatorMap\n * @constructor\n * @extends FastMap\n */\nanim8.AttrimatorMap = function()\n{\n  this.reset();\n};\n\nanim8.override( anim8.AttrimatorMap.prototype = new anim8.FastMap(),\n{\n\n  /**\n   * Queues the attrimator on this map. If the attribute is already on this map\n   * this is placed on the end of the Attrimator chain, otherwise the attrimator\n   * is added to the map. If there is an attrimator already on the map it's\n   * returned.\n   *\n   * @method queue\n   * @param {Attrimator} attrimator\n   * @return {Attrimator}\n   */\n  queue: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n    var current = this.get( attr );\n\n    if ( current )\n    {\n      current.queue( attrimator );\n    }\n    else\n    {\n      this.put( attr, attrimator );\n    }\n\n    return current;\n  },\n\n  /**\n   * Queues the given map to this map. The attrimators placed on this map are\n   * queued and delayed in a way that they all start at the same time. If a\n   * function is provided as the second argument it is invoked whenever an \n   * attrimator in the given map is new & added to this map.\n   *\n   * @method queueMap\n   * @param {AttrimatorMap} map\n   * @param {Function} [onNewAttribute]\n   * @param {Object} [context]\n   * @chainable\n   */\n  queueMap: function(map, onNewAttribute, context)\n  {\n    var maxRemaining = this.timeRemaining();\n    var attrimators = map.values;\n    \n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n      var existing = this.get( attr );\n\n      if ( existing )\n      {\n        if ( existing.isInfinite() )\n        {\n          existing.stopIn( attrimator.delay + maxRemaining );\n        }\n        else\n        {\n          attrimator.delay += (maxRemaining - existing.timeRemaining());\n        }\n\n        existing.queue( attrimator );\n      }\n      else\n      {\n        attrimator.delay += maxRemaining;\n\n        this.put( attr, attrimator );\n        \n        if ( anim8.isFunction( onNewAttribute ) )\n        {\n          onNewAttribute.call( context || this, attrimator );\n        }\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Removes the attrimator at the given index replacing it with the next\n   * attrimator if one exists.\n   *\n   * @method unqueueAt\n   * @param {Number} index\n   * @chainable\n   */\n  unqueueAt: function(index)\n  {\n    var current = this.values[ index ];\n\n    if ( current.next )\n    {\n      this.values[ index ] = current.next;\n    }\n    else\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Clones this map returning a deep clone where all attrimators are cloned.\n   *\n   * @method clone\n   * @return {AttrimatorMap}\n   */\n  clone: function()\n  {\n    var values = this.values;\n    var keys = this.keys;\n    var clone = new anim8.AttrimatorMap();\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      clone.values[i] = values[i].clone();\n      clone.keys[i] = keys[i];\n      clone.indices[ keys[i] ] = i;\n    }\n\n    return clone;\n  },\n\n  /**\n   * Returns the time remaining for all finite attrimators in this map. The time\n   * remaining includes queued attrimators.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    var maxRemaining = 0;\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n\n      if ( !attrimator.isInfinite() )\n      {\n        maxRemaining = Math.max( maxRemaining, attrimator.timeRemaining() );\n      }\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Sets the cycle of the attrimators in this map. If there are attrimators\n   * queued the are given the next cycle number. The final cycle number is\n   * returned.\n   *\n   * @method applyCycle\n   * @param {Number} nextCycle\n   * @return {Number}\n   */\n  applyCycle: function(nextCycle)\n  {\n    var currentDepth = this.values;\n    var nextDepth = null;\n\n    while ( currentDepth.length )\n    {\n      nextDepth = [];\n\n      for (var i = currentDepth.length - 1; i >= 0; i--)\n      {\n        var attrimator = currentDepth[ i ];\n\n        attrimator.cycle = nextCycle;\n\n        if ( attrimator.next )\n        {\n          nextDepth.push( attrimator.next );\n        }\n      }\n\n      if ( nextDepth.length )\n      {\n        nextCycle++;\n      }\n\n      currentDepth = nextDepth;\n    }\n\n    return nextCycle;\n  },\n\n  /**\n   * Iterates through all attrimators in this map, at any depth.\n   *\n   * @method iterate\n   * @param  {Function} callback\n   * @param  {Object} [context]\n   * @chainable\n   */\n  iterate: function(callback, context)\n  {\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n      var previous = null;\n      var depth = 0;\n\n      while ( attrimator )\n      {\n        callback.call( context || this, attrimator, depth++, previous );\n\n        attrimator = (previous = attrimator).next;\n      }\n    }\n\n    return this;\n  }\n\n\n\n});","\n/**\n * Possible states an event can be in.\n * \n * @type {Object}\n */\nanim8.EventState = \n{\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  FINISHED: 8\n};\n\n/**\n * Instantiates a new Event which extends Attrimator.\n * \n * @param {String} attribute\n * @param {Path} path\n * @param {String|Number} duration\n * @param {String|Function|Array} easing\n * @param {String|Number} delay\n * @param {String|Number} sleep\n * @param {String|Number} offset\n * @param {String|Number} repeat\n * @param {Number} scale\n * @param {T|Number} scaleBase\n * @param {Boolean} hasInitialState\n * @param {Parser} parser\n * @param {Attrimator} next\n * @class Event\n * @constructor\n * @extends Attrimator\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, offset, repeat, scale, scaleBase, hasInitialState, parser, next, input) \n{\n  this.reset( attribute, parser, next );\n\n  /**\n   * The path the attribute will be animated along.\n   * \n   * @property {Path} path\n   */\n  this.path             = path;\n\n  /**\n   * The easing used to modify the delta value passed to the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.easing:method\"}}{{/crossLink}}\n   * \n   * @property {Function} easing\n   */\n  this.easing           = anim8.easing( easing );\n\n  /**\n   * The amount of time in milliseconds to animate an attribute over the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.duration:method\"}}{{/crossLink}}\n   * \n   * @property {Number} duration\n   */\n  this.duration         = anim8.duration( duration );\n\n  /**\n   * If this event repeats more than once, this is a pause between animations.\n   *\n   * **See:** {{#crossLink \"Core/anim8.sleep:method\"}}{{/crossLink}}\n   * \n   * @property {Number} sleep\n   */\n  this.sleep            = anim8.sleep( sleep );\n\n  /**\n   * The number of times to repeat the animation.\n   *\n   * **See:** {{#crossLink \"Core/anim8.repeat:method\"}}{{/crossLink}}\n   * \n   * @property {Number} repeat\n   */\n  this.repeat           = anim8.repeat( repeat );\n\n  /**\n   * The amount to scale the value computed from the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.scale:method\"}}{{/crossLink}}\n   * \n   * @property {T} scale\n   */\n  this.scale            = anim8.scale( scale );\n\n  /**\n   * The base value from which to scale from. This is essentially this data\n   * types default value.\n   * \n   * @property {T} scaleBase\n   */\n  this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.ZERO );\n\n  /**\n   * Whether or not this event has an initial value which can be applied at the\n   * start of the animation (or when \n   * {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} is invoked).\n   * \n   * @property {Boolean} hasInitialState\n   */\n  this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n\n  this.delay            = anim8.delay( delay );\n  this.offset           = anim8.offset( offset );\n  this.input            = input;\n};\n\nanim8.override( anim8.Event.prototype = new anim8.Attrimator(),\n{\n  /**\n   * Returns the computed value given a base value and a delta along the path.\n   *\n   * @method computeValue\n   * @param {T} baseValue\n   * @param {Number} delta\n   * @return {T}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * Applies the value to the frame and returns true, otherwise returns false.\n   *\n   * @method applyValue\n   * @param {Object} frame\n   * @param {T} baseValue\n   * @param {Number} delta\n   * @return {T}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[ this.attribute ] = value;\n    }\n\n    return value;\n  },\n\n  nopeat: function()\n  {\n    var newRepeat = anim8.clamp( Math.ceil( ( this.elapsed - this.delay ) / ( this.duration + this.sleep ) ), 0, this.repeat );\n\n    if ( newRepeat !== this.repeat )\n    {\n      this.repeat = newRepeat;\n      this.prestartNext( true );\n    }\n    \n    return this;\n  },\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n  },\n  start: function(now, animator)\n  {\n    this.prestart( now );\n    \n    this.state = this.delay ? anim8.EventState.DELAYED : anim8.EventState.ANIMATING;\n\n    if ( this.hasComputed() )\n    {\n      this.path = this.path.replaceComputed( this, animator );\n    }\n  },\n  startCycle: function(frame)\n  {\n    if ( this.hasInitialState )\n    {\n      return this.applyValue( frame, frame[ this.attribute ], 0 );\n    }\n\n    return false;\n  },\n  update: function(elapsed, frame)\n  {\n    var updated = false;\n    var delay = this.delay;\n    var duration = this.duration;\n    var sleep = this.sleep;\n    var repeat = this.repeat;\n    var oldState = this.state;\n    var newState = this.state;\n    var delta = 0;\n\n    elapsed -= delay;\n\n    var cycle = duration + sleep;\n    var iteration = Math.floor( ( elapsed + sleep ) / cycle );\n\n    if ( iteration >= repeat )\n    {\n      newState = anim8.EventState.FINISHED;\n      delta = 1;\n    }\n    else\n    {\n      elapsed -= iteration * cycle;\n\n      if ( elapsed > duration )\n      {\n        newState = anim8.EventState.SLEEPING;\n        delta = 1;\n      }\n      else\n      {\n        newState = anim8.EventState.ANIMATING;\n        delta = elapsed / duration;\n      }\n    }\n    \n    if ( newState === anim8.EventState.ANIMATING || \n       ( newState !== anim8.EventState.ANIMATING && oldState === anim8.EventState.ANIMATING ) )\n    {\n      this.applyValue( frame, frame[ this.attribute ], delta );\n      updated = true;\n    }\n\n    this.state = newState;\n\n    return updated;\n  },\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay && !this.hasInitialState )\n    {\n      return false;\n    }\n\n    var delta = 0;\n\n    if ( time >= this.delay )\n    {\n      var cycle = (this.duration + this.sleep);\n      var elapsed = (time - this.delay);\n      var iteration = Math.floor( ( elapsed + this.sleep ) / cycle );\n\n      if ( iteration >= this.repeat )\n      {\n        delta = 1.0;\n      }\n      else\n      {\n        delta = Math.min( 1.0, (elapsed % cycle) / this.duration );        \n      }\n    }\n\n    return this.computeValue( out, delta );\n  },\n  totalTime: function()\n  {\n    return Math.min( this.stopTime, this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep) );\n  },\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.offset, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null, this.input );\n  },\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY) && (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n  isFinished: function()\n  {\n    return (this.state === anim8.EventState.FINISHED);\n  }\n\n});\n\n/**\n * Returns an Event given the attribute, the path, and a parsed options object.\n *\n * **See:** {{#crossLink \"Core/anim8.options:method\"}}anim8.options{{/crossLink}}\n * \n * @method fromOptions\n * @for Event\n * @param  {String} attr\n * @param  {Path} path\n * @param  {Object} options\n * @return {Event}\n */\nanim8.Event.fromOptions = function(attr, path, options)\n{\n  return new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.offset, options.repeat, options.scale, options.scaleBase );\n}\n","\n/**\n * Instantiates a new Oncer which extends Attrimator.\n * \n * @param {String} attribute\n * @param {T} value\n * @param {String|Number} delay\n * @param {Boolean} hasInitialState\n * @param {Parser} parser\n * @param {Attrimator} next\n * @class Oncer\n * @constructor\n * @extends Attrimator\n */\nanim8.Oncer = function( attribute, value, delay, hasInitialState, parser, next, input ) \n{\n  this.reset( attribute, parser, next );\n\n  /**\n   * The value that's set to the animator once.\n   * \n   * @property {T} value\n   */\n  this.value = value;\n\n  /**\n   * Whether or not this event has an initial value which can be applied at the\n   * start of the animation (or when \n   * {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} is invoked).\n   * \n   * @property {Boolean} hasInitialState\n   */\n  this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n\n  this.delay            = anim8.delay( delay );\n  this.applied          = false;\n  this.input            = input;\n};\n\nanim8.override( anim8.Oncer.prototype = new anim8.Attrimator(),\n{\n  /**\n   * Computes the value of this Oncer.\n   *\n   * @method getValue\n   * @return {T}\n   */\n  getValue: function()\n  {\n    return anim8.isFunction( this.value ) ? this.value() : this.value;\n  },\n  finish: function(frame)\n  {\n    var update = !this.applied;\n\n    if ( update )\n    {\n      frame[ this.attribute ] = this.getValue();\n     \n      this.applied = true;\n    }\n\n    return update;\n  },\n  start: function(now, animator)\n  {\n    this.prestart( now );\n\n    this.value = animator.getAttribute( this.attribute ).parse( this.value );\n    \n    if ( anim8.isComputed( this.value ) )\n    {\n      this.value = this.value( this, animator );\n    }\n\n    this.applied = false;\n  },\n  startCycle: function(frame)\n  {\n    return this.hasInitialState && this.finish( frame );\n  },\n  update: function(elapsed, frame)\n  {\n    return elapsed >= this.delay && this.finish( frame );\n  },\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay )\n    {\n      return false;\n    }\n\n    return this.getValue();\n  },\n  totalTime: function()\n  {\n    return Math.min( this.stopTime, this.delay );\n  },\n  clone: function()\n  {\n    return new anim8.Oncer( this.attribute, this.value, this.delay, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.value );\n  },\n  isInfinite: function()\n  {\n    return false;\n  },\n  isFinished: function()\n  {\n    return this.applied;\n  }\n});","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, \n * or an object with a spring type to be created. If none of these conditions \n * are true then an error is thrown.\n *\n * @method anim8.spring\n * @for Core\n * @param {Spring|String|Object} spring\n * @return {Spring}\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n\n  throw spring + ' is not a valid spring';\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently \n * enacting on the position based on the implementing classes logic.\n *\n * @class Spring\n * @constructor\n * @extends Attrimator\n */\nanim8.Spring = function()\n{\n};\n\nanim8.override( anim8.Spring.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Resets the spring's properties.\n   *\n   * @method set\n   * @param {String} attribute\n   * @param {Calculator|String} calculator\n   * @param {T|Function|true} rest\n   * @param {T|Function|true} position\n   * @param {T|Function|true} velocity\n   * @param {T|Function|true} gravity\n   * @param {Boolean} finishOnRest\n   */\n  set: function(attribute, calculator, rest, position, velocity, gravity, finishOnRest)\n  { \n    this.reset( attribute, null, null );\n\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = velocity;\n    this.finishOnRest = finishOnRest;\n  },\n  \n  /**\n   * Resolves the rest to the expected format.\n   * \n   * @method resolveRest\n   * @return {T}\n   */\n  resolveRest: function()\n  {\n    return anim8.resolve( this.rest );\n  },\n  \n  /**\n   * Method that's invoked on each spring update.\n   *\n   * @method updateVelocity\n   * @param {Number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  },\n\n  start: function(now, animator)\n  {\n    this.prestart( now );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.ZERO );\n    this.velocity   = this.parseValue( animator, this.velocity, calc.ZERO );\n  },\n\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity );\n  },\n\n  update: function(elapsed, frame)\n  {\n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.clone( this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    else if ( this.finishOnRest && calc.isZero( this.velocity ) )\n    {\n      this.finished = true;\n    }\n    \n    return updated;\n  },\n\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  isFinished: function()\n  {\n    return this.finished;\n  }\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * Instantiates a new SpringLinear.\n * \n * @param {String|false} attribute\n * @param {Calculator} calculator\n * @param {T} position\n * @param {T} rest\n * @param {T} damping\n * @param {T} stiffness\n * @param {T} velocity\n * @param {T} gravity\n * @param {Boolean} finishOnRest\n * @class SpringLinear\n * @constructor\n * @extends Spring\n */\nanim8.SpringLinear = function(attribute, calculator, position, rest, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.SpringLinear.prototype = new anim8.Spring(), \n{\n\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  clone: function()\n  {\n    return new anim8.SpringLinear( this.attribute, this.calculator, this.position, this.rest, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.damping ) || \n           anim8.isComputed( this.stiffness );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n\n});\n\n/**\n * Register the spring parser.\n *\n * @param {Object}\n * @return {SpringLinear}\n */\nanim8.spring['linear'] = function(spring)\n{ \n  return new anim8.SpringLinear(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Instantiates a new SpringDistance.\n * \n * @param {String|false} attribute\n * @param {anim8.Calculator} calculator\n * @param {T} position\n * @param {T} rest\n * @param {Number} distance\n * @param {Number} damping\n * @param {Number} stiffness\n * @param {T} velocity\n * @param {T} gravity\n * @param {Boolean} finishOnRest\n * @class SpringDistance\n * @constructor\n * @extends Spring\n */\nanim8.SpringDistance = function(attribute, calculator, position, rest, distance, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.SpringDistance.prototype = new anim8.Spring(), \n{\n\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n\n  clone: function()\n  {\n    return new anim8.SpringDistance( this.attribute, this.calculator, this.position, this.rest, this.distance, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n  \n});\n\n/**\n * Register the spring parser.\n * \n * @param {Object}\n * @return {SpringDistance}\n */\nanim8.spring['distance'] = function(spring)\n{ \n  return new anim8.SpringDistance(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Animates a single attribute with a velocity and acceleration.\n *\n * @param {String} attribute\n * @param {Parser} parser\n * @param {Calculator} calculator\n * @param {T} position\n * @param {T} velocity\n * @param {T} acceleration\n * @param {Number} terminal\n * @param {Number} stopTime\n * @class Physics\n * @constructor\n * @extends Attrimator\n */\nanim8.Physics = function( attribute, parser, calculator, position, velocity, acceleration, terminal, stopTime )\n{\n  this.reset( attribute, parser, null );\n\n  this.calculator   = calculator;\n  this.position     = position;\n  this.velocity     = velocity;\n  this.acceleration = acceleration;\n  this.terminal     = anim8.number( terminal, Number.POSITIVE_INFINITY );\n  this.stopTime     = anim8.time( stopTime, Number.POSITIVE_INFINITY );\n  this.finished     = false;\n};\n\nanim8.override( anim8.Physics.prototype = new anim8.Attrimator(),\n{\n  /**\n   * Parses a value for the animator given a default value.\n   *\n   * @method parseValue\n   * @param {anim8.Animator} animator.\n   * @param {T} value\n   * @param {T} defaultValue\n   * @return {T}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isComputed( parsed ) )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n\n  /**\n   * Resolves the velocity to a value.\n   *\n   * @method resolveVelocity\n   * @return {T}\n   */\n  resolveVelocity: function()\n  {\n    return anim8.resolve( this.velocity );\n  },\n\n  /**\n   * Resolves the acceleration to a value.\n   *\n   * @method resolveAcceleration\n   * @return {T}\n   */\n  resolveAcceleration: function()\n  {\n    return anim8.resolve( this.acceleration );\n  },\n\n  start: function(now, animator)\n  {\n    this.prestart( now );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator     = calc;\n    this.position       = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.initalPosition = calc.clone( this.position );\n    this.velocity       = this.parseValue( animator, this.velocity, calc.ZERO );\n    this.acceleration   = this.parseValue( animator, this.acceleration, calc.ZERO );\n    this.temp           = calc.create();\n  },\n\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.position ) || \n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.acceleration );\n  },\n\n  update: function(elapsed, frame)\n  {\n    var value = this.valueAt( elapsed, this.temp, true );\n\n    if ( value !== false )\n    {\n      frame[ this.attribute ] = this.position = value;\n\n      return true;\n    }\n\n    var calc = this.calculator;\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Physics.MAX_DT );\n    var vel = calc.copy( this.temp, this.resolveVelocity() );\n    var acc = this.resolveAcceleration();\n    var pos = this.position;\n\n    vel = calc.adds( vel, acc, dt );\n\n    if ( this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      vel = calc.clamp( vel, 0, this.terminal );\n    }\n\n    pos = calc.adds( pos, vel, dt );\n    \n    this.position = pos;\n\n    if ( !anim8.isFunction( this.velocity ) )\n    {\n      this.velocity = calc.copy( this.velocity, vel );\n    }\n\n    frame[ this.attribute ] = pos;\n\n    return true;\n  },\n\n  valueAt: function(time, out, usePosition)\n  {\n    if ( anim8.isFunction( this.velocity ) || anim8.isFunction( this.acceleration ) || this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      return false;\n    }\n\n    time -= this.delay;\n    time *= 0.001;\n\n    var calc = this.calculator;\n    var value = usePosition ? calc.copy( this.position, this.initalPosition ) : calc.copy( out, this.initalPosition );\n    value = calc.adds( value, this.velocity, time );\n    value = calc.adds( value, this.acceleration, time * time );\n\n    return value;\n  },\n\n  clone: function()\n  {\n    return new anim8.Physics( this.attribute, this.parser, this.calculator, this.position, this.velocity, this.acceleration, this.terminal, this.stopTime );\n  },\n\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  isFinished: function()\n  {\n    return this.finished;\n  }\n  \n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Physics.MAX_DT = 0.1;\n","\n/**\n * Returns an instance of {{#crossLink \"Animation\"}}{{/crossLink}} based on the \n * given input & options. If the input is a string the animation with that name \n * is returned. If the input is a string with an animation name and an option \n * string the animation with the given name modified by any additional options \n * is returned. Commas can be used to queue animation & option pairs one after \n * another. Ampersands can be used to play animations at the same time. If the \n * input is an object an anonymous animation is created. If no animation could \n * be determined then false is returned.\n *\n * **Examples:**\n * \n *     anim8.animation('wiggle');\n *     anim8.animation('wiggle ~1s 4s z40ms x5 !1.2');\n *     anim8.animation('wiggle', {...options...});\n *     anim8.animation('wiggle, tada ~50ms, fadeOut 2s');\n *     anim8.animation('wiggle & tada !3, fadeOut');\n *     anim8.animation({...definition...});\n * \n * If the given input is a string you can cache it. An example would be\n * 'wiggle ~1s 2s x3' - if `cache` is true and you call this method again it won't\n * need to be parsed again.\n *\n * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n * \n * @method anim8.animation\n * @for Core\n * @param {Animation|String|Object} animation\n * @param {String|Object} [options]\n * @param {Boolean} [cache=false]\n * @return {Animation|False}\n * @throws {String} The animation string has an invalid animation name or the\n *    animation fails to create attrimators from the animation definition.\n */\nanim8.animation = function(animation, options, cache)\n{\n  var options = anim8.options( options, cache );\n  var hasOptions = !anim8.isEmpty( options );\n\n  if ( animation instanceof anim8.Animation )\n  {\n    if ( hasOptions )\n    {\n      var attrimators = animation.newAttrimators();\n\n      animation.merge( options, attrimators );\n\n      return new anim8.Animation( false, animation.input, options, attrimators);\n    }\n\n    return animation;\n  }\n  if ( anim8.isString( animation ) )\n  {\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation && !hasOptions )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var attrimators = anim8.attrimatorsFor( animation, options, cache );\n\n    if ( key in anim8.animation && !hasOptions )\n    {\n      return anim8.animation[ key ];\n    }\n\n    return new anim8.Animation( false, {}, options, attrimators );\n  }\n  if ( anim8.isObject( animation ) )\n  {\n    var attrimators = anim8.attrimatorsFor( animation, options, cache );\n\n    return new anim8.Animation( false, animation, options, attrimators );\n  }\n  \n  return false;\n};\n\n/**\n * Generates an AttrimatorMap for the given animation and options. If the \n * animation given is an instance of {{#crossLink \"Animation\"}}{{/crossLink}}\n * then a copy of that animations attrimators is returned, and if options are\n * specified then they are merged into the generated attrimators. If the \n * animation given is an object it's properties are iterated and for each parser\n * with a matching name attrimators are generated. If the animation given is a\n * string of a cached or saved animation then it's handled as if an instance of\n * {{#crossLink \"Animation\"}}{{/crossLink}} was given. If the animation given\n * is a string which isn't saved or cached it goes through the following parsing\n * logic.\n *\n * - Split up the string into sections with `,` which queues animations.\n * - Split up each of the sections with `&` which enables animations to play\n *   simultaneously.\n * - For each of those sections, take the first word as the name of the \n *   animation and any remaining text as the options for that animation.\n *\n * If no attrimators could be parsed, an empty attrimator map is returned. If\n * the animation given is a string that specifies animations that don't exist\n * an error is thrown.\n * \n * **Examples:**\n * \n *     anim8.attrimatorsFor('wiggle');\n *     anim8.attrimatorsFor('wiggle ~1s 4s z40ms x5 !1.2');\n *     anim8.attrimatorsFor('wiggle', {...options...});\n *     anim8.attrimatorsFor('wiggle, tada ~50ms, fadeOut 2s');\n *     anim8.attrimatorsFor('wiggle & tada !3, fadeOut');\n *     anim8.attrimatorsFor({...definition...});\n * \n * If the given input is a string you can cache it. An example would be\n * 'wiggle ~1s 2s x3' - if `cache` is true and you call this method again it won't\n * need to be parsed again.\n *\n * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n * \n * @method anim8.attrimatorsFor\n * @for Core\n * @param {Object|String} animation\n * @param {Object|String} [options]\n * @param {Boolean} [cache=false]\n * @return {AttrimatorMap}\n */\nanim8.attrimatorsFor = function( animation, options, cache )\n{\n  var options = anim8.options( options, cache );\n  var hasOptions = !anim8.isEmpty( options );\n  var attrimators = new anim8.AttrimatorMap();\n\n  if ( animation instanceof anim8.Animation )\n  {\n    attrimators.putMap( animation.newAttrimators() );\n\n    if ( hasOptions )\n    {\n      animation.merge( options, attrimators );\n    }\n  }\n  else if ( anim8.isObject( animation ) )\n  {\n    var helper = new anim8.ParserHelper( animation, options );\n\n    for (var parserName in animation)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.parse( animation, options, attrimators, helper );\n      }\n    }\n  }\n  else if ( anim8.isString( animation ) )\n  {\n    var key = animation.toLowerCase();\n    var saved = anim8.animation[ key ];\n    var cacheIt = anim8.coalesce( cache, anim8.defaults.cache );\n\n    if ( saved )\n    {\n      attrimators.putMap( saved.newAttrimators() );\n\n      if ( hasOptions )\n      {\n        saved.merge( options, attrimators );\n      }\n    }\n    else\n    {\n      var animationsQueued = animation.split( ',' );\n\n      for (var k = 0; k < animationsQueued.length; k++)\n      {\n        var animationsMerged = animationsQueued[ k ].split( '&' );\n        var base = new anim8.AttrimatorMap();\n\n        for (var j = 0; j < animationsMerged.length; j++)\n        {\n          var animationString = anim8.trim( animationsMerged[ j ].toLowerCase() );\n          var animationSplit = animationString.split( ' ' );\n          var parsedAnimation = anim8.animation[ animationSplit[ 0 ] ];\n          \n          if ( parsedAnimation )\n          {\n            var parsedOptions = anim8.options( animationSplit.slice( 1 ), cache );\n            var hasParsedOptions = !anim8.isEmpty( parsedOptions );\n            var parsedAttrimators = parsedAnimation.newAttrimators();\n\n            if ( hasOptions && hasParsedOptions )\n            {\n              parsedAnimation.merge( anim8.extend( {}, options, parsedOptions ), parsedAttrimators );\n            }\n            else if ( hasParsedOptions )\n            {\n              parsedAnimation.merge( parsedOptions, parsedAttrimators );\n            }\n            else if ( hasOptions )\n            {\n              parsedAnimation.merge( options, parsedAttrimators );\n            }\n\n            base.putMap( parsedAttrimators );\n          }\n          else\n          {\n            throw animationString + ' is not a valid animation in \"' + animationsQueued[ k ] + '\"';\n          }\n        }\n\n        attrimators.queueMap( base );\n      }\n\n      if ( cacheIt && !hasOptions )\n      {\n        anim8.animation[ key ] = new anim8.Animation( animation, {}, {}, attrimators );\n      }\n    }\n  }\n\n  return attrimators;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and \n * transitioned into at a later time providing the name and optionally options \n * to override with.\n *\n * **See:** {{#crossLink \"Core/anim8.animation:method\"}}anim8.animation{{/crossLink}},\n *          {{#crossLink \"Core/anim8.options:method\"}}anim8.options{{/crossLink}}\n *\n * @method anim8.save\n * @for Core\n * @param {String} name\n * @param {Animation|String|Object} animation\n * @param {String|Object} [options]\n */\nanim8.save = function( name, animation, options )\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and \n * the attrimators that were generated from the input & options. If the name is \n * false this is an anonymous animation. Input & Options are used by parsers to \n * generate attrimators, options allow for an animations default properties to \n * be overriden.\n *\n * @param {String|Boolean} name\n * @param {Object} input\n * @param {Object} options\n * @param {AttrimatorMap} attrimators\n * @class Animation\n * @constructor\n */\nanim8.Animation = function(name, input, options, attrimators)\n{\n  /**\n   * The name of the animation, or false if it's an anonymous animation. \n   *\n   * @property {String|False} name\n   */\n  this.name = name;\n\n  /**\n   * The object which created the animation.\n   *\n   * @property {Object} input\n   */\n  this.input = input;\n\n  /**\n   * The options given when the animation was created.\n   *\n   * @property {Object} [options]\n   */\n  this.options = options;\n\n  /**\n   * The name of the animation, or false if it's an anonymous animation. \n   *\n   * @property {AttrimatorMap} name\n   */\n  this.attrimators = attrimators;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Generates an map of event instances from the attrimators in this animation.\n   *\n   * @method newAttrimators\n   * @return {AttrimatorMap}\n   */\n  newAttrimators: function()\n  {\n    return this.attrimators.clone();\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @method merge\n   * @param {Object} [options]\n   * @param {AttrimatorMap} attrimatorMap\n   * @return {AttrimatorMap}\n   */\n  merge: function(options, attrimatorMap)\n  {\n    var helper = new anim8.ParserHelper( this.input, this.options, options );\n\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false && parser.merge )\n      {\n        parser.merge( this.input, options, this.options, attrimatorMap, helper );\n      }\n    }\n\n    return attrimatorMap;\n  }\n\n};","\n/**\n * Parses a value into a transition object. If the given input is a string it's\n * expected to be in a similar format to:\n * \n *     [time] [easing[-easingType]] >[outro] <[intro] /[granularity] ^[lookup]\n * \n * This is also a registry of transitions, you can add your own transitions that\n * can be used later with syntax like:\n * \n *     anim8.transition['myTransition'] = anim8.transition('50ms 0.05 linear');\n * \n * So you can use 'myTransition' as the transition input.\n * \n *     animator.transition('myTransition', 'myAnimation');\n * \n * @method anim8.transition\n * @for Core\n * @param {Object|String|Array} options\n * @param {Boolean} [cache]\n * @return {Object}\n */\nanim8.transition = function(transition, cache) \n{\n  // 1. If it's a string, convert it into an array.\n  // 2. If it's an array, parse it and convert it into an object.\n  // 3. If it's an object, fill in any missing values with the defaults.\n\n  var originalInput = transition;\n\n  if ( anim8.isString( transition ) )\n  {\n    if ( transition in anim8.transition )\n    {\n      return anim8.transition[ transition ];\n    }\n\n    transition = transition.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( transition ) )\n  {\n    var transitionArray = transition;\n\n    transition = {};\n\n    for (var i = 0; i < transitionArray.length; i++)\n    {\n      var part = transitionArray[i];\n      var first = part.charAt( 0 );\n\n      // Introduction Time (into next event)\n      if ( first === '<' )\n      {\n        var intro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( intro ) )\n        {\n          transition.intro = intro;\n        }\n      }\n      // Outroduction Time (out of current event)\n      else if ( first === '>' )\n      {\n        var outro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( outro ) )\n        {\n          transition.outro = outro;\n        }\n      }\n      // Granularity (for velocity conscious transitions)\n      else if ( first === '/' )\n      {\n        var granularity = anim8.number( part.substring(1), false );\n\n        if ( granularity !== false )\n        {\n          transition.granularity = granularity;\n        }\n      }\n      // Lookup (for velocity conscious transitions)\n      else if ( first === '^' )\n      {\n        var lookup = anim8.time( part.substring(1), false );\n\n        if ( lookup !== false )\n        {\n          transition.lookup = lookup;\n        }\n      }\n      else\n      {\n        // Easing\n        var easing = anim8.easing( part, false );\n\n        if ( easing !== false )\n        {\n          transition.easing = easing;\n        }\n\n        // Time\n        var time = anim8.time( part, false );\n\n        if ( time !== false )\n        {\n          transition.time = time;\n        }\n      }\n    }\n  }\n\n  if ( anim8.isObject( transition ) )\n  {\n    transition.time        = anim8.time( transition.time, anim8.defaults.transitionTime );\n    transition.outro       = anim8.time( transition.outro, anim8.defaults.transitionOutro );\n    transition.intro       = anim8.time( transition.intro, anim8.defaults.transitionIntro );\n    transition.easing      = anim8.easing( anim8.coalesce( transition.easing, anim8.defaults.transitionEasing ) );\n    transition.granularity = anim8.number( transition.granularity, anim8.defaults.transitionGranularity );\n    transition.lookup      = anim8.time( transition.lookup, anim8.defaults.transitionLookup );\n    \n    if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheTransitions ) )\n    {\n      anim8.transition[ originalInput ] = transition;\n    }\n\n    return transition;\n  }\n\n  return anim8.defaults.noTransition;\n};\n","\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n * \n *     [duration] x[repeat] z[sleep] ~[delay] @[offset] ![scale] [[easing][-easingType]]\n * \n * This is also a registry of options, you can add your own options that\n * can be used later with syntax like:\n * \n *     anim8.options['myOptions'] = anim8.options('1.5s x2 !2');\n * \n * So you can use 'myOptions' as the options input.\n *\n * You can also specify relative values & scaling values. If you have the \n * following options:\n *\n *     +2s x*2 ~-1s\n *\n * It will result in adding 2 seconds to the duration, repeating it twice as\n * much, and subtracting one second from the delay.\n *\n * For more information on acceptable values in options:\n *\n * **See:** {{#crossLink \"Core/anim8.duration:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.repeat:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.sleep:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.delay:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.scale:method\"}}{{/crossLink}}, and\n *          {{#crossLink \"Core/anim8.easing:method\"}}{{/crossLink}}\n * \n * @method anim8.options\n * @for Core\n * @param {Object|String|Array} options\n * @param {Boolean} [cache]\n * @return {Object}\n */\nanim8.options = (function()\n{\n  function parseProperty(input, out, parseFunction, property, propertyAdd, propertyScale)\n  {\n    var first = input.charAt( 0 );\n\n    if ( first === '*' )\n    {\n      parsed = anim8.number( input.substring( 1 ), false );\n\n      if ( parsed !== false )\n      {\n        out[ propertyScale ] = parsed;\n      }\n    }\n    else\n    {\n      if ( first === '+' || first === '-' )\n      {\n        property = propertyAdd;\n        input = input.substring( 1 );\n      }\n\n      var parsed = parseFunction( input, false )\n\n      if ( parsed !== false )\n      {\n        out[ property ] = parsed;\n      }  \n    }\n\n    return parsed;\n  }\n\n  return function(options, cache)\n  {\n    var originalInput = options;\n    var cacheIt = anim8.coalesce( cache, anim8.defaults.cacheOptions );\n\n    if ( anim8.isString( options ) )\n    {\n      if ( options in anim8.options )\n      {\n        return anim8.options[ options ];\n      }\n\n      options = options.toLowerCase().split(' ');\n    }\n\n    if ( anim8.isArray( options ) )\n    {\n      var parsed = {};\n\n      for (var i = 0; i < options.length; i++)\n      {\n        var part = options[i];\n        var first = part.charAt( 0 );\n\n        // Repeats\n        if ( first === 'x' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n        }\n        // Sleeping\n        else if ( first === 'z' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'sleep', 'sleepAdd', 'sleepScale' );\n        }\n        // Delay\n        else if ( first === '~' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'delay', 'delayAdd', 'delayScale' );\n        }\n        // Scaling\n        else if ( first === '!' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.number, 'scale', 'scaleAdd', 'scaleScale' );\n        }\n        // Offset\n        else if ( first === '@' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'offset', 'offsetAdd', 'offsetScale' );\n        }\n        else\n        {\n          // Easing?\n          var easing = anim8.easing( part, false );\n\n          if ( easing !== false )\n          {\n            parsed.easing = easing;\n          }\n\n          // Duration?\n          var duration = parseProperty( part, parsed, anim8.time, 'duration', 'durationAdd', 'durationScale' );\n\n          if ( duration === false )\n          {\n            // If not a duration, might be an alternative repeat? (doesn't start with x)\n            parseProperty( part, parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n          }\n        }\n      }\n\n      if ( anim8.isString( originalInput ) && cacheIt )\n      {\n        anim8.options[ originalInput ] = parsed;\n      }\n\n      return parsed; \n    }\n\n    if ( anim8.isObject( options ) )\n    {\n      return options;\n    }\n\n    return anim8.defaults.noOptions;\n  };\n\n})();","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {Any} e\n * @class Animator\n * @constructor\n * @extends anim8.eventize\n */\nanim8.Animator = function(e) \n{\n  this.reset( e );\n};\n\n/**\n * The event triggered after preupdate is called. Pre-update is used to run any\n * preparations on the subject before updates are made and attributes are \n * applied.\n * \n * @event preupdate\n */\n\n/**\n * The event triggered after all attrimators are updated and any new values\n * have been applied to the current values (frame) on the animator.\n * \n * @event update\n */\n\n/**\n * The event triggered after the current values (frame) on the animator are\n * applied to the subject.\n * \n * @event apply\n */\n\n/**\n * The event triggered when the given animation cycle starts (and initial \n * values are applied) for all attrimators in the cycle.\n * \n * @event cycleStart:#\n * @param {Number} cycleID\n */\n\n/**\n * The event triggered when the given animation cycle ends which occurs when the\n * last attrimator for an animation finishes or is interrupted by commands like \n * play, queue, transition, end, finish, & stop.\n * \n * @event cycleEnd:#\n * @param {Number} cycleID\n */\n\n/**\n * The event triggered when all animations on the animator have finished.\n * \n * @event finished\n * @param {Animator} animator\n */\n\n/**\n * The event triggered when an animator is deactivated which occurs when an \n * animator has finished animating and is being taken off the list of live\n * animators (anim8.animating).\n * \n * @event deactivate\n */\n\n/**\n * The event triggered after the user calls destroy on an animator.\n * \n * @event destroyed\n */\n\nanim8.fn = anim8.Animator.prototype = \n{\n\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @method reset\n   * @param {Any} subject\n   * @chainable\n   * @protected\n   */\n  reset: function(subject)\n  {\n    /**\n     * The subject which is being animated.\n     *\n     * @property {Any} subject\n     */\n    this.subject = subject;\n\n    /**\n     * The map of attrimators animating the subject.\n     *\n     * @property {AttrimatorMap} attrimators\n     */\n    this.attrimators = new anim8.AttrimatorMap();\n\n    /**\n     * The array of attrimators recently added to the animator that\n     * are ready to be started.\n     *\n     * @property {Array} attrimatorsAdded\n     * @protected\n     */\n    this.attrimatorsAdded = [];\n\n    /**\n     * The object which stores the attribute values being animated.\n     *\n     * @property {Object} frame\n     */\n    this.frame = {};\n\n    /**\n     * The object which stores the attributes last updated.\n     *\n     * @property {Object} updated\n     */\n    this.updated = {};\n\n    /**\n     * Whether or not this animator has completely finished animating it's subject.\n     *\n     * @property {Boolean} finished\n     */\n    this.finished = false;\n\n    /**\n     * The factory which created this Animator given a subject.\n     *\n     * @property {Factory} factory\n     */\n    this.factory = null;\n\n    /**\n     * Whether or not this animator is actively being updated.\n     *\n     * @property {Boolean} active\n     */\n    this.active = false;\n\n    /**\n     * The current cycle being animated. Multiple cycles can be animated at once, this is the first one.\n     *\n     * @property {Number} cycleCurrent\n     * @protected\n     */\n    this.cycleCurrent = 0;\n\n    /**\n     * The ID of the next cycle of animations to be added to this Animator.\n     *\n     * @property {Number} cycleNext\n     * @protected\n     */\n    this.cycleNext = 0;\n\n    /**\n     * The last cycle that was ended.\n     *\n     * @property {Number} cycleEnded\n     * @protected\n     */\n    this.cycleEnded = 0;\n    \n    return this;\n  },\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are \n   * placed to group them together so we know when to apply their initial value.\n   *\n   * @method newCycle\n   * @param {Attrimator|AttrimatorMap} attrimators\n   * @chainable\n   * @protected\n   */\n  newCycle: function(attrimators)\n  {\n    this.cycleNext++;\n\n    if ( attrimators instanceof anim8.AttrimatorMap )\n    {\n      this.cycleNext = attrimators.applyCycle( this.cycleNext );\n    }\n    else if ( attrimators instanceof anim8.Attrimator )\n    {\n      attrimators.cycle = this.cycleNext;\n    }\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all attrimators with the \n   * same cycle identifier and applying their initial state.\n   * \n   * @method applyCurrentCycle\n   * @chainable\n   * @protected\n   */\n  applyCurrentCycle: function()\n  {\n    var cycle = this.cycleCurrent;\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      if ( attrimator.cycle === cycle )\n      {\n        this.updated[ attr ] = (attrimator.startCycle( this.frame ) !== false) || this.updated[ attr ];\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Ends the current cycle which calls any listening functions.\n   * \n   * @method endCurrentCycle\n   * @chainable\n   * @protected\n   */\n  endCurrentCycle: function()\n  {\n    if ( this.cycleCurrent > this.cycleEnded )\n    {\n      this.cycleEnded = this.cycleCurrent;\n      this.trigger( 'cycleEnd:' + this.cycleCurrent, this.cycleCurrent ); \n    }\n  },\n\n  /**\n   * Returns the attribute descriptor given the name of the attribute.\n   * \n   * @method getAttribute\n   * @param  {String} attr\n   * @return {Object}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   *\n   * @method restore\n   * @chainable\n   */\n  restore: function()\n  { \n    return this;\n  },\n\n  /**\n   * Applies the initial state of recently added attrimators immediately.\n   * \n   * @method applyInitialState\n   * @chainable\n   */\n  applyInitialState: function()\n  {\n    var now = anim8.now();\n\n    this.preupdate( now );\n    this.update( now );\n    this.apply();\n\n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are \n   * called. This is used to make any necessary preparations before the animator\n   * is updated.\n   *\n   * @method preupdate\n   * @param {Number} now\n   * @chainable\n   */\n  preupdate: function(now)\n  {\n    // If there are attribute placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the attribute.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      for (var i = 0; i < aa.length; i++)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        if ( attr in this.subject )\n        {\n          this.frame[ attr ] = this.subject[ attr ];\n        }\n        else\n        {\n          this.setDefault( attr );\n        }\n\n        attrimator.start( now, this );     \n      }\n\n      aa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this \n   * Animator if there's no value there.\n   * \n   * @method setDefault\n   * @param {String} attr\n   * @protected\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n  \n  /**\n   * Updates all attrimators in this animator with the given time.\n   *\n   * @method update\n   * @param {Number} now\n   * @chainable\n   */\n  update: function(now) \n  {  \n    this.wasFinished = this.finished;\n    this.finished = true;\n\n    var attrimators = this.attrimators.values;\n    var minCycle = this.cycleNext;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      this.updated[ attr ] = attrimator.setTime( now, this.frame );\n\n      this.finished = this.finished && attrimator.isFinished();\n\n      minCycle = Math.min( minCycle, attrimator.cycle );\n    }\n\n    if ( this.cycleCurrent < minCycle )\n    {\n      while ( this.cycleCurrent < minCycle )\n      {\n        this.endCurrentCycle();\n        this.cycleCurrent++;\n      }\n\n      this.cycleCurrent = minCycle;\n      this.applyCurrentCycle();\n      this.trigger( 'cycleStart:' + this.cycleCurrent, this.cycleCurrent );\n    }\n\n    if ( !this.wasFinished && this.finished )\n    {\n      this.endCurrentCycle();\n    }\n\n    this.trigger('update');\n    \n    return this;\n  },\n\n  /**\n   * Places the attribute animator in this animator replacing any existing \n   * animator for the same attribute. The next time the animator is updated the \n   * attribute animator will be started. The previous (if any) attrimator is\n   * returned.\n   * \n   * @method placeAttrimator\n   * @param {Attrimator} attrimator\n   * @return {Attrimator}\n   */\n  placeAttrimator: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n    var existing = this.attrimators.get( attr );\n\n    this.attrimators.put( attr, attrimator );\n    this.attrimatorsAdded.push( attrimator );\n\n    this.finished = false;\n\n    return existing;\n  },\n\n  /**\n   * Applies all updated attributes to the subject. This method is invoked with \n   * all of the other animators at the end of the animation cycle.\n   *\n   * @method apply\n   * @chainable\n   */\n  apply: function()\n  {\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n        this.updated[ attr ] = false;\n      }\n    }\n  \n    this.trigger('apply');\n  \n    this.trimAttrimators();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished attrimators and places any queued attrimators. If the\n   * animator previously wasn't finished but now is the 'finished' event will\n   * be triggered.\n   *\n   * @method trimAttrimators\n   * @chainable\n   * @protected\n   */\n  trimAttrimators: function()\n  {\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( attrimator.isFinished() )\n      {\n        if ( attrimator.next )\n        {\n          this.placeAttrimator( attrimator.next );\n        }\n        else\n        {\n          this.attrimators.removeAt( i );\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n\n    return this;\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the \n   * attribute is not or has not animated).\n   *\n   * @method value\n   * @param {String} attr\n   * @return {Any}\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there \n   * already.\n   * \n   * @method activate\n   * @chainable\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed \n   * from the list of currently animating Animators.\n   *\n   * @method deactivate\n   * @chainable\n   */\n  deactivate: function()\n  { \n    this.trigger('deactivate', this);\n\n    return this;\n  },\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any \n   * relationship between the subject and animator. The next time an animator is\n   * generated for the subject a new animator will be created.\n   *\n   * @method destroy\n   * @chainable\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n\n    return this;\n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing attrimator for the \n   * same attribute. A spring object can be given, an instance of anim8.Spring, \n   * or a name of a saved Spring. The spring added to the animator is returned.\n   * \n   * @method spring\n   * @param {Spring|String|Object} spring\n   * @return {Spring}\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.newCycle( spring );\n    this.placeAttrimator( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Plays an animation. Attributes in the animation that are currently being\n   * animated will be stopped and replaced with the new attrimators. If `all` is\n   * true then any attrimators animating not specified in the given animation\n   * will be stopped.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method play\n   * @param {Animation|String|Object} animation\n   * @param {String|Object} [options]\n   * @param {Boolean} [all=false] \n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  play: function(animation, options, all, cache)\n  {\n    var attrimatorMap = anim8.attrimatorsFor( animation, options, cache );\n    \n    this.newCycle( attrimatorMap );\n    this.playAttrimators( attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Plays a map of attrimators. Attributes in the attrimator map that are \n   * currently being animated will be stopped and replaced with the new\n   * attrimators. If \"all\" is true then any attrimators animating not specified\n   * in the given attrimator map will be stopped. This method will not activate \n   * the Animator, that has to be done manually.\n   * \n   * @method playAttrimators\n   * @param {AttrimatorMap} animatorMap\n   * @param {Boolean} [all]\n   * @chainable\n   * @protected\n   */\n  playAttrimators: function(attrimatorMap, all)\n  {\n    if ( all )\n    {\n      this.finishNotPresent( attrimatorMap, 0 );\n    }\n\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      this.placeAttrimator( attrimators[i] );\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation. The attrimators generated from the given animation \n   * will be started at the same time - as soon as all finite attrimators for\n   * the same attributes are finished. Any infinite attrimators will be \n   * automatically stopped when all queued attrimators are set to start.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method queue\n   * @param {Animation|String|Object} animation\n   * @param {String|Object} [options]\n   * @param {Boolean} [cache]\n   * @chainable\n   */\n  queue: function(animation, options, cache)\n  {\n    var attrimatorMap = anim8.attrimatorsFor( animation, options, cache );\n    \n    this.newCycle( attrimatorMap );\n    this.queueAttrimators( attrimatorMap );\n\n    return this.activate();\n  },\n\n  /**\n   * Queues a map of attrimators. The map of attrimators will be started at the\n   * same time - as soon as all finished attrimators for the same attribute are\n   * finished. Any infinite attrimators will be automatically stopped when all\n   * queued attrimators are set to start.\n   * \n   * @method queueAttrimators\n   * @param {AttrimatorMap} attrimatorMap\n   * @chainable\n   * @protected\n   */\n  queueAttrimators: function(attrimatorMap)\n  {\n    this.attrimators.queueMap( attrimatorMap, this.placeAttrimator, this );\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing attrimators into the beginning of a \n   * new animation. Several parameters can be specified in the transition object\n   * which determine how the transition is made. If \"all\" is true then any \n   * attrimators animating not specified in the given animation will be stopped.\n   *\n   * time: the total time to take to transition into a new animation.\n   * outro: time to look into the future for the current attrimator to curve to.\n   * intro: time to look into the future for the next attrimator to curve into.\n   * lookup: time to look into the future to calculate velocity which is used\n   *   for negative intros and maintaing consistent exit & entrance velocity.\n   * granularity: when greater than 2 it activates smooth transitions where the\n   *    velocity of the new & old attrimators is maintained over the transition.\n   * \n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method transition\n   * @param {String|Array|Object} transition\n   * @param {String|Object|Animation} animation\n   * @param {Object} [options]\n   * @param {Boolean} [all]\n   * @param {Boolean} [cache]\n   * @chainable\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var attrimatorMap = anim8.attrimatorsFor( animation, options, cache );\n\n    this.newCycle( attrimatorMap );\n    this.transitionAttrimators( transition, attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing attrimators into the beginning of a\n   * new animation. Several parameters can be specified in the transition object\n   * which determine how the transition is made. If \"all\" is true then any \n   * attrimators animating not specified in the given attrimator map will be \n   * stopped.\n   *\n   * time: the total time to take to transition into a new animation.\n   * outro: time to look into the future for the current attrimator to curve to.\n   * intro: time to look into the future for the next attrimator to curve into.\n   * lookup: time to look into the future to calculate velocity which is used\n   *   for negative intros and maintaing consistent exit & entrance velocity.\n   * granularity: when greater than 2 it activates smooth transitions where the\n   *    velocity of the new & old attrimators is maintained over the transition.\n   *\n   * @method transitionAttrimators\n   * @param {Object} transition\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {Boolean} [all]\n   * @chainable\n   * @protected\n   */\n  transitionAttrimators: function(transition, attrimatorMap, all)\n  {\n    // TRANSITIONING:\n    // If the animator doesn't have an attrimator for the given attribute just add the attrimator adding the total delay\n    // If the animator has an attrimator currently...\n    //   If the current attrimator or new attrimator don't have values at the desired times...\n    //      Stop the current attrimator after the total delay (adding the delay of the new attrimator as well)\n    //      Queue the new attrimator\n    //   Else\n    //      Create a path using the methods detailed above\n    // If all is true and there's an attrimator left on the animator that isn't being transitioned, stop it after the total delay.\n\n    // CREATING A TRANSITION PATH:\n    // If intro & outro are 0, use Tween\n    // If intro is 0, use Quadratic Path between current value, outro point, and first point on new path.\n    // If outro is 0, use Quadratic Path between current value, first point on new path, and intro point.\n    // If intro & outro are not 0, use Cubic Path between current value, outro point, first point on new path, and intro point.\n    // If granularity is given > 1 then compile the path, compute intro & outro velocities, and compute deltas for new \n    //    compiled path based on interpolated velocity over the path (knowing it's length and transition time)\n\n    var current = this.attrimators;\n    var attrimators = attrimatorMap.values;\n\n    // If transition all attributes, \n    if ( all )\n    {\n      this.finishNotPresent( attrimatorMap, transition.time );\n    }\n\n    // Only transition if we need to\n    if ( current.hasOverlap( attrimatorMap ) )\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var next = attrimators[ i ];\n        var attr = next.attribute;\n        var curr = current.get( attr );\n\n        if ( curr && anim8.isDefined( this.frame[ attr ] ) )\n        {\n          var attribute = this.getAttribute( attr );\n          var calc = attribute.calculator;\n\n          var p2 = next.valueAt( 0, calc.create() );\n          \n          if ( p2 !== false )\n          {\n            var transitionTime = transition.time;\n            var p0 = calc.clone( this.frame[ attr ] );            \n            var p1 = transition.outro ? curr.valueAt( curr.getElapsed() + transition.outro, calc.create() ) : false;\n            var p3 = transition.intro ? next.valueAt( transition.intro, calc.create() ) : false;\n            var path = null;\n\n            // If the intro is negative we can look into the past by looking a little bit into\n            // the future and assume the past is going in the same direction (only the opposite). \n            if ( p3 !== false && transition.intro < 0 && transition.lookup > 0 )\n            {\n              var pastLookahead = next.valueAt( transition.lookup, calc.create() );\n              var pastVelocity = calc.sub( pastLookahead, p2 );\n\n              if ( pastVelocity !== false )\n              {\n                var pastNegativeVelocity = calc.scale( pastVelocity, transition.intro / transition.lookup );\n                var past = calc.add( pastNegativeVelocity, p2 );\n                \n                p3 = p2;\n                p2 = past;\n              }\n            }\n\n            // Build a path with as many of the points as possible.\n            if ( p1 === false && p3 === false )\n            {\n              path = new anim8.Tween( attr, calc, p0, p2 );\n            }\n            else if ( p1 === false )\n            {\n              path = new anim8.PathQuadratic( attr, calc, p0, p2, p3 );\n            }\n            else if ( p3 === false )\n            {\n              path = new anim8.PathQuadratic( attr, calc, p0, p1, p2 );\n            }\n            else\n            {\n              path = new anim8.PathCubic( attr, calc, p0, p1, p2, p3 );\n            }\n            \n            // If granularity is specified we will try to make the transition \n            // smooth by maintaining exit (outro) velocity from the current attrimator\n            // and interpolating it to the entrance (intro) velocity for the \n            // attrimator we're transitioning into.\n            if ( transition.granularity > 2 && transition.lookup > 0 )\n            { \n              var outTime  = p1 === false ? curr.getElapsed() : curr.getElapsed() + transition.outro;\n              var outPoint = p1 === false ? p0 : p1;\n              var outNext  = curr.valueAt( outTime + transition.lookup, calc.create() );\n\n              var inTime   = p3 === false ? 0 : transition.intro;\n              var inPoint  = p3 === false ? p2 : p3;\n              var inNext   = next.valueAt( inTime + transition.lookup, calc.create() );\n\n              // We can only proceed if we have reference points to calculate\n              // exit & entrance velocity.\n              if ( outNext !== false && inNext !== false )\n              {\n                var outVelocity  = calc.sub( calc.clone( outNext ), outPoint );\n                var outPerMillis = calc.length( outVelocity ) / transition.lookup;\n\n                var inVelocity   = calc.sub( calc.clone( inNext ), inPoint );\n                var inPerMillis  = calc.length( inVelocity ) / transition.lookup;\n\n                var compiled = new anim8.PathCompiled( attr, path, transition.granularity );\n                var points = compiled.points;\n                var lastPoint = points.length - 1;\n                var totalDistance = 0;\n                var distances = [];\n\n                for (var k = 0; k < lastPoint; k++)\n                {\n                  distances[ k ] = totalDistance;\n                  totalDistance += calc.distance( points[ k ], points[ k + 1 ] );\n                }\n                distances[ lastPoint ] = totalDistance;\n\n                if ( !isNaN( totalDistance ) )\n                {\n                  var requiredTime = 2.0 * totalDistance / (outPerMillis + inPerMillis);\n                  var acceleration = 0.5 * (inPerMillis - outPerMillis) / requiredTime;\n                  var timeDelta = requiredTime / lastPoint;\n                  var deltas = [];\n\n                  for (var k = 0; k < lastPoint; k++)\n                  { \n                    var time = k * timeDelta;\n                    var position = outPerMillis * time + acceleration * time * time;\n\n                    deltas[ k ] = position / totalDistance;\n                  }\n                  deltas[ lastPoint ] = 1.0;\n\n                  path = new anim8.PathDelta( attr, calc, points, deltas );\n                  transitionTime = requiredTime;\n                }\n              }\n            }\n\n            var transitionEvent = new anim8.Event( attr, path, transitionTime, transition.easing, 0, 0, 0, 1 );\n          \n            transitionEvent.next = next;\n            transitionEvent.cycle = next.cycle;\n\n            next.offset = transition.intro;\n\n            this.placeAttrimator( transitionEvent );\n          }\n          else\n          {\n            curr.stopIn( transition.time + next.delay );\n            curr.queue( next );\n            next.delay = 0;\n          }\n        }\n        else\n        {\n          next.delay += transition.time;\n          \n          this.placeAttrimator( next );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        this.placeAttrimator( attrimators[ i ] );\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Finishes any attrimators on this animator that are not present in the given\n   * map of attrimators. Optionally a delay in stopping them can be given.\n   * \n   * @method finishNotPresent\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {Number} [delay=0]\n   * @chainable\n   * @protected\n   */\n  finishNotPresent: function(attrimatorMap, delay)\n  {\n    var attrimators = this.attrimators.values;\n    var stopIn = delay || 0;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( !attrimatorMap.has( attrimator.attribute ) )\n      {\n        attrimator.stopIn( stopIn );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenTo\n   * @param {String} attr\n   * @param {T} target\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenTo: function(attr, target, options, cache)\n  {\n    var options   = anim8.options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens multiple attributes to target values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenManyTo\n   * @param {Object} targets\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenManyTo: function(targets, options, cache)\n  {\n    var options = anim8.options( options, cache );\n\n    this.newCycle();\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n\n  /**\n   * Tweens a single attribute from a starting value to the current value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenFrom\n   * @param {String} attr\n   * @param {T} starting\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenFrom: function(attr, starting, options, cache)\n  {\n    var options   = anim8.options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starting );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, anim8.computed.current );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens multiple attributes from starting values to the current values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenManyFrom\n   * @param {Object} startings\n   * @param {String|Array|Object} [options]\n   * @chainable\n   */\n  tweenManyFrom: function(startings, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in startings )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( startings[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, anim8.computed.current );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tween\n   * @param {String} attr\n   * @param {T} starts\n   * @param {T} ends\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tween: function(attr, starts, ends, options, cache)\n  {\n    var options   = anim8.options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenMany\n   * @param {Object} starts\n   * @param {Object} ends\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenMany: function(starts, ends, options, cache)\n  {\n    var options = anim8.options( options, cache );\n\n    this.newCycle();\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n\n  /**\n   * Moves an attribute relative to its current value.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method move\n   * @param {String} attr\n   * @param {T} amount\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  move: function(attr, amount, options, cache)\n  {\n    var options   = anim8.options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var relative  = attribute.parse( amount );\n    var start     = anim8.computed.current;\n    var end       = anim8.isComputed( relative ) ? relative : anim8.computed.relative( relative );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n\n  /**\n   * Moves multiple attribute relative to their current value.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method moveMany\n   * @param {Object} amounts\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  moveMany: function(amounts, options, cache)\n  {\n    var options = anim8.options( options, cache );\n\n    this.newCycle();\n\n    for ( var attr in amounts )\n    {\n      var attribute = this.getAttribute( attr );\n      var relative  = attribute.parse( amounts[ attr ] );\n      var start     = anim8.computed.current;\n      var end       = anim8.isComputed( relative ) ? relative : anim8.computed.relative( relative );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute \n   * when invoked. The returned function can be given as values for paths & \n   * springs that are evaluated every frame.\n   * \n   * @method ref\n   * @param {String} attr\n   * @return {Function}\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n    \n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n      \n      request[ attr ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n      \n      return attribute.defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method follow\n   * @param {String} attr\n   * @param {Path|Object|String} path\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  follow: function(attr, path, options, cache)\n  {\n    var options = anim8.options( options, cache );\n    var path    = anim8.path( path );\n    var event   = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that iterates over given attributes. If callback is specified\n   * it is invoked for each attrimator in this animator for the given \n   * attributes. If no callback is given an array of anim8.Attrimators is \n   * returned for each attrimator in this animator for the given attributes.\n   *\n   * @method attrimatorsFor\n   * @param {String|Array|Object} attributes\n   * @param {Function} callback\n   * @return {this|Array}\n   */\n  attrimatorsFor: function(attributes, callback)\n  {\n    var attrimatorMap = this.attrimators; \n    var attributes = anim8.toArray( anim8.coalesce( attributes, attrimatorMap.keys ), ' ' );\n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n    for (var i = attributes.length - 1; i >= 0; i--)\n    {\n      var attr = attributes[ i ];\n      var attrimator = attrimatorMap.get( attr );\n      \n      if ( attrimator )\n      {\n        if ( resulting )\n        {\n          results.push( attrimator );\n        }\n        else\n        {\n          callback.call( this, attrimator, attr );\n        }\n      }\n    }\n    \n    return resulting ? results : this;\n  },\n  \n  /**\n   * Stops all attributes for the specified attributes. Attribute names can be \n   * given as an array or a space separated string. If no attributes are given \n   * all attributes are assumed.\n   *\n   * @method stop\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  stop: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator, attr) \n    {\n      this.attrimators.remove( attr );\n    });\n  },\n  \n  /**\n   * Ends all attributes for the specified attributes. If attributes are queued \n   * the last value of the last attribute is applied to this Animator before \n   * being completely removed. Attribute names can be given as an array or a \n   * space separated string. If no attributes are given all attributes are \n   * assumed.\n   *\n   * @method end\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  end: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator) \n    {\n      while (attrimator.next)\n      {\n        attrimator = attrimator.next;\n      }\n      \n      attrimator.finish( this.frame );\n    });\n  },\n  \n  /**\n   * Finishes all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @method finish\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  finish: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.finish( this.frame );\n    });\n  },\n\n  /**\n   * Calls nopeat on all current attrimators for the specified attributes.\n   * Attribute names can be given as an array or a space separated string. If\n   * no attributes are given all attributes are assumed. \n   *\n   * **See:** {{#crossLink \"Attrimator/nopeat:method\"}}Attrimator.nopeat{{/crossLink}}\n   * \n   * @method nopeat\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  nopeat: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.nopeat();\n    });\n  },\n  \n  /**\n   * Pauses all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @method pause\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  pause: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.pause();\n    });\n  },\n  \n  /**\n   * Resumes all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @method resume\n   * @param {String|Array|Object} [attributes]\n   * @chainable\n   */\n  resume: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.resume();\n    });\n  },\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @method set\n   * @param {Object} attributes\n   * @chainable\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n      this.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attributes. \n   * Unsetting involves removing all attrimators and the current value in the \n   * frame,\n   * \n   * @method unset\n   * @param {String|Array|Object} attributes\n   * @chainable\n   */\n  unset: function(attributes)\n  {\n    var attributes = anim8.toArray( anim8.coalesce( attributes, this.frame ), ' ' );\n\n    for (var i = attributes.length - 1; i >= 0; i--)\n    {\n      var attr = attributes[ i ];\n\n      this.attrimators.remove( attr );\n\n      delete this.frame[ attr ];\n    }\n\n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The \n   * argument must be an object where the key is the name of an attribute.\n   *\n   * @method get\n   * @param {Object} attributes\n   * @return {Object}\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns the amount of finite time remaining before the animator is done\n   * animating. Attrimators that don't have a known end time are not included.\n   * If there are no attrimators with end times then zero is returned.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    return this.attrimators.timeRemaining();\n  },\n  \n  /**\n   * Returns true if there are any attrimators on this Animator.\n   *\n   * @method hasAttrimators\n   * @return {Boolean}\n   */\n  hasAttrimators: function()\n  {\n    return this.attrimators.size() > 0;\n  },\n  \n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @method getSubject\n   * @param {Function} [wrapper]\n   * @return {Any}\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator \n   * if none is given. This is particularly useful for having a function be \n   * called on deferred statements.\n   * \n   * @method invoke\n   * @param {Function} func\n   * @param {Object} [context]\n   * @param {Array} [args]\n   * @chainable\n   */\n  invoke: function(func, context, args)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, args || [] );\n    }\n\n    return this;\n  },\n  \n  /**\n   * Defers the method calls following this one to when the given event type \n   * (on or once) and event. To return this animator you need to call undefer() \n   * as many times as you called defer().\n   *\n   * @method defer\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} [callback]\n   * @return {DeferAnimator}\n   */\n  defer: function(eventType, event, callback)\n  {\n    return new anim8.DeferAnimator( this, this, eventType, event, callback );\n  },\n\n  /**\n   * Invokes the given callback when the last animation that was \n   * played/queued/transitioned starts.\n   * \n   * @method onCycleStart\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  onCycleStart: function(callback, context)\n  {\n    this.once( 'cycleStart:' + this.cycleNext, callback, context );\n\n    return this;\n  },\n\n  /**\n   * Invokes the given callback when the last animation that was\n   * played/queued/transitioned ends.\n   * \n   * @method onCycleEnd\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  onCycleEnd: function(callback, context)\n  {\n    this.once( 'cycleEnd:' + this.cycleNext, callback, context );\n\n    return this;\n  }\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n *\n * @class DeferAnimator\n * @constructor\n * @extends Defer\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n  this.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  /**\n   * Defers the {{#crossLink \"Animator/restore:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'restore', \n\n  /**\n   * Defers the {{#crossLink \"Animator/placeAttrimator:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method placeAttrimator\n   */\n  'placeAttrimator', \n\n  /**\n   * Defers the {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method applyInitialState\n   */\n  'applyInitialState',\n\n  /**\n   * Defers the {{#crossLink \"Animator/preupdate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method preupdate\n   */\n  'preupdate', \n\n  /**\n   * Defers the {{#crossLink \"Animator/update:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method update\n   */\n  'update', \n\n  /**\n   * Defers the {{#crossLink \"Animator/apply:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method apply\n   */\n  'apply', \n\n  /**\n   * Defers the {{#crossLink \"Animator/trimAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   * @protected\n   */\n  'trimAttrimators',\n\n  /**\n   * Defers the {{#crossLink \"Animator/activate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'activate', \n\n  /**\n   * Defers the {{#crossLink \"Animator/deactivate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'deactivate', \n\n  /**\n   * Defers the {{#crossLink \"Animator/destroy:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'destroy', \n\n  /**\n   * Defers the {{#crossLink \"Animator/spring:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'spring', \n\n  /**\n   * Defers the {{#crossLink \"Animator/play:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'play', \n\n  /**\n   * Defers the {{#crossLink \"Animator/playAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   * @protected\n   */\n  'playAttrimators', \n\n  /**\n   * Defers the {{#crossLink \"Animator/queue:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method queue\n   */\n  'queue',\n\n  /**\n   * Defers the {{#crossLink \"Animator/queueAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method queueAttrimators\n   * @protected\n   */\n  'queueAttrimators', \n\n  /**\n   * Defers the {{#crossLink \"Animator/transition:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method transition\n   */\n  'transition', \n\n  /**\n   * Defers the {{#crossLink \"Animator/transitionAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method transitionAttrimators\n   * @protected\n   */\n  'transitionAttrimators', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tween:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tween\n   */\n  'tween', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenTo:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenTo\n   */\n  'tweenTo', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenMany:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenMany\n   */\n  'tweenMany', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenManyTo:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenManyTo\n   */\n  'tweenManyTo', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenFrom:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenFrom\n   */\n  'tweenFrom', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenManyFrom:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenManyFrom\n   */\n  'tweenManyFrom',\n\n  /**\n   * Defers the {{#crossLink \"Animator/move:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method move\n   */\n  'move', \n\n  /**\n   * Defers the {{#crossLink \"Animator/moveMany:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method moveMany\n   */\n  'moveMany',\n\n  /**\n   * Defers the {{#crossLink \"Animator/follow:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method follow\n   */\n  'follow', \n\n  /**\n   * Defers the {{#crossLink \"Animator/stop:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method stop\n   */\n  'stop', \n\n  /**\n   * Defers the {{#crossLink \"Animator/end:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method end\n   */\n  'end', \n\n  /**\n   * Defers the {{#crossLink \"Animator/finish:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method finish\n   */\n  'finish', \n\n  /**\n   * Defers the {{#crossLink \"Animator/nopeat:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method nopeat\n   */\n  'nopeat', \n\n  /**\n   * Defers the {{#crossLink \"Animator/pause:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method pause\n   */\n  'pause', \n\n  /**\n   * Defers the {{#crossLink \"Animator/resume:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method resume\n   */\n  'resume',\n\n  /**\n   * Defers the {{#crossLink \"Animator/set:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method set\n   */\n  'set', \n\n  /**\n   * Defers the {{#crossLink \"Animator/unset:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method unset\n   */\n  'unset', \n\n  /**\n   * Defers the {{#crossLink \"Animator/get:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method get\n   */\n  'get', \n\n  /**\n   * Defers the {{#crossLink \"Animator/invoke:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method invoke\n   */\n  'invoke', \n\n  /**\n   * Defers the {{#crossLink \"Animator/onCycleStart:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method onCycleStart\n   */\n  'onCycleStart', \n\n  /**\n   * Defers the {{#crossLink \"Animator/onCycleEnd:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method onCycleEnd\n   */\n  'onCycleEnd'\n]);\n","\n/**\n * Instantiates an Array of {{#crossLink \"Animator\"}}{{/crossLink}} instances.\n * \n * @param {Array} [input]\n * @class Animators\n * @constructor\n * @extends {Array}\n */\nanim8.Animators = function(input)\n{\n  this.$ = [];\n\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8s.fn = anim8.Animators.prototype = \n{\n\n  /**\n   * Adds an animator to this set of animators.\n   * \n   * @param  {Animator} animator\n   * @chainable\n   */\n  push: function(animator)\n  {\n    this.$.push( animator );\n\n    return this;\n  },\n\n  /**\n   * Returns the number of animators in this set.\n   * \n   * @return {Number}\n   */\n  length: function()\n  {\n    return this.$.length;\n  }, \n\n  /**\n   * Returns the animator at the given index.\n   * \n   * @param  {Number} index\n   * @return {Animator}\n   */\n  at: function(index)\n  {\n    return this.$[ index ];\n  },\n\n  /**\n   * Invokes a callback for each element in the array.\n   *\n   * @method each\n   * @param {Function} iterator\n   * @param {Object} context\n   * @chainable\n   */\n  each: function(iterator, context) \n  {\n    var array = this.$;\n\n    for (var i = 0; i < array.length; i++) \n    {\n      if ( iterator.call( context || array[i], array[i], i ) === false ) \n      {\n        break;\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @method fill\n   * @param {Array} animators\n   * @chainable\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if a true value is\n   * returned  that element is removed from the array.\n   *\n   * @method filter\n   * @param {Function} filterer\n   * @chainable\n   */\n  filter: function(filterer)\n  {  \n    var array = this.$;\n    var alive = 0;\n    \n    for (var i = 0; i < array.length; i++)\n    {\n      var remove = filterer( array[i] );\n      \n      if ( !remove )\n      {\n        array[alive++] = array[i];\n      }\n    }\n    \n    array.length = alive;\n    \n    return this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a \n   * wrapper function before it's returned.\n   *\n   * @method getSubjects\n   * @param {Function} [wrapper]\n   * @return {Any}\n   */\n  getSubjects: function(wrapper)\n  {\n    var array = this.$;\n    var subjects = [];\n\n    for (var i = 0; i < array.length; i++)\n    {\n      subjects.push( array[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   *\n   * @method first\n   * @return {Animator}\n   */\n  first: function()\n  {\n    return this.$[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   *\n   * @method reverse\n   * @chainable\n   */\n  reverse: function()\n  {\n    var array = this.$;\n    var last = array.length - 1;\n    var mid = Math.floor( array.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = array[ i ];\n      var e1 = array[ last - i ];\n\n      array[ i ] = e1;\n      array[ last - i ] = e0;\n    }\n\n    return this;\n  },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   *\n   * @method activate\n   * @chainable\n   */\n  activate: function()\n  {\n    var array = this.$;\n\n    for (var i = 0; i < array.length; i++)\n    {\n      var animator = array[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Creates a sequence of events separated by a delay.\n   *\n   * @method sequence\n   * @param {String|Number} delay\n   * @param {String|Array|Function} easing\n   * @return {Sequence}\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * Returns the maximum time remaining out of all Animators in the array.\n   *\n   * **See:** {{#crossLink \"Animating/timeRemaining:method\"}}{{/crossLink}}\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    var array = this.$;\n    var maxRemaining = 0;\n\n    for (var i = 0; i < array.length; i++)\n    {\n      maxRemaining = Math.max( maxRemaining, array[ i ].timeRemaining() );\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/preupdate:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method preupdate\n   * @chainable\n   */\n  preupdate: function(now, max)\n  {\n    var array = this.$;\n    var length = max || array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n      array[ i ].preupdate( now );\n    }\n\n    return this;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/update:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method update\n   * @chainable\n   */\n  update: function(now, max)\n  {\n    var array = this.$;\n    var length = max || array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n      array[ i ].update( now );\n    }\n\n    return this;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/apply:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method apply\n   * @chainable\n   */\n  apply: function(max)\n  {\n    var array = this.$;\n    var length = max || array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n      array[ i ].apply();\n    }\n\n    return this;\n  },\n\n  /**\n   * Handles an animator if it's finished, and returns false if the animator can \n   * be removed from the set of animators.\n   *\n   * @method handleFinished\n   * @param {Animator} animator\n   * @return {Boolean}\n   */\n  handleFinished: function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/restore:method\"}}{{/crossLink}} on each \n   * animator in the array and returns this.\n   * \n   * @method restore\n   * @chainable\n   */\n  restore               : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/placeAttrimator:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method placeAttrimator\n   * @chainable\n   */\n  placeAttrimator       : anim8.delegate( 'placeAttrimator', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method applyInitialState\n   * @chainable\n   */\n  applyInitialState     : anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/trimAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method trimAttrimators\n   * @chainable\n   */\n  trimAttrimators       : anim8.delegate( 'trimAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/activate:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method activate\n   * @chainable\n   */\n  activate              : anim8.delegate( 'activate', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/deactivate:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method deactivate\n   * @chainable\n   */\n  deactivate            : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/destroy:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method destroy\n   * @chainable\n   */\n  destroy               : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/spring:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method spring\n   * @chainable\n   */\n  spring                : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/play:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method play\n   * @chainable\n   */\n  play                  : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/playAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method playAttrimators\n   * @chainable\n   * @protected\n   */\n  playAttrimators       : anim8.delegate( 'playAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/queue:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method queue\n   * @chainable\n   */\n  queue                 : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/queueAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method queueAttrimators\n   * @chainable\n   * @protected\n   */\n  queueAttrimators      : anim8.delegate( 'queueAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/transition:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method transition\n   * @chainable\n   */\n  transition            : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/transitionAttrimators:method\"}}{{/crossLink}} \n   * on each animator in the array and returns this.\n   * \n   * @method transitionAttrimators\n   * @chainable\n   * @protected\n   */\n  transitionAttrimators : anim8.delegate( 'transitionAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tween:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tween\n   * @chainable\n   */\n  tween                 : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenTo:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenTo\n   * @chainable\n   */\n  tweenTo               : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenFrom:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenFrom\n   * @chainable\n   */\n  tweenFrom             : anim8.delegate( 'tweenFrom', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenMany:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenMany\n   * @chainable\n   */\n  tweenMany             : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenManyTo:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenManyTo\n   * @chainable\n   */\n  tweenManyTo           : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenManyFrom:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenManyFrom\n   * @chainable\n   */\n  tweenManyFrom         : anim8.delegate( 'tweenManyFrom', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/move:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method move\n   * @chainable\n   */\n  move                  : anim8.delegate( 'move', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/moveMany:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method moveMany\n   * @chainable\n   */\n  moveMany              : anim8.delegate( 'moveMany', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/follow:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method follow\n   * @chainable\n   */\n  follow                : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/attrimatorsFor:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method attrimatorsFor\n   * @chainable\n   */\n  attrimatorsFor        : anim8.delegate( 'attrimatorsFor', anim8.delegate.RETURN_RESULTS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/stop:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method stop\n   * @chainable\n   */\n  stop                  : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/end:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method end\n   * @chainable\n   */\n  end                   : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/finish:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method finish\n   * @chainable\n   */\n  finish                : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n\n/**\n   * Calls {{#crossLink \"Animator/nopeat:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method nopeat\n   * @chainable\n   */\n  nopeat                : anim8.delegate( 'nopeat', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/pause:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method pause\n   * @chainable\n   */\n  pause                 : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/resume:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method resume\n   * @chainable\n   */\n  resume                : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/set:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method set\n   * @chainable\n   */\n  set                   : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/unset:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method unset\n   * @chainable\n   */\n  unset                 : anim8.delegate( 'unset', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/get:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method get\n   * @chainable\n   */\n  get                   : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n\n  /**\n   * Calls {{#crossLink \"Animator/hasAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method hasAttrimators\n   * @chainable\n   */\n  hasAttrimators        : anim8.delegate( 'hasAttrimators', anim8.delegate.RETURN_TRUE ),\n\n  /**\n   * Calls {{#crossLink \"Animator/invoke:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method invoke\n   * @chainable\n   */\n  invoke                : anim8.delegate( 'invoke', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/onCycleStart:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method onCycleStart\n   * @chainable\n   */\n  onCycleStart          : anim8.delegate( 'onCycleStart', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/onCycleEnd:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method onCycleEnd\n   * @chainable\n   */\n  onCycleEnd            : anim8.delegate( 'onCycleEnd', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/on:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method on\n   * @chainable\n   */\n  on                    : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/once:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method once\n   * @chainable\n   */\n  once                  : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/off:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method off\n   * @chainable\n   */\n  off                   : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/trigger:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method trigger\n   * @chainable\n   */\n  trigger               : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n};\n","\n/**\n * @class Core\n */\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n *\n * @property {Boolean} anim8.running\n * @readOnly\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n *\n * @property {Boolean} anim8.live\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n *\n * @property {Animators} anim8.animating\n * @readOnly\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @method anim8.requestRun\n * @param {Function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( anim8.defaults.pauseTime, anim8.defaults.frameRate - (now - lastTime) );\n      var id = window.setTimeout( function() { callback( now + timeToCall ); }, timeToCall );\n      lastTime = now + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list of animating if it isn't there already. If the \n * animation loop isn't currently running it's started.\n *\n * @method anim8.add\n * @param {Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation loop cycle which consists of four operations:\n * \n * 1. Call preupdate on all Animators\n * 2. Call update on all Animators\n * 3. Call apply on all Animators\n * 4. Remove finished Animators\n * \n * When there are no more animating the loop cycle is stopped.\n *\n * @method anim8.run\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  var animating = anim8.animating;\n  var active = animating.length();\n\n \n  // notify animators that we're about to update\n  animating.preupdate( now, active );\n  \n  // update animating based on the current time\n  animating.update( now, active );\n  \n  // apply the attributes calculated\n  animating.apply( active );\n  \n  // if the animator is done remove it\n  animating.filter( animating.handleFinished );\n  \n  // The loop has ended!  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( animating.length() || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Pauses all animators.\n *\n * **See:** {{#crossLink \"Animator/pause:method\"}}{{/crossLink}}\n *\n * @method anim8.pause\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.pause = function(attributes)\n{\n  anim8.animating.pause( attributes );\n\n  return anim8;\n};\n\n/**\n * Resumes all animators.\n * \n * **See:** {{#crossLink \"Animator/resume:method\"}}{{/crossLink}}\n *\n * @method anim8.resume\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.resume = function(attributes)\n{\n  anim8.animating.resume( attributes );\n\n  return anim8;\n};\n\n/**\n * Stops all animators.\n * \n * **See:** {{#crossLink \"Animator/stop:method\"}}{{/crossLink}}\n * \n * @method anim8.stop\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.stop = function(attributes)\n{\n  anim8.animating.stop( attributes );\n\n  return anim8;\n};\n\n/**\n * Ends all animators.\n * \n * **See:** {{#crossLink \"Animator/end:method\"}}{{/crossLink}}\n *\n * @method anim8.end\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.end = function(attributes)\n{\n  anim8.animating.end( attributes );\n\n  return anim8;\n};\n\n/**\n * Finishes all animators.\n * \n * **See:** {{#crossLink \"Animator/finish:method\"}}{{/crossLink}}\n *\n * @method anim8.finish\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.finish = function(attributes)\n{\n  anim8.animating.finish( attributes );\n\n  return anim8;\n};\n\n/**\n * Interrupts all animators from repeating currently running animations.\n * \n * **See:** {{#crossLink \"Animator/nopeat:method\"}}{{/crossLink}}\n *\n * @method anim8.nopeat\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.nopeat = function(attributes)\n{\n  anim8.animating.nopeat( attributes );\n\n  return anim8;\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * Creates a seqeuence for the given animators offseting animations be the given\n * delay and easing.\n * \n * @param {Animators} animators\n * @param {String|Number} delay\n * @param {String|Array|Function} easing\n * @class Sequence\n * @constructor\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  /**\n   * The animators to play a sequence of animations against.\n   * \n   * @property {Animators} animators\n   */\n  this.animators = animators;\n\n  /**\n   * The delay in milliseconds between animations.\n   * \n   * @property {Number} delay\n   */\n  this.delay = anim8.delay( delay );\n\n  /**\n   * The easing function to use to calculate the delay offset for an animation.\n   * \n   * @property {Function} easing\n   */\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * Returns the maximum delay for delaying generated attrimators.\n   *\n   * @method maxDelay\n   * @return {Number}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length() - 1);\n  },\n  \n  /**\n   * Creates an AttrimatorMap with the given options for the animator at the \n   * given index.\n   *\n   * @method createAttrimators\n   * @param {Animation} animation\n   * @param {Object} options\n   * @param {Number} i\n   * @return {AttrimatorMap}\n   */\n  createAttrimators: function(template, i)\n  {\n    var attrimatorMap = template.clone();\n    var attrimators = attrimatorMap.values;\n    var delta = i / (this.animators.length() - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = attrimators.length - 1; k >= 0; k--)\n    {\n      attrimators[ k ].delay += delayOffset;\n    }\n    \n    return attrimatorMap;\n  },\n\n  /**\n   * Reverses the sequence by reversing the underlying array of animators.\n   *\n   * @method reverse\n   * @chainable\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * Plays the animation across the animators in this sequence.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/play:method\"}}Animator.play{{/crossLink}}\n   *\n   * @method play \n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [all=false]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  play: function(animation, options, all, cache)\n  {\n    var template = anim8.attrimatorsFor( animation, options, cache );\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( template, i );\n      \n      animator.newCycle( attrimators );\n      animator.playAttrimators( attrimators, all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * Queues the animation across the animators in this sequence.\n   * \n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/queue:method\"}}Animator.queue{{/crossLink}}\n   *\n   * @method queue\n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  queue: function(animation, options, cache)\n  {\n    var template = anim8.attrimatorsFor( animation, options, cache );\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var attrimatorMap = sequence.createAttrimators( template, i );\n      var attrimators = attrimatorMap.values;\n\n      for (var k = attrimators.length - 1; k >= 0; k--)\n      {\n        attrimators[ k ].delay += delayOffset;\n      }\n      \n      animator.newCycle( attrimatorMap );\n      animator.queueAttrimators( attrimatorMap );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * Transitions into the animation across the animators in this sequence.\n   * \n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/transition:method\"}}Animator.transition{{/crossLink}}\n   * \n   * @method transition\n   * @param {String|Array|Object} transition\n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [all=false]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var template = anim8.attrimatorsFor( animation, options, cache );\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( template, i );\n\n      animator.newCycle( attrimators );\n      animator.transitionAttrimators( transition, attrimators, all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * Activates all animators in this sequence and returns this.\n   *\n   * **See:** {{#crossLink \"Animator/activate:method\"}}Animator.activate{{/crossLink}}\n   * \n   * @method add\n   * @chainable\n   */\n  add: function()\n  {\n    this.animators.activate();\n    \n    return this;\n  }\n  \n};","\n/**\n * A collection of {{#crossLink \"Parser\"}}parsers{{/crossLink}} which takes \n * animation definitions (an Object passed to {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}})\n * and generates {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}}.\n * \n * @class anim8.parser\n */\n\n/**\n * Returns a parser based on the input. If the input is an instance of Parser\n * it's returned immediately. If the input is a string the parser with that name \n * is returned. If no parser could be determined then false is returned.\n *\n * **See:** {{#crossLink \"anim8.parser\"}}{{/crossLink}}\n * \n * @method anim8.parser\n * @for Core\n * @param {Parser|String} parser\n * @return {Parser|false}\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n  if ( anim8.isString( parser ) && parser in anim8.parser )\n  {\n    return anim8.parser[ parser ];\n  }\n  \n  return false;\n};\n\n\n/**\n * Instantiates a new Parser. Parsers are responsible for taking animation\n * definitions (an Object passed to {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}})\n * and generating & placing {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}} \n * onto an {{#crossLink \"AttrimatorMap\"}}{{/crossLink}}.\n *\n * Parsers are added to the {{#crossLink \"anim8.parser\"}}{{/crossLink}} object\n * by a key and when that key exists in an animation definition, the animation\n * definition is passed to the {{#crossLink \"Parser/parse:method\"}}{{/crossLink}}\n * to generate {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}}.\n *\n * @class Parser\n * @constructor\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.ID = 0;\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimatorMap to the given array.\n   *\n   * @method parse\n   * @param {Object} animation\n   * @param {Object} options\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @method merge\n   * @param {Object} animation\n   * @param {Object} newOptions\n   * @param {Object} oldOptions\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  { \n    var parser = this;\n    var factory = anim8.factory( animation.factory );\n\n    attrimatorMap.iterate(function(e)\n    {      \n      if ( e.getParser() === parser )\n      {\n        parser.mergeAttrimator( e, e.attribute, helper, factory );\n      }\n    });\n  },\n\n  /**\n   * Merges new options contained in the helper into the given attrimator.\n   *\n   * @method mergeAttrimator\n   * @param {Attrimator} e\n   * @param {String} attr\n   * @param {ParserHelper} helper\n   * @param {Factory} factory\n   */\n  mergeAttrimator: function( e, attr, helper, factory )\n  {\n    e.easing    = helper.mergeEasing( attr, e.easing );\n    e.repeat    = helper.mergeRepeat( attr, e.repeat );\n    e.delay     = helper.mergeDelay( attr, e.delay );\n    e.sleep     = helper.mergeSleep( attr, e.sleep );\n    e.duration  = helper.mergeDuration( attr, e.duration );\n    e.offset    = helper.mergeOffset( attr, e.offset );\n    e.scale     = helper.mergeScale( attr, e.scale );\n    e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n  }\n};\n\n\n/**\n * Instantiates a new instance of Parser Helper.\n *\n * @param {Object} input\n * @param {Object} oldOptions\n * @param {Object} newOptions\n * @class ParserHelper\n * @constructor\n */\nanim8.ParserHelper = function( input, oldOptions, newOptions )\n{\n  this.input = input;\n  this.oldOptions = oldOptions || {};\n  this.newOptions = newOptions || {};\n\n  this.prepareSpecifics( 'easings' );\n  this.prepareSpecifics( 'repeats' );\n  this.prepareSpecifics( 'delays' );\n  this.prepareSpecifics( 'sleeps' );\n  this.prepareSpecifics( 'durations' );\n  this.prepareSpecifics( 'offsets' );\n  this.prepareSpecifics( 'scales' );\n  this.prepareSpecifics( 'scaleBases' );\n};\n\nanim8.ParserHelper.prototype = \n{\n\n  /**\n   * If an object with the given name doesn't exist on the input it's created.\n   *\n   * @method prepareSpecifics\n   * @param {String} specifics\n   */\n  prepareSpecifics: function(specifics)\n  {\n    if ( !anim8.isObject( this.input[ specifics ] ) )\n    {\n      this.input[ specifics ] = {};\n    }\n  },\n\n  /* PARSING */\n\n  /**\n   * Parses an easing from the input.\n   *\n   * @method parseEasing\n   * @param  {String} attr\n   * @return {String|Function|Array}\n   */\n  parseEasing: function(attr)\n  {\n    return this.parseFirst( attr, 'easing', 'easings' );\n  },\n\n  /**\n   * Parses repeats from the input.\n   * \n   * @method parseRepeat\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseRepeat: function(attr)\n  {\n    return this.parseNumber( attr, anim8.repeat, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * Parses delay from the input.\n   * \n   * @method parseDelay\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseDelay: function(attr)\n  {\n    return this.parseNumber( attr, anim8.delay, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * Parses sleep from the input.\n   * \n   * @method parseSleep\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseSleep: function(attr)\n  {\n    return this.parseNumber( attr, anim8.sleep, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'sleeps' );\n  },\n\n  /**\n   * Parses duration from the input.\n   * \n   * @method parseDuration\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseDuration: function(attr)\n  {\n    return this.parseNumber( attr, anim8.duration, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * Parses offset from the input.\n   * \n   * @method parseOffset\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseOffset: function(attr)\n  {\n    return this.parseNumber( attr, anim8.offset, anim8.time, 'offset', 'offsetAdd', 'offsetScale', 'offsets' );\n  },\n\n  /**\n   * Parses scale from the input.\n   * \n   * @method parseScale\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseScale: function(attr)\n  {\n    return this.parseNumber( attr, anim8.scale, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * Parses scale base from the input.\n   * \n   * @method parseScaleBase\n   * @param  {String} attr\n   * @return {Any}\n   */\n  parseScaleBase: function(attr)\n  {\n    return this.parseFirst( attr, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * Parses a value from the input given the attribute, option, and specific.\n   * \n   * @method parseFirst\n   * @param {String} attr\n   * @param {String} option\n   * @param {String} specifics\n   * @return {Any}\n   */\n  parseFirst: function(attr, option, specifics)\n  {\n    return anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n  },\n\n  /**\n   * Parses an event from the input given a path & parser for the event.\n   * \n   * @method parseEvent\n   * @param {String} attr\n   * @param {Path} path\n   * @param {Parser} parser\n   * @param {Boolean} hasInitialState\n   * @return {Event}\n   */\n  parseEvent: function(attr, path, parser, hasInitialState)\n  {\n    var duration   = this.parseDuration( attr );\n    var easing     = this.parseEasing( attr );\n    var delay      = this.parseDelay( attr );\n    var sleep      = this.parseSleep( attr );\n    var repeat     = this.parseRepeat( attr );\n    var offset     = this.parseOffset( attr );\n    var scale      = this.parseScale( attr );\n    var scaleBase  = this.parseScaleBase( attr );\n    var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, offset, repeat, scale, scaleBase, hasInitialState, parser, null, this.input );\n\n    return event;\n  },\n\n  /**\n   * Parses a number from the input given parse functions.\n   * \n   * @method parseNumber\n   * @param {String} attr\n   * @param {Function} parseFunction\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} optionAdd\n   * @param {String} optionScale\n   * @param {String} specifics\n   * @return {Number}\n   */\n  parseNumber: function(attr, parseFunction, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n    var base = parseFunction( baseRaw );\n    var add = parseOptionFunction( this.oldOptions[ optionAdd ], 0 );\n    var scale = anim8.coalesce( this.oldOptions[ optionScale ], 1 );\n\n    return (add === 0 && scale === 1) ? baseRaw : (base + add) * scale;\n  },\n\n  /* MERGING */\n\n  /**\n   * Merges easing based on the input, new options, and the current easing.\n   * \n   * @method mergeEasing\n   * @param {String} attr\n   * @param {Function} current\n   * @return {Function}\n   */\n  mergeEasing: function(attr, current)\n  {\n    return this.mergeFirst( attr, current, anim8.easing, 'easing', 'easings' );\n  },\n\n  /**\n   * Merges repeats based on the input, new options, and the current repeat.\n   * \n   * @method mergeRepeat\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeRepeat: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * Merges delay based on the input, new options, and the current delay.\n   * \n   * @method mergeDelay\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeDelay: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * Merges sleep based on the input, new options, and the current sleep.\n   * \n   * @method mergeSleep\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeSleep: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'scales' );\n  },\n\n  /**\n   * Merges duration based on the input, new options, and the current duration.\n   * \n   * @method mergeDuration\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeDuration: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * Merges offset based on the input, new options, and the current offset.\n   * \n   * @method mergeOffset\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeOffset: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'offset', 'offsetAdd', 'offsetScale', 'offsets' );\n  },\n\n  /**\n   * Merges scale based on the input, new options, and the current scale.\n   * \n   * @method mergeScale\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeScale: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * Merges scale base based on the input, new options, and the current scale \n   * base.\n   * \n   * @method mergeScaleBase\n   * @param {String} attr\n   * @param {T} current\n   * @param {Factory} factory\n   * @return {T}\n   */\n  mergeScaleBase: function(attr, current, factory)\n  {\n    var calc = factory.attribute( attr ).calculator;\n\n    var parseFunction = function(value, defaultValue) {\n      return calc.parse( value, defaultValue );\n    };\n\n    return this.mergeFirst( attr, current, parseFunction, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * Returns the first available option from input, new options, old options,\n   * and the current value.\n   * \n   * @method mergeFirst\n   * @param {String} attr\n   * @param {T} current\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} specifics\n   * @return {T}\n   */\n  mergeFirst: function(attr, current, parseOptionFunction, option, specifics)\n  {\n    var specific = this.input[ specifics ][ attr ];\n    var value = anim8.coalesce( specific, this.newOptions[ option ], this.oldOptions[ option ] );\n\n    return parseOptionFunction( value, current );\n  },\n\n  /**\n   * Merges a number by returning the first occurrence from input, new options,\n   * old options, and the current value.\n   * \n   * @method mergeNumber\n   * @param {String} attr\n   * @param {Number} current\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} optionAdd\n   * @param {String} optionScale\n   * @param {String} specifics\n   * @return {Number}\n   */\n  mergeNumber: function(attr, current, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] );\n    var base = parseOptionFunction( baseRaw, current );\n    var add = parseOptionFunction( anim8.coalesce( this.newOptions[ optionAdd ], this.oldOptions[ optionAdd ] ), 0 );\n    var scale = anim8.coalesce( this.newOptions[ optionScale ], this.oldOptions[ optionScale ], 1 );\n\n    return (base + add) * scale;\n  }\n\n};","\n/**\n * Instantiates a new parser for the 'and' animation type.\n *\n * @class ParserAnd\n * @constructor\n * @extends Parser\n */\nanim8.ParserAnd = function()\n{\n  \n};\n\n// ParserAnd extends anim8.Parser()\nanim8.override( anim8.ParserAnd.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var and = animation.and;\n\n    and.factory = anim8.coalesce( and.factory, animation.factory );\n\n    attrimatorMap.putMap( anim8.attrimatorsFor( and, options ) );\n  },\n  merge: function( input, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var animation = input.and;\n    var helper = new anim8.ParserHelper( animation, oldOptions, newOptions );\n\n    for (var parserName in animation)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false && parser.merge )\n      {\n        parser.merge( animation, newOptions, oldOptions, attrimatorMap, helper );\n      }\n    }\n  }\n});\n\n/**\n * A parser which generates attrimators which tween from the current value to \n * the given values.\n *\n * **Examples:**\n * \n *     animator.play({\n *      ... other parsers ...\n *      and: {\n *       ... more parsers ...\n *      }\n *     });\n * \n *\n * @property {ParserAnd} and\n * @for anim8.parser\n */\nanim8.parser['and'] = new anim8.ParserAnd();\n","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n *\n * @class ParserDeltas\n * @constructor\n * @extends Parser\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var deltas = animation.deltas;\n    var values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      deltas = {};\n    }\n    else if ( anim8.isArray( deltas ) )\n    {\n      var deltaObject = {};\n      \n      for (var attr in values)\n      {\n        deltaObject[attr] = deltas;  \n      }\n      \n      deltas = deltaObject;\n    }\n    \n    for (var attr in values)\n    {\n      var value = values[ attr ];\n      var valueMax = value.length - 1;\n      var delta = deltas[ attr ];\n      var attribute = factory.attribute( attr );\n      \n      for (var k = 0; k <= valueMax; k++)\n      {\n        value[k] = attribute.parse( value[k] );\n      }\n\n      if ( !anim8.isArray( delta ) )\n      {\n        delta = [];\n        \n        for (var i = 0; i <= valueMax; i++)\n        {\n          delta[i] = i / valueMax;\n        }\n      }\n\n      var path      = new anim8.PathDelta( attr, attribute.calculator, value, delta );\n      var event     = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['values'] = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n *\n * @class ParserFinal\n * @constructor\n * @extends Parser\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n    var values = animation.final;\n    \n    for (var attr in values)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] );\n      var delay      = anim8.delay( helper.parseDelay( attr ) );\n      var duration   = anim8.duration( helper.parseDuration( attr ) );\n      var event      = new anim8.Oncer( attr, value, delay + duration, false, this, null, animation );\n      \n      attrimatorMap.put( attr, event );\n    }\n  },\n  mergeAttrimator: function( e, attr, helper, factory )\n  {\n    e.delay = helper.mergeDelay( attr, e.delay ) + \n              helper.mergeDuration( attr, e.duration );\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['final'] = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n *\n * @class ParserInitial\n * @constructor\n * @extends Parser\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays & scales\n    \n    var factory    = anim8.factory( animation.factory );\n    var values     = animation.initial;\n    \n    for (var attr in values)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = helper.parseDelay( attr );\n      var oncer      = new anim8.Oncer( attr, value, delay, true, this, null, animation );\n      \n      attrimatorMap.put( attr, oncer );\n    }\n  },\n  mergeAttrimator: function( e, attr, helper, factory )\n  {\n    e.delay = helper.mergeDelay( attr, e.delay );\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['initial'] = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n *\n * @class ParserKeyframe\n * @constructor\n * @extends Parser\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    var easings = animation.easings || {};\n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) \n      {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n        \n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n    \n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = helper.parseDuration( attr );\n      var delay     = helper.parseDelay( attr );\n      var sleep     = helper.parseSleep( attr );\n      var offset    = helper.parseOffset( attr );\n      var repeat    = helper.parseRepeat( attr );\n      var scale     = helper.parseScale( attr );\n      var scaleBase = helper.parseScaleBase( attr );\n      var path      = new anim8.PathKeyframe( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new anim8.Event( attr, path, duration, teasing, delay, sleep, offset, repeat, scale, scaleBase, true, this, null, animation );\n\n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser['keyframe'] = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n *\n * @class ParserTweenTo\n * @constructor\n * @extends Parser\n */\nanim8.ParserTweenTo = function()\n{\n  \n};\n\n// ParserTweenTo extends anim8.Parser()\nanim8.override( anim8.ParserTweenTo.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n\n    for (var attr in tweenTo)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, value );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * A parser which generates attrimators which tween from the current value to \n * the given values.\n *\n * **Examples:**\n * \n *     animator.play({\n *      tweenTo: {\n *       opacity: 1.0,       // absolute value\n *       left: '+40'         // 40 more units from current value  \n *      }\n *     });\n * \n *\n * @property {ParserTweenTo} tweenTo\n * @for anim8.parser\n */\nanim8.parser['tweenTo'] = new anim8.ParserTweenTo();\n","\n/**\n * Instantiates a new parser for the 'tweenFrom' animation type.\n *\n * @class ParserTweenFrom\n * @constructor\n * @extends Parser\n */\nanim8.ParserTweenFrom = function()\n{\n  \n};\n\n// ParserTweenFrom extends anim8.Parser()\nanim8.override( anim8.ParserTweenFrom.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenFrom  = animation.tweenFrom;\n\n    for (var attr in tweenFrom)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenFrom[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, value, anim8.computed.current );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenFrom'] = new anim8.ParserTweenFrom();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n *\n * @class ParserMove\n * @constructor\n * @extends Parser\n */\nanim8.ParserMove = function()\n{\n  \n};\n\n// ParserMove extends anim8.Parser()\nanim8.override( anim8.ParserMove.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var move       = animation.move;\n\n    for (var attr in move)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, anim8.computed.relative( value ) );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['move'] = new anim8.ParserMove();\n","\n/**\n * Instantiates a new parser for the 'and' animation type.\n *\n * @class ParserQueue\n * @constructor\n * @extends Parser\n */\nanim8.ParserQueue = function()\n{\n  \n};\n\n// ParserQueue extends anim8.Parser()\nanim8.override( anim8.ParserQueue.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var queue = animation.queue;\n\n    queue.factory = anim8.coalesce( queue.factory, animation.factory );\n\n    attrimatorMap.queueMap( anim8.attrimatorsFor( queue, options ) );\n  },\n  merge: function( input, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var animation = input.queue;\n    var helper = new anim8.ParserHelper( animation, oldOptions, newOptions );\n\n    for (var parserName in animation)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false && parser.merge )\n      {\n        parser.merge( animation, newOptions, oldOptions, attrimatorMap, helper );\n      }\n    }\n  }\n});\n\n/**\n * A parser which generates attrimators which tween from the current value to \n * the given values.\n *\n * **Examples:**\n * \n *     animator.play({\n *      ... other parsers ...\n *      queue: {\n *       ... more parsers to play after the others ...\n *      }\n *     });\n * \n *\n * @property {ParserQueue} queue\n * @for anim8.parser\n */\nanim8.parser['queue'] = new anim8.ParserQueue();\n","\n/**\n * Instantiates a new parser for the 'springs' animation type.\n *\n * @class ParserSpring\n * @constructor\n * @extends Parser\n */\nanim8.ParseSpring = function()\n{\n  \n};\n\n// ParseSpring extends anim8.Parser()\nanim8.override( anim8.ParseSpring.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var springs    = animation.springs;\n\n    for (var attr in springs)\n    {\n      var spring     = springs[ attr ];\n\n      if ( !anim8.isDefined( spring.attribute ) )\n      {\n        spring.attribute = attr;\n      }\n\n      var parsed = anim8.spring( spring );\n      \n      if ( parsed !== false )\n      {\n        parsed.parser = this;\n\n        attrimatorMap.put( attr, parsed );  \n      }\n    }\n  },\n  merge: false\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['springs'] = new anim8.ParseSpring();\n","\n/**\n * Instantiates a new parser for the 'physics' animation type.\n *\n * @class ParserPhysics\n * @constructor\n * @extends Parser\n */\nanim8.ParsePhysics = function()\n{\n  \n};\n\n// ParsePhysics extends anim8.Parser()\nanim8.override( anim8.ParsePhysics.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var physics    = animation.physics;\n\n    for (var attr in physics)\n    {\n      var physic    = physics[ attr ];\n\n      var attrimator = new anim8.Physics(\n        attr, \n        this, \n        physic.calculator, \n        anim8.coalesce( physic.position, true ), \n        physic.velocity, \n        physic.acceleration, \n        physic.terminal,\n        physic.stopAt\n      );\n\n      attrimatorMap.put( attr, attrimator );\n    }\n  },\n  merge: false\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['physics'] = new anim8.ParsePhysics();\n","\n/**\n * Instantiates a new parser for the 'travel' animation type.\n *\n * @class ParserTravel\n * @constructor\n * @extends Parser\n */\nanim8.ParserTravel = function()\n{\n  \n};\n\n// ParserTravel extends anim8.Parser()\nanim8.override( anim8.ParserTravel.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var travel     = animation.travel;\n\n    /**\n     * The computed function which returns a function which returns a value pointing\n     * to a given target given the current position of the animator.\n     * \n     * @param  {Number}\n     * @param  {any}\n     * @param  {Number}\n     * @return {Function}\n     */\n    var pointing = function(amount, target, epsilon, subtractVelocity)\n    {\n      var pointingFunction = function(attrimator, animator)\n      {\n        var attribute = animator.getAttribute( attrimator.attribute );\n        var calc = attribute.calculator;\n        var targetValue = anim8.isComputed( target ) ? target( attrimator, animator ) : target;\n        var temp = calc.create();\n\n        return function()\n        {\n          var position   = attrimator.position;\n          var current    = calc.copy( temp, anim8.resolve( targetValue ) );\n          var difference = calc.sub( current, position );\n          var distance   = calc.distance( difference, calc.ZERO );\n\n          if ( distance < epsilon )\n          {\n            attrimator.stopIn( 0 );\n          }\n          else\n          {\n            difference = calc.scale( difference, amount / distance );\n          }\n          \n          if ( subtractVelocity )\n          {\n            difference = calc.sub( difference, attrimator.resolveVelocity() );\n          }\n\n          return difference;\n        };\n      };\n\n      pointingFunction.computed = true;\n\n      return pointingFunction;\n    };\n\n    for (var attr in travel)\n    {\n      var traveling     = travel[ attr ];\n      var attribute     = factory.attribute( attr );\n      var from          = attribute.parse( anim8.coalesce( traveling.from, true ) );\n      var to            = attribute.parse( anim8.coalesce( traveling.to, true ) );\n      var velocity      = anim8.number( traveling.velocity, 0 );\n      var acceleration  = anim8.number( traveling.acceleration, 0 );\n      var terminal      = anim8.number( anim8.coalesce( traveling.terminal, traveling.velocity ), Number.POSITIVE_INFINITY );\n      var epsilon       = anim8.number( traveling.epsilon, 0.001 );\n\n      if ( acceleration !== 0 )\n      {\n        acceleration = pointing( acceleration, to, epsilon, true );\n      }\n\n      if ( velocity !== 0 )\n      {\n        velocity = pointing( velocity, to, epsilon, false );\n      }\n\n      var traveler = new anim8.Physics(\n        attr,\n        this,\n        attribute.calculator,\n        from,\n        velocity,\n        acceleration,\n        terminal\n      );\n      \n      attrimatorMap.put( attr, traveler );\n    }\n  },\n  merge: false\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['travel'] = new anim8.ParserTravel();\n","\n/**\n * Instantiates a new parser for the 'path' animation type.\n *\n * @class ParserPath\n * @constructor\n * @extends Parser\n */\nanim8.ParserPath = function()\n{\n  \n};\n\n// ParserPath extends anim8.Parser()\nanim8.override( anim8.ParserPath.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  { \n    var factory    = anim8.factory( animation.factory );\n    var path    = animation.path;\n\n    for (var attr in path)\n    {\n      var attribute  = factory.attribute( attr );\n      var pathDefinition = path[ attr ];\n\n      if ( !( pathDefinition instanceof anim8.Path ) )\n      {\n        pathDefinition.name = attr;\n        pathDefinition.calculator = attribute.calculator;\n      }\n\n      var parsedPath = anim8.path( pathDefinition );\n      var event      = helper.parseEvent( attr, parsedPath, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * A parser which generates attrimators which follow a given path.\n *\n * **Examples:**\n * \n *     animator.play({\n *      path: {\n *       opacity: {\n *        type: 'quadratic',\n *        p0: 0,\n *        p1: 0.4,\n *        p2: 1.0  \n *       }\n *      }\n *     });\n * \n *\n * @property {ParserPath} path\n * @for anim8.parser\n */\nanim8.parser['path'] = new anim8.ParserPath();\n","\n\n/**\n * Returns a factory for the given subject and optionally throws an error if no\n * factory exists.\n *\n * @method anim8.factoryFor\n * @for Core\n * @param {Any} subject\n * @param {Boolean} [optional]\n * @return {Factory}\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n *\n * @method anim8.factory\n * @for Core\n * @param {String|Factory} [factory]\n * @return {Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory['default'];\n};\n\n/**\n * A factory creates Animator instances for subjects.\n *\n * @class Factory\n * @constructor\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   *\n   * @method is\n   * @param  {Any} subject\n   * @return {Boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   *\n   * @method animatorFor\n   * @param  {Any} subject\n   * @return {Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   *\n   * @method animatorsFor\n   * @param {Any} subject\n   * @param {Array} animators\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   *\n   * @method destroy\n   * @param {Animator} animator\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute. An attribute\n   * descriptor is an object with at least the following properties:\n   *\n   * - `name` = the name of the attribute (same as `attr`)\n   * - `calculatorName` = the name of the calculator for the attribute\n   * - `calculator` = the calculator for the attribute\n   * - `defaultValue` = the default value for the attribute\n   * - `parse` = a method to pass a value and have the calculator parse it and\n   *             return the defaultValue if it was invalid\n   * - `cloneDefault` = a method which returns a clone of the default value\n   *\n   * @method attribute\n   * @param {String} attr\n   * @return {Object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n *\n * @class FactoryObject\n * @constructor\n * @extends Factory\n */\nanim8.FactoryObject = function()\n{\n  this.priority = 0;\n  this.attributes = {};\n};\n\nanim8.override( anim8.FactoryObject.prototype = new anim8.Factory(),\n{\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;      \n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory['default'] = anim8.factory['object'] = new anim8.FactoryObject();\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {Object|String} attr\n * @return {Object}\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.object.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute['default'];\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute['default']                 = {defaultValue: 0};\n","\n/**\n * A factory for HTML Elements\n */\nanim8.FactoryDom = function()\n{\n  this.cached = {};\n  this.ids = 0;\n  this.elementAttribute = 'anim8';\n  this.priority = 5;\n  this.attributes = {};\n};\n\nanim8.override( anim8.FactoryDom.prototype = new anim8.Factory(),\n{\n  \n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {Boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isElement( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {HTMLElement} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animatorId = subject.getAttribute( this.elementAttribute );\n    \n    if (!(animatorId in this.cached)) \n    {\n      var animator = new anim8.AnimatorDom( subject );\n      \n      subject.setAttribute( this.elementAttribute, animatorId = animator.id = ++this.ids );\n      \n      animator.factory = this;\n      \n      this.cached[animatorId] = animator;\n    }\n\n    return this.cached[ animatorId ];\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   */\n  destroy: function(animator)\n  {\n    delete this.cached[ animator.id ];\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {String} attr\n   * @return {Object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.dom.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n      var propertyName = anim8.coalesce( attribute.property, attr );\n      var property = anim8.dom.property( propertyName );\n      var defaultUnit = attribute.defaultUnit || '';\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.propertyName = propertyName;\n      attribute.property = property;\n      attribute.defaultUnit = defaultUnit;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the DOM factory.\n */\nanim8.factory['default'] = anim8.factory['dom'] = new anim8.FactoryDom();\n\n/* TODO don't apply styles if they're impercivable (convert value to pixels of applicable) */\n\n/**\n * All DOM related functions.\n */\nanim8.dom = {};\n\n/**\n * Returns a property for the given name.\n * \n * @param  {String|Object}\n * @return {Object}\n */\nanim8.dom.property = function(prop) \n{\n  if ( anim8.isObject( prop ) && anim8.isFunction( prop.get ) && anim8.isFunction( prop.set ) ) \n  {\n    return prop;\n  }\n  if ( anim8.isString( prop ) && prop in anim8.dom.property )\n  {\n    return anim8.dom.property[ prop ];\n  }\n  \n  throw prop + ' is not a valid property';\n}\n\n/**\n * Computes the desired style of the given element and returns it as a string. \n * The style given must be in hyphenated format like so: \n * anim8.dom.style( element, 'font-size' ) = '12px'\n *\n * @param {HTMLElement} e\n * @param {String} style\n * @return {String}\n */\nanim8.dom.style = (function()\n{\n  var hyphenated = {};\n\n  var hyphenize = function(str) \n  {\n    if ( str in hyphenated )\n    {\n      return hyphenated[ str ];\n    }\n\n    var key = str;\n\n    str = str.replace(/[a-z][A-Z]/g, function(str, letter)\n    {\n     return str[0] + '-' + str[1].toLowerCase();\n    });\n    \n    str = str.replace(/^Webkit/, '-webkit');\n    str = str.replace(/^Moz/, '-moz');\n    str = str.replace(/^Ms/, '-ms');\n    str = str.replace(/^O/, '-o');\n    str = str.replace(/^Khtml/, '-khtml');\n    \n    return hyphenated[ key ] = str;\n  };\n  \n  return function(e, style) \n  {\n    if (e.currentStyle)\n    {\n      return e.currentStyle[ style ];\n    } \n    else if (document.defaultView && document.defaultView.getComputedStyle) \n    {\n      return document.defaultView.getComputedStyle( e, null ).getPropertyValue( hyphenize( style ) );\n    } \n    else \n    {\n      return e.style[ style ]; \n    }\n  };\n  \n})();\n\n/**\n * Given an array of styles this will return the first one that is present on elements in the current browser.\n *\n * @param {Array} prefixes\n * @return {String|false}\n */\nanim8.dom.prefix = (function() \n{\n  var a = document.createElement('a');\n  \n  return function(prefixes) \n  {\n    for (var i = 0; i < prefixes.length; i++) \n    {\n      if ( anim8.isDefined( a.style[ prefixes[ i ] ] ) ) \n      {\n        return prefixes[i];\n      }\n    }\n    return false;\n  };\n  \n})();\n\n/**\n * Parses the string for a value and a unit.\n *\n * @param {String} value\n * @return {Object|false}\n */\nanim8.dom.parseValue = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(px|em|%|vw|ex|cm|mm|in|pt|pc|deg|rad)?/;\n  \n  return function(x)\n  {\n    var parsed = regex.exec( x );\n    \n    if (parsed) \n    {      \n      return {\n        value: parseFloat( parsed[1] ),\n        unit: parsed[3]\n      }\n    }\n    \n    return false;\n  };\n})();\n\n\n/**\n * Converts one unit to another for a given element.\n *\n * For Example: anim8.dom.convert( element, '100px', '%', 'parentWidth' )\n *    returns how much percent 100px relativeTo parentWidth of the given element\n *\n * @param {HTMLElement} e\n * @param {String} from\n * @param {String} toUnit\n * @param {String|Number} relativeTo\n * @return {Number|false}\n */\nanim8.dom.convert = (function()\n{\n  /**\n   * Calculators how many pixels a given value & unit is.\n   * \n   * For Example: anim8.toPixels( 100, 'in' ) \n   *    returns how many pixels are in 1 inch, with up to 2 decimal points of accuracy.\n   */\n  var toPixels = function(baseValue, baseUnit, defaultRate)\n  {\n    if ( document.body )\n    {\n      try\n      {\n        var div = document.createElement('div');\n        document.body.appendChild( div );\n        div.style.width = baseValue + baseUnit;\n        var pixels = (div.offsetWidth / baseValue);\n        document.body.removeChild( div );\n\n        return pixels || defaultRate; \n      }\n      catch (e)\n      {\n        // Do nothing\n      }\n    }\n    \n    return defaultRate;\n  };\n\n  var getFontSize = function(e, notUnit)\n  {\n    var fontSize = anim8.dom.style( e, 'fontSize' );\n    var parsed = anim8.dom.parseValue( fontSize );\n    \n    if ( !parsed || parsed.unit === notUnit )\n    {\n      return 12;\n    }\n    \n    if ( parsed.unit === 'px' ) \n    {\n      return parsed.value;\n    }\n    \n    return getConverterScale( e, conversions[ parsed.unit ].px, relativeTo );\n  };\n\n  var variables = {};\n  \n  variables.parentWidth = function(e)\n  {\n    return e.parentNode.scrollWidth;\n  };\n  variables.parentHeight = function(e)\n  {\n    return e.parentNode.scrollHeight;\n  };\n  variables.width = function(e)\n  {\n    return e.offsetWidth;\n  };\n  variables.height = function(e)\n  {\n    return e.offsetHeight;\n  };\n  variables.fontSize = function(e)\n  {\n    return getFontSize( e, '%' );\n  };\n  variables.parentFontSize = function(e)\n  {\n    return getFontSize( e.parentNode, '%' );\n  };\n  variables.htmlFontSize = function(e)\n  {\n    var htmlElement = document.getElementsByTagName(\"html\")[0];\n    \n    return getFontSize( htmlElement, '%' );\n  };\n  \n  var conversions = {};\n  \n  conversions['pt']  = { px: toPixels( 100, 'pt', 1 ) };\n  conversions['in']  = { px: toPixels( 100, 'in', 72 ) };\n  conversions['cm']  = { px: toPixels( 1000, 'cm', 72 / 2.54 ) };\n  conversions['mm']  = { px: toPixels( 100000, 'mm', 72 / 25.4 ) };\n  conversions['vw']  = { px: toPixels( 1000, 'vw', 1024 * 0.01 ) };\n  conversions['deg'] = { rad: Math.PI / 180.0 };\n\n  conversions['em'] = \n  {\n    px: function(e, relativeTo) \n    {\n      return getFontSize( e, 'em' );\n    }\n  };\n  \n  conversions['rem'] = \n  {\n    px: function(e, relativeTo) \n    {\n      var htmlElement = document.getElementsByTagName(\"html\")[0];\n      \n      return getFontSize( htmlElement, 'rem' );\n    }\n  };\n  \n  conversions['%'] = \n  {\n    px: function(e, relativeTo) \n    {\n      if ( anim8.isNumber( relativeTo ) )\n      {\n        return relativeTo;\n      }\n      if ( relativeTo in variables )\n      {\n        return variables[ relativeTo ]( e ) * 0.01;\n      }\n      \n      return 1.0;\n    }\n  };\n  \n  // Populate conversions going other way.\n  for (var unit in conversions)\n  {\n    for (var to in conversions[ unit ])\n    {\n      if ( !(to in conversions) )\n      {\n        conversions[ to ] = {};\n      }\n      \n      if ( !(unit in conversions[ to ]) )\n      {\n        var given = conversions[ unit ][ to ];\n        \n        if ( anim8.isNumber( given ) )\n        {\n          conversions[ to ][ unit ] = 1.0 / given;  \n        }\n        if ( anim8.isFunction( given ) )\n        {\n          conversions[ to ][ unit ] = (function(converter) \n          {\n            return function(e, relativeTo) \n            {\n              return 1.0 / converter( e, relativeTo );\n            };\n          })( given );\n        }\n      }\n    }\n  }\n  \n  // Given an element, convert, and relativeTo - return the number we need to multiply by.\n  var getConverterScale = function(e, converter, relativeTo)\n  {\n    if ( anim8.isNumber( converter ) )\n    {\n      return converter;\n    }\n    else if ( anim8.isFunction( converter ) )\n    {\n      return converter( e, relativeTo );\n    }\n    \n    return 1.0;\n  };\n  \n  return function(e, from, toUnit, relativeTo)\n  {\n    if ( anim8.isNumber( from ) )\n    {\n      return from;\n    }\n    \n    var parsed = anim8.dom.parseValue( from );\n    \n    if ( !parsed )\n    {\n      return false;\n    }\n    \n    var value = parsed.value;\n    var fromUnit = parsed.unit;\n    \n    if ( !fromUnit || fromUnit === toUnit )\n    {\n      return value;\n    }\n    \n    // First see if we have a direct conversion available...\n    if ( fromUnit in conversions && toUnit in conversions[ fromUnit ] )\n    {\n      var converter = conversions[ fromUnit ][ toUnit ];\n      \n      value *= getConverterScale( e, converter, relativeTo );\n    }\n    // Otherwise convert it to px, then to the desired unit\n    else if ( fromUnit in conversions && conversions[ fromUnit ].px && toUnit in conversions.px )\n    {\n      var converter1 = conversions[ fromUnit ].px;\n      var converter2 = conversions.px[ toUnit ];\n\n      var combined = getConverterScale( e, converter1, relativeTo ) *\n                     getConverterScale( e, converter2, relativeTo );\n      \n      value *= combined;\n    }\n    \n    return value;\n  };\n  \n})();\n\n\n","\n/**\n * Properties for the DOM animator.\n */\n\nanim8.dom.unset = function( e, anim, attr, property, css, clearedValue )\n{\n  if ( attr === true )\n  {\n    e.style[ css ] = clearedValue; \n  }\n  else\n  {\n    delete anim.frame[ attr ];\n\n    property.set( e, anim );\n\n    e.style[ css ] = anim.styles[ css ];  \n  }\n};\n\nanim8.dom.property.factory = function(nm, relativeTo) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[ nm ] = converted;\n          anim.animating[ nm ] = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[ nm ] = anim.value( nm );\n    },\n    unset: function(e, anim, attr)\n    {\n      e.style[ nm ] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryDerivable = function(nm, relativeTo, deriver) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[ nm ] = converted;\n          anim.animating[ nm ] = true;\n        }\n        else if ( anim8.isFunction( deriver ) )\n        {\n          converted = anim8.dom.convert( e, deriver( e ), anim.units[ nm ], relativeTo );\n          \n          if ( converted !== false )\n          {\n            anim.frame[ nm ] = converted;\n            anim.animating[ nm ] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[ nm ] = anim.value( nm );\n    },\n    unset: function(e, anim, attr)\n    {\n      e.style[ nm ] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryColor = function(nm) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var parsed = anim8.color.parse( style );\n        \n        if (parsed !== false) \n        {\n          anim.frame[nm] = parsed;\n          anim.animating[nm] = true;\n        }              \n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[ nm ] = anim8.color.format( anim.frame[nm] );\n    },\n    unset: function(e, anim, attr)\n    {\n      e.style[ nm ] = null;\n    }\n  };\n};\n\nanim8.dom.property.noop = \n{\n  get: function(e, anim)\n  {\n  },\n  set: function(e, anim)\n  {\n  },\n  unset: function(e, anim)\n  {\n  }\n};\n\nanim8.dom.property.padding                  = anim8.dom.property.factory( 'padding', 'parentWidth' );\nanim8.dom.property.paddingTop               = anim8.dom.property.factory( 'paddingTop', 'parentWidth' );\nanim8.dom.property.paddingRight             = anim8.dom.property.factory( 'paddingRight', 'parentWidth' );\nanim8.dom.property.paddingBottom            = anim8.dom.property.factory( 'paddingBottom', 'parentWidth' );\nanim8.dom.property.paddingLeft              = anim8.dom.property.factory( 'paddingLeft', 'parentWidth' );\n\nanim8.dom.property.margin                   = anim8.dom.property.factory( 'margin', 'parentWidth' );\nanim8.dom.property.marginTop                = anim8.dom.property.factory( 'marginTop', 'parentWidth' );\nanim8.dom.property.marginRight              = anim8.dom.property.factory( 'marginRight', 'parentWidth' );\nanim8.dom.property.marginBottom             = anim8.dom.property.factory( 'marginBottom', 'parentWidth' );\nanim8.dom.property.marginLeft               = anim8.dom.property.factory( 'marginLeft', 'parentWidth' );\n\nanim8.dom.property.borderRadius             = anim8.dom.property.factory( 'borderRadius', 'width' );\nanim8.dom.property.borderTopLeftRadius      = anim8.dom.property.factory( 'borderTopLeftRadius', 'width' );\nanim8.dom.property.borderTopRightRadius     = anim8.dom.property.factory( 'borderTopRightRadius', 'width' );\nanim8.dom.property.borderBottomLeftRadius   = anim8.dom.property.factory( 'borderBottomLeftRadius', 'width' );\nanim8.dom.property.borderBottomRightRadius  = anim8.dom.property.factory( 'borderBottomRightRadius', 'width' );\n\nanim8.dom.property.borderWidth              = anim8.dom.property.factory( 'borderWidth' );\nanim8.dom.property.borderTopWidth           = anim8.dom.property.factory( 'borderTopWidth' );\nanim8.dom.property.borderRightWidth         = anim8.dom.property.factory( 'borderRightWidth' );\nanim8.dom.property.borderBottomWidth        = anim8.dom.property.factory( 'borderBottomWidth' );\nanim8.dom.property.borderLeftWidth          = anim8.dom.property.factory( 'borderLeftWidth' );\n\nanim8.dom.property.outlineWidth             = anim8.dom.property.factory( 'outlineWidth' );\nanim8.dom.property.textIndent               = anim8.dom.property.factory( 'textIndent', 'parentWidth' );\nanim8.dom.property.borderSpacing            = anim8.dom.property.factory( 'borderSpacing' );\nanim8.dom.property.fontSize                 = anim8.dom.property.factory( 'fontSize', 'parentFontSize' );\nanim8.dom.property.lineHeight               = anim8.dom.property.factory( 'lineHeight', 'fontSize' );\nanim8.dom.property.letterSpacing            = anim8.dom.property.factory( 'letterSpacing' );\n\nanim8.dom.property.zIndex                   = anim8.dom.property.factory( 'zIndex' );\n\nanim8.dom.property.color                    = anim8.dom.property.factoryColor( 'color' );\nanim8.dom.property.backgroundColor          = anim8.dom.property.factoryColor( 'backgroundColor' );\nanim8.dom.property.borderTopColor           = anim8.dom.property.factoryColor( 'borderTopColor' );\nanim8.dom.property.borderRightColor         = anim8.dom.property.factoryColor( 'borderRightColor' );\nanim8.dom.property.borderBottomColor        = anim8.dom.property.factoryColor( 'borderBottomColor' );\nanim8.dom.property.borderLeftColor          = anim8.dom.property.factoryColor( 'borderLeftColor' );\nanim8.dom.property.borderColor              = anim8.dom.property.factoryColor( 'borderColor' );\nanim8.dom.property.outlineColor             = anim8.dom.property.factoryColor( 'outlineColor' );\n\nanim8.dom.property.minWidth                 = anim8.dom.property.factory( 'minWidth', 'parentWidth' );\nanim8.dom.property.maxWidth                 = anim8.dom.property.factory( 'maxWidth', 'parentWidth' );\nanim8.dom.property.minHeight                = anim8.dom.property.factory( 'minHeight', 'parentHeight' );\nanim8.dom.property.maxHeight                = anim8.dom.property.factory( 'maxHeight', 'parentHeight' );\n\nanim8.dom.property.width                    = anim8.dom.property.factoryDerivable('width', 'parentWidth', function(e) { return e.offsetWidth + 'px'; });\nanim8.dom.property.height                   = anim8.dom.property.factoryDerivable('height', 'parentHeight', function(e) { return e.offsetHeight + 'px'; });\n\nanim8.dom.property.top                      = anim8.dom.property.factoryDerivable('top', 'parentHeight', function(e) { return e.offsetTop + 'px'; });\nanim8.dom.property.right                    = anim8.dom.property.factoryDerivable('right', 'parentWidth', function(e) { return (e.parentNode.scrollWidth - (e.offsetLeft + e.offsetWidth)) + 'px'; });\nanim8.dom.property.bottom                   = anim8.dom.property.factoryDerivable('bottom', 'parentHeight', function(e) { return (e.parentNode.scrollHeight - (e.offsetTop + e.offsetHeight)) + 'px'; });\nanim8.dom.property.left                     = anim8.dom.property.factoryDerivable('left', 'parentWidth', function(e) { return e.offsetLeft + 'px'; });\n\n\nanim8.dom.property.zIndex.set = function(e, anim)\n{\n  anim.styles.zIndex = Math.floor( anim.frame.zIndex );\n};\n\nanim8.dom.property.visibility = \n{\n  get: function(e, anim) \n  {\n    if (anim.animating.visibility === false) \n    {\n      var style = anim8.dom.style( e, 'visibility' );\n      anim.frame.visibility = style === 'hidden' ? 0.0 : 1.0;\n      anim.animating = true;\n    }\n  },\n  set: function(e, anim) \n  {\n    anim.styles.visibility = anim.frame.visibility < 0.5 ? 'hidden' : 'visible'\n  },\n  unset: function(e, anim)\n  {\n    e.style.visibility = null;\n  }\n}\n\nanim8.dom.property.backface = (function()\n{\n  var css = anim8.dom.prefix(['WebkitBackfaceVisibility', 'MozBackfaceVisibility', 'msBackfaceVisibility', 'BackfaceVisibility']);\n  \n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n  \n  return {\n    \n    get: function(e, anim)\n    {\n      if ( anim.animating.backface === false )\n      {\n        var style = anim8.dom.style( e, css ); \n        \n        anim.frame.backface = (style === 'visible') ? 1.0 : 0.0;\n        anim.animating.backface = true;\n      }\n    },\n    set: function(e, anim)\n    {\n      anim.styles[css] = anim.frame.backface < 0.5 ? 'none' : 'visible';\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n    \n  };\n  \n})();\n\nanim8.dom.property.transformOrigin = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransformOrigin', 'MozTransformOrigin', 'OTransformOrigin', 'msTransformOrigin', 'transformOrigin']);\n  \n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n  \n  var keywords = \n  {\n    'left':   '0%',\n    'center': '50%',\n    'right':  '100%',\n    'top':    '0%',\n    'bottom': '100%'\n  };\n  \n  var setOriginAttribute = function(e, value, anim, attr, relativeTo ) \n  {\n    if (anim.animating[attr] === false) \n    {\n      if ( value in keywords )\n      {        \n        value = keywords[ value ];\n      }\n\n      var converted = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n      \n      if ( converted !== false )\n      {\n        anim.frame[ attr ] = converted;\n        anim.animating[ attr ] = true;\n      }\n    }\n  };\n  \n  var setOrigin = function(e, split, anim) \n  {\n    if (anim.animating.origin === false) \n    {\n      if ((split.length === 1) || \n          (split.length === 2 && split[0] === split[1]) || \n          (split.length === 3 && split[0] === split[1] && split[1] === split[2])) \n      {     \n        setOriginAttribute( e, split[0], anim, 'origin', 'width' );\n      }            \n    }\n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      if (style) \n      {\n        var origin = style.toLowerCase();\n        var split = origin.split(' ');\n        \n        switch (split.length) \n        {\n        case 3:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOriginAttribute( e, split[2], anim, 'originZ' );\n          setOrigin( e, split, anim );\n          break;\n        case 2:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        case 1:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[0], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var style = null;\n      \n      if ( anim8.isDefined( anim.frame.originZ ) )\n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' ) + ' ' + anim.valueOr( 'originZ', 'origin', 'z' );\n      } \n      else \n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' );\n      }\n      \n      anim.styles[css] = style;\n    },\n    unset: function(e, anim, attr)\n    {\n      anim8.dom.unset( e, anim, attr, this, css, null );\n    }\n  };\n  \n})();\n\nanim8.dom.property.transform = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);\n   \n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n  \n  var parse = function( e, value, anim, attr, relativeTo )\n  {\n    var desiredUnit = anim.units[ attr ];\n    var converted = anim8.dom.convert( e, value, desiredUnit, relativeTo );\n    \n    if ( converted !== false )\n    {\n      return converted;\n    }\n    \n    // TODO show convert this to desiredUnit, however defaultValue may be non-scalar.\n    return anim.getAttribute( attr ).defaultValue;    \n  };\n\n  var getter1d = function(e, anim, parsed, attr)\n  {\n    return parse( e, parsed[1], anim, attr, 'width' )\n  };\n  var getter2d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' )\n    };\n  };\n  var getter3d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' ),\n      z: parse( e, parsed[3], anim, attr )\n    };\n  };\n  var getter4d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' ),\n      z: parse( e, parsed[3], anim, attr ),\n      angle: parse( e, parsed[4], anim, attr )\n    };\n  };\n\n  var setter1d = function(attr, value, unit)\n  {\n    return attr + '(' + value + unit + ')';\n  };\n  var setter2d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + unit + ',' + value.y + unit + ')';\n  };\n  var setter3d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + unit + ',' + value.y + unit + ',' + value.z + unit + ')';\n  };\n  var setter4d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + ',' + value.y + ',' + value.z + ',' + value.angle + unit + ')';\n  };\n  var combine = function(ax, ay, bx, by, ascl, bscl)\n  {\n    return {\n      x: (ascl * ax) + (bscl * bx),\n      y: (ascl * ay) + (bscl * by)\n    };\n  };\n  var place1d = function(anim, e, attr, value, relativeTo)\n  {\n    if ( anim.animating[ attr ] === false )\n    {\n      anim.frame[ attr ] = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n      anim.animating[ attr ] = true;\n    }\n  };\n  var place2d = function(anim, e, attr, valueX, valueY, relativeToX, relativeToY)\n  {\n    if ( anim.animating[ attr ] === false )\n    {\n      anim.frame[ attr ] = {\n        x: anim8.dom.convert( e, valueX, anim.units[ attr ], relativeToX ),\n        y: anim8.dom.convert( e, valueY, anim.units[ attr ], relativeToY )\n      };\n      anim.animating[ attr ] = true;\n    }\n  };\n  var place3d = function(anim, e, attr, valueX, valueY, valueZ, relativeToX, relativeToY, relativeToZ)\n  {\n    if ( anim.animating[ attr ] === false )\n    {\n      anim.frame[ attr ] = {\n        x: anim8.dom.convert( e, valueX, anim.units[ attr ], relativeToX ),\n        y: anim8.dom.convert( e, valueY, anim.units[ attr ], relativeToY ),\n        z: anim8.dom.convert( e, valueZ, anim.units[ attr ], relativeToZ )\n      };\n      anim.animating[ attr ] = true;\n    }\n  };\n  var place4d = function(anim, e, attr, valueX, valueY, valueZ, valueRotate, relativeToX, relativeToY, relativeToZ, relativeToRotate)\n  {\n    if ( anim.animating[ attr ] === false )\n    {\n      anim.frame[ attr ] = {\n        x: anim8.dom.convert( e, valueX, anim.units[ attr ], relativeToX ),\n        y: anim8.dom.convert( e, valueY, anim.units[ attr ], relativeToY ),\n        z: anim8.dom.convert( e, valueZ, anim.units[ attr ], relativeToZ ),\n        angle: anim8.dom.convert( e, valueRotate, anim.units[ attr ], relativeToRotate )\n      };\n      anim.animating[ attr ] = true;\n    }\n  };\n    \n  var regexes = \n  {\n    translate:    /translate\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translate3d:  /translate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translateX:   /translateX\\(([^\\)]+)\\)/i,\n    translateY:   /translateY\\(([^\\)]+)\\)/i,\n    translateZ:   /translateZ\\(([^\\)]+)\\)/i,\n    scale:        /scale\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scale3d:      /scale3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scaleX:       /scaleX\\(([^\\)]+)\\)/i,\n    scaleY:       /scaleY\\(([^\\)]+)\\)/i,\n    scaleZ:       /scaleZ\\(([^\\)]+)\\)/i,\n    rotate:       /rotate\\(([^\\)]+)\\)/i,\n    skew:         /skew\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    skewX:        /skewX\\(([^\\)]+)\\)/i,\n    skewY:        /skewY\\(([^\\)]+)\\)/i,\n    rotate3d:     /rotate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    rotateX:      /rotateX\\(([^\\)]+)\\)/i,\n    rotateY:      /rotateY\\(([^\\)]+)\\)/i,\n    rotateZ:      /rotateZ\\(([^\\)]+)\\)/i\n  };\n\n  var matrix = /matrix\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\)/i;\n\n  var getters = \n  {\n    translate:    getter2d,\n    translate3d:  getter3d,\n    translateX:   getter1d,\n    translateY:   getter1d,\n    translateZ:   getter1d,\n    scale:        getter2d,\n    scale3d:      getter3d,\n    scaleX:       getter1d,\n    scaleY:       getter1d,\n    scaleZ:       getter1d,\n    rotate:       getter1d,\n    rotate3d:     getter4d,\n    rotateX:      getter1d,\n    rotateY:      getter1d,\n    rotateZ:      getter1d,\n    skew:         getter2d,\n    skewX:        getter1d,\n    skewY:        getter1d\n  };\n\n  var setters =\n  {\n    translate:    setter2d,\n    translate3d:  setter3d,\n    translateX:   setter1d,\n    translateY:   setter1d,\n    translateZ:   setter1d,\n    scale:        setter2d,\n    scale3d:      setter3d,\n    scaleX:       setter1d,\n    scaleY:       setter1d,\n    scaleZ:       setter1d,\n    rotate:       setter1d,\n    rotate3d:     setter4d,\n    rotateX:      setter1d,\n    rotateY:      setter1d,\n    rotateZ:      setter1d,\n    skew:         setter2d,\n    skewX:        setter1d,\n    skewY:        setter1d\n  };\n\n  var props = new anim8.FastMap( regexes );\n  var regex = props.values;\n  var attrs = props.keys;\n  props.setters = [];\n  props.getters = [];\n\n  for (var prop in getters)\n  {\n    var i = props.indexOf( prop );\n\n    props.getters[ i ] = getters[ prop ];\n    props.setters[ i ] = setters[ prop ];\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n\n      var matrixParsed = matrix.exec( style );\n\n      if ( matrixParsed )\n      {\n        var a = parseFloat( matrixParsed[ 1 ] );\n        var b = parseFloat( matrixParsed[ 2 ] );\n        var c = parseFloat( matrixParsed[ 3 ] );\n        var d = parseFloat( matrixParsed[ 4 ] );\n        var tx = parseFloat( matrixParsed[ 5 ] );\n        var ty = parseFloat( matrixParsed[ 6 ] );\n\n        // Make sure the matrix is invertible\n        if ((a * d - b * c) !== 0)\n        {\n          // Take care of translation\n          var translateX = tx + 'px';\n          var translateY = ty + 'px';\n\n          // Compute X scale factor and normalize first row.\n          var scaleX = Math.sqrt( a * a + b * b );\n          if ( scaleX !== 0 )\n          {\n            a /= scaleX;\n            b /= scaleX;\n          }\n\n          // Compute shear factor and make 2nd row orthogonal to 1st.\n          var skew = a * c + b * d;\n          var combined = combine( c, d, a, b, 1.0, -skew );\n          c = combined.x;\n          d = combined.y;\n\n          // Now, compute Y scale and normalize 2nd row.\n          var scaleY = Math.sqrt( c * c + d * d );\n          if ( scaleY !== 0 )\n          {\n            c /= scaleY;\n            d /= scaleY;\n            skew /= scaleY; \n          }\n\n          // Now, get the rotation out\n          var rotate = Math.atan2( b, a ) + 'rad';\n\n          // Place values in animator.\n          place2d( anim, e, 'translate', translateX, translateY, 'width', 'height' );\n          place3d( anim, e, 'translate3d', translateX, translateY, 0, 'width', 'height' );\n          place1d( anim, e, 'translateX', translateX, 'width' );\n          place1d( anim, e, 'translateY', translateY, 'height' );\n          place2d( anim, e, 'scale', scaleX, scaleY );\n          place1d( anim, e, 'scaleX', scaleX );\n          place1d( anim, e, 'scaleY', scaleY );\n          place3d( anim, e, 'scale3d', scaleX, scaleY, 1 );\n          place1d( anim, e, 'rotate', rotate );\n          place4d( anim, e, 'rotate3d', 0, 0, 1, rotate );\n          place1d( anim, e, 'rotateZ', rotate );\n          place2d( anim, e, 'skew', skew, skew );\n          place1d( anim, e, 'skewX', skew );\n          place1d( anim, e, 'skewY', skew );\n\n          return;\n        }\n      }\n      \n      for (var attr in anim.animating) \n      {\n        var i = props.indexOf( attr );\n\n        if ( i !== -1 && anim.animating[ attr ] === false ) \n        {\n          var parsed = regex[ i ].exec( style );\n\n          if ( parsed ) \n          {\n            anim.frame[ attr ] = props.getters[ i ]( e, anim, parsed, attr );\n            anim.animating[ attr ] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var transforms = [];\n      \n      for (var i = 0; i < attrs.length; i++) \n      {\n        var attr = attrs[ i ];\n\n        if ( attr in anim.frame ) \n        {\n          transforms.push( props.setters[ i ]( attr, anim.frame[ attr ], anim.units[ attr ] ) );\n        }\n      }\n      \n      if (transforms.length) \n      {\n        anim.styles[ css ] = transforms.join( ' ' );\n      }\n    },\n    unset: function(e, anim, attr)\n    {\n      anim8.dom.unset( e, anim, attr, this, css, '' );\n    }\n  };\n  \n})();\n\nanim8.dom.property.opacity = (function() \n{\n  var css = anim8.dom.prefix(['WebkitOpacity', 'MozOpacity', 'KhtmlOpacity', 'opacity']);\n  \n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating.opacity === false) \n      {\n        var style = anim8.dom.style( e, css );\n        var opacity = parseFloat( style );\n        \n        if ( !isNaN(opacity) ) \n        {\n          anim.frame.opacity = opacity\n          anim.animating.opacity = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[ css ] = anim8.clamp( anim.frame.opacity, 0, 1 );\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.shadow = (function()\n{\n  var css = anim8.dom.prefix(['WebkitBoxShadow', 'MozBoxShadow', 'boxShadow']);\n\n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n\n  var parsePart = function( e, anim, attr, value, relativeTo )\n  {\n    if ( anim.updating[ attr ] === false && value )\n    {\n      var parsed = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n\n      if ( parsed !== false )\n      {\n        anim.frame[ attr ] = parsed;\n        anim.updating[ attr ] = true;\n      }\n    }\n  };\n\n  return {\n\n    get: function(e, anim)\n    {\n      var style = anim8.dom.style( e, css );\n      var parts = style.split( ' ' );\n\n      if ( parts.length < 3 )\n      {\n        return;\n      }\n\n      var inset = 0;\n\n      if ( parts[ 0 ] === 'inset' )\n      {\n        inset = 1;\n        parts.shift();\n      }\n\n      var x = parts[ 0 ];\n      var y = parts[ 1 ];\n      var blur = false, spread = false, color = false;\n\n      switch ( parts.length ) {\n        case 3:\n          color = parts[ 2 ];\n          break;\n        case 4:\n          blur = parts[ 2 ];\n          color = parts[ 3 ];\n          break;\n        case 5:\n          blur = parts[ 2 ];\n          spread = parts[ 3 ];\n          color = parts[ 4 ];\n          break;\n      }\n\n      parsePart( e, anim, 'shadowX', x, 'width' );\n      parsePart( e, anim, 'shadowY', y, 'height' );\n      parsePart( e, anim, 'shadowBlur', blur, 'width' );\n      parsePart( e, anim, 'shadowSpread', spread, 'width' );\n\n      if ( anim.updating.shadowPosition === false )\n      {\n        var parsedX = anim8.dom.convert( e, x, anim.units.shadowPosition, 'width' );\n        var parsedY = anim8.dom.convert( e, y, anim.units.shadowPosition, 'height' );\n\n        if ( parsedX !== false && parsedY !== false )\n        {\n          anim.frame.shadowPosition = {\n            x: parsedX,\n            y: parsedY\n          };\n          anim.updating.shadowPosition = true;\n        }\n      }\n\n      if ( anim.updating.shadowInset === false )\n      {\n        anim.frame.shadowInset = inset;\n        anim.updating.shadowInset = true;\n      }\n\n      if ( anim.updating.shadowColor === false )\n      {\n        var parsed = anim8.color.parse( color );\n\n        if ( parsed !== false )\n        {\n          anim.frame.shadowColor = parsed;\n          anim.updating.shadowColor = true;\n        }\n      }\n\n    },\n\n    set: function(e, anim)\n    {\n      var style = '';\n\n      if ( anim.frame.inset )\n      {\n        style += inset + ' ';\n      }\n\n      style += anim.valueOr( 'shadowX', 'shadowPosition', 'x' ) + ' ';\n      style += anim.valueOr( 'shadowY', 'shadowPosition', 'y' ) + ' ';\n\n      if ( anim8.isNumber( anim.frame.shadowBlur ) )\n      {\n        style += anim.value( 'shadowBlur' ) + ' ';\n      }\n\n      if ( anim8.isNumber( anim.frame.shadowSpread ) )\n      {\n        style += anim.value( 'shadowSpread' ) + ' ';\n      }\n\n      style += anim8.color.format( anim.frame.shadowColor );\n\n      anim.styles[ css ] = style;\n    },\n\n    unset: function(e, anim, attr)\n    {\n      anim8.dom.unset( e, anim, attr, this, css, null );\n    }\n\n  };\n\n})();\n\n\nanim8.dom.property.textShadow = (function()\n{\n  var css = anim8.dom.prefix(['WebkitTextShadow', 'MozTextShadow', 'textShadow']);\n\n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n\n  var parsePart = function( e, anim, attr, value, relativeTo )\n  {\n    if ( anim.updating[ attr ] === false && value )\n    {\n      var parsed = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n\n      if ( parsed !== false )\n      {\n        anim.frame[ attr ] = parsed;\n        anim.updating[ attr ] = true;\n      }\n    }\n  };\n\n  return {\n\n    get: function(e, anim)\n    {\n      var style = anim8.dom.style( e, css );\n      var parts = style.split( ' ' );\n\n      if ( parts.length < 3 )\n      {\n        return;\n      }\n\n      var x = parts[ 0 ];\n      var y = parts[ 1 ];\n      var blur = false, color = false;\n\n      switch ( parts.length ) {\n        case 3:\n          color = parts[ 2 ];\n          break;\n        case 4:\n          blur = parts[ 2 ];\n          color = parts[ 3 ];\n          break;\n      }\n\n      parsePart( e, anim, 'textShadowX', x, 'width' );\n      parsePart( e, anim, 'textShadowY', y, 'height' );\n      parsePart( e, anim, 'textShadowBlur', blur, 'width' );\n\n      if ( anim.updating.textShadowPosition === false )\n      {\n        var parsedX = anim8.dom.convert( e, x, anim.units.textShadowPosition, 'width' );\n        var parsedY = anim8.dom.convert( e, y, anim.units.textShadowPosition, 'height' );\n\n        if ( parsedX !== false && parsedY !== false )\n        {\n          anim.frame.textShadowPosition = {\n            x: parsedX,\n            y: parsedY\n          };\n          anim.updating.textShadowPosition = true;\n        }\n      }\n\n      if ( anim.updating.textShadowColor === false )\n      {\n        var parsed = anim8.color.parse( color );\n\n        if ( parsed !== false )\n        {\n          anim.frame.textShadowColor = parsed;\n          anim.updating.textShadowColor = true;\n        }\n      }\n    },\n\n    set: function(e, anim)\n    {\n      var style = '';\n\n      if ( anim.frame.inset )\n      {\n        style += inset + ' ';\n      }\n\n      style += anim.valueOr( 'textShadowX', 'textShadowPosition', 'x' ) + ' ';\n      style += anim.valueOr( 'textShadowY', 'textShadowPosition', 'y' ) + ' ';\n\n      if ( anim8.isNumber( anim.frame.textShadowBlur ) )\n      {\n        style += anim.value( 'textShadowBlur' ) + ' ';\n      }\n\n      if ( anim8.isNumber( anim.frame.textShadowSpread ) )\n      {\n        style += anim.value( 'textShadowSpread' ) + ' ';\n      }\n\n      style += anim8.color.format( anim.frame.textShadowColor );\n\n      anim.styles[ css ] = style;\n    },\n\n    unset: function(e, anim, attr)\n    {\n      anim8.dom.unset( e, anim, attr, this, css, null );\n    }\n\n  };\n\n})();\n\nanim8.dom.property.filter = (function() \n{\n  var css = anim8.dom.prefix(['WebkitFilter', 'MozFilter', 'OFilter', 'msFilter', 'filter']);\n  \n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n  \n  var methods = \n  {\n    grayscale:  'grayscale',\n    sepia:      'sepia',\n    saturate:   'saturate',\n    hueRotate:  'hue-rotate',\n    invert:     'invert',\n    brightness: 'brightness',\n    contrast:   'contrast',\n    blur:       'blur'\n  };\n  \n  var patterns = {};\n  \n  for (var attr in methods) \n  {\n    patterns[attr] = new RegExp( methods[attr] + '\\(([^\\)]+)\\)', 'i');\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      for (var attr in patterns) \n      {\n        if ( anim.animating[attr] === false ) \n        {\n          var parsed = patterns[attr].exec( style );\n          \n          if ( parsed ) \n          {\n            var converted = anim8.dom.convert( e, parsed[1], anim.units[ attr ] );\n            \n            if ( converted !== false )\n            {\n              anim.frame[ attr ] = converted;\n              anim.animating[ attr ] = true;\n            }\n          }\n        }\n      }\n    }, \n    set: function(e, anim) \n    {\n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n      var filters = [];\n      \n      for (var attr in methods) \n      {\n        if ( attr in anim.frame ) \n        {\n          filters.push( methods[attr] + '(' + anim.value( attr ) + ')' );\n        }\n      }\n      \n      if (filters.length) \n      {\n        anim.styles[ css ] = filters.join(' ');\n      }\n    },\n    unset: function(e, anim, attr)\n    {\n      anim8.dom.unset( e, anim, attr, this, css, null );\n    }\n  };\n  \n})();\n\nanim8.dom.property.center = \n{\n  get: function(e, anim)\n  {\n    var cx = (e.offsetLeft + e.offsetWidth * 0.5) + 'px';\n    var cy = (e.offsetTop + e.offsetHeight * 0.5) + 'px';\n    \n    if ( anim.animating.center === false )\n    {\n      var desiredUnit = anim.units.center;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n    \n      if ( ccx !== false && ccy !== false )\n      {\n        anim.frame.center = {\n          x: ccx,\n          y: ccy\n        };\n        anim.animating.center = true;\n      }\n    }\n    if ( anim.animating.centerX === false )\n    {\n      var desiredUnit = anim.units.centerX;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      \n      if ( ccx !== false )\n      {\n        anim.frame.centerX = ccx;\n        anim.animating.centerX = true;\n      }\n    }\n    if ( anim.animating.centerY === false )\n    {\n      var desiredUnit = anim.units.centerY;\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n      \n      if ( ccy !== false )\n      {\n        anim.frame.centerY = ccy;\n        anim.animating.centerY = true;\n      }\n    }\n  },\n  preset: function(e, anim)\n  {\n    anim.cached.width  = anim8.dom.convert( e, e.offsetWidth + 'px', anim.units.centerX || anim.units.center, 'parentWidth' );\n    anim.cached.height = anim8.dom.convert( e, e.offsetHeight + 'px', anim.units.centerY || anim.units.center, 'parentHeight' );\n  },\n  set: function(e, anim)\n  {\n    var rw = anim.cached.width * 0.5;\n    var rh = anim.cached.height * 0.5;\n    \n    if ( anim.updated.center )\n    {\n      anim.styles.left = (anim.frame.center.x - rw) + anim.units.center;\n      anim.styles.top = (anim.frame.center.y - rh) + anim.units.center;\n    }\n    if ( anim.updated.centerX )\n    {\n      anim.styles.left = (anim.frame.centerX - rw) + anim.units.centerX;\n    }\n    if ( anim.updated.centerY )\n    {\n      anim.styles.top = (anim.frame.centerY - rh) + anim.units.centerY;\n    }\n  },\n  unset: function(e, anim, attr)\n  {\n\n  }\n};\n\nanim8.dom.property.orbit = \n{\n  DEGREE_TO_RADIAN: Math.PI / 180.0,\n  \n  RADIAN_TO_DEGREE: 180.0 / Math.PI,\n  \n  get: function(e, anim)\n  {\n    var ox = (e.parentNode.scrollWidth * 0.5);\n    var oy = (e.parentNode.scrollHeight * 0.5); \n    var cx = (e.offsetLeft + e.offsetWidth * 0.5);\n    var cy = (e.offsetTop + e.offsetHeight * 0.5);\n    var dx = cx - ox;\n    var dy = cy - oy;\n  \n    if ( anim.animating.orbitOffset === false )\n    {\n      var cunit = anim.units.orbitOffset;\n      var cox = anim8.dom.convert( e, ox + 'px', cunit, 'parentWidth' );\n      var coy = anim8.dom.convert( e, oy + 'px', cunit, 'parentHeight' );\n      \n      if ( cox !== false && coy !== false )\n      {\n        anim.frame.orbitOffset = {\n          x: cox,\n          y: coy\n        };\n        anim.animating.orbitOffset = false;\n      }\n    }\n    \n    if ( anim.animating.distance === false )\n    {\n      anim.frame.distance = Math.sqrt( dx * dx + dy * dy );\n      anim.animating.distance = true;\n    }\n    \n    if ( anim.animating.angle === false )\n    {\n      anim.frame.angle = Math.atan2( dy, dx ) * this.RADIAN_TO_DEGREE;\n      anim.animating.angle = true;\n    }\n  },\n  \n  preset: function(e, anim)\n  {  \n    anim.cached.parentWidth = e.parentNode.scrollWidth;\n    anim.cached.parentHeight = e.parentNode.scrollHeight;\n    anim.cached.width = e.offsetWidth;\n    anim.cached.height = e.offsetHeight;\n  },\n  \n  set: function(e, anim)\n  {\n    // TODO calculator this correctly\n    var cunit = anim.units.orbitOffset || '%';\n    var orbitX = anim.frame.orbitOffset ? anim.frame.orbitOffset.x : 50;\n    var orbitY = anim.frame.orbitOffset ? anim.frame.orbitOffset.y : 50;\n    \n    var originUnit = anim.units.origin || '%';\n    var originX = anim.frame.origin ? anim.frame.origin.x : 50;\n    var originY = anim.frame.origin ? anim.frame.origin.y : 50;\n    \n    var cox = anim8.dom.convert( e, orbitX + cunit, 'px', anim.cached.parentWidth / 100.0 );\n    var coy = anim8.dom.convert( e, orbitY + cunit, 'px', anim.cached.parentHeight / 100.0 );\n    \n    var ox = anim8.dom.convert( e, originX + originUnit, 'px', anim.cached.width / 100.0 );\n    var oy = anim8.dom.convert( e, originY + originUnit, 'px', anim.cached.height / 100.0 );\n    \n    var angle = (anim.frame.angle || 0.0) * this.DEGREE_TO_RADIAN;\n    var distance = anim.frame.distance || 0.0;\n        \n    var cos = Math.cos( angle ) * distance;\n    var sin = Math.sin( angle ) * distance;\n    \n    anim.styles.left = (cox + cos - ox) + 'px';\n    anim.styles.top = (coy + sin - oy) + 'px';\n  },\n\n  unset: function(e, anim, attr)\n  {\n\n  }\n};","\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {Object|String} attr\n */\nanim8.dom.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.dom.attribute[ attr ];\n  }\n  \n  return anim8.dom.attribute['default'];\n};\n\n/**\n * The default attribute.\n */\nanim8.dom.attribute['default']              = {defaultValue: 0};\n\n/**\n * All animatable attributes for AnimatorDoms & HTMLElements.\n */\n\nanim8.dom.attribute.padding                 = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingTop              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingRight            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingBottom           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingLeft             = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.margin                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginTop               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginRight             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginBottom            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginLeft              = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderRadius            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopLeftRadius     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopRightRadius    = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomLeftRadius  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomRightRadius = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderWidth             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopWidth          = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderRightWidth        = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomWidth       = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderLeftWidth         = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.outlineWidth            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.outlineOffset           = {defaultValue: 0};\nanim8.dom.attribute.textIndent              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderSpacing           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.fontSize                = {defaultValue: 1, defaultUnit: 'em'};\nanim8.dom.attribute.lineHeight              = {defaultValue: 1, defaultUnit: 'em'};\nanim8.dom.attribute.letterSpacing           = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.origin                  = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'transformOrigin', calculator: '2d'};\nanim8.dom.attribute.originX                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\nanim8.dom.attribute.originY                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\n\nanim8.dom.attribute.opacity                 = {defaultValue: 1};\nanim8.dom.attribute.zIndex                  = {defaultValue: 1};\n\nanim8.dom.attribute.width                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minWidth                = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxWidth                = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.height                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minHeight               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxHeight               = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.angle                   = {defaultValue: 0, property: 'orbit', defaultUnit: 'deg'};\nanim8.dom.attribute.distance                = {defaultValue: 0, property: 'orbit', defaultUnit: 'px'};\nanim8.dom.attribute.orbitOffset             = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'orbitOffset', calculator: '2d'};\n\nanim8.dom.attribute.top                     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.right                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.bottom                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.left                    = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.center                  = {defaultValue: {x:0, y:0}, defaultUnit: 'px', property: 'center', calculator: '2d'};\nanim8.dom.attribute.centerX                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\nanim8.dom.attribute.centerY                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\n\nanim8.dom.attribute.blur                    = {defaultValue: 0, property: 'filter', defaultUnit: 'px'};\nanim8.dom.attribute.sepia                   = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.brightness              = {defaultValue: 100, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.grayscale               = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.contrast                = {defaultValue: 100, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.invert                  = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.saturation              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.hueRotate               = {defaultValue: 0, property: 'filter', defaultUnit: 'deg'};\n\nanim8.dom.attribute.rotate                  = {defaultValue: 0, property: 'transform', defaultUnit: 'deg'};\nanim8.dom.attribute.rotate3d                = {defaultValue: {x:0, y:0, z:1, angle:0}, property: 'transform', calculator: 'quaternion', defaultUnit: 'deg'};\n\nanim8.dom.attribute.translate               = {defaultValue: {x:0, y:0}, property: 'transform', calculator: '2d', defaultUnit: 'px'};\nanim8.dom.attribute.translateX              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateY              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateZ              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translate3d             = {defaultValue: {x:0, y:0, z:0}, property: 'transform', calculator: '3d', defaultUnit: 'px'};\n\nanim8.dom.attribute.scale                   = {defaultValue: {x:1, y:1}, property: 'transform', calculator: '2d'};\nanim8.dom.attribute.scaleX                  = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleY                  = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleZ                  = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scale3d                 = {defaultValue: {x:1, y:1, z:1}, property: 'transform', calculator: '3d'};\n\nanim8.dom.attribute.skew                    = {defaultValue: {x:0, y:0}, defaultUnit: 'deg', property: 'transform', calculator: '2d'};\nanim8.dom.attribute.skewX                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\nanim8.dom.attribute.skewY                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\n\nanim8.dom.attribute.backface                = {defaultValue: 0};\nanim8.dom.attribute.visibility              = {defaultValue: 1};\n\nanim8.dom.attribute.backgroundColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.color                   = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderTopColor          = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderRightColor        = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderBottomColor       = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderLeftColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderColor             = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.outlineColor            = {defaultValue: anim8.color(), calculator: 'rgba'};\n\nanim8.dom.attribute.textShadowX             = {defaultValue: 0, defaultUnit: 'px', property: 'textShadow'};\nanim8.dom.attribute.textShadowY             = {defaultValue: 0, defaultUnit: 'px', property: 'textShadow'};\nanim8.dom.attribute.textShadowPosition      = {defaultValue: {x: 0, y: 0}, defaultUnit: 'px', calculator: '2d', property: 'textShadow'};\nanim8.dom.attribute.textShadowBlur          = {defaultValue: 0, defaultUnit: 'px', property: 'textShadow'};\nanim8.dom.attribute.textShadowColor         = {defaultValue: anim8.color(), calculator: 'rgba', property: 'textShadow'};\n\nanim8.dom.attribute.shadowX                 = {defaultValue: 0, defaultUnit: 'px', property: 'shadow'};\nanim8.dom.attribute.shadowY                 = {defaultValue: 0, defaultUnit: 'px', property: 'shadow'};\nanim8.dom.attribute.shadowPosition          = {defaultValue: {x: 0, y: 0}, defaultUnit: 'px', calculator: '2d', property: 'shadow'};\nanim8.dom.attribute.shadowBlur              = {defaultValue: 0, defaultUnit: 'px', property: 'shadow'};\nanim8.dom.attribute.shadowSpread            = {defaultValue: 0, defaultUnit: 'px', property: 'shadow'};\nanim8.dom.attribute.shadowColor             = {defaultValue: anim8.color(), calculator: 'rgba', property: 'shadow'};\nanim8.dom.attribute.shadowInset             = {defaultValue: 0, property: 'shadow'};\n","\n/**\n * Instantiates a new AnimatorDom given a subject.\n * \n * @param {HTMLElement} e\n * @class AnimatorDom\n * @constructor\n * @extends Animator\n */\nanim8.AnimatorDom = function(subject)\n{\n  this.reset( subject );\n  this.properties = new anim8.FastMap();\n  this.propertiesPreset = new anim8.FastMap();\n  this.attributeToProperty = {};\n  this.animating = {};\n  this.cached = {};\n  this.units = {};\n  this.styles = {};\n  this.styled = false;\n  this.stylesUpdated = false;\n};\n\n/**\n * Extends anim8.Animator\n */\nanim8.override( anim8.AnimatorDom.prototype = new anim8.Animator(),\n{\n  preupdate: function(now)\n  {\n    // If there are events with paths that contain computed values we should\n    // populate the frame directly from the HTML element.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      var properties = {};\n    \n      for (var i = aa.length - 1; i >= 0; i--)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        if ( !(attr in this.frame) && attrimator.hasComputed() )\n        {\n          properties[ this.attributeToProperty[ attr ] ] = true;\n      \n          this.animating[ attr ] = false; \n        }\n      }\n      \n      for (var prop in properties)\n      {\n        this.properties.get( prop ).get( this.subject, this );\n      }\n\n      for (var i = aa.length - 1; i >= 0; i--)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        this.setDefault( attr );       \n\n        attrimator.start( now, this );     \n      }\n\n      aa.length = 0;\n    }\n\n    // If a property currently being animated requires some heads up before it\n    // gets or sets a value, notify it. TODO removed dead properties.\n    var presets = this.propertiesPreset.values;\n    for (var i = presets.length - 1; i >= 0; i--)\n    {\n      presets[ i ].preset( this.subject, this );\n    }\n\n    this.trigger('preupdate');\n\n    return this;\n  },\n  update: function(now)\n  {\n    anim8.fn.update.apply( this, arguments );\n      \n    this.getStyles();\n    this.stylesUpdated = true;\n\n    return this;\n  },\n  apply: function()\n  {\n    if ( !this.styled && !this.stylesUpdated )\n    {\n      this.getStyles();\n    }\n    \n    if ( this.styled )\n    {    \n      for (var prop in this.styles)\n      {\n         this.subject.style[ prop ] = this.styles[ prop ];\n      }\n      \n      for (var attr in this.frame)\n      {\n        this.updated[ attr ] = false;\n      }\n    \n      this.styled = false;\n    }\n    \n    this.stylesUpdated = false;\n    \n    this.trigger('apply');\n    \n    this.trimAttrimators();\n\n    return this;\n  },\n  placeAttrimator: function( attrimator )\n  {\n    anim8.fn.placeAttrimator.apply( this, arguments );\n    \n    var attr = attrimator.attribute;\n    var attribute = this.getAttribute( attr );\n    var propertyName = attribute.propertyName;\n    var property = attribute.property;\n\n    this.properties.put( propertyName, property );\n\n    this.attributeToProperty[ attr ] = propertyName;\n    this.units[ attr ] = attribute.defaultUnit;\n\n    if ( attrimator.input && attrimator.input.units && attr in attrimator.input.units )\n    {\n      this.units[ attr ] = attrimator.input.units[ attr ];\n    }\n\n    if ( anim8.isFunction( property.preset ) )\n    {\n      this.propertiesPreset.put( propertyName, property );\n    }\n\n    return this;\n  },\n  restore: function()\n  {\n    var props = this.properties.values;\n\n    for (var i = props.length - 1; i >= 0; i--)\n    {\n      props[ i ].unset( this.subject, this, true );\n    }\n    \n    this.frame = {};\n\n    return this;\n  },\n  unset: function( attributes )\n  {\n    var attributes = anim8.toArray( anim8.coalesce( attributes, this.frame ) );\n\n    for (var i = attributes.length - 1; i >= 0; i--)\n    {\n      var attr = attributes[ i ];\n      var prop = this.attributeToProperty[ attr ];\n      var property = this.properties.get( prop );\n\n      if ( property )\n      {\n        property.unset( this.subject, this, attr ); \n      }\n\n      this.attrimators.remove( attr );\n\n      delete this.frame[ attr ];\n    }\n\n    return this;\n  },\n  set: function( attributes )\n  {\n    var props = {};\n    var updated = {};\n    var units = {};\n    var styles = {};\n    \n    for (var attr in attributes)\n    {\n      var attribute = this.getAttribute( attr );\n      var value     = attributes[ attr ];\n      \n      units[ attr ] = attribute.defaultUnit;\n      \n      if ( anim8.isString( value ) )\n      {\n        var parsed = anim8.dom.parseValue( value, attribute.defaultUnit );\n        \n        if ( parsed !== false )\n        {\n          units[ attr ] = parsed.unit || attribute.defaultUnit;\n          value = parsed.value;\n        }  \n      }\n      \n      var parsed = attribute.parse( value );\n      \n      if ( parsed !== false )\n      {\n        props[ attribute.propertyName ] = attribute.property;\n        attributes[ attr ] = parsed;\n        updated[ attr ] = true;\n      }\n    }\n      \n    var flash = \n    {\n      source: this,\n\n      units: units,\n       \n      frame: attributes,\n      \n      updated: updated,\n      \n      styles: styles,\n      \n      cached: {},\n\n      get: function(attributes)\n      {\n        return this.source.get( attributes );\n      },\n      \n      value: function(attr)\n      {\n        return attributes[ attr ] + units[ attr ];\n      },\n      \n      valueOr: function(attr, other, subproperty)\n      {\n        var value = attributes[ attr ];\n        \n        if ( !anim8.isDefined( value ) )\n        {\n          value = attributes[ attr = other ];\n        \n          if ( anim8.isDefined( subproperty ) )\n          {\n            value = value[ subproperty ];\n          }\n        }\n    \n        return value + units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      var property = props[ prop ];\n      \n      if ( anim8.isFunction( property.preset ) )\n      {\n        props[ prop ].preset( this.subject, flash );\n      }\n    }\n    \n    for (var prop in props)\n    {\n      props[ prop ].set( this.subject, flash );\n    }\n    \n    for (var prop in styles)\n    {\n      this.subject.style[ prop ] = styles[ prop ];\n    }\n\n    return this;\n  },\n  \n  /**\n   * Builds the styles map in preparation to be applied.\n   *\n   * @method getStyles\n   */\n  getStyles: function()\n  {\n    this.styles = {};\n    \n    var applyProperties = {};\n    \n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        var prop = this.attributeToProperty[ attr ];\n        \n        if ( this.properties.has( prop ) )\n        {\n          applyProperties[ prop ] = true; \n        }\n      }\n    }\n    \n    for (var prop in applyProperties)\n    {\n      this.properties.get( prop ).set( this.subject, this );  \n      \n      this.styled = true;\n    }\n  },\n\n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute and the value is the desired unit.\n   *\n   * @method get\n   * @param {Object} attributes\n   * @return {Object}\n   */\n  get: function(attributes)\n  {\n    var props = {};\n    var animating = {};\n    var units = {};\n    var out = {};\n    \n    for (var attr in attributes)\n    {    \n      var attribute = this.getAttribute( attr );\n      \n      animating[ attr ] = false;    \n      units[ attr ] = attributes[ attr ] || attribute.defaultUnit;\n      props[ attribute.propertyName ] = attribute.property;\n      out[ attr ] = attribute.cloneDefault();\n    }\n    \n    var flash = \n    {    \n      source: this,\n\n      units: units,\n      \n      frame: out,\n      \n      animating: animating,\n      \n      unit: function(attr)\n      {\n        return units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      props[ prop ].get( this.subject, flash );\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {String} attribute\n   * @param {String} desiredUnit\n   * @param {String} relativeTo\n   * @return {Function}\n   */\n  ref: function(attribute, desiredUnit, relativeTo)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame && anim8.isNumber( animator.frame[ attribute ] ) )\n      {\n        return anim8.dom.convert( animator.e, animator.value( attribute ), desiredUnit, relativeTo );\n      }\n      \n      request[ attribute ] = desiredUnit;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return animator.getAttribute( attribute ).defaultValue;\n    };\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   *\n   * @method value\n   * @param {String} attr\n   * @return {String}\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ] + this.units[ attr ];\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   * if the attribute doesn't exist a secondary one is looked up. If that value\n   * is an object and contains the given subproperty the value is resolved once again.\n   *\n   * @method valueOr\n   * @param {String} attr\n   * @param {String} other\n   * @param [String] subproperty\n   * @return {String}\n   */\n  valueOr: function(attr, other, subproperty)\n  {\n    var value = this.frame[ attr ];\n      \n    if ( !anim8.isDefined( value ) )\n    {\n      value = this.frame[ attr = other ];\n      \n      if ( anim8.isDefined( subproperty ) )\n      {\n        value = value[ subproperty ];\n      }\n    }\n    \n    return value + this.units[ attr ];\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenTo\n   * @param {String} attr\n   * @param {T} target\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {String} [unit]\n   * @chainable\n   */\n  tweenTo: function(attr, target, options, cache, unit)\n  {\n    this.convertExisting( attr, unit );\n    anim8.fn.tweenTo.apply( this, arguments );\n    this.units[ attr ] = unit || this.units[ attr ];\n    return this;\n  },\n\n  /**\n   * Tweens multiple attributes to target values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenManyTo\n   * @param {Object} targets\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {Object} [units]\n   * @chainable\n   */\n  tweenManyTo: function(targets, options, cache, units)\n  {\n    this.convertExistingMany( units );\n    anim8.fn.tweenManyTo.apply( this, arguments );\n    anim8.override( this.units, units );\n    return this;\n  },\n\n  /**\n   * Tweens a single attribute from a starting value to the current value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenFrom\n   * @param {String} attr\n   * @param {T} starting\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {String} [unit]\n   * @chainable\n   */\n  tweenFrom: function(attr, starting, options, cache, unit)\n  {\n    this.convertExisting( attr, unit );\n    anim8.fn.tweenFrom.apply( this, arguments );\n    this.units[ attr ] = unit || this.units[ attr ];\n    return this;\n  },\n\n  /**\n   * Tweens multiple attributes from starting values to the current values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenManyFrom\n   * @param {Object} startings\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {Object} [units]\n   * @chainable\n   */\n  tweenManyFrom: function(startings, options, cache, units)\n  {\n    this.convertExistingMany( units );\n    anim8.fn.tweenManyFrom.apply( this, arguments );\n    anim8.override( this.units, units );\n    return this;\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tween\n   * @param {String} attr\n   * @param {T} starts\n   * @param {T} ends\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {String} [unit]\n   * @chainable\n   */\n  tween: function(attr, starts, ends, options, cache, unit)\n  {\n    this.convertExisting( attr, unit );\n    anim8.fn.tween.apply( this, arguments );\n    this.units[ attr ] = unit || this.units[ attr ];\n    return this;\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenMany\n   * @param {Object} starts\n   * @param {Object} ends\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {Object} [units]\n   * @chainable\n   */\n  tweenMany: function(starts, ends, options, cache, units)\n  {\n    this.convertExistingMany( units );\n    anim8.fn.tweenMany.apply( this, arguments );\n    anim8.override( this.units, units );\n    return this;\n  },\n\n  /**\n   * Moves an attribute relative to its current value.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method move\n   * @param {String} attr\n   * @param {T} amount\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {String} [unit]\n   * @chainable\n   */\n  move: function(attr, amount, options, cache, unit)\n  {\n    this.convertExisting( attr, unit );\n    anim8.fn.move.apply( this, arguments );\n    this.units[ attr ] = unit || this.units[ attr ];\n    return this;\n  },\n\n  /**\n   * Moves multiple attribute relative to their current value.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method moveMany\n   * @param {Object} amounts\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {Object} [units]\n   * @chainable\n   */\n  moveMany: function(amounts, options, cache, units)\n  {\n    this.convertExistingMany( units );\n    anim8.fn.moveMany.apply( this, arguments );\n    anim8.override( this.units, units );\n    return this;\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method follow\n   * @param {String} attr\n   * @param {Path|Object|String} path\n   * @param {Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {String} [unit]\n   * @chainable\n   */\n  follow: function(attr, path, options, cache, unit)\n  {\n    this.convertExisting( attr, unit );\n    anim8.fn.follow.apply( this, arguments );\n    this.units[ attr ] = unit || this.units[ attr ];\n    return this;\n  },\n\n  /**\n   * Converts any existing attributes to the desired units.\n   *\n   * @method convertExistingMany\n   * @param  {Object} units\n   */\n  convertExistingMany: function(units)\n  {\n    if ( units && anim8.isObject( units ) )\n    {\n      var current = this.get( units );\n\n      for (var attr in current)\n      {\n        this.frame[ attr ] = current[ attr ];\n      }\n    }\n  },\n\n  /**\n   * Converts any existing attribute to the desired unit.\n   *\n   * @method convertExisting\n   * @param  {String} attr\n   * @param  {String} toUnit\n   */\n  convertExisting: function(attr, toUnit)\n  {\n    if ( toUnit && attr in this.frame && attr in this.units && this.units[ attr ] !== toUnit )\n    {\n      var request = {};\n      request[ attr ] = toUnit;\n\n      this.convertExistingMany( request );\n    }\n  }\n\n});\n","/**\n * A factory for jQuery objects.\n */\nanim8.jQueryFactory = function()\n{\n  this.priority = 10;\n};\n\n// It extends anim8.Factory\nanim8.override( anim8.jQueryFactory.prototype = new anim8.Factory(),\n{\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return typeof jQuery !== 'undefined' && subject instanceof jQuery;\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    return anim8.factory.dom.animatorFor( subject[0] );\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    subject.each(function() \n    {\n      var animator = anim8.factory.dom.animatorFor( this );\n\n      if (animator) \n      {\n        animators.push( animator );\n      }\n    });\n  }\n  \n});\n\n/**\n * Registers the jQuery factory.\n */\nanim8.factory['jquery'] = new anim8.jQueryFactory();\n\n/**\n * Adds useful anim8js functions to jQuery.\n * \n * @param  {jQuery}\n * @param  {anim8}\n * @param  {anim8s}\n * @return {function}\n */\n(function($, m8, m8s)\n{\n\n  /**\n   * Extend the clone function to remove the attribute which stores the animator ID so clones get new animators.\n   * \n   * @return {jQuery}\n   */\n  var cloner = $.fn.clone;\n  \n  $.fn.clone = function()\n  {\n    var clone = cloner.apply( this, arguments );\n    \n    clone.removeAttr( anim8.factory.dom.elementAttribute );\n\n    return clone;\n  };\n\n  /**\n   * Adds the m8, anim8, and animator functions to jQuery. An instance of anim8.Animator will be returned.\n   * \n   * @return {anim8.Animator}\n   */\n  $.fn.m8 = $.fn.anim8 = $.fn.animator = function()\n  {\n    return m8( this[0] );\n  };\n\n  /**\n   * Adds the m8s, anim8s, animators functions to jQuery. An instance of anim8.Animators will be returned.\n   * \n   * @return {anim8.Animators}\n   */\n  $.fn.m8s = $.fn.anim8s = $.fn.animators = function()\n  {\n    return m8s( this.get() );\n  };\n  \n  /**\n   * Plays the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  [boolean] all\n   * @param  [boolean] cache\n   * @return {this}\n   * @see anim8.Animator.play\n   */\n  $.fn.dataPlay = function( animationAttribute, all, cache )\n  {\n    var options = {};\n\n\t\treturn this.filter(function()\n\t  {\n\t\t\tvar animationText = $(this).data( animationAttribute );\n\t\t\n\t\t\tif ( animationText )\n\t\t\t{\n        var animation = anim8.animation( animationText, options, cache );\n\n        if ( animation !== false )\n        {\n          m8( this ).play( animation, options, all ); \n\n          return true;\n        }\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n  \t});\n  };\n  \n  /**\n   * Queues the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  [boolean] cache\n   * @return {this}\n   * @see anim8.Animator.queue\n   */\n  $.fn.dataQueue = function( animationAttribute, cache )\n  {\t\n    var options = {};\n\n  \treturn this.filter(function()\n    {\n  \t\tvar animationText = $(this).data( animationAttribute );\n\t\t\n  \t\tif ( animationText )\n  \t\t{\n        var animation = anim8.animation( animationText, options, cache );\n\n        if ( animation !== false )\n        {\n          m8( this ).queue( animation );\n\n          return true;\n        }\n  \t\t}\n\t\t\t\n\t\t\treturn false;\n    });\n  };\n\n  /**\n   * Transitions into the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  {number} transitionTime\n   * @param  {number} transitionDelta\n   * @param  {string|function} transitionEasing\n   * @param  {boolean} cache\n   * @return {this}\n   */\n  $.fn.dataTransition = function( animationAttribute, transition, all, cache )\n  { \n    var options = {};\n\n    return this.filter(function()\n    {\n      var animationText = $(this).data( animationAttribute );\n    \n      if ( animationText )\n      {\n        var animation = anim8.animation( animationText, options, cache );\n \n        if ( animation !== false )\n        {\n          m8( this ).transition( transition, animation, options, all );\n          \n          return true;\n        }\n      }\n      \n      return false;\n    });\n  };\n\n  /**\n   * Wraps every character with a span and the class sequenced and returns a jquery\n   * element containing all wrapped characters.\n   * \n   * @return {jQuery}\n   */\n  $.fn.sequence = function()\n  {\n    this.each(function()\n    {\n      $(this).html( $(this).wrapCharacters('div', 'class=\"sequenced\"') );\n    });\n\n    return this.find('.sequenced');\n  };\n\n  /**\n   * Wraps every character in ever element in the jQuery object with a tag.\n   * If an element already only has one character it remains untouched.\n   * \n   * @param  {string} tagName\n   * @param  {string} attributes\n   * @return {string} attributes\n   */\n  $.fn.wrapCharacters = function(tagName, attributes)\n  {\n    var tagBegin = '<' + tagName + (typeof attributes === 'string' ? ' ' + attributes : '') + '>';\n    var tagEnd = '</' + tagName + '>';\n    var html = '';\n\n    $(this).contents().each(function()\n    {\n      // Is this a text node?\n      if (this.nodeType === 3)\n      {\n        // Break up node wrapping each character\n        var text = this.data;\n\n        if (text.length > 1)\n        {\n          // Collapse whitespaces\n          var previousSpace = false;\n          for (var i = 0; i < text.length; i++)\n          {\n            var space = text[i] <= ' ';\n            if (!space || !previousSpace)\n            {\n              html += tagBegin + text[i] + tagEnd;\n            }\n            previousSpace = space;\n          }\n        }\n        else\n        {\n          html += text;\n        }\n      }\n      else\n      {\n        // Not a text node!\n        var outer = this.outerHTML;\n        // If there are children, we need to recursively break them down\n        if (this.firstChild)\n        {\n          // Grab the element tag and attributes manually.\n          var start = 0;\n          var quotes = false;\n          while (start < outer.length)\n          {\n            var c = outer[start++];\n            if (c === '\"' || c === \"'\")\n            {\n              quotes = !quotes;\n            }\n            else if (c === '\\\\')\n            {\n              start++;\n            }\n            else if (c === '>' && !quotes)\n            {\n              break;\n            }\n          }\n          html += outer.substring(0, start) + $(this).wrapCharacters(tagName) + '</' + this.tagName.toLowerCase() + '>';\n        }\n        // No child nodes, just append outer HTML.\n        else\n        {\n          html += outer;\n        }\n      }\n    });\n\n    return html;\n  };\n  \n})(jQuery, anim8, anim8s);\n"],"sourceRoot":"/source/"}