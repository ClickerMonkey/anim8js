{"version":3,"sources":["anim8js-core.js","anim8js-fast-map.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-point.js","anim8js-attrimator.js","anim8js-attrimator-map.js","anim8js-event.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-physics.js","anim8js-animation.js","anim8js-transition.js","anim8js-options.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tweenTo.js","anim8js-parser-tweenFrom.js","anim8js-parser-move.js","anim8js-parser-springs.js","anim8js-parser-physics.js","anim8js-factory.js","anim8js-object.js","anim8js-dom-core.js","anim8js-dom-property.js","anim8js-dom-attribute.js","anim8js-dom-animator.js","anim8js-animate.css.js","anim8js-jquery.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","defaults","duration","easing","teasing","delay","sleep","repeat","scale","transitionTime","transitionOutro","transitionIntro","transitionEasing","transitionGranularity","cache","cacheOptions","cacheTransitions","noOptions","noTransition","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","trim","String","prototype","replace","log","size","prop","isEmpty","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","number","value","constant","variable","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","FastMap","map","reset","putMap","put","values","keys","indices","key","get","remove","removeAt","index","lastValue","pop","lastKey","indexOf","has","hasOverlap","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","pair","e","t","easingType","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","yoyo","mirror","reverse","flip","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attrimator","attr","attribute","getAttribute","frame","calculator","clone","cloneDefault","relative","relativeAmount","mask","isComputed","relativeFunction","calc","mul","add","Calculator","createConstants","ZERO","create","ONE","INFINITY","adds","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","isValid","isZero","isEqual","distSq","isRelative","getRelativeAmount","z","NumberCalculator","defaultValue","amountScale","ab","epsilon","Point2dCalculator","y","cx","cy","rx","ry","ix","iy","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Point3dCalculator","cz","rz","iz","dz","QuaternionCalculator","angle","ra","ia","da","RGBCalculator","rr","rg","rb","ir","ig","ib","dr","dg","db","RGBACalculator","path","Path","spring","type","name","points","hasComputed","compute","ps","reference","trues","last","first","point","replaceComputed","resolvePoint","isLinear","granularity","prev","temp","Tween","CubicPath","p0","p1","p2","p3","d1","d2","d3","i1","i3","QuadraticPath","DeltaPath","deltas","ds","d0","pd","JumpPath","CompiledPath","pointCount","KeyframePath","easings","ea","defaultEasing","PointPath","Attrimator","parser","startTime","pauseTime","elapsed","stopTime","paused","cycle","startCycle","setTime","updated","finish","update","getElapsed","stopIn","milliseconds","valueAt","totalTime","timeRemaining","isInfinite","pause","resume","isPaused","isFinished","getParser","queue","AttrimatorMap","queueMap","onNewAttribute","maxRemaining","attrimators","existing","unqueueAt","remaining","applyCycle","nextCycle","currentDepth","nextDepth","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","scaleBase","hasInitialState","state","applyValue","oldState","newState","iteration","computeValue","baseValue","Spring","set","rest","position","velocity","gravity","finishOnRest","finished","parseValue","dt","MAX_DT","starting","updateVelocity","EPSILON","resolveRest","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","Physics","acceleration","terminal","initalPosition","vel","resolveVelocity","acc","resolveAcceleration","pos","usePosition","animation","options","Animation","animationStrings","anim","parsedAnimation","parsedOptions","attrimatorMap","helper","ParserHelper","parserName","save","isSaved","newAttrimators","merge","force","transition","originalInput","transitionArray","part","charAt","intro","substring","outro","parseProperty","propertyAdd","propertyScale","fn","attrimatorsAdded","active","cycleCurrent","cycleNext","cycleEnded","newCycle","applyCurrentCycle","endCurrentCycle","restore","preupdate","aa","setDefault","wasFinished","minCycle","placeAttrimator","trimAttrimators","activate","deactivate","destroy","createAttrimators","onAnimation","queueAttrimators","play","all","playAttrimators","transitionAttrimators","a1","a2","getFuture","outroDelta","getPoint","transitionPath","transitionEvent","newInstance","tweenTo","target","tweenManyTo","targets","tween","starts","ends","tweenMany","ref","request","follow","attrimatorsFor","attributes","resulting","stop","unset","hasAttrimators","getSubject","wrapper","invoke","func","args","DeferAnimator","onCycleStart","onCycleEnd","fill","each","iterator","filter","filterer","alive","getSubjects","mid","e0","e1","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","Parser","newOptions","oldOptions","mergeEasing","mergeRepeat","mergeDelay","mergeSleep","mergeDuration","mergeScale","mergeScaleBase","prepareSpecifics","specifics","parseEasing","parseFirst","parseRepeat","parseNumber","parseDelay","parseSleep","parseDuration","parseScale","parseScaleBase","option","parseOptionFunction","optionAdd","optionScale","baseRaw","base","mergeFirst","mergeNumber","ParserDeltas","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","keyframe","sort","from","half","to","times","maxTime","order","pathEasings","ParserTweenTo","ParserTweenFrom","tweenFrom","ParserMove","move","ParseSpring","springs","ParsePhysics","physics","physic","stopAt","highestPriorityFactory","factoryName","is","priority","Factory","ObjectFactory","$animator","calculatorName","dom","DomFactory","cached","ids","elementAttribute","animatorId","DomAnimator","setAttribute","propertyName","defaultUnit","style","hyphenated","hyphenize","str","currentStyle","document","defaultView","getComputedStyle","getPropertyValue","prefix","createElement","prefixes","convert","toPixels","baseUnit","defaultRate","body","div","appendChild","width","pixels","offsetWidth","removeChild","getFontSize","notUnit","fontSize","getConverterScale","px","relativeTo","variables","parentWidth","parentNode","scrollWidth","parentHeight","scrollHeight","height","offsetHeight","parentFontSize","htmlFontSize","htmlElement","getElementsByTagName","pt","cm","mm","vw","deg","rad","PI","em","rem","given","converter","toUnit","fromUnit","converter1","converter2","nm","converted","units","styles","factoryDerivable","deriver","factoryColor","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","outlineWidth","textIndent","borderSpacing","lineHeight","zIndex","backgroundColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor","minWidth","maxWidth","minHeight","maxHeight","offsetTop","offsetLeft","visibility","backface","css","transformOrigin","keywords","setOriginAttribute","setOrigin","origin","originZ","valueOr","transform","desiredUnit","getter1d","getter2d","getter3d","getter4d","setter1d","setter2d","setter3d","setter4d","regexes","translate","translate3d","translateX","translateY","translateZ","scale3d","scaleX","scaleY","scaleZ","rotate","rotate3d","rotateX","rotateY","rotateZ","skew","skewX","skewY","getters","setters","props","attrs","transforms","join","opacity","grayscale","sepia","saturate","hueRotate","invert","brightness","contrast","blur","patterns","RegExp","filters","ccx","ccy","centerX","centerY","preset","rw","rh","orbit","DEGREE_TO_RADIAN","RADIAN_TO_DEGREE","ox","oy","orbitOffset","cunit","cox","coy","atan2","orbitX","orbitY","originUnit","originX","originY","outlineOffset","saturation","properties","propertiesPreset","attributeToProperty","styled","stylesUpdated","presets","getStyles","applyProperties","flash","other","subproperty","0,20,53,80,100","40,43","70","90","0,100","30","40","50","65","75","scaleBases","0,50,100","25,75","0","100","10,30,50,70,90","20,40,60,80","20","60","80","scales","10,20","30,50,70,90","40,60,80","15","45","50,55","40,45","final","20,60","0.00,100.00","12.50","37.50","58.33","75.00","87.50","95.83","actions","slide","fade","zoom","directions","Out","In","vertical","Down","Up","horizontal","Right","Left","sizes","Big","dir","ver","hor","siz","animName","jQueryFactory","jQuery","$","cloner","removeAttr","dataPlay","animationAttribute","animationText","data","dataQueue","dataTransition","transitionDelta","dataTransitionInto","transitionFromDelta","transitionIntoDelta","transitionInto","html","wrapCharacters","find","tagName","tagBegin","tagEnd","contents","text","wholeText","previousSpace","space","outer","outerHTML","firstChild","quotes"],"mappings":"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","file":"anim8js-jquery.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {array} subject\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   * \n   * @type {number}\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @type {string|function}\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @type {string|function}\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @type {number}\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @type {number}\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @type {number}\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @type {number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @type {number}\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition delta.\n   * \n   * @type {number}\n   */\n  transitionOutro:100,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {number}\n   */\n  transitionIntro: 100,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {string|function}\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * The default transition granularity. This is used for smooth transitions to\n   * provide a smooth transition from the outro velocity to the intro velocity,\n   * the cubic or quadratic path between the two is a curve with unknown length\n   * so the length needs to be calculated using a maximum number of points to\n   * calculate along the path - summing the distances between the consecutive points.\n   * \n   * @type {Number}\n   */\n  transitionGranularity: 0,\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * @type {boolean}\n   * @see  anim8.animation\n   */\n  cache: false,\n\n  /**\n   * Whether parsed options are cached whenever possible. Options that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see  anim8.options\n   */\n  cacheOptions: false,\n\n  /**\n   * Whether parsed transitions are cached whenever possible. Transitions that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see  anim8.transition\n   */\n  cacheTransitions: false,\n\n  /**\n   * The value to return when options could not be parsed from input.\n   * \n   * @type {Object}\n   */\n  noOptions: {},\n\n  /**\n   * The value to return when a transition could not be parsed from input.\n   * @type {Object}\n   */\n  noTransition: {}\n\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * [description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.trim = (function()\n{ \n  if (String.prototype.trim) {\n    return function(x) {\n      return x.trim();\n    };\n  }\n  return function(x) {\n    return x.replace(/^([\\s]*)|([\\s]*)$/g, '');\n  };\n})();\n\n/**\n * If the user is interested in seeing warnings they can override this by specifying\n * a function which accepts a text argument providing a generc message, a second argument\n * which has the input that caused the warning, and a third agument with the object\n * throwing the warning. Most warnings that are thrown occur when an animation is\n * trying to be parsed an the user provided an invalid animation, time, easing, etc.\n *\n * @param {string} message\n * @param {any} source\n */\nanim8.log = false;\n\n/**\n * Returns the size of the variable. The size of a variable is dependent on the variable\n * type. For arrays and strings their length is returned. If it's an object the number of\n * enumerable properties is returned. If it's a number, the number is returned. Otherwise\n * zero is returned.\n *\n * @param {any} x\n */\n anim8.size = function(x)\n {\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length;\n  }\n  else if ( x === null )\n  {\n    return 0;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var size = 0;\n\n    for (var prop in x)\n    {\n      size++;\n    }\n\n    return size;\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n};\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding overriding any existing properties.\n * \n * @param  {object} out\n * @return {object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding existing properties where necessary.\n * \n * @param  {object}\n * @return {object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses a number from the given input and if the input isn't a valid number\n * then returnOnInvalid is returned.\n * \n * @param  {any} value\n * @param  {any} returnOnInvalid\n * @return {any}\n */\nanim8.number = function(value, returnOnInvalid)\n{\n  var parsed = parseFloat( value );\n\n  return isNaN( parsed ) ? returnOnInvalid : parsed;\n};\n\n/**\n * Parses scale from a string or number.\n * \n * @param  {string|number}\n * @return {number}\n */\nanim8.scale = function(scale, returnOnInvalid)\n{\n  return anim8.number( scale, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n * \n * @param  {number} v\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n     \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n          delete listeners[ event ];\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an array.\n * This is especially beneficial when most of the time the contents of the structure need to be iterated and order\n * doesn't matter (since removal performs a swap which breaks insertion order).\n */\nanim8.FastMap = function(map)\n{\n  this.reset();\n\n  if ( map instanceof anim8.FastMap )\n  {\n    this.putMap( map );\n  }\n  else if ( anim8.isObject( map ) )\n  {\n    for (var prop in map)\n    {\n      this.put( prop, map[ prop ] );\n    }\n  }\n};\n\nanim8.FastMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {this}\n   */\n  reset: function()\n  {\n    this.values = [];\n    this.keys = [];\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   * \n   * @param  {string} key\n   * @param  {any} value\n   * @return {this}\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   * \n   * @param  {anim8.FastMap}\n   * @return {this}\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   * \n   * @param  {string} key\n   * @return {any}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   * \n   * @param  {string} key\n   * @return {this}\n   */\n  remove: function(key)\n  {\n    if ( key in this.indices )\n    {\n      this.removeAt( this.indices[ key ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   * \n   * @param  {Number}\n   * @return {this}\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   * \n   * @param  {string} key\n   * @return {number}\n   */\n  indexOf: function(key)\n  {\n    return anim8.coalesce( this.indices[ key ], -1 );\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   * \n   * @param  {string}\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns whether the given input has overlap with keys in this map.\n   * \n   * @param  {anim8.FastMap|object}\n   * @return {Boolean}\n   */\n  hasOverlap: function(map)\n  {\n    var keys = this.keys;\n    var indices = map.indices;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      if ( keys[i] in indices )\n      {\n        return true;\n      }\n    }\n   \n    return false;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   * \n   * @return {number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Clears all keys & values from the map.\n   * \n   * @return {this}\n   */\n  clear: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  }\n\n};","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n    \n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * [bezier description]\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\n/**\n * [default description]\n * @type {[type]}\n */\nanim8.easing.default      = anim8.easing.ease;\n","\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\n/**\n * Plays the animation forward normally.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn easing( x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum halfway.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } \n\t  else \n\t  {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\n/**\n * Plays the aninmation forwards with the given easing, and backwards with the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.yoyo = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x );\n\t  } \n\t  else \n\t  {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n/**\n * Plays the animation forwards with the given easing, and backwards reflecting the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.mirror = function(easing)\n{\n\treturn function(x)\n\t{\n\t\tif ( x < 0.5 )\n\t\t{\n\t\t\treturn easing( 2.0 * x );\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1.0 - easing( 2.0 - 2.0 * x );\n\t\t}\n\t};\n};\n\n/**\n * Plays the animation backwards with using the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.reverse = function(easing)\n{\n\treturn easing( 1.0 - x );\n};\n\n/**\n * Plays the animation backwards by flipping the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.flip = function(easing)\n{\n\treturn 1.0 - easing( x );\n};\n","\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * [computed description]\n * @type {Object}\n */\nanim8.computed = {};\n\n/**\n * Calculates the current value for an animator.\n * \n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.current = function(attrimator, animator)\n{\n  var attr = attrimator.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currenrtly in the animator.\n * \n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.relative = function(relativeAmount, mask)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( anim8.isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(attrimator, animator)\n  { \n    var attr = attrimator.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = attribute.cloneDefault();\n    }\n\n    if ( mask )\n    {\n      current = calc.mul( current, mask );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  relativeFunction.relativeAmount = relativeAmount;\n  relativeFunction.mask = mask;\n\n  return relativeFunction;\n};\n\n/**\n * [isComputed description]\n * @param  {[type]}\n * @return {Boolean}\n */\nanim8.isComputed = function(x)\n{\n  return anim8.isFunction( x ) && x.computed;\n};","/**\n * Calculators perform math and basic operations for a specific data structure.\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Instantiates a new Calculator instance.\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n\n  /**\n   * [createConstants description]\n   * @return {[type]}\n   */\n  createConstants: function()\n  {\n    this.ZERO = this.create();\n    this.ONE = this.parse( 1.0, this.ZERO );\n    this.INFINITY = this.parse( Number.POSITIVE_INFINITY, this.ZERO );\n  },\n\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * [copy description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * [clone description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clone: function(out) \n  {\n    return this.copy( this.create(), out );\n  },\n\n  /**\n   * [create description]\n   * @return {[type]}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * [scale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * [add description]\n   * @param {[type]}\n   * @param {[type]}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * [adds description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * [sub description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * [mul description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * [interpolate description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * [distance description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * [distanceSq description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * [isValid description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * [isNaN description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * [isZero description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * [isEqual description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * [min description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  min: function(out, a, b)\n  {\n    throw 'Calculator.min not implemented';\n  },\n\n  /**\n   * [max description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  max: function(out, a, b)\n  {\n    throw 'Calculator.max not implemented';\n  },\n\n  /**\n   * [clamp description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clamp: function(out, min, max)\n  {\n    var distSq = this.distanceSq( out, this.ZERO );\n\n    if ( distSq < min * min )\n    {\n      return this.scale( out, min / Math.sqrt( distSq ) );\n    }\n    else if ( distSq > max * max )\n    {\n      return this.scale( out, max / Math.sqrt( distSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * [isRelative description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * [relativeAmount description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n */\nanim8.NumberCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.NumberCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    return Math.min( a, b );\n  },\n  max: function(out, a, b)\n  {\n    return Math.max( a, b );\n  }\n});\n\n/**\n * Register the calculators.\n */\nanim8.calculator['default'] = anim8.calculator['number'] = new anim8.NumberCalculator();\n","\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.Point2dCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Point2dCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n\n        if ( ix || iy )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    return out;\n  }\n});\n\n/**\n * Register all calculators.\n */\nanim8.calculator['2d'] = new anim8.Point2dCalculator();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.Point3dCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Point3dCalculator.prototype = new anim8.Calculator(), \n{\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n\n        if ( ix || iy || iz )\n        { \n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['3d'] = new anim8.Point3dCalculator();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.QuaternionCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.QuaternionCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n        var ia = this.isRelative( ca );\n\n        if ( ix || iy || iz || ia )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0,\n            angle: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx }, { x:0, y:0, z:0, angle:1 } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    out.angle = Math.min(a.angle, b.angle);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    out.angle = Math.max(a.angle, b.angle);\n    return out;\n  }\n});\n\n\n/**\n * Register the calculator.\n */\nanim8.calculator['quaternion'] = new anim8.QuaternionCalculator();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.RGBCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.RGBCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n\n        if ( ir || ig || ib )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n\t\t\n    // Try to parse the color.\n\t\tvar parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgb'] = new anim8.RGBCalculator();\n","\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.RGBACalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.RGBACalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n        var ia = this.isRelative( ca );\n\n        if ( ir || ig || ib || ia )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0,\n            a: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    out.a = Math.min(a.a, b.a);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    out.a = Math.max(a.a, b.a);\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgba'] = new anim8.RGBACalculator();\n","\n/**\n * [path description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n/**\n * [Path description]\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * [reset description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n\t{\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * [reference description]\n   * @return {[type]}\n   */\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n\n  /**\n   * [last description]\n   * @return {[type]}\n   */\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n\n  /**\n   * [first description]\n   * @return {[type]}\n   */\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n\n  /**\n   * [point description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n\n  /**\n   * [replaceComputed description]\n   * @return {[type]}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * [resolvePoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  },\n\n  /**\n   * Returns whether the path is linear. Linear paths go directly from point to\n   * point where curved paths do not. Linear paths can have their length calculated\n   * fairly easily however curves you must compute length with a given granularity.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return true;\n  },\n\n  /**\n   * Computes the length of the Path with a given granularity. Granularity\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  length: function(granularity)\n  {\n    var distance = 0;\n    var calc = this.calculator;\n\n    if ( this.isLinear() )\n    {\n      var prev = this.resolvePoint( 0 );\n\n      for (var i = 1; i < this.points.length; i++)\n      {\n        var next = this.resolvePoint( i );\n\n        distance += calc.distance( prev, next );\n\n        prev = next;\n      }\n    }\n    else\n    {\n      var deltadelta = 1.0 / granularity;\n      var delta = delta;\n      var prev = calc.clone( this.resolvePoint( 0 ) );\n      var temp = calc.create();\n\n      for (var i = 1; i <= granularity; i++)\n      {\n        var next = this.compute( temp, delta );\n\n        distance += calc.distance( prev, next );\n\n        temp = prev;\n        prev = next;\n      }\n    }\n\n    return distance;\n  }\n\n};\n","\n/**\n * [Tween description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n\n});\n\n/**\n * [tween description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['tween'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, calc.ZERO ),\n    calc.parse( path.end, calc.ZERO )\n  );\n};\n","\n/**\n * [CubicPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.CubicPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  },\n\n  /**\n   * CubicPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [cubic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['cubic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * [QuadraticPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.QuadraticPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  },\n\n  /**\n   * QuadraticPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [quadratic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['quadratic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * [DeltaPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.DeltaPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n      return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n\n});\n\n/**\n * [delta description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['delta'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * [JumpPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.JumpPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n  }\n\n});\n\n/**\n * [jump description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['jump'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * [CompiledPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.CompiledPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CompiledPath( this.name, this, this.points.length );\n  }\n\n});\n\n/**\n * [compiled description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['compiled'] = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * [KeyframePath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.KeyframePath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n\n});\n\n/**\n * [keyframe description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['keyframe'] = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * [PointPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.override( anim8.PointPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.copy( out, this.resolvePoint( 0 ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n  }\n\n});\n\n/**\n * [point description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['point'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n","\n/**\n * Animates a single attribute over any period of time.\n */\nanim8.Attrimator = function()\n{\n\n};\n\nanim8.Attrimator.prototype =\n{\n\n  /**\n   * Resets this animator for the given attribute created by the given parser.\n   * \n   * @param  {attribute} string\n   * @param  {anim8.Parser} parser\n   */\n  reset: function(attribute, parser, next)\n  {\n    this.attribute = attribute;\n    this.parser = parser;\n    this.next = next;\n\n    this.startTime = 0;\n    this.pauseTime = 0;\n    this.elapsed = 0;\n    this.stopTime = Number.POSITIVE_INFINITY;\n    this.paused = false;\n    this.cycle = 0;\n    this.delay = 0;\n  },\n\n  /**\n   * Prepares this attribute animator for animation on the given subject animator.\n   * This is called once in anim8.Animator.preupdate before the first time this\n   * animator is updated.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n  },\n\n  /**\n   * [startCycle description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  startCycle: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Updates this attribute animator given a time to animate to and the frame to\n   * provide with a new value. This method will return true if the attribute\n   * this is animating has been updated and needs to be applied to the subject.\n   * \n   * @param  {Number} now\n   * @param  {Object} frame\n   * @return {Boolean}\n   */\n  setTime: function(now, frame)\n  {\n    if ( this.paused )\n    {\n      return false;\n    }\n\n    var updated = false;\n    var elapsed = now - this.startTime;\n    var updated = false;\n\n    if ( elapsed > this.stopTime )\n    {\n      updated = this.finish( frame );\n    }\n    else if ( elapsed >= this.delay )\n    {\n      updated = this.update( elapsed, frame );\n    }\n\n    this.elapsed = elapsed;\n\n    return updated;\n  },\n\n  /**\n   * [update description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(elapsed, frame)\n  {\n    throw 'Attrimator.update not implemented';\n  },\n\n  /**\n   * Returns the amount of time that has elapsed in milliseconds.\n   * \n   * @return {Number}\n   */\n  getElapsed: function()\n  {\n    return this.elapsed;\n  },\n\n  /**\n   * [stopIn description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  stopIn: function(milliseconds)\n  {\n    this.stopTime = this.getElapsed() + milliseconds;\n  },\n\n  /**\n   * Returns the value at the given time.\n   * \n   * @param  {Number} time\n   * @return {any}\n   */\n  valueAt: function(time)\n  {\n    return false;\n  },\n\n  /**\n   * The total amount of time this animator will take. This may be an infinite number.\n   * \n   * @return {Number}\n   */\n  totalTime: function()\n  {\n    return this.stopTime;\n  },\n\n  /**\n   * The time remaining before this animator and any following will be finished.\n   * \n   * @return {Number}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * Clones this animator.\n   * \n   * @return {anim8.AttributeAnimator}\n   */\n  clone: function()\n  {\n    throw 'AttributeAnimator.clone not implemented';\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return false;\n  },\n\n  /**\n   * Determines whether this animator will run infinitely.\n   * \n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [pause description]\n   * @return {[type]}\n   */\n  pause: function()\n  {\n    if ( !this.paused )\n    {\n      this.pauseTime = anim8.now();\n      this.paused = true;\n    }\n  },\n\n  /**\n   * [resume description]\n   * @return {[type]}\n   */\n  resume: function()\n  {\n    if ( this.paused )\n    {\n      this.startTime += anim8.now() - this.pauseTime;\n      this.paused = false;\n    }\n  },\n\n  /**\n   * [isPaused description]\n   * @return {Boolean}\n   */\n  isPaused: function()\n  {\n    return this.paused;\n  },\n\n  /**\n   * Sets the final state of the animator to the frame if one exists.\n   * \n   * @param  {Object}\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return false;\n  },\n\n  /**\n   * Returns the parser that created this animator (if any).\n   * \n   * @return {anim8.Parser}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * \n   * @param  {Function}\n   * @return {[type]}\n   */\n  queue: function(next)\n  {\n    if ( this.next )\n    {\n      this.next.queue( next );\n    }\n    else\n    {\n      this.next = next;\n    }\n  }\n\n};","\n/**\n * [AttributeMap description]\n */\nanim8.AttrimatorMap = function()\n{\n  this.reset();\n};\n\nanim8.override( anim8.AttrimatorMap.prototype = new anim8.FastMap(),\n{\n\n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n\n    if ( this.has( attr ) )\n    {\n      this.get( attr ).queue( attrimator );\n    }\n    else\n    {\n      this.put( attr, attrimator );\n    }\n  },\n\n  /**\n   * [queueMap description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queueMap: function(map, onNewAttribute, context)\n  {\n    var maxRemaining = this.timeRemaining();\n    var attrimators = map.values;\n    \n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n      var existing = this.get( attr );\n\n      if ( existing )\n      {\n        if ( existing.isInfinite() )\n        {\n          existing.stopIn( attrimator.delay + maxRemaining );\n        }\n        else\n        {\n          attrimator.delay += (maxRemaining - existing.timeRemaining());\n        }\n\n        existing.queue( attrimator );\n      }\n      else\n      {\n        attrimator.delay += maxRemaining;\n\n        this.put( attr, attrimator );\n\n        if ( anim8.isFunction( onNewAttribute ) )\n        {\n          onNewAttribute.call( context || this, attrimator );\n        }\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * [unqueue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  unqueueAt: function(index)\n  {\n    var current = this.values[ index ];\n\n    if ( current.next )\n    {\n      this.values[ index ] = current.next;\n    }\n    else\n    {\n      this.removeAt( index );\n    }\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    var values = this.values;\n    var keys = this.keys;\n    var clone = new anim8.AttrimatorMap();\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      clone.values[i] = values[i].clone();\n      clone.keys[i] = keys[i];\n      clone.indices[ keys[i] ] = i;\n    }\n\n    return clone;\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function()\n  {\n    var remaining = 0;\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n\n      if ( !attrimator.isInfinite() )\n      {\n        remaining = Math.max( remaining, attrimator.timeRemaining() );\n      }\n    }\n\n    return remaining;\n  },\n\n  /**\n   * [applyCycle description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  applyCycle: function(nextCycle)\n  {\n    var currentDepth = this.values;\n    var nextDepth = null;\n\n    while ( currentDepth.length )\n    {\n      nextDepth = [];\n\n      for (var i = currentDepth.length - 1; i >= 0; i--)\n      {\n        var attrimator = currentDepth[ i ];\n\n        attrimator.cycle = nextCycle;\n\n        if ( attrimator.next )\n        {\n          nextDepth.push( attrimator.next );\n        }\n      }\n\n      if ( nextDepth.length )\n      {\n        nextCycle++;\n      }\n\n      currentDepth = nextDepth;\n    }\n\n    return nextCycle;\n  },\n\n});","\n/**\n * [EventState description]\n * @type {[type]}\n */\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\n/**\n * [Event description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {Boolean}\n * @param {[type]}\n * @param {Function}\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  this.reset( attribute, parser, next )\n\n  this.path             = path;\n  this.easing           = anim8.easing( easing );\n  this.delay            = anim8.delay( delay );\n  this.duration         = anim8.duration( duration );\n  this.sleep            = anim8.sleep( sleep );\n  this.repeat           = anim8.repeat( repeat );\n  this.scale            = anim8.scale( scale );\n  this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.ZERO );\n  this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n};\n\nanim8.override( anim8.Event.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Prepares this attribute animator for animation on the given subject animator.\n   * This is called once in anim8.Animator.preupdate before the first time this\n   * animator is updated.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n    this.state = this.delay ? anim8.EventState.DELAYED : anim8.EventState.ANIMATING;\n\n    if ( this.hasComputed() )\n    {\n      this.path = this.path.replaceComputed( this, animator );\n    }\n  },\n\n  /**\n   * [startCycle description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  startCycle: function(frame)\n  {\n    if ( this.hasInitialState )\n    {\n      return this.applyValue( frame, frame[ this.attribute ], 0 );\n    }\n\n    return false;\n  },\n\n  /**\n   * [update description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(elapsed, frame)\n  {\n    var updated = false;\n    var delay = this.delay;\n    var duration = this.duration;\n    var sleep = this.sleep;\n    var repeat = this.repeat;\n    var oldState = this.state;\n    var newState = this.state;\n    var delta = 0;\n\n    elapsed -= delay;\n\n    var cycle = duration + sleep;\n    var iteration = Math.floor( ( elapsed + sleep ) / cycle );\n\n    if (iteration >= repeat)\n    {\n      newState = anim8.EventState.FINISHED;\n      delta = 1;\n    }\n    else\n    {\n      elapsed -= iteration * cycle;\n\n      if ( elapsed > duration )\n      {\n        newState = anim8.EventState.SLEEPING;\n        delta = 1;\n      }\n      else\n      {\n        newState = anim8.EventState.ANIMATING;\n        delta = elapsed / duration;\n      }\n    }\n    \n    if ( newState === anim8.EventState.ANIMATING || \n       ( newState !== anim8.EventState.ANIMATING && oldState === anim8.EventState.ANIMATING ) )\n    {\n      this.applyValue( frame, frame[ this.attribute ], delta );\n      updated = true;\n    }\n\n    this.state = newState;\n\n    return updated;\n  },\n\n  /**\n   * Computes the value at the given time. The only time when a value won't be\n   * returned is if the time is before the delay and the event doesn't have an\n   * initial state.\n   * \n   * @param  {Number} time\n   * @param  {any} out\n   * @return {any}\n   */\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay && !this.hasInitialState )\n    {\n      return false;\n    }\n\n    var delta = 0;\n\n    if ( time >= this.delay )\n    {\n      delta = Math.max( 1.0, ((time - this.delay) % (this.duration + this.sleep)) / this.duration );\n    }\n\n    return this.computeValue( out, delta );\n  },\n\n  /**\n   * [computeValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * [finish description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n  },\n\n  /**\n   * [applyValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[ this.attribute ] = value;\n    }\n\n    return value;\n  },\n\n  /**\n   * The total amount of time this animator will take. This may be an infinite number.\n   * \n   * @return {Number}\n   */\n\ttotalTime: function()\n\t{\n\t\treturn Math.min( this.stopTime, this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep) );\n\t},\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n\n  /**\n   * [isInfinite description]\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY) && (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return (this.state === anim8.EventState.FINISHED);\n  }\n\n});\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.override( anim8.Spring.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  set: function(attribute, calculator, rest, position, velocity, gravity, finishOnRest)\n  { \n    this.reset( attribute, null, null );\n\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = velocity;\n    this.finishOnRest = finishOnRest;\n  },\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n    this.finished = false;\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.ZERO );\n    this.velocity   = this.parseValue( animator, this.velocity, calc.ZERO );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity );\n  },\n\n  /**\n   * [parseValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isFunction( parsed ) && parsed.computed )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} elapsed\n   * @param {object} frame\n   */\n  update: function(elapsed, frame)\n  {\n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.clone( this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    else if ( this.finishOnRest && calc.isZero( this.velocity ) )\n    {\n      this.finished = true;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  },\n\n  /**\n   * Sets the final state of the animator to the frame if one exists.\n   * \n   * @param  {Object}\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return this.finished;\n  }\n\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * [LinearSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.LinearSpring.prototype = new anim8.Spring(), \n{\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.LinearSpring( this.attribute, this.calculator, this.position, this.rest, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.damping ) || \n           anim8.isComputed( this.stiffness );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['linear'] = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * [DistanceSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.DistanceSpring.prototype = new anim8.Spring(), \n{\n\n  /**\n   * [start description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.DistanceSpring( this.attribute, this.calculator, this.position, this.rest, this.distance, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['distance'] = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Animates a single attribute over any period of time.\n */\nanim8.Physics = function( attribute, parser, calculator, position, velocity, acceleration, terminal, stopTime )\n{\n  this.reset( attribute, parser, null );\n\n  this.calculator   = calculator;\n  this.position     = position;\n  this.velocity     = velocity;\n  this.acceleration = acceleration;\n  this.terminal     = anim8.number( terminal, Number.POSITIVE_INFINITY );\n  this.stopTime     = anim8.time( stopTime, Number.POSITIVE_INFINITY );\n  this.finished     = false;\n};\n\nanim8.override( anim8.Physics.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Prepares this attribute animator for animation on the given subject animator.\n   * This is called once in anim8.Animator.preupdate before the first time this\n   * animator is updated.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n    this.finished = false;\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator     = calc;\n    this.position       = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.initalPosition = calc.clone( this.position );\n    this.velocity       = this.parseValue( animator, this.velocity, calc.ZERO );\n    this.acceleration   = this.parseValue( animator, this.acceleration, calc.ZERO );\n    this.temp           = calc.create();\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.position ) || \n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.acceleration );\n  },\n\n  /**\n   * [parseValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isFunction( parsed ) && parsed.computed )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n\n  /**\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(elapsed, frame)\n  {\n    var value = this.valueAt( elapsed, true );\n\n    if ( value !== false )\n    {\n      frame[ this.attribute ] = this.position = value;\n\n      return true;\n    }\n\n    var calc = this.calculator;\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Physics.MAX_DT );\n    var vel = calc.copy( this.temp, this.resolveVelocity() );\n    var acc = this.resolveAcceleration();\n    var pos = this.position;\n\n    vel = calc.adds( vel, acc, dt );\n\n    if ( this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      vel = calc.clamp( vel, 0, this.terminal );\n    }\n\n    pos = calc.adds( pos, vel, dt );\n    \n    this.position = pos;\n\n    if ( !anim8.isFunction( this.velocity ) )\n    {\n      this.velocity = calc.copy( this.velocity, vel );\n    }\n\n    frame[ this.attribute ] = pos;\n\n    return true;\n  },\n\n  /**\n   * [resolveVelocity description]\n   * @return {[type]}\n   */\n  resolveVelocity: function()\n  {\n    return anim8.isFunction( this.velocity ) ? this.velocity() : this.velocity;\n  },\n\n  /**\n   * [resolveAcceleration description]\n   * @return {[type]}\n   */\n  resolveAcceleration: function()\n  {\n    return anim8.isFunction( this.acceleration ) ? this.acceleration() : this.acceleration;\n  },\n\n  /**\n   * Returns the value at the given time.\n   * \n   * @param  {Number} time\n   * @return {any}\n   */\n  valueAt: function(time, usePosition)\n  {\n    if ( anim8.isFunction( this.velocity ) || anim8.isFunction( this.acceleration ) || this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      return false;\n    }\n\n    time -= this.delay;\n    time *= 0.001;\n\n    var calc = this.calculator;\n    var value = usePosition ? calc.copy( this.position, this.initalPosition ) : calc.clone( this.initalPosition );\n    value = calc.adds( value, this.velocity, time );\n    value = calc.adds( value, this.acceleration, time * time );\n\n    return value;\n  },\n\n  /**\n   * Clones this animator.\n   * \n   * @return {anim8.AttributeAnimator}\n   */\n  clone: function()\n  {\n    return new anim8.Physics( this.attribute, this.parser, this.calculator, this.position, this.velocity, this.acceleration, this.terminal, this.stopTime );\n  },\n\n  /**\n   * Sets the final state of the animator to the frame if one exists.\n   * \n   * @param  {Object}\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return this.finished;\n  }\n\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Physics.MAX_DT = 0.1;","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n * @param [boolean] cache\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) )\n\t{\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationStrings = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationStrings.length; k++)\n    {\n      var split = anim8.trim( animationStrings[ k ].toLowerCase() ).split(' ');\n      var parsedAnimation = anim8.animation[ split[ 0 ] ];\n      var parsedOptions = anim8.options( split.slice( 1 ) );\n\n      if ( parsedAnimation )\n      {\n        if ( anim === false )\n        {\n          last = anim = parsedAnimation.extend( parsedOptions, true );\n        }\n        else\n        {\n          last = last.next = parsedAnimation.extend( parsedOptions, true );\n        }\n      }\n      else\n      {\n        throw parsedAnimation + ' is not a valid animation in \"' + animationStrings[ k ] + '\"';\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n    var attrimatorMap = new anim8.AttrimatorMap();\n\t\tvar options = anim8.options( options );\n    var helper = new anim8.ParserHelper( animation, options );\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, attrimatorMap, helper );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (attrimatorMap.size())\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, attrimatorMap );\n\t\t}\n    else\n    {\n      throw 'Failed to create any attrimators in anim8.animation';\n    }\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the attrimators that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate attrimators, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} attrimators\n */\nanim8.Animation = function(name, input, options, attrimators)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.attrimators = attrimators;\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an map of event instances from the attrimators in this animation.\n   *\n   * @return {anim8.AttrimatorMap}\n   */\n  newAttrimators: function()\n  {\n    return this.attrimators.clone();\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {object} options\n   * @param  {anim8.AttrimatorMap} attrimatorMap\n   * @return {[type]}\n   */\n  merge: function(options, attrimatorMap)\n  {\n    var helper = new anim8.ParserHelper( this.input, this.options, options );\n\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, attrimatorMap, helper );\n      }\n    }\n\n    return attrimatorMap;\n  },\n\n  /**\n   * Extends this animation and returns an animation modified with the given options. \n   *\n   * @param {object} options\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var attrimatorMap = this.newAttrimators();\n\n    this.merge( options, attrimatorMap );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, attrimatorMap );\n  }\n\n};","\n/**\n * Parses a value into a transition object. If the given input is a string it's\n * expected to be in a similar format to:\n *\n * [time] [easing[-easingType]] >[outro] <[intro] /[granularity]\n * \n * This is also a registry of transitions, you can add your own transitions that\n * can be used later with syntax like:\n *\n * anim8.transition['myTransition'] = anim8.transition('50ms 0.05 linear');\n *\n * So you can use 'myTransition' as the transition input.\n * \n * @param {object|string|array} options\n * @param {boolean} cache\n * @return {object}\n */\nanim8.transition = function(transition, cache) \n{\n  // 1. If it's a string, convert it into an array.\n  // 2. If it's an array, parse it and convert it into an object.\n  // 3. If it's an object, fill in any missing values with the defaults.\n\n  var originalInput = transition;\n\n  if ( anim8.isString( transition ) )\n  {\n    if ( transition in anim8.transition )\n    {\n      return anim8.transition[ transition ];\n    }\n\n    transition = transition.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( transition ) )\n  {\n    var transitionArray = transition;\n\n    transition = {};\n\n    for (var i = 0; i < transitionArray.length; i++)\n    {\n      var part = transitionArray[i];\n      var first = part.charAt( 0 );\n\n      // Introduction Time (into next event)\n      if ( first === '<' )\n      {\n        var intro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( intro ) )\n        {\n          transition.intro = intro;\n        }\n      }\n      // Outroduction Time (out of current event)\n      else if ( first === '>' )\n      {\n        var outro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( outro ) )\n        {\n          transition.outro = outro;\n        }\n      }\n      // Granularity (for smooth transitions)\n      else if ( first === '/' )\n      {\n        var granularity = anim8.number( part.substring(1), false );\n\n        if ( granularity !== false )\n        {\n          transition.granularity = granularity;\n        }\n      }\n      else\n      {\n        // Easing\n        var easing = anim8.easing( part, false );\n\n        if ( easing !== false )\n        {\n          transition.easing = easing;\n        }\n\n        // Time\n        var time = anim8.time( part, false );\n\n        if ( time !== false )\n        {\n          transition.time = time;\n        }\n      }\n    }\n  }\n\n  if ( anim8.isObject( transition ) )\n  {\n    transition.time        = anim8.time( transition.time, anim8.defaults.transitionTime );\n    transition.outro       = anim8.time( transition.outro, anim8.defaults.transitionOutro );\n    transition.intro       = anim8.time( transition.intro, anim8.defaults.transitionIntro );\n    transition.easing      = anim8.easing( anim8.coalesce( transition.easing, anim8.defaults.transitionEasing ) );\n    transition.granularity = anim8.number( transition.granularity, anim8.defaults.transitionGranularity );\n    \n    if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheTransitions ) )\n    {\n      anim8.transition[ originalInput ] = transition;\n    }\n\n    return transition;\n  }\n\n  return anim8.defaults.noTransition;\n};\n","\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n *\n * [duration] x[repeat] z[sleep] ~[delay] ![scale] [easing[-easingType]]\n *\n * This is also a registry of options, you can add your own options that\n * can be used later with syntax like:\n *\n * anim8.option['myOptions'] = anim8.option('1.5s x2 !2');\n *\n * So you can use 'myOptions' as the options input.\n * \n * @param {object|string|array} options\n * @param {boolean} cache\n * @return {object}\n */\nanim8.options = (function()\n{\n  function parseProperty(input, out, parseFunction, property, propertyAdd, propertyScale)\n  {\n    var first = input.charAt( 0 );\n\n    if ( first === '*' )\n    {\n      parsed = anim8.number( input.substring( 1 ), false );\n\n      if ( parsed !== false )\n      {\n        out[ propertyScale ] = parsed;\n      }\n    }\n    else\n    {\n      if ( first === '+' || first === '-' )\n      {\n        property = propertyAdd;\n        input = input.substring( 1 );\n      }\n\n      var parsed = parseFunction( input, false )\n\n      if ( parsed !== false )\n      {\n        out[ property ] = parsed;\n      }  \n    }\n\n    return parsed;\n  }\n\n  return function(options, cache)\n  {\n    var originalInput = options;\n\n    if ( anim8.isString( options ) )\n    {\n      if ( options in anim8.options )\n      {\n        return anim8.options[ options ];\n      }\n\n      options = options.toLowerCase().split(' ');\n    }\n\n    if ( anim8.isArray( options ) )\n    {\n      var parsed = {};\n\n      for (var i = 0; i < options.length; i++)\n      {\n        var part = options[i];\n        var first = part.charAt( 0 );\n\n        // Repeats\n        if ( first === 'x' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n        }\n        // Sleeping\n        else if ( first === 'z' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'sleep', 'sleepAdd', 'sleepScale' );\n        }\n        // Delay\n        else if ( first === '~' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'delay', 'delayAdd', 'delayScale' );\n        }\n        // Scaling\n        else if ( first === '!' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.number, 'scale', 'scaleAdd', 'scaleScale' );\n        }\n        else\n        {\n          // Easing?\n          var easing = anim8.easing( part, false );\n\n          if ( easing !== false )\n          {\n            parsed.easing = easing;\n          }\n\n          // Duration?\n          var duration = parseProperty( part, parsed, anim8.time, 'duration', 'durationAdd', 'durationScale' );\n\n          if ( duration === false )\n          {\n            // If not a duration, might be an alternative repeat? (doesn't start with x)\n            parseProperty( part, parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n          }\n        }\n      }\n\n      if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheOptions ) )\n      {\n        anim8.options[ originalInput ] = parsed;\n      }\n\n      return parsed; \n    }\n\n    if ( anim8.isObject( options ) )\n    {\n      return options;\n    }\n\n    return anim8.defaults.noOptions;\n  };\n\n})();","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(subject)\n\t{\n\t  this.subject = subject;\n    this.attrimators = new anim8.AttrimatorMap();\n    this.attrimatorsAdded = [];\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    this.cycleCurrent = 0;\n    this.cycleNext = 0;\n    this.cycleEnded = 0;\n    \n    return this;\n\t},\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are placed\n   * to group them together so we know when to apply their initial value.\n   * \n   * @return {this}\n   */\n  newCycle: function(attrimators)\n  {\n    this.cycleNext++;\n\n    if ( attrimators instanceof anim8.AttrimatorMap )\n    {\n      this.cycleNext = attrimators.applyCycle( this.cycleNext );\n    }\n    else if ( attrimators instanceof anim8.Attrimator )\n    {\n      attrimators.cycle = this.cycleNext;\n    }\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all events & springs with the same cycle\n   * identifier and applying their initial state.\n   * \n   * @return {this}\n   */\n  applyCurrentCycle: function()\n  {\n    var cycle = this.cycleCurrent;\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      if ( attrimator.cycle === cycle )\n      {\n        this.updated[ attr ] = (attrimator.startCycle( this.frame ) !== false) || this.updated[ attr ];\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * [endCurrentCycle description]\n   * @return {[type]}\n   */\n  endCurrentCycle: function()\n  {\n    if ( this.cycleCurrent > this.cycleEnded )\n    {\n      this.cycleEnded = this.cycleCurrent;\n      this.trigger( 'cycleEnd:' + this.cycleCurrent, this.cycleCurrent ); \n    }\n  },\n\n  /**\n   * Returns the attribute descriptor\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  { \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function(now)\n  {\n    // If there are attribute placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the attribute.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      for (var i = 0; i < aa.length; i++)\n      {\n        var attrimator = aa[ i ];\n\n        this.setDefault( attrimator.attribute );\n\n        attrimator.start( now, this );     \n      }\n\n      aa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this Animator if there's no value there.\n   * \n   * @param {[type]}\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    this.finished = true;\n\n    var attrimators = this.attrimators.values;\n    var minCycle = this.cycleNext;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      this.updated[ attr ] = attrimator.setTime( now, this.frame );\n\n      this.finished = this.finished && attrimator.isFinished();\n\n      minCycle = Math.min( minCycle, attrimator.cycle );\n    }\n\n    if ( this.cycleCurrent < minCycle )\n    {\n      while ( this.cycleCurrent < minCycle )\n      {\n        this.endCurrentCycle();\n        this.cycleCurrent++;\n      }\n      \n      this.cycleCurrent = minCycle;\n      this.applyCurrentCycle();\n      this.trigger( 'cycleStart:' + this.cycleCurrent, this.cycleCurrent );\n    }\n\n    if ( !this.wasFinished && this.finished )\n    {\n      this.endCurrentCycle();\n    }\n\n    this.trigger('update');\n    \n    return this;\n  },\n\n  /**\n   * Places the attribute animator in this animator replacing any existing animator\n   * for the same attribute. The next time the animator is updated the attribute\n   * animator will be started.\n   * \n   * @param  {anim8.Attrimator}\n   */\n  placeAttrimator: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n\n    this.attrimators.put( attr, attrimator );\n    this.attrimatorsAdded.push( attrimator );\n\n    this.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimAttrimators();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimAttrimators: function()\n  {\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( attrimator.isFinished() )\n      {\n        if ( attrimator.next )\n        {\n          this.placeAttrimator( attrimator.next );\n        }\n        else\n        {\n          this.attrimators.removeAt( i );\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there already.\n   * \n   * @return {[type]}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createAttrimators: function(animation, options, cache)\n  {\n    var options = anim8.options( options );    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var attrimators = animation.newAttrimators();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, attrimators );\n    }\n    \n    this.onAnimation( animation, options, attrimators );\n\n    while ( animation.next !== null )\n    {\n      animation = animation.next;\n\n      var queueAttrimators = animation.newAttrimators();\n\n      this.onAnimation( animation, options, queueAttrimators );\n\n      attrimators.queueMap( queueAttrimators );\n    }\n\n    return attrimators;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  onAnimation: function(animation, options, attrimatorMap)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.newCycle( spring );\n    this.placeAttrimator( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Existing events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   * @param [boolean] cache\n   */\n\tplay: function(animation, options, all, cache)\n\t{\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n    \n    this.newCycle( attrimatorMap );\n    this.playAttrimators( attrimatorMap, all );\n\n    return this.activate();\n\t},\n\n  /**\n   * Adds events to this Animator to be played (optionally finishing events for attributes not specified in the given \n   * attribute). Existing events will be replaced immediately. This method will not activate the Animator, that has\n   * to be done manually.\n   * \n   * @param  {anim8.AttributeMap} animatorMap\n   * @param  [boolean] all\n   * @return {this}\n   */\n  playAttrimators: function(attrimatorMap, all)\n  {\n    if ( all )\n    {\n      var attrimators = this.attrimators.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n\n        if ( !attrimatorMap.has( attrimator.attribute ) )\n        {\n          attrimator.finish( this.frame );\n        }\n      }\n    }\n\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      this.placeAttrimator( attrimators[i] );\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options, cache)\n\t{\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n        \n    this.newCycle( attrimatorMap );\n    this.queueAttrimators( attrimatorMap );\n\n    return this.activate();\n\t},\n\n  /**\n   * Queues an array of events on this Animator. The given events will be delayed to start at the same time - at the\n   * end of the events currently on the Animator. This method will not activate the Animator, that has to be done \n   * manually.\n   * \n   * @param  {array} events\n   * @return {this}\n   */\n  queueAttrimators: function(attrimatorMap)\n  {\n    this.attrimators.queueMap( attrimatorMap, this.placeAttrimator, this );\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {string|array|object} transition\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   * @param [Boolean] cache\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n\n    this.newCycle( attrimatorMap );\n    this.transitionAttrimators( transition, attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation. This method will not activate the \n   * Animator, that has to be done manually.\n   *\n   * @param {object} transition\n   * @param {anim8.AttrimatorMap} events\n   * @param [boolean] all\n   */\n  transitionAttrimators: function(transition, attrimatorMap, all)\n  {\n    // If intro & outro are 0, use Tween\n    // If intro is 0, use Quadratic Path between current value, outro point, and first point on new path.\n    // If outro is 0, use Quadratic Path between current value, first point on new path, and intro point.\n    // If intro & outro are not 0, use Cubic Path between current value, outro point, first point on new path, and intro point.\n    // If granularity is given > 1 then compile the path, compute intro & outro velocities, and compute deltas for new \n    //    compiled path based on interpolated velocity over the path (knowing it's length and transition time)\n    \n    var current = this.attrimators;\n    var attrimators = attrimatorMap.values;\n\n    // Only transition if we need to\n    if ( current.hasOverlap( attrimatorMap ) )\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var a1 = attrimators[ i ];\n        var attr = a1.attribute;\n\n        if ( current.has( attr ) )\n        {\n          var attribute = this.getAttribute( attr );\n          var a2 = current.get( attr );\n        \n          var p0 = attribute.calculator.clone( this.frame[attr] );\n          var p1 = a2.getFuture( transition.outroDelta );\n          var p2 = a1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, attribute.calculator, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transition.time, transition.easing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = a1;\n\n          this.placeAttrimator( transitionEvent );\n        }\n        else\n        {\n          a1.delay += transition.time;\n     \n          this.placeAttrimator( a1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        this.placeAttrimator( attrimators[ i ] );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   * /\n  transitionInto: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.transitionIntoEvents( transition, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation. This method will not activate the Animator, that has to be done \n   * manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {array} events\n   * @param [boolean] all\n   * /\n  transitionIntoEvents: function(transition, events, all)\n  {\n    // Check if we even need to transition\n    var transitionRequired = false;\n    \n    for (var i = 0; i < events.length && !transitionRequired; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transitionRequired = true;\n      }\n    }\n    \n    // Only transition if we need to\n    if ( transitionRequired )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transition.outroDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transition.introDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transition.time, transition.easing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transition.time;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n      \n    return this;\n  },\n  /**/\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {string} attr\n   * @param {any} target\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenTo: function(attr, target, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attribute to target values.\n   *\n   * @param {object} targets\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenManyTo: function(targets, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {string} attr\n   * @param {any} starts\n   * @param {any} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tween: function(attr, starts, ends, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {object} starts\n   * @param {object} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenMany: function(starts, ends, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n    \n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n      \n      request[ attr ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n      \n      return attribute.defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number|string] duration\n   * @param [number|string] delay\n   * @param [function|string] easing\n   * @param [number|string] repeat\n   * @param [number|string] sleep  \n   * @param [number] scale\n   */\n  follow: function(attribute, path, options)\n  {\n    var options = anim8.options( options );\n    var path = anim8.path( path );\n    \n    var event = new anim8.Event( \n      attribute, \n      path, \n      options.duration,\n      options.easing,\n      options.delay, \n      options.sleep,\n      options.repeat,\n      options.scale,\n      options.scaleBase\n    );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  attrimatorsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n   \n    var attrimatorMap = this.attrimators; \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        var attrimator = attrimatorMap.get( attr );\n        \n        if ( attrimator )\n        {\n          if ( resulting )\n          {\n            results.push( attrimator );\n          }\n          else\n          {\n            callback.call( this, attrimator, attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      var attrimators = attrimatorMap.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n\n        if ( resulting )\n        {\n          results.push( attrimator );\n        }\n        else\n        {\n          callback.call( this, attrimator, attrimator.attribute );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator, attr) \n\t\t{\n      this.attrimators.remove( attr );\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator) \n\t\t{\n\t\t\twhile (attrimator.next)\n\t\t\t{\n\t\t\t\tattrimator = attrimator.next;\n\t\t\t}\n\t\t\t\n\t\t\tattrimator.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attribtues. Unsetting involves removing all events,\n   * springs, and the current value in the frame.\n   * \n   * @param  {string|array|object}\n   * @return {this}\n   */\n  unset: function(attributes)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      this.attrimators.remove( attributes );\n      delete this.frame[ attributes ];\n    }\n    else if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        this.unset( attributes[ i ] );\n      }\n    }\n    else if ( anim8.isObject( attributes ) )\n    {\n      for (var attr in attributes)\n      {\n        this.unset( attr );\n      }\n    }\n\n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns the amount of finite time remaining before the animator is done\n   * animating. Attrimators that don't have a known end time aren't included.\n   */\n  timeRemaining: function()\n  {\n    return this.attrimators.timeRemaining();\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasAttrimators: function()\n  {\n    return this.attrimators.size() > 0;\n  },\n  \n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator if none is given. This is particularly\n   * useful for having a function be called on deferred statements.\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  invoke: function(func, context, args)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, args || [] );\n    }\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n   * @param [function] callback\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t},\n\n  /**\n   * [onStart description]\n   * @param  {Function}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  onCycleStart: function(callback, context)\n  {\n    this.once( 'cycleStart:' + this.cycleNext, callback, context );\n  },\n\n  /**\n   * [onEnd description]\n   * @param  {Function}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  onCycleEnd: function(callback, context)\n  {\n    this.once( 'cycleEnd:' + this.cycleNext, callback, context );\n  }\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'restore', 'placeAttrimator', 'preupdate', 'update', 'apply', 'trimAttrimators',\n  'activate', 'deactivate', 'destroy', 'spring', 'play', 'playAttrimators', 'queue',\n  'queueAttrimators', 'transition', 'transitionAttrimators', 'tween', 'tweenTo', \n  'tweenMany', 'tweenManyTo', 'follow', 'stop', 'end', 'finish', 'pause', 'resume',\n  'set', 'unset', 'get', 'invoke'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.override( anim8s.fn = anim8.Animators.prototype = new Array(),\n{\n  /**\n   * Invokes a callback for each element in the array.\n   * \n   * @param {function} iterator\n   */\n  each: function(iterator, context) \n  {\n    for (var i = 0; i < this.length; i++) \n    {\n      if ( iterator.call( context || this[i], this[i], i ) === false ) \n      {\n        break;\n      }\n    }\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @param {array} animators\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n   *\n   * @param {function} filterer\n   */\n  filter: function(filterer)\n  {\t\n  \tvar alive = 0;\n  \t\n  \tfor (var i = 0; i < this.length; i++)\n  \t{\n  \t\tvar remove = filterer( this[i] );\n  \t\t\n  \t\tif ( !remove )\n  \t\t{\n  \t\t\tthis[alive++] = this[i];\n  \t\t}\n  \t}\n  \t\n  \tthis.length = alive;\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubjects: function(wrapper)\n  {\n    var subjects = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      subjects.push( this[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   */\n  first: function()\n  {\n    return this[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   */\n  reverse: function()\n  {\n    var last = this.length - 1;\n    var mid = Math.floor( this.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = this[ i ];\n      var e1 = this[ last - i ];\n\n      this[ i ] = e1;\n      this[ last - i ] = e0;\n    }\n\n    return this;\n  },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   * \n   * @return {this}\n   */\n  activate: function()\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var animator = this[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function()\n  {\n    var maxRemaining = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      maxRemaining = Math.max( maxRemaining, this[ i ].timeRemaining() );\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Adds the following methods to make an array of Animators appear like a single Animator.\n   */\n  restore               : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n  placeAttrimator       : anim8.delegate( 'placeAttrimator', anim8.delegate.RETURN_THIS ),\n  preupdate             : anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS ),\n  update                : anim8.delegate( 'update', anim8.delegate.RETURN_THIS ),\n  apply                 : anim8.delegate( 'apply', anim8.delegate.RETURN_THIS ),\n  trimAttrimators       : anim8.delegate( 'trimAttrimators', anim8.delegate.RETURN_THIS ),\n  activate              : anim8.delegate( 'activate', anim8.delegate.RETURN_THIS ),\n  deactivate            : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n  destroy               : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n  spring                : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n  play                  : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n  playAttrimators       : anim8.delegate( 'playAttrimators', anim8.delegate.RETURN_THIS ),\n  queue                 : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n  queueAttrimators      : anim8.delegate( 'queueAttrimators', anim8.delegate.RETURN_THIS ),\n  transition            : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n  transitionAttrimators : anim8.delegate( 'transitionAttrimators', anim8.delegate.RETURN_THIS ),\n  tween                 : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n  tweenTo               : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n  tweenMany             : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n  tweenManyTo           : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n  follow                : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n  attrimatorsFor        : anim8.delegate( 'attrimatorsFor', anim8.delegate.RETURN_RESULTS ),\n  stop                  : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n  end                   : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n  finish                : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n  pause \t\t\t          : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n  resume \t\t\t          : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n  set                   : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n  unset                 : anim8.delegate( 'unset', anim8.delegate.RETURN_THIS ),\n  get                   : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n  hasAttrimators        : anim8.delegate( 'hasAttrimators', anim8.delegate.RETURN_TRUE ),\n  invoke                : anim8.delegate( 'invoke', anim8.delegate.RETURN_THIS ),\n  on\t\t\t              : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n  once\t\t              : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n  off\t\t\t              : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n  trigger               : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n});\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate( now );\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * [Sequence description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * [maxDelay description]\n   * @return {[type]}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  /**\n   * [createEvents description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  createAttrimators: function(animation, options, i)\n  {\n    var attrimatorMap = animation.newAttrimators();\n    var attrimators = attrimatorMap.values;\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = attrimators.length - 1; k >= 0; k--)\n    {\n      attrimators[ k ].delay += delayOffset;\n    }\n\n    animation.merge( options, attrimatorMap );\n    \n    return attrimatorMap;\n  },\n\n  /**\n   * [reverse description]\n   * @return {[type]}\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * [play description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  play: function(animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( anim, options, i );\n      animator.newCycle( attrimators );\n      animator.playAttrimators( attrimators, all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(animation, options, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var attrimatorMap = sequence.createAttrimators( anim, options, i );\n      var attrimators = attrimatorMap.values;\n\n      for (var k = attrimators.length - 1; k >= 0; k--)\n      {\n        attrimators[ k ].delay += delayOffset;\n      }\n      \n      animator.newCycle( attrimatorMap );\n      animator.queueAttrimators( attrimatorMap );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transition description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( anim, options, i );\n      animator.newCycle( attrimators );\n      animator.transitionAttrimators( transition, attrimators, all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [add description]\n   */\n  add: function()\n  {\n    this.animators.activate();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimatorMap to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  { \n    var factory = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[ i ];\n      var attr = e.attribute;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = helper.mergeEasing( attr, e.easing );\n      e.repeat    = helper.mergeRepeat( attr, e.repeat );\n      e.delay     = helper.mergeDelay( attr, e.delay );\n      e.sleep     = helper.mergeSleep( attr, e.sleep );\n      e.duration  = helper.mergeDuration( attr, e.duration );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n    }\n  }\n};\n\n\n/**\n * [ParserHelper description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.ParserHelper = function( input, oldOptions, newOptions )\n{\n  this.input = input;\n  this.oldOptions = oldOptions || {};\n  this.newOptions = newOptions || {};\n\n  this.prepareSpecifics( 'easings' );\n  this.prepareSpecifics( 'repeats' );\n  this.prepareSpecifics( 'delays' );\n  this.prepareSpecifics( 'sleeps' );\n  this.prepareSpecifics( 'durations' );\n  this.prepareSpecifics( 'scales' );\n  this.prepareSpecifics( 'scaleBases' );\n};\n\nanim8.ParserHelper.prototype = \n{\n\n  /**\n   * [prepareSpecifics description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  prepareSpecifics: function(specifics)\n  {\n    if ( !anim8.isObject( this.input[ specifics ] ) )\n    {\n      this.input[ specifics ] = {};\n    }\n  },\n\n  /* PARSING */\n\n  /**\n   * [parseEasing description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseEasing: function(attr)\n  {\n    return this.parseFirst( attr, 'easing', 'easings' );\n  },\n\n  /**\n   * [parseRepeat description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseRepeat: function(attr)\n  {\n    return this.parseNumber( attr, anim8.repeat, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * [parseDelay description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseDelay: function(attr)\n  {\n    return this.parseNumber( attr, anim8.delay, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * [parseSleep description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseSleep: function(attr)\n  {\n    return this.parseNumber( attr, anim8.sleep, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'sleeps' );\n  },\n\n  /**\n   * [parseDuration description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseDuration: function(attr)\n  {\n    return this.parseNumber( attr, anim8.duration, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * [parseScale description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseScale: function(attr)\n  {\n    return this.parseNumber( attr, anim8.scale, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * [parseScaleBase description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseScaleBase: function(attr)\n  {\n    return this.parseFirst( attr, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * [parseFirst description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseFirst: function(attr, option, specifics)\n  {\n    return anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n  },\n\n  /**\n   * [parseNumber description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseNumber: function(attr, parseFunction, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n    var base = parseFunction( baseRaw );\n    var add = parseOptionFunction( this.oldOptions[ optionAdd ], 0 );\n    var scale = anim8.coalesce( this.oldOptions[ optionScale ], 1 );\n\n    return (add === 0 && scale === 1) ? baseRaw : (base + add) * scale;\n  },\n\n  /* MERGING */\n\n  /**\n   * [mergeEasing description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeEasing: function(attr, current)\n  {\n    return this.mergeFirst( attr, current, anim8.easing, 'easing', 'easings' );\n  },\n\n  /**\n   * [mergeRepeat description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeRepeat: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * [mergeDelay description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeDelay: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * [mergeSleep description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeSleep: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'scales' );\n  },\n\n  /**\n   * [mergeDuration description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeDuration: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * [mergeScale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeScale: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * [mergeScaleBase description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeScaleBase: function(attr, current, factory)\n  {\n    var calc = factory.attribute( attr ).calculator;\n    var parseFunction = function(value, defaultValue) {\n      return calc.parse( value, defaultValue );\n    };\n\n    return this.mergeFirst( attr, current, parseFunction, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * [mergeFirst description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeFirst: function(attr, current, parseOptionFunction, option, specifics)\n  {\n    return parseOptionFunction( anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] ), current );\n  },\n\n  /**\n   * [mergeNumber description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeNumber: function(attr, current, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] );\n    var base = parseOptionFunction( baseRaw, current );\n    var add = parseOptionFunction( anim8.coalesce( this.newOptions[ optionAdd ], this.oldOptions[ optionAdd ] ), 0 );\n    var scale = anim8.coalesce( this.newOptions[ optionScale ], this.oldOptions[ optionScale ], 1 );\n\n    return (base + add) * scale;\n  }\n\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar deltas = animation.deltas;\n  \tvar values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      var valueCount = 0;\n      \n  \t\tfor (var attr in values)\n  \t\t{\n        valueCount++; \n      }\n      \n      deltas = [];\n      \n      for (var i = 0; i < valueCount; i++)\n      {\n        deltas[i] = i / (valueCount - 1);\n      }\n    }\n  \tif ( anim8.isArray( deltas ) )\n  \t{\n  \t\tvar deltaObject = {};\n  \t\t\n  \t\tfor (var attr in values)\n  \t\t{\n  \t\t\tdeltaObject[attr] = deltas;\t\n  \t\t}\n  \t\t\n  \t\tdeltas = deltaObject;\n  \t}\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[ attr ];\n      var attribute = factory.attribute( attr );\n  \t\t\n  \t\tfor (var k = 0; k < value.length; k++)\n  \t\t{\n  \t\t\tvalue[k] = attribute.parse( value[k] );\n  \t\t}\n\n      var easing    = helper.parseEasing( attr );\n      var delay     = helper.parseDelay( attr );\n      var duration  = helper.parseDuration( attr );\n      var sleep     = helper.parseSleep( attr );\n      var repeat    = helper.parseRepeat( attr );\n      var scale     = helper.parseScale( attr );\n      var scaleBase = helper.parseScaleBase( attr );\n      var path      = new anim8.DeltaPath( attr, attribute.calculator, values[attr], deltas[attr] );\n      var event     = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n  \n});\n\n/**\n * Register the parser.\n */\nanim8.parser['values'] = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar values = animation.final;\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] );\n      var delay      = anim8.delay( helper.parseDelay( attr ) );\n      var duration   = anim8.duration( helper.parseDuration( attr ) );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, scale, scaleBase, false, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var factory = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n      var attr = e.attribute;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.delay     = helper.mergeDelay( attr, e.delay ) + helper.mergeDuration( attr, e.duration );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory ); \n    }\n  }\n\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['final'] = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays\n    \n    var factory    = anim8.factory( animation.factory );\n  \tvar values     = animation.initial;\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = helper.parseDelay( attr );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n      var attr = e.attribute;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      e.delay     = helper.mergeDelay( attr, e.delay );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n    }\n  }\n  \n});\n\n/**\n * Register the parser.\n */\nanim8.parser['initial'] = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    var easings = animation.easings || {};\n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) \n      {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n  \t\t\t\n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n  \t\n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = helper.parseDuration( attr );\n      var delay     = helper.parseDelay( attr );\n      var sleep     = helper.parseSleep( attr );\n      var repeat    = helper.parseRepeat( attr );\n      var scale     = helper.parseScale( attr );\n      var scaleBase = helper.parseScaleBase( attr );\n      var path      = new anim8.KeyframePath( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser['keyframe'] = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTweenTo = function()\n{\n  \n};\n\n// ParserTweenTo extends anim8.Parser()\nanim8.override( anim8.ParserTweenTo.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n\n  \tfor (var attr in tweenTo)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[attr] );\n      var duration   = helper.parseDuration( attr );\n      var easing     = helper.parseEasing( attr );\n      var delay      = helper.parseDelay( attr );\n      var sleep      = helper.parseSleep( attr );\n      var repeat     = helper.parseRepeat( attr );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, value );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenTo'] = new anim8.ParserTweenTo();\n","\n/**\n * Instantiates a new parser for the 'tweenFrom' animation type.\n */\nanim8.ParserTweenFrom = function()\n{\n  \n};\n\n// ParserTweenFrom extends anim8.Parser()\nanim8.override( anim8.ParserTweenFrom.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenFrom  = animation.tweenFrom;\n\n  \tfor (var attr in tweenFrom)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenFrom[attr] );\n      var duration   = helper.parseDuration( attr );\n      var easing     = helper.parseEasing( attr );\n      var delay      = helper.parseDelay( attr );\n      var sleep      = helper.parseSleep( attr );\n      var repeat     = helper.parseRepeat( attr );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.Tween( attr, attribute.calculator, value, anim8.computed.current );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenFrom'] = new anim8.ParserTweenFrom();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParserMove = function()\n{\n  \n};\n\n// ParserMove extends anim8.Parser()\nanim8.override( anim8.ParserMove.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var move       = animation.move;\n\n  \tfor (var attr in move)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[attr] );\n      var duration   = helper.parseDuration( attr );\n      var easing     = helper.parseEasing( attr );\n      var delay      = helper.parseDelay( attr );\n      var sleep      = helper.parseSleep( attr );\n      var repeat     = helper.parseRepeat( attr );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, anim8.computed.relative( value ) );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['move'] = new anim8.ParserMove();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParseSpring = function()\n{\n  \n};\n\n// ParseSpring extends anim8.Parser()\nanim8.override( anim8.ParseSpring.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var springs    = animation.springs;\n\n  \tfor (var attr in springs)\n  \t{\n      var spring     = springs[ attr ];\n\n      if ( !anim8.isDefined( spring.attribute ) )\n      {\n        spring.attribute = attr;\n      }\n\n      var parsed = anim8.spring( spring );\n      \n      if ( parsed !== false )\n      {\n        parsed.parser = this;\n\n        attrimatorMap.put( attr, parsed );  \n      }\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['springs'] = new anim8.ParseSpring();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParsePhysics = function()\n{\n  \n};\n\n// ParsePhysics extends anim8.Parser()\nanim8.override( anim8.ParsePhysics.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var physics    = animation.physics;\n\n  \tfor (var attr in physics)\n  \t{\n      var physic    = physics[ attr ];\n\n      var attrimator = new anim8.Physics(\n        attr, \n        this, \n        physic.calculator, \n        anim8.coalesce( physic.position, true ), \n        physic.velocity, \n        physic.acceleration, \n        physic.terminal,\n        physic.stopAt\n      );\n\n      attrimatorMap.put( attr, attrimator );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['physics'] = new anim8.ParsePhysics();\n","\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n * \n * @param  [string|anim8.Factory]\n * @return {anim8.Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory.default;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n  this.priority = 0;\n  this.attributes = {};\n};\n\nanim8.override( anim8.ObjectFactory.prototype = new anim8.Factory(),\n{\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;\n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory['default'] = anim8.factory['object'] = new anim8.ObjectFactory();\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute['default']                 = {defaultValue: 0};\n","\n/**\n * A factory for HTML Elements\n */\nanim8.DomFactory = function()\n{\n  this.cached = {};\n  this.ids = 0;\n  this.elementAttribute = 'anim8';\n  this.priority = 5;\n  this.attributes = {};\n};\n\nanim8.override( anim8.DomFactory.prototype = new anim8.Factory(),\n{\n  \n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isElement( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animatorId = subject.getAttribute( this.elementAttribute );\n    \n    if (!(animatorId in this.cached)) \n    {\n      var animator = new anim8.DomAnimator( subject );\n      \n      subject.setAttribute( this.elementAttribute, animatorId = animator.id = ++this.ids );\n      \n      animator.factory = this;\n      \n      this.cached[animatorId] = animator;\n    }\n\n    return this.cached[ animatorId ];\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete this.cached[ animator.id ];\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.dom.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n      var propertyName = anim8.coalesce( attribute.property, attr );\n      var property = anim8.dom.property( propertyName );\n      var defaultUnit = attribute.defaultUnit || '';\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.propertyName = propertyName;\n      attribute.property = property;\n      attribute.defaultUnit = defaultUnit;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the DOM factory.\n */\nanim8.factory['default'] = anim8.factory['dom'] = new anim8.DomFactory();\n\n/* TODO don't apply styles if they're impercivable (convert value to pixels of applicable) */\n\n/**\n * All DOM related\n */\nanim8.dom = {};\n\n/* \n  anim8.dom.property[name] = {\n    get: function(e, anim) {\n      // based on anim.animating, gets one or more value from the entity and places it on anim.frame. this function should only do this for an attribute if\n      // anim.animating[attribute] === false. When it successfully gets a value anim.animating[attribute] should be set to true. This is called before an animation\n      // begins on attributes that will be animated based on the current value. \n    },\n    set: function(e, anim) {\n      // applies the applicable attributes in anim.frame to the entity, \n    }\n }\n*/\nanim8.dom.property = function(prop) \n{\n  if ( anim8.isObject( prop ) && anim8.isFunction( prop.get ) && anim8.isFunction( prop.set ) ) \n  {\n    return prop;\n  }\n  if ( anim8.isString( prop ) && prop in anim8.dom.property )\n  {\n\t  return anim8.dom.property[ prop ];\n  }\n\t\n  throw prop + ' is not a valid property';\n}\n\n/**\n * Computes the desired style of the given element and returns it as a string. The style\n * given must be in hyphenated format like so: anim8.dom.style( element, 'font-size' ) = '12px'\n */\nanim8.dom.style = (function()\n{\n  var hyphenated = {};\n\n  var hyphenize = function(str) \n\t{\n    if ( str in hyphenated )\n    {\n      return hyphenated[ str ];\n    }\n\n    var key = str;\n\n    str = str.replace(/[a-z][A-Z]/g, function(str, letter)\n    {\n     return str[0] + '-' + str[1].toLowerCase();\n    });\n    \n    str = str.replace(/^Webkit/, '-webkit');\n    str = str.replace(/^Moz/, '-moz');\n    str = str.replace(/^Ms/, '-ms');\n    str = str.replace(/^O/, '-o');\n    str = str.replace(/^Khtml/, '-khtml');\n    \n    return hyphenated[ key ] = str;\n  };\n\t\n\treturn function(e, style) \n\t{\n\t  if (e.currentStyle)\n\t\t{\n\t    return e.currentStyle[ style ];\n\t  } \n\t\telse if (document.defaultView && document.defaultView.getComputedStyle) \n\t\t{\n\t    return document.defaultView.getComputedStyle( e, null ).getPropertyValue( hyphenize( style ) );\n\t  } \n\t\telse \n\t\t{\n\t    return e.style[ style ]; \n\t  }\n\t};\n\t\n})();\n\n/**\n * Given an array of styles this will return the first one that is present on elements in the current browser.\n */\nanim8.dom.prefix = (function() \n{\n  var a = document.createElement('a');\n  \n  return function(prefixes) \n  {\n    for (var i = 0; i < prefixes.length; i++) \n    {\n      if ( anim8.isDefined( a.style[ prefixes[ i ] ] ) ) \n      {\n        return prefixes[i];\n      }\n    }\n    return false;\n  };\n  \n})();\n\n/**\n * Parses the string for a value and a unit.\n *\n * @param {string} value\n */\nanim8.dom.parseValue = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(px|em|%|vw|ex|cm|mm|in|pt|pc|deg|rad)?/;\n  \n  return function(x)\n  {\n    var parsed = regex.exec( x );\n    \n    if (parsed) \n    {      \n      return {\n        value: parseFloat( parsed[1] ),\n        unit: parsed[3]\n      }\n    }\n    \n    return false;\n  };\n})();\n\n\n/**\n * Converts one unit to another for a given element.\n *\n * For Example: anim8.dom.convert( element, '100px', '%', 'parentWidth' )\n *    returns how much percent 100px relativeTo parentWidth of the given element\n *\n * @param {HTMLElement} e\n * @param {string} from\n * @param {string} toUnit\n * @param {string} relativeTo\n */\nanim8.dom.convert = (function()\n{\n  /**\n   * Calculators how many pixels a given value & unit is.\n   * \n   * For Example: anim8.toPixels( 100, 'in' ) \n   *    returns how many pixels are in 1 inch, with up to 2 decimal points of accuracy.\n   */\n  var toPixels = function(baseValue, baseUnit, defaultRate)\n  {\n    if ( document.body )\n    {\n      var div = document.createElement('div');\n      document.body.appendChild( div );\n      div.style.width = baseValue + baseUnit;\n      var pixels = (div.offsetWidth / baseValue);\n      document.body.removeChild( div );\n      return pixels || defaultRate;\n    }\n    \n    return defaultRate;\n  };\n\n  var getFontSize = function(e, notUnit)\n  {\n    var fontSize = anim8.dom.style( e, 'fontSize' );\n    var parsed = anim8.dom.parseValue( fontSize );\n    \n    if ( !parsed || parsed.unit === notUnit )\n    {\n      return 12;\n    }\n    \n    if ( parsed.unit === 'px' ) \n    {\n      return parsed.value;\n    }\n    \n    return getConverterScale( e, conversions[ parsed.unit ].px, relativeTo );\n  };\n\n  var variables = {};\n  \n  variables.parentWidth = function(e)\n  {\n    return e.parentNode.scrollWidth;\n  };\n  variables.parentHeight = function(e)\n  {\n    return e.parentNode.scrollHeight;\n  };\n  variables.width = function(e)\n  {\n    return e.offsetWidth;\n  };\n  variables.height = function(e)\n  {\n    return e.offsetHeight;\n  };\n  variables.fontSize = function(e)\n  {\n    return getFontSize( e, '%' );\n  };\n  variables.parentFontSize = function(e)\n  {\n    return getFontSize( e.parentNode, '%' );\n  };\n  variables.htmlFontSize = function(e)\n  {\n    var htmlElement = document.getElementsByTagName(\"html\")[0];\n    \n    return getFontSize( htmlElement, '%' );\n  };\n  \n  var conversions = {};\n  \n  conversions.pt  = { px: toPixels(100, 'pt') };\n  conversions.in  = { px: toPixels(100, 'in') };\n  conversions.cm  = { px: toPixels(1000, 'cm') };\n  conversions.mm  = { px: toPixels(100000, 'mm') };\n  conversions.vw  = { px: toPixels(1000, 'vw') };\n  conversions.deg = { rad: Math.PI / 180.0};\n\n  conversions.em = \n  {\n    px: function(e, relativeTo) \n    {\n      return getFontSize( e, 'em' );\n    }\n  };\n  \n  conversions.rem = \n  {\n    px: function(e, relativeTo) \n    {\n      var htmlElement = document.getElementsByTagName(\"html\")[0];\n      \n      return getFontSize( htmlElement, 'rem' );\n    }\n  };\n  \n  conversions['%'] = \n  {\n    px: function(e, relativeTo) \n    {\n      if ( anim8.isNumber( relativeTo ) )\n      {\n        return relativeTo;\n      }\n      if ( relativeTo in variables )\n      {\n        return variables[ relativeTo ]( e ) / 100.0;\n      }\n      \n      return 1.0;\n    }\n  };\n  \n  // Populate conversions going other way.\n  for (var unit in conversions)\n  {\n    for (var to in conversions[ unit ])\n    {\n      if ( !(to in conversions) )\n      {\n        conversions[ to ] = {};\n      }\n      \n      if ( !(unit in conversions[ to ]) )\n      {\n        var given = conversions[ unit ][ to ];\n        \n        if ( anim8.isNumber( given ) )\n        {\n          conversions[ to ][ unit ] = 1.0 / given;  \n        }\n        if ( anim8.isFunction( given ) )\n        {\n          conversions[ to ][ unit ] = (function(converter) \n          {\n            return function(e, relativeTo) \n            {\n              return 1.0 / converter( e, relativeTo );\n            };\n          })( given );\n        }\n      }\n    }\n  }\n  \n  // Given an element, convert, and relativeTo - return the number we need to multiply by.\n  var getConverterScale = function(e, converter, relativeTo)\n  {\n    if ( anim8.isNumber( converter ) )\n    {\n      return converter;\n    }\n    else if ( anim8.isFunction( converter ) )\n    {\n      return converter( e, relativeTo );\n    }\n    \n    return 1.0;\n  };\n  \n  return function(e, from, toUnit, relativeTo)\n  {\n    if ( anim8.isNumber( from ) )\n    {\n      return from;\n    }\n    \n    var parsed = anim8.dom.parseValue( from );\n    \n    if ( !parsed )\n    {\n      return false;\n    }\n    \n    var value = parsed.value;\n    var fromUnit = parsed.unit;\n    \n    if ( !fromUnit || fromUnit === toUnit )\n    {\n      return value;\n    }\n    \n    // First see if we have a direct conversion available...\n    if ( fromUnit in conversions && toUnit in conversions[ fromUnit ] )\n    {\n      var converter = conversions[ fromUnit ][ toUnit ];\n      \n      value *= getConverterScale( e, converter, relativeTo );\n    }\n    // Otherwise convert it to px, then to the desired unit\n    else if ( fromUnit in conversions && conversions[ fromUnit ].px && toUnit in conversions.px )\n    {\n      var converter1 = conversions[ fromUnit ].px;\n      var converter2 = conversions.px[ toUnit ];\n      \n      value *= getConverterScale( e, converter1, relativeTo );\n      value *= getConverterScale( e, converter2, relativeTo );\n    }\n    \n    return value;\n  };\n  \n})();\n\n\n","\nanim8.dom.property.factory = function(nm, relativeTo) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryDerivable = function(nm, relativeTo, deriver) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n        else if ( anim8.isFunction( deriver ) )\n        {\n          converted = anim8.dom.convert( e, deriver( e ), anim.units[ nm ], relativeTo );\n          \n          if ( converted !== false )\n          {\n            anim.frame[nm] = converted;\n            anim.animating[nm] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryColor = function(nm) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var parsed = anim8.color.parse( e.style[nm] );\n        \n        if (parsed !== false) \n        {\n          anim.frame[nm] = parsed;\n          anim.animating[nm] = true;\n        }              \n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[nm] = anim8.color.format( anim.frame[nm] );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.padding                  = anim8.dom.property.factory( 'padding', 'parentWidth' );\nanim8.dom.property.paddingTop               = anim8.dom.property.factory( 'paddingTop', 'parentWidth' );\nanim8.dom.property.paddingRight             = anim8.dom.property.factory( 'paddingRight', 'parentWidth' );\nanim8.dom.property.paddingBottom            = anim8.dom.property.factory( 'paddingBottom', 'parentWidth' );\nanim8.dom.property.paddingLeft              = anim8.dom.property.factory( 'paddingLeft', 'parentWidth' );\n\nanim8.dom.property.margin                   = anim8.dom.property.factory( 'margin', 'parentWidth' );\nanim8.dom.property.marginTop                = anim8.dom.property.factory( 'marginTop', 'parentWidth' );\nanim8.dom.property.marginRight              = anim8.dom.property.factory( 'marginRight', 'parentWidth' );\nanim8.dom.property.marginBottom             = anim8.dom.property.factory( 'marginBottom', 'parentWidth' );\nanim8.dom.property.marginLeft               = anim8.dom.property.factory( 'marginLeft', 'parentWidth' );\n\nanim8.dom.property.borderRadius             = anim8.dom.property.factory( 'borderRadius', 'width' );\nanim8.dom.property.borderTopLeftRadius      = anim8.dom.property.factory( 'borderTopLeftRadius', 'width' );\nanim8.dom.property.borderTopRightRadius     = anim8.dom.property.factory( 'borderTopRightRadius', 'width' );\nanim8.dom.property.borderBottomLeftRadius   = anim8.dom.property.factory( 'borderBottomLeftRadius', 'width' );\nanim8.dom.property.borderBottomRightRadius  = anim8.dom.property.factory( 'borderBottomRightRadius', 'width' );\n\nanim8.dom.property.borderWidth              = anim8.dom.property.factory( 'borderWidth' );\nanim8.dom.property.borderTopWidth           = anim8.dom.property.factory( 'borderTopWidth' );\nanim8.dom.property.borderRightWidth         = anim8.dom.property.factory( 'borderRightWidth' );\nanim8.dom.property.borderBottomWidth        = anim8.dom.property.factory( 'borderBottomWidth' );\nanim8.dom.property.borderLeftWidth          = anim8.dom.property.factory( 'borderLeftWidth' );\n\nanim8.dom.property.outlineWidth             = anim8.dom.property.factory( 'outlineWidth' );\nanim8.dom.property.textIndent               = anim8.dom.property.factory( 'textIndent', 'parentWidth' );\nanim8.dom.property.borderSpacing            = anim8.dom.property.factory( 'borderSpacing' );\nanim8.dom.property.fontSize                 = anim8.dom.property.factory( 'fontSize', 'parentFontSize' );\nanim8.dom.property.lineHeight               = anim8.dom.property.factory( 'lineHeight', 'fontSize' );\nanim8.dom.property.zIndex                   = anim8.dom.property.factory( 'zIndex' );\n\nanim8.dom.property.color                    = anim8.dom.property.factoryColor( 'color' );\nanim8.dom.property.backgroundColor          = anim8.dom.property.factoryColor( 'backgroundColor' );\nanim8.dom.property.borderTopColor           = anim8.dom.property.factoryColor( 'borderTopColor' );\nanim8.dom.property.borderRightColor         = anim8.dom.property.factoryColor( 'borderRightColor' );\nanim8.dom.property.borderBottomColor        = anim8.dom.property.factoryColor( 'borderBottomColor' );\nanim8.dom.property.borderLeftColor          = anim8.dom.property.factoryColor( 'borderLeftColor' );\nanim8.dom.property.outlineColor             = anim8.dom.property.factoryColor( 'outlineColor' );\n\nanim8.dom.property.minWidth                 = anim8.dom.property.factory( 'minWidth', 'parentWidth' );\nanim8.dom.property.maxWidth                 = anim8.dom.property.factory( 'maxWidth', 'parentWidth' );\nanim8.dom.property.minHeight                = anim8.dom.property.factory( 'minHeight', 'parentHeight' );\nanim8.dom.property.maxHeight                = anim8.dom.property.factory( 'maxHeight', 'parentHeight' );\n\nanim8.dom.property.width                    = anim8.dom.property.factoryDerivable('width', 'parentWidth', function(e) { return e.offsetWidth + 'px'; });\nanim8.dom.property.height                   = anim8.dom.property.factoryDerivable('height', 'parentHeight', function(e) { return e.offsetHeight + 'px'; });\n\nanim8.dom.property.top                      = anim8.dom.property.factoryDerivable('top', 'parentHeight', function(e) { return e.offsetTop + 'px'; });\nanim8.dom.property.right                    = anim8.dom.property.factoryDerivable('right', 'parentWidth', function(e) { return (e.parentNode.scrollWidth - (e.offsetLeft + e.offsetWidth)) + 'px'; });\nanim8.dom.property.bottom                   = anim8.dom.property.factoryDerivable('bottom', 'parentHeight', function(e) { return (e.parentNode.scrollHeight - (e.offsetTop + e.offsetHeight)) + 'px'; });\nanim8.dom.property.left                     = anim8.dom.property.factoryDerivable('left', 'parentWidth', function(e) { return e.offsetLeft + 'px'; });\n\nanim8.dom.property.visibility = \n{\n  get: function(e, anim) \n  {\n    if (anim.animating.visibility === false) \n    {\n      var style = anim8.dom.style( e, 'visibility' );\n      anim.frame.visibility = style === 'hidden' ? 0.0 : 1.0;\n      anim.animating = true;\n    }\n  },\n  set: function(e, anim) \n  {\n    anim.styles.visibility = anim.frame.visibility < 0.5 ? 'hidden' : 'visible'\n  },\n  unset: function(e, anim)\n  {\n    e.style.visibility = null;\n  }\n}\n\nanim8.dom.property.backface = (function()\n{\n  var css = anim8.dom.prefix(['WebkitBackfaceVisibility', 'MozBackfaceVisibility', 'msBackfaceVisibility', 'BackfaceVisibility']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim)\n    {\n      if ( anim.animating.backface === false )\n      {\n        var style = anim8.dom.style( e, css ); \n        \n        anim.frame.backface = (style === 'visible') ? 1.0 : 0.0;\n        anim.animating.backface = true;\n      }\n    },\n    set: function(e, anim)\n    {\n      anim.styles[css] = anim.frame.backface < 0.5 ? 'none' : 'visible';\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n    \n  };\n  \n})();\n\nanim8.dom.property.transformOrigin = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransformOrigin', 'MozTransformOrigin', 'OTransformOrigin', 'msTransformOrigin', 'transformOrigin']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  var keywords = \n  {\n    'left':   '0%',\n    'center': '50%',\n    'right':  '100%',\n    'top':    '0%',\n    'bottom': '100%'\n  };\n  \n  var setOriginAttribute = function(e, value, anim, attr, relativeTo ) \n  {\n    if (anim.animating[attr] === false) \n    {\n      if ( value in keywords )\n      {        \n        value = keywords[ value ];\n      }\n\n      var converted = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n      \n      if ( converted !== false )\n      {\n        anim.frame[ attr ] = converted;\n        anim.animating[ attr ] = true;\n      }\n    }\n  };\n  \n  var setOrigin = function(e, split, anim) \n  {\n    if (anim.animating.origin === false) \n    {\n      if ((split.length === 1) || \n          (split.length === 2 && split[0] === split[1]) || \n          (split.length === 3 && split[0] === split[1] && split[1] === split[2])) \n      {     \n        setOriginAttribute( e, split[0], anim, 'origin', 'width' );\n      }            \n    }\n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      if (style) \n      {\n        var origin = style.toLowerCase();\n        var split = origin.split(' ');\n        \n        switch (split.length) \n        {\n        case 3:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOriginAttribute( e, split[2], anim, 'originZ' );\n          setOrigin( e, split, anim );\n          break;\n        case 2:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        case 1:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[0], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var style = null;\n      \n      if ( anim8.isDefined( anim.frame.originZ ) )\n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' ) + ' ' + anim.valueOr( 'originZ', 'origin', 'z' );\n      } \n      else \n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' );\n      }\n      \n      anim.styles[css] = style;\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.transform = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);\n   \n  if ( !css )\n  {\n    return false;\n  }\n  \n  var parse = function( e, value, anim, attr, relativeTo )\n  {\n    var desiredUnit = anim.units[ attr ];\n    var converted = anim8.dom.convert( e, value, desiredUnit, relativeTo );\n    \n    if ( converted !== false )\n    {\n      return converted;\n    }\n    \n    // TODO show convert this to desiredUnit, however defaultValue may be non-scalar.\n    return anim.getAttribute( attr ).defaultValue;    \n  };\n\n  var getter1d = function(e, anim, parsed, attr)\n  {\n    return parse( e, parsed[1], anim, attr, 'width' )\n  };\n  var getter2d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' )\n    };\n  };\n  var getter3d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' ),\n      z: parse( e, parsed[3], anim, attr )\n    };\n  };\n  var getter4d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' ),\n      z: parse( e, parsed[3], anim, attr ),\n      angle: parse( e, parsed[4], anim, attr )\n    };\n  };\n\n  var setter1d = function(attr, value, unit)\n  {\n    return attr + '(' + value + unit + ')';\n  };\n  var setter2d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + unit + ',' + value.y + unit + ')';\n  };\n  var setter3d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + unit + ',' + value.y + unit + ',' + value.z + unit + ')';\n  };\n  var setter4d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + ',' + value.y + ',' + value.z + ',' + value.angle + unit + ')';\n  };\n    \n  var regexes = \n  {\n    translate:    /translate\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translate3d:  /translate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translateX:   /translateX\\(([^\\)]+)\\)/i,\n    translateY:   /translateY\\(([^\\)]+)\\)/i,\n    translateZ:   /translateZ\\(([^\\)]+)\\)/i,\n    scale:        /scale\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scale3d:      /scale3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scaleX:       /scaleX\\(([^\\)]+)\\)/i,\n    scaleY:       /scaleY\\(([^\\)]+)\\)/i,\n    scaleZ:       /scaleZ\\(([^\\)]+)\\)/i,\n    rotate:       /rotate\\(([^\\)]+)\\)/i,\n    rotate3d:     /rotate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    rotateX:      /rotateX\\(([^\\)]+)\\)/i,\n    rotateY:      /rotateY\\(([^\\)]+)\\)/i,\n    rotateZ:      /rotateZ\\(([^\\)]+)\\)/i,\n    skew:         /skew\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    skewX:        /skewX\\(([^\\)]+)\\)/i,\n    skewY:        /skewY\\(([^\\)]+)\\)/i\n  };\n\n  var getters = \n  {\n    translate:    getter2d,\n    translate3d:  getter3d,\n    translateX:   getter1d,\n    translateY:   getter1d,\n    translateZ:   getter1d,\n    scale:        getter2d,\n    scale3d:      getter3d,\n    scaleX:       getter1d,\n    scaleY:       getter1d,\n    scaleZ:       getter1d,\n    rotate:       getter1d,\n    rotate3d:     getter4d,\n    rotateX:      getter1d,\n    rotateY:      getter1d,\n    rotateZ:      getter1d,\n    skew:         getter2d,\n    skewX:        getter1d,\n    skewY:        getter1d\n  };\n\n  var setters =\n  {\n    translate:    setter2d,\n    translate3d:  setter3d,\n    translateX:   setter1d,\n    translateY:   setter1d,\n    translateZ:   setter1d,\n    scale:        setter2d,\n    scale3d:      setter3d,\n    scaleX:       setter1d,\n    scaleY:       setter1d,\n    scaleZ:       setter1d,\n    rotate:       setter1d,\n    rotate3d:     setter4d,\n    rotateX:      setter1d,\n    rotateY:      setter1d,\n    rotateZ:      setter1d,\n    skew:         setter2d,\n    skewX:        setter1d,\n    skewY:        setter1d\n  };\n\n  var props = new anim8.FastMap( regexes );\n  var regex = props.values;\n  var attrs = props.keys;\n  props.setters = [];\n  props.getters = [];\n\n  for (var prop in getters)\n  {\n    var i = props.indexOf( prop );\n\n    props.getters[ i ] = getters[ prop ];\n    props.setters[ i ] = setters[ prop ];\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      for (var attr in anim.animating) \n      {\n        var i = props.indexOf( attr );\n\n        if ( i !== -1 && anim.animating[ attr ] === false ) \n        {\n          var parsed = regex[ i ].exec( style );\n\n          if ( parsed ) \n          {\n            anim.frame[ attr ] = props.getters[ i ]( e, anim, parsed, attr );\n            anim.animating[ attr ] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var transforms = [];\n      \n      for (var i = 0; i < regex.length; i++) \n      {\n        var attr = attrs[ i ];\n\n        if (attr in anim.frame) \n        {\n          transforms.push( props.setters[ i ]( attr, anim.frame[ attr ], anim.units[ attr ] ) );\n        }\n      }\n\t\t\t\n      if (transforms.length) \n      {\n        anim.styles[css] = transforms.join(' ');\n      }\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.opacity = (function() \n{\n  var css = anim8.dom.prefix(['WebkitOpacity', 'MozOpacity', 'KhtmlOpacity', 'opacity']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating.opacity === false) \n      {\n        var style = anim8.dom.style( e, css );\n        var opacity = parseFloat( style );\n        \n        if ( !isNaN(opacity) ) \n        {\n          anim.frame.opacity = opacity\n          anim.animating.opacity = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[ css ] = anim8.clamp( anim.frame.opacity, 0, 1 );\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.filter = (function() \n{\n  var css = anim8.dom.prefix(['WebkitFilter', 'MozFilter', 'OFilter', 'msFilter', 'filter']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n\tvar methods = \n  {\n\t\tgrayscale: \t'grayscale',\n\t\tsepia: \t\t\t'sepia',\n\t\tsaturate: \t'saturate',\n\t\thueRotate: \t'hue-rotate',\n\t\tinvert: \t\t'invert',\n\t\tbrightness: 'brightness',\n\t\tcontrast: \t'contrast',\n    blur:       'blur'\n\t};\n\t\n\tvar patterns = {};\n\t\n\tfor (var attr in methods) \n  {\n\t\tpatterns[attr] = new RegExp( methods[attr] + '\\(([^\\)]+)\\)', 'i');\n\t}\n  \n\treturn {\n    \n\t\tget: function(e, anim) \n    {\n\t\t\tvar style = anim8.dom.style( e, css );\n      \n\t\t\tfor (var attr in patterns) \n      {\n\t\t\t\tif ( anim.animating[attr] === false ) \n        {\n\t\t\t\t\tvar parsed = patterns[attr].exec( style );\n          \n\t\t\t\t\tif (parsed !== false) \n          {\n            var converted = anim8.dom.convert( e, parsed[1], anim.units[ attr ] );\n            \n            if ( converted !== false )\n            {\n              anim.frame[ attr ] = converted;\n              anim.animating[ attr ] = true;\n            }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\t\tset: function(e, anim) \n    {\n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n\t\t\tvar filters = [];\n      \n\t\t\tfor (var attr in methods) \n      {\n\t\t\t\tif ( attr in anim.frame ) \n        {\n          filters.push( methods[attr] + '(' + anim.value( attr ) + ')' );\n\t\t\t\t}\n\t\t\t}\n      \n\t\t\tif (filters.length) \n      {\n\t\t\t\tanim.styles[ css ] = filters.join(' ');\n\t\t\t}\n\t\t},\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n\t};\n\t\n})();\n\nanim8.dom.property.center = \n{\n  get: function(e, anim)\n  {\n    var cx = (e.offsetLeft + e.offsetWidth * 0.5) + 'px';\n    var cy = (e.offsetTop + e.offsetHeight * 0.5) + 'px';\n    \n    if ( anim.animating.center === false )\n    {\n      var desiredUnit = anim.units.center;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n    \n      if ( ccx !== false && ccy !== false )\n      {\n        anim.frame.center = {\n          x: ccx,\n          y: ccy\n        };\n        anim.animating.center = true;\n      }\n    }\n    if ( anim.animating.centerX === false )\n    {\n      var desiredUnit = anim.units.centerX;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      \n      if ( ccx !== false )\n      {\n        anim.frame.centerX = ccx;\n        anim.animating.centerX = true;\n      }\n    }\n    if ( anim.animating.centerY === false )\n    {\n      var desiredUnit = anim.units.centerY;\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n      \n      if ( ccy !== false )\n      {\n        anim.frame.centerY = ccy;\n        anim.animating.centerY = true;\n      }\n    }\n  },\n  preset: function(e, anim)\n  {\n    anim.cached.width  = anim8.dom.convert( e, e.offsetWidth + 'px', anim.units.centerX || anim.units.center, 'parentWidth' );\n    anim.cached.height = anim8.dom.convert( e, e.offsetHeight + 'px', anim.units.centerY || anim.units.center, 'parentHeight' );\n  },\n  set: function(e, anim)\n  {\n    var rw = anim.cached.width * 0.5;\n    var rh = anim.cached.height * 0.5;\n        \n    if ( anim.updated.center )\n    {\n      anim.styles.left = (anim.frame.center.x - rw) + anim.units.center;\n      anim.styles.top = (anim.frame.center.y - rh) + anim.units.center;\n    }\n    if ( anim.updated.centerX )\n    {\n      anim.styles.left = (anim.frame.centerX - rw) + anim.units.centerX;\n    }\n    if ( anim.updated.centerY )\n    {\n      anim.styles.top = (anim.frame.centerY - rh) + anim.units.centerY;\n    }\n  }\n};\n\nanim8.dom.property.orbit = \n{\n  DEGREE_TO_RADIAN: Math.PI / 180.0,\n  \n  RADIAN_TO_DEGREE: 180.0 / Math.PI,\n  \n  get: function(e, anim)\n  {\n    var ox = (e.parentNode.scrollWidth * 0.5);\n    var oy = (e.parentNode.scrollHeight * 0.5); \n    var cx = (e.offsetLeft + e.offsetWidth * 0.5);\n    var cy = (e.offsetTop + e.offsetHeight * 0.5);\n    var dx = cx - ox;\n    var dy = cy - oy;\n  \n    if ( anim.animating.orbitOffset === false )\n    {\n      var cunit = anim.units.orbitOffset;\n      var cox = anim8.dom.convert( e, ox + 'px', cunit, 'parentWidth' );\n      var coy = anim8.dom.convert( e, oy + 'px', cunit, 'parentHeight' );\n      \n      if ( cox !== false && coy !== false )\n      {\n        anim.frame.orbitOffset = {\n          x: cox,\n          y: coy\n        };\n        anim.animating.orbitOffset = false;\n      }\n    }\n    \n    if ( anim.animating.distance === false )\n    {\n      anim.frame.distance = Math.sqrt( dx * dx + dy * dy );\n      anim.animating.distance = true;\n    }\n    \n    if ( anim.animating.angle === false )\n    {\n      anim.frame.angle = Math.atan2( dy, dx ) * this.RADIAN_TO_DEGREE;\n      anim.animating.angle = true;\n    }\n  },\n  \n  preset: function(e, anim)\n  {  \n    anim.cached.parentWidth = e.parentNode.scrollWidth;\n    anim.cached.parentHeight = e.parentNode.scrollHeight;\n    anim.cached.width = e.offsetWidth;\n    anim.cached.height = e.offsetHeight;\n  },\n  \n  set: function(e, anim)\n  {\n    // TODO calculator this correctly\n    var cunit = anim.units.orbitOffset || '%';\n    var orbitX = anim.frame.orbitOffset ? anim.frame.orbitOffset.x : 50;\n    var orbitY = anim.frame.orbitOffset ? anim.frame.orbitOffset.y : 50;\n    \n    var originUnit = anim.units.origin || '%';\n    var originX = anim.frame.origin ? anim.frame.origin.x : 50;\n    var originY = anim.frame.origin ? anim.frame.origin.y : 50;\n    \n    var cox = anim8.dom.convert( e, orbitX + cunit, 'px', anim.cached.parentWidth / 100.0 );\n    var coy = anim8.dom.convert( e, orbitY + cunit, 'px', anim.cached.parentHeight / 100.0 );\n    \n    var ox = anim8.dom.convert( e, originX + originUnit, 'px', anim.cached.width / 100.0 );\n    var oy = anim8.dom.convert( e, originY + originUnit, 'px', anim.cached.height / 100.0 );\n    \n    var angle = (anim.frame.angle || 0.0) * this.DEGREE_TO_RADIAN;\n    var distance = anim.frame.distance || 0.0;\n        \n    var cos = Math.cos( angle ) * distance;\n    var sin = Math.sin( angle ) * distance;\n    \n    anim.styles.left = (cox + cos - ox) + 'px';\n    anim.styles.top = (coy + sin - oy) + 'px';\n  }\n};","\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.dom.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.dom.attribute[ attr ];\n  }\n  \n  return anim8.dom.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.dom.attribute.default                 = {defaultValue: 0};\n\n/**\n * All animatable attributes for DomAnimators & HTMLElements.\n */\n\nanim8.dom.attribute.padding                 = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingTop              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingRight            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingBottom           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingLeft             = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.margin                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginTop               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginRight             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginBottom            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginLeft              = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderRadius            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopLeftRadius     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopRightRadius    = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomLeftRadius  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomRightRadius = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderWidth             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopWidth          = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderRightWidth        = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomWidth       = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderLeftWidth         = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.outlineWidth\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.outlineOffset\t\t\t\t\t\t= {defaultValue: 0};\nanim8.dom.attribute.textIndent\t\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderSpacing\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.fontSize\t\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\nanim8.dom.attribute.lineHeight\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\n\nanim8.dom.attribute.origin                  = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'transformOrigin', calculator: '2d'};\nanim8.dom.attribute.originX                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\nanim8.dom.attribute.originY                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\n\nanim8.dom.attribute.opacity                 = {defaultValue: 1};\nanim8.dom.attribute.zIndex                  = {defaultValue: 1};\n\nanim8.dom.attribute.width                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minWidth                = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxWidth                = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.height                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minHeight               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxHeight               = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.angle                   = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.distance                = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.orbitOffset             = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'orbitOffset', calculator: '2d'};\n\nanim8.dom.attribute.top                     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.right                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.bottom                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.left                    = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.center                  = {defaultValue: {x:0, y:0}, defaultUnit: 'px', property: 'center', calculator: '2d'};\nanim8.dom.attribute.centerX                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\nanim8.dom.attribute.centerY                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\n\nanim8.dom.attribute.blur                    = {defaultValue: 0, property: 'filter', defaultUnit: 'px'};\nanim8.dom.attribute.sepia                   = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.brightness              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.grayscale               = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.contrast                = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.invert                  = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.saturation              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.hueRotate               = {defaultValue: 0, property: 'filter', defaultUnit: 'deg'};\n\nanim8.dom.attribute.rotate                  = {defaultValue: 0, property: 'transform', defaultUnit: 'deg'};\nanim8.dom.attribute.rotate3d                = {defaultValue: {x:0, y:0, z:1, angle:0}, property: 'transform', calculator: 'quaternion', defaultUnit: 'deg'};\n\nanim8.dom.attribute.translate               = {defaultValue: {x:0, y:0}, property: 'transform', calculator: '2d', defaultUnit: 'px'};\nanim8.dom.attribute.translateX              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateY              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateZ              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translate3d             = {defaultValue: {x:0, y:0, z:0}, property: 'transform', calculator: '3d', defaultUnit: 'px'};\n\nanim8.dom.attribute.scale                   = {defaultValue: {x:1, y:1}, property: 'transform', calculator: '2d'};\nanim8.dom.attribute.scaleX\t                = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleY  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleZ  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scale3d                 = {defaultValue: {x:1, y:1, z:1}, property: 'transform', calculator: '3d'};\n\nanim8.dom.attribute.skew                    = {defaultValue: {x:0, y:0}, defaultUnit: 'deg', property: 'transform', calculator: '2d'};\nanim8.dom.attribute.skewX                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\nanim8.dom.attribute.skewY                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\n\nanim8.dom.attribute.backface                = {defaultValue: 0};\nanim8.dom.attribute.visibility              = {defaultValue: 1};\n\nanim8.dom.attribute.backgroundColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.color                   = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderTopColor          = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderRightColor        = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderBottomColor       = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderLeftColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.outlineColor            = {defaultValue: anim8.color(), calculator: 'rgba'};\n","\n/**\n * Instantiates a new DomAnimator given a subject.\n * \n * @param {HTMLElement} e\n */\nanim8.DomAnimator = function(e)\n{\n\tthis.reset( e );\n  this.properties = new anim8.FastMap();\n  this.propertiesPreset = new anim8.FastMap();\n  this.attributeToProperty = {};\n  this.animating = {};\n  this.cached = {};\n  this.units = {};\n  this.styles = {};\n  this.styled = false;\n  this.stylesUpdated = false;\n};\n\n/**\n * Extends anim8.Animator\n */\nanim8.override( anim8.DomAnimator.prototype = new anim8.Animator(),\n{\n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   *\n   * If any events that were recently added have true values this is where we replace\n   * this true values with the values currently on the subject.\n   */\n  preupdate: function(now)\n  {\n    // If there are events with paths that contain computed values we should\n    // populate the frame directly from the HTML element.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      var properties = {};\n    \n      for (var i = aa.length - 1; i >= 0; i--)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        if ( !(attr in this.frame) && attrimator.hasComputed() )\n        {\n          properties[ this.attributeToProperty[ attr ] ] = true;\n      \n          this.animating[ attr ] = false; \n        }\n      }\n      \n      for (var prop in properties)\n      {\n        this.properties.get( prop ).get( this.subject, this );\n      }\n    }\n\n    // If a property currently being animated requires some heads up before it\n    // gets or sets a value, notify it. TODO removed dead properties.\n    var presets = this.propertiesPreset.values;\n    for (var i = presets.length - 1; i >= 0; i--)\n    {\n      presets[ i ].preset( this.subject, this );\n    }\n\n    // Finish updating computed events, filling in the frame, and triggering.\n    anim8.Animator.prototype.preupdate.apply( this, arguments );\n\n    return this;\n  },\n    \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now)\n  {\n    anim8.Animator.prototype.update.apply( this, arguments );\n      \n    this.getStyles();\n    this.stylesUpdated = true;\n\n    return this;\n  },\n\n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  onAnimation: function(animation, options, attrimatorMap)\n  {  \n    if ( animation.input.units )\n    {\n      var attrimators = attrimatorMap.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n        var attr = attrimator.attribute;\n      \n        if ( attr in animation.input.units )\n        {\n          attrimator.unit = animation.input.units[ attr ];\n        }\n      }  \n    }\n  },\n\n  /**\n   * Builds the styles map in preparation to be applied.\n   */\n  getStyles: function()\n  {\n    this.styles = {};\n    \n    var applyProperties = {};\n    \n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        var prop = this.attributeToProperty[ attr ];\n        \n        if ( this.properties.has( prop ) )\n        {\n          applyProperties[ prop ] = true; \n        }\n      }\n    }\n    \n    for (var prop in applyProperties)\n    {\n      this.properties.get( prop ).set( this.subject, this );  \n      \n      this.styled = true;\n    }\n  },\n\n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n  {\n    if ( !this.styled && !this.stylesUpdated )\n    {\n      this.getStyles();\n    }\n    \n    if ( this.styled )\n    {    \n      for (var prop in this.styles)\n      {\n         this.subject.style[ prop ] = this.styles[ prop ];\n      }\n      \n      for (var attr in this.frame)\n      {\n        this.updated[ attr ] = false;\n      }\n    \n      this.styled = false;\n    }\n    \n    this.stylesUpdated = false;\n    \n    this.trigger('apply');\n    \n    this.trimAttrimators();\n\n    return this;\n  },\n    \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeAttrimator: function( attrimator )\n  {\n    anim8.Animator.prototype.placeAttrimator.apply( this, arguments );\n    \n    var attr = attrimator.attribute;\n    var attribute = this.getAttribute( attr );\n    var propertyName = attribute.propertyName;\n    var property = attribute.property;\n\n    this.properties.put( propertyName, property );\n\n    this.attributeToProperty[ attr ] = propertyName;\n    this.units[ attr ] = attrimator.unit || attribute.defaultUnit;\n\n    if ( anim8.isFunction( property.preset ) )\n    {\n      this.propertiesPreset.put( propertyName, property );\n    }\n\n    return this;\n  },\n    \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  {\n    var props = this.properties.values;\n    for (var i = props.length - 1; i >= 0; i--)\n    {\n      props[ i ].unset( this.subject, this );\n    }\n    \n  \tthis.frame = {};\n\n    return this;\n  },\n\n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    var props = {};\n    var updated = {};\n    var units = {};\n    var styles = {};\n    \n    for (var attr in attributes)\n    {\n      var attribute = this.getAttribute( attr );\n      var value     = attributes[ attr ];\n      \n      units[ attr ] = attribute.defaultUnit;\n      \n      if ( anim8.isString( value ) )\n      {\n        var parsed = anim8.dom.parseValue( value, attribute.defaultUnit );\n        \n        if ( parsed !== false )\n        {\n          units[ attr ] = parsed.unit || attribute.defaultUnit;\n          value = parsed.value;\n        }  \n      }\n      \n      var parsed = attribute.parse( value );\n      \n      if ( parsed !== false )\n      {\n        props[ attribute.propertyName ] = attribute.property;\n        attributes[ attr ] = parsed;\n        updated[ attr ] = true;\n      }\n    }\n      \n    var flash = \n    {\n      units: units,\n       \n      frame: attributes,\n      \n      updated: updated,\n      \n      styles: styles,\n      \n      cached: {},\n      \n      value: function(attr)\n      {\n        return attributes[ attr ] + units[ attr ];\n      },\n      \n      valueOr: function(attr, other, subproperty)\n      {\n        var value = attributes[ attr ];\n        \n        if ( !anim8.isDefined( value ) )\n        {\n          value = attributes[ attr = other ];\n        \n          if ( anim8.isDefined( subproperty ) )\n          {\n            value = value[ subproperty ];\n          }\n        }\n    \n        return value + units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      var property = props[ prop ];\n      \n      if ( anim8.isFunction( property.preset ) )\n      {\n        props[ prop ].preset( this.subject, flash );\n      }\n    }\n    \n    for (var prop in props)\n    {\n      props[ prop ].set( this.subject, flash );\n    }\n    \n    for (var prop in styles)\n    {\n      this.subject.style[ prop ] = styles[ prop ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute and the value is the desired unit.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var props = {};\n    var animating = {};\n    var units = {};\n    var out = {};\n    \n    for (var attr in attributes)\n    {    \n      var attribute = this.getAttribute( attr );\n      \n      animating[ attr ] = false;    \n      units[ attr ] = attributes[ attr ] || attribute.defaultUnit;\n      props[ attribute.propertyName ] = attribute.property;\n      out[ attr ] = attribute.cloneDefault();\n    }\n    \n    var flash = \n    {    \n      units: units,\n      \n      frame: out,\n      \n      animating: animating,\n      \n      unit: function(attr)\n      {\n        return units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      props[ prop ].get( this.subject, flash );\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute, desiredUnit, relativeTo)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame && anim8.isNumber( animator.frame[ attribute ] ) )\n      {\n        return anim8.dom.convert( animator.e, animator.value( attribute ), desiredUnit, relativeTo );\n      }\n      \n      request[ attribute ] = desiredUnit;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return animator.getAttribute( attribute ).defaultValue;\n    };\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ] + this.units[ attr ];\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   * if the attribute doesn't exist a secondary one is looked up. If that value\n   * is an object and contains the given subproperty the value is resolved once again.\n   *\n   * @param {string} attr\n   * @param {string} other\n   * @param [string] subproperty\n   */\n  valueOr: function(attr, other, subproperty)\n  {\n    var value = this.frame[ attr ];\n      \n    if ( !anim8.isDefined( value ) )\n    {\n      value = this.frame[ attr = other ];\n      \n      if ( anim8.isDefined( subproperty ) )\n      {\n        value = value[ subproperty ];\n      }\n    }\n    \n    return value + this.units[ attr ];\n  }\n\n});\n","/**\n * Animate.css animations in anim8js.\n *\n * http://daneden.github.io/animate.css/\n */\n\nanim8.save('bounce', {\n\tkeyframe: {\n    '0,20,53,80,100': {\n      translate3d: 0,\n      easing: [0.215, 0.610, 0.355, 1.000]\n    },\n    '40,43': {\n      translate3d: {y:-30},\n      easing: [0.755, 0.050, 0.855, 0.060]\n    },\n    '70': {\n      translate3d: {y:-15},\n      easing: [0.755, 0.050, 0.855, 0.060]\n    },\n    '90': {\n      translate3d: {y:-4}\n    }\n\t}\n});\n\nanim8.save('rubberBand', {\n\tkeyframe: {\n    '0,100': {\n      scale3d: 1\n    },\n    '30': {\n      scale3d: {x:1.25, y:0.75}\n    },\n    '40': {\n      scale3d: {x:0.75, y:1.25}\n    },\n    '50': {\n      scale3d: {x:1.15, y:0.85}\n    },\n    '65': {\n      scale3d: {x:0.95, y:1.05}\n    },\n    '75': {\n      scale3d: {x:1.05, y:0.95}\n    }\n\t},\n  scaleBases: {\n    scale3d: 1\n  }\n});\n\nanim8.save('flash', {\n  keyframe: {\n    '0,50,100': {\n      opacity: 1\n    },\n    '25,75': {\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('pulse', {\n  keyframe: {\n    '0': {\n      scale3d: 1\n    },\n    '50': {\n      scale3d: 1.05\n    },\n    '100': {\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1\n  }\n});\n\nanim8.save('shake', {\n  keyframe: {\n    '0,100': {\n      translateX: 0.0\n    },\n    '10,30,50,70,90': {\n      translateX: -10.0\n    },\n    '20,40,60,80': {\n      translateX: 10.0\n    } \n  }\n});\n\nanim8.save('swing', {\n  keyframe: {\n    '0': {\n      rotate: 0\n    },\n    '20': {\n      rotate: 15\n    },\n    '40': {\n      rotate: -10\n    },\n    '60': {\n      rotate: 5\n    },\n    '80': {\n      rotate: -5\n    },\n    '100': {\n      rotate: 0\n    }\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'center top'\n  }\n});\n\nanim8.save('tada', {\n  keyframe: {\n    '0,100': {\n      scale3d: 1,\n      rotate: 0\n    },\n    '10,20': {\n      scale3d: 0.9,\n      rotate: -3\n    },\n    '30,50,70,90': {\n      scale3d: 1.1,\n      rotate: 3\n    },\n    '40,60,80': {\n      scale3d: 1.1,\n      rotate: -3\n    }\n  },\n  scaleBases: {\n    scale3d: 1\n  }\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('wobble', {\n  keyframe: {\n    '0,100': {\n      translateX: 0,\n      rotate: 0\n    },\n    '15': {\n      translateX: -25,\n      rotate: -5\n    },\n    '30': {\n      translateX: 20,\n      rotate: 3\n    },\n    '45': {\n      translateX: -15,\n      rotate: -3\n    },\n    '60': {\n      translateX: 10,\n      rotate: 2\n    },\n    '75': {\n      translateX: -5,\n      rotate: -1\n    }\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('bounceIn', {\n  keyframe: {\n    '0': {\n      opacity: 0.0,\n      scale3d: 0.3\n    },\n    '20': {\n      scale3d: 1.1\n    },\n    '40': {\n      scale3d: 0.9\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 1.03\n    },\n    '80': {\n      scale3d: 0.97\n    },\n    '100': {\n      opacity: 1.0,\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n}, {\n  easing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceInDown', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: -3000\n    },\n    '60': {\n      opacity: 1,\n      translateY: 25\n    },\n    '75': {\n      translateY: -10\n    },\n    '90': {\n      translateY: 5\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 2000,\n  easing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceInLeft', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -3000\n    },\n    '60': {\n      opacity: 1,\n      translateX: 25\n    },\n    '75': {\n      translateX: -10\n    },\n    '90': {\n      translateX: 5\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 2000,\n  teasing: [0.215, 0.610, 0.355, 1.000]\n});\n\n\nanim8.save('bounceInRight', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: 3000\n    },\n    '60': {\n      opacity: 1,\n      translateX: -25\n    },\n    '75': {\n      translateX: 10\n    },\n    '90': {\n      translateX: -5\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 2000,\n  teasing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceInUp', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: 3000\n    },\n    '60': {\n      opacity: 1,\n      translateY: -25\n    },\n    '75': {\n      translateY: 10\n    },\n    '90': {\n      translateY: -5\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 1000,\n  teasing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceOut', {\n  keyframe: {\n    '0': {\n      scale3d: 1\n    },\n    '20': {\n      scale3d: 0.9\n    },\n    '50,55': {\n      opacity: 1,\n      scale3d: 1.1\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.3\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n}, {\n  duration: 750\n});\n\nanim8.save('bounceOutDown', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '20': {\n      translateY: 10\n    },\n    '40,45': {\n      opacity: 1,\n      translateY: -20\n    },\n    '100': {\n      opacity: 0,\n      translateY: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('bounceOutLeft', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '20': {\n      opacity: 1,\n      translateX: 20\n    },\n    '100': {\n      opacity: 0,\n      translateX: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('bounceOutRight', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '20': {\n      opacity: 1,\n      translateX: -20\n    },\n    '100': {\n      opacity: 0,\n      translateX: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('bounceOutUp', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '20': {\n      translateY: -10\n    },\n    '40,45': {\n      opacity: 1,\n      translateY: 20\n    },\n    '100': {\n      opacity: 0,\n      translateY: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeIn', {\n  keyframe: {\n    '0': {\n      opacity: 0\n    },\n    '100': {\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInDown', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: -100\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeInDownBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: -2000\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInLeft', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -100\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeInLeftBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -2000\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInRight', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: 100\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeInRightBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: 2000\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInUp', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: 100\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }, \n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeInUpBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: 2000\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOut', {\n  keyframe: {\n    '0': {\n      opacity: 1\n    },\n    '100': {\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutDown', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: 100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeOutDownBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutLeft', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: -100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeOutLeftBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutRight', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: 100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeOutRightBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutUp', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: -100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeOutUpBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('flip', {\n  keyframe: {\n    '0': {\n      translateZ: 0,\n      rotate3d: {x:0, y:1, z:0, angle:-360},\n      scale3d: 1,\n      easing: 'cssEaseOut'\n    },\n    '40': {\n      translateZ: 150,\n      rotate3d: {x:0, y:1, z:0, angle:-190},\n      easing: 'cssEaseOut'\n    },\n    '50': {\n      translateZ: 150,\n      rotate3d: {x:0, y:1, z:0, angle:-170},\n      easing: 'cssEaseIn'\n    },\n    '80': {\n      translateZ: 0,\n      rotate3d: {x:0, y:1, z:0, angle:0},\n      scale3d: 0.95,\n      easing: 'cssEaseIn'\n    },\n    '100': {\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n});\n\nanim8.save('flipInX', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      rotate3d: {x:1, y:0, z:0, angle:90},\n      easing: 'cssEaseIn'\n    },\n    '40': {\n      rotate3d: {x:1, y:0, z:0, angle:-20},\n      easing: 'cssEaseIn'\n    },\n    '60': {\n      opacity: 1,\n      rotate3d: {x:1, y:0, z:0, angle:10}\n    },\n    '80': {\n      rotate3d: {x:1, y:0, z:0, angle:-5}\n    },\n    '100': {\n      rotate3d: {x:1, y:0, z:0, angle:0}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n});\n\nanim8.save('flipInY', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      rotate3d: {x:0, y:1, z:0, angle:90},\n      easing: 'cssEaseIn'\n    },\n    '40': {\n      rotate3d: {x:0, y:1, z:0, angle:-20},\n      easing: 'cssEaseIn'\n    },\n    '60': {\n      opacity: 1,\n      rotate3d: {x:0, y:1, z:0, angle:10}\n    },\n    '80': {\n      rotate3d: {x:0, y:1, z:0, angle:-5}\n    },\n    '100': {\n      rotate3d: {x:0, y:1, z:0, angle:0}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n});\n\nanim8.save('flipOutX', {\n  keyframe: {\n    '0': {\n      rotate3d: {x:1, y:0, z:0, angle:0}\n    },\n    '30': {\n      opacity: 1,\n      rotate3d: {x:1, y:0, z:0, angle:-20}\n    },\n    '100': {\n      opacity: 0,\n      rotate3d: {x:1, y:0, z:0, angle:90}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n}, {\n  duration: 750\n});\n\nanim8.save('flipOutY', {\n  keyframe: {\n    '0': {\n      rotate3d: {x:0, y:1, z:0, angle:0}\n    },\n    '30': {\n      opacity: 1,\n      rotate3d: {x:0, y:1, z:0, angle:-20}\n    },\n    '100': {\n      opacity: 0,\n      rotate3d: {x:0, y:1, z:0, angle:90}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n}, {\n  duration: 750\n});\n\nanim8.save('lightSpeedIn', {\n  keyframe: {\n    '0': {\n      translateX: 100,\n      skewX: -30,\n      opacity: 0\n    },\n    '60': {\n      skewX: 20,\n      opacity: 1\n    },\n    '80': {\n      skewX: -5\n    },\n    '100': {\n      translateX: 0,\n      skewX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n}, {\n  easing: 'cssEaseOut'\n});\n\nanim8.save('lightSpeedOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0,\n      skewX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: 100,\n      skewX: 30\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n}, {\n  easing: 'cssEaseIn'\n});\n\nanim8.save('rotateIn', {\n  keyframe: {\n    '0': {\n      rotate: -200,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'center'\n  }\n});\n\nanim8.save('rotateInDownLeft', {\n  keyframe: {\n    '0': {\n      rotate: -45,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n});\n\nanim8.save('rotateInDownRight', {\n  keyframe: {\n    '0': {\n      rotate: 45,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('rotateInUpLeft', {\n  keyframe: {\n    '0': {\n      rotate: 45,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n});\n\nanim8.save('rotateInUpRight', {\n  keyframe: {\n    '0': {\n      rotate: -90,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('rotateOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: 200\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'center'\n  }\n});\n\nanim8.save('rotateOutDownLeft', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: 45\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n})\n\nanim8.save('rotateOutDownRight', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: -45\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('rotateOutUpLeft', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: -45\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n});\n\nanim8.save('rotateOutUpRight', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: 90\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('hinge', {\n  keyframe: {\n    '0': {\n      rotate: 0\n    },\n    '20,60': {\n      rotate: 80\n    },\n    '40': {\n      rotate: 60\n    },\n    '80': {\n      rotate: 60,\n      translateY: 0,\n      opacity: 1\n    },\n    '100': {\n      rotate: 0,\n      translateY: 700,\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'top left'\n  }\n}, {\n  easing: 'cssEaseInOut',\n  duration: 2000\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('rollIn', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -100,\n      rotate: -120\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0,\n      rotate: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('rollOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0.0,\n      translateX: 100,\n      rotate: 120\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('zoomIn', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.3\n    },\n    '50': {\n      opacity: 1\n    },\n    '100': {\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInDown', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: -1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: 60,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInLeft', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: -1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: 10,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInRight', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: 1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: -10,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInUp', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: 1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: -10,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      scale3d: 1\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.3\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n}, {\n  duration: '500ms'\n});\n\nanim8.save('zoomOutDown', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateY: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: -60,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: 2000,\n      origin: 'center bottom'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('zoomOutLeft', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateX: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: 42,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: -2000,\n      origin: 'left center'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('zoomOutRight', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateX: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: -42,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: 2000,\n      origin: 'right center'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('zoomOutUp', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateY: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: 60,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: -2000,\n      origin: 'center bottom'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('slideInDown', {\n  keyframe: {\n    '0': {\n      translateY: -100\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('slideInLeft', {\n  keyframe: {\n    '0': {\n      translateX: -100\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('slideInRight', {\n  keyframe: {\n    '0': {\n      translateX: 100\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('slideInUp', {\n  keyframe: {\n    '0': {\n      translateY: 100\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('slideOutDown', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '100': {\n      translateY: 100\n    }\n  },\n  units: {\n    translateY: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\nanim8.save('slideOutLeft', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '100': {\n      translateX: -100\n    }\n  },\n  units: {\n    translateX: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\nanim8.save('slideOutRight', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '100': {\n      translateX: 100\n    }\n  },\n  units: {\n    translateX: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\nanim8.save('slideOutUp', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '100': {\n      translateY: -100\n    }\n  },\n  units: {\n    translateY: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\n/* anim8js animations */\n\nanim8.save('blurOut', {\n  keyframe: {\n    '0': {\n      blur: 0,\n      opacity: 1\n    },\n    '50': {\n      blur: 4,\n      opacity: 0.9\n    },\n    '100': {\n      blur: 5,\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('blurIn', {\n  keyframe: {\n    '0': {\n      blur: 5,\n      opacity: 0\n    },\n    '50': {\n      blur: 4,\n      opacity: 0.9\n    },\n    '100': {\n      blur: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('rotateLeft', {\n  move: {\n    rotate: -90\n  }\n});\n\nanim8.save('rotateRight', {\n  move: {\n    rotate: 90\n  }\n});\n\nanim8.save('rotateLeftFull', {\n  move: {\n    rotate: -360\n  }\n});\n\nanim8.save('rotateRightFull', {\n  move: {\n    rotate: 360\n  }\n});\n\nanim8.save('wiggle', {\n  keyframe: {\n    '0.00,100.00': {\n      rotate: 0 \n    },\n    '12.50': {\n      rotate: -45\n    },\n    '37.50': {\n      rotate: 45\n    },\n    '58.33': {\n      rotate: -30\n    },\n    '75.00': {\n      rotate: 30\n    },\n    '87.50': {\n      rotate: -15\n    },\n    '95.83': {\n      rotate: 15\n    }\n  },\n  initial: {\n    origin: 'center'\n  }\n});\n\n/**\n * Generate animations for all permutations of the following concepts:\n *\n * (slide|fade|zoom)(Out|In)(Down|Up)(Right|Left)(|x2|Big)\n */\n(function() \n{\n  var actions = {\n    'slide': {},\n    'fade': {opacity:{from:0,to:1}},\n    'zoom': {scale3d:{from:0,to:1}}\n  };\n  \n  var directions = {\n    'Out':  {from:0, to:1},\n    'In':   {from:1, to:0}\n  };\n  \n  var vertical = {\n    'Down': 1,\n    'Up': -1\n  };\n  \n  var horizontal = {\n    'Right': 1,\n    'Left': -1\n  };\n  \n  var sizes = {\n    '':     {value: 100, unit: '%'},\n    'x2':   {value: 200, unit: '%'},\n    'Big':  {value: 2000, unit: 'px'}\n  };\n  \n  for ( var a in actions )\n  {\n    var attrs = actions[ a ];\n    \n    for ( var d in directions )\n    {\n      var dir = directions[ d ];\n      \n      for ( var v in vertical )\n      {\n        var ver = vertical[ v ];\n        \n        for ( var h in horizontal )\n        {\n          var hor = horizontal[ h ];\n          \n          for ( var s in sizes )\n          {\n            var siz = sizes[ s ];\n            \n            var animName = a + d + v + h + s;\n            \n            if ( animName in anim8.animation )\n            {\n              continue;\n            }\n            \n            var anim = \n            {\n              keyframe: {\n                from: {\n                  translateX: hor * dir.from * siz.value,\n                  translateY: ver * dir.from * siz.value\n                },\n                to: {\n                  translateX: hor * dir.to * siz.value,\n                  translateY: ver * dir.to * siz.value\n                }\n              },\n              units: {\n                translateX: siz.unit,\n                translateY: siz.unit\n              }\n            };\n            \n            for (var attr in attrs)\n            {\n              var attribute = attrs[attr];\n              \n              anim.keyframe.from[ attr ] = dir.to * attribute.to + dir.to * attribute.from;\n              anim.keyframe.to[ attr ]   = dir.from * attribute.from + dir.from * attribute.to;\n            }\n            \n            anim8.save( animName, anim );\n          }\n        }\n      }\n    }\n  }\n  \n})();","/**\n * Adds useful anim8js functions to jQuery.\n * \n * @param  {jQuery}\n * @param  {anim8}\n * @param  {anim8s}\n * @return {function}\n */\n(function($, m8, m8s)\n{\n\n  /**\n   * Extend the clone function to remove the attribute which stores the animator ID so clones get new animators.\n   * \n   * @return {jQuery}\n   */\n  var cloner = $.fn.clone;\n  \n  $.fn.clone = function()\n  {\n    this.removeAttr( anim8.factory.dom.attribute );\n\n    return cloner.apply( this, arguments );\n  };\n\n  /**\n   * Adds the m8, anim8, and animator functions to jQuery. An instance of anim8.Animator will be returned.\n   * \n   * @return {anim8.Animator}\n   */\n  $.fn.m8 = $.fn.anim8 = $.fn.animator = function()\n  {\n    return m8( this[0] );\n  };\n\n  /**\n   * Adds the m8s, anim8s, animators functions to jQuery. An instance of anim8.Animators will be returned.\n   * \n   * @return {anim8.Animators}\n   */\n  $.fn.m8s = $.fn.anim8s = $.fn.animators = function()\n  {\n    return m8s( this.get() );\n  };\n  \n  /**\n   * Plays the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  [boolean] all\n   * @param  [boolean] cache\n   * @return {this}\n   * @see anim8.Animator.play\n   */\n  $.fn.dataPlay = function( animationAttribute, all, cache )\n  {\n    var options = {};\n\n\t\treturn this.filter(function()\n\t  {\n\t\t\tvar animationText = $(this).data( animationAttribute );\n\t\t\n\t\t\tif ( animationText )\n\t\t\t{\n        var animation = anim8.animation( animationText, options, cache );\n\n        if ( animation !== false )\n        {\n          m8( this ).play( animation ); \n\n          return true;\n        }\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n  \t});\n  };\n  \n  /**\n   * Queues the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  [boolean] cache\n   * @return {this}\n   * @see anim8.Animator.queue\n   */\n  $.fn.dataQueue = function( animationAttribute, cache )\n  {\t\n    var options = {};\n\n  \treturn this.filter(function()\n    {\n  \t\tvar animationText = $(this).data( animationAttribute );\n\t\t\n  \t\tif ( animationText )\n  \t\t{\n        var animation = anim8.animation( animationText, options, cache );\n\n        if ( animation !== false )\n        {\n          m8( this ).queue( animation );\n\n          return true;\n        }\n  \t\t}\n\t\t\t\n\t\t\treturn false;\n    });\n  };\n\n  /**\n   * Transitions into the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  {number} transitionTime\n   * @param  {number} transitionDelta\n   * @param  {string|function} transitionEasing\n   * @param  {boolean} cache\n   * @return {this}\n   */\n  $.fn.dataTransition = function( animationAttribute, transitionTime, transitionDelta, transitionEasing, cache )\n  { \n    var options = {};\n\n    return this.filter(function()\n    {\n      var animationText = $(this).data( animationAttribute );\n    \n      if ( animationText )\n      {\n        var animation = anim8.animation( animationText, options, cache );\n \n        if ( animation !== false )\n        {\n          m8( this ).transition( transitionTime, transitionDelta, transitionEasing, animation );\n          \n          return true;\n        }\n      }\n      \n      return false;\n    });\n  };\n\n  /**\n   * Transitions into the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  {number} transitionTime\n   * @param  {number} transitionFromDelta\n   * @param  {number} transitionIntoDelta\n   * @param  {string|function} transitionEasing\n   * @param  {boolean} cache\n   * @return {this}\n   */\n  $.fn.dataTransitionInto = function( animationAttribute, transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, cache )\n  { \n    var options = {};\n\n    return this.filter(function()\n    {\n      var animationText = $(this).data( animationAttribute );\n    \n      if ( animationText )\n      {\n        var animation = anim8.animation( animationText, options, cache );\n \n        if ( animation !== false )\n        {\n          m8( this ).transitionInto( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation );\n          \n          return true;\n        }\n      }\n      \n      return false;\n    });\n  };\n\n  /**\n   * Wraps every character with a span and the class sequenced and returns a jquery\n   * element containing all wrapped characters.\n   * \n   * @return {jQuery}\n   */\n  $.fn.sequence = function()\n  {\n    this.each(function()\n    {\n      $(this).html( $(this).wrapCharacters('div', 'class=\"sequenced\"') );\n    });\n\n    return this.find('.sequenced');\n  };\n\n  /**\n   * Wraps every character in ever element in the jQuery object with a tag.\n   * If an element already only has one character it remains untouched.\n   * \n   * @param  {string} tagName\n   * @param  {string} attributes\n   * @return {string} attributes\n   */\n  $.fn.wrapCharacters = function(tagName, attributes)\n  {\n    var tagBegin = '<' + tagName + (typeof attributes === 'string' ? ' ' + attributes : '') + '>';\n    var tagEnd = '</' + tagName + '>';\n    var html = '';\n\n    $(this).contents().each(function()\n    {\n      // Is this a text node?\n      if (this.nodeType === 3)\n      {\n        // Break up node wrapping each character\n        var text = this.wholeText;\n\n        if (text.length > 1)\n        {\n          // Collapse whitespaces\n          var previousSpace = false;\n          for (var i = 0; i < text.length; i++)\n          {\n            var space = text[i] <= ' ';\n            if (!space || !previousSpace)\n            {\n              html += tagBegin + text[i] + tagEnd;\n            }\n            previousSpace = space;\n          }\n        }\n        else\n        {\n          html += text;\n        }\n      }\n      else\n      {\n        // Not a text node!\n        var outer = this.outerHTML;\n        // If there are children, we need to recursively break them down\n        if (this.firstChild)\n        {\n          // Grab the element tag and attributes manually.\n          var start = 0;\n          var quotes = false;\n          while (start < outer.length)\n          {\n            var c = outer[start++];\n            if (c === '\"' || c === \"'\")\n            {\n              quotes = !quotes;\n            }\n            else if (c === '\\\\')\n            {\n              start++;\n            }\n            else if (c === '>' && !quotes)\n            {\n              break;\n            }\n          }\n          html += outer.substring(0, start) + $(this).wrapCharacters(tagName) + '</' + this.tagName.toLowerCase() + '>';\n        }\n        // No child nodes, just append outer HTML.\n        else\n        {\n          html += outer;\n        }\n      }\n    });\n\n    return html;\n  };\n  \n})(jQuery, anim8, anim8s);\n"],"sourceRoot":"/source/"}