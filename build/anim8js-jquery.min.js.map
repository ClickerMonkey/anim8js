{"version":3,"sources":["anim8js-core.js","anim8js-fast-map.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-point.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-event.js","anim8js-event-instance.js","anim8js-animation.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tween.js","anim8js-parser-move.js","anim8js-factory.js","anim8js-object.js","anim8js-dom-core.js","anim8js-dom-property.js","anim8js-dom-attribute.js","anim8js-dom-animator.js","anim8js-animate.css.js","anim8js-jquery.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","defaults","duration","easing","teasing","delay","sleep","repeat","scale","transitionTime","transitionDelta","transitionIntoDelta","transitionEasing","cache","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","log","size","prop","isEmpty","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","constant","variable","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","FastMap","values","keys","indices","prototype","put","key","value","putMap","map","get","remove","index","lastValue","pop","lastKey","indexOf","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","pair","e","t","easingType","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","pong","yoyo","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attr","attribute","getAttribute","frame","calculator","clone","cloneDefault","relative","relativeAmount","isComputed","relativeFunction","calc","add","Calculator","create","adds","amount","sub","mul","interpolate","start","end","delta","zero","distance","distanceSq","isValid","isZero","isEqual","isRelative","getRelativeAmount","z","NumberCalculator","defaultValue","amountScale","ab","epsilon","Point2dCalculator","y","cx","cy","rx","ry","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Point3dCalculator","cz","rz","dz","QuaternionCalculator","angle","ra","da","RGBCalculator","rr","rg","rb","dr","dg","db","RGBACalculator","path","Path","spring","type","reset","name","points","hasComputed","compute","ps","reference","trues","last","first","point","replaceComputed","resolvePoint","Tween","tween","CubicPath","p0","p1","p2","p3","d1","d2","d3","i1","i3","QuadraticPath","quadratic","DeltaPath","deltas","ds","d0","pd","JumpPath","jump","CompiledPath","pointCount","compiled","KeyframePath","easings","ea","keyframe","defaultEasing","PointPath","Spring","rest","position","gravity","velocity","preupdate","parseValue","update","dt","MAX_DT","starting","updateVelocity","updated","EPSILON","resolveRest","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","temp","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","scaleBase","hasInitialState","parser","newInstance","EventInstance","isInstance","getParser","totalTime","isInfinite","timeRemaining","queue","state","pauseTime","pauseState","elapsed","cycle","catchup","isAnimating","finish","progress","applyValue","isPaused","isDelayed","isSleeping","cycleCount","maxCycles","computeValue","baseValue","newState","getDelta","getPoint","getFuture","fdelta","getStart","getEnd","pause","resume","hasStarted","isFinished","hasStates","states","stateText","animation","options","Animation","animationStrings","anim","parsedAnimation","parsedOptions","parserName","save","part","charAt","substring","isSaved","newEvents","instances","cloneEvents","merge","force","fn","eventsAdded","eventsComputed","springs","springsAdded","finished","active","cycleCurrent","cycleNext","newCycle","applyCurrentCycle","restore","ce","setDefault","sa","wasFinished","placeSpring","placeEvent","trimEvents","activate","deactivate","destroy","createEvents","onAnimation","eventMap","queueEvents","maxRemaining","existing","unspring","attributes","springsFor","play","all","playEvents","attrs","transition","transitionEvents","e1","e2","transitionPath","transitionEvent","transitionInto","transitionFromDelta","transitionIntoEvents","tweenTo","target","tweenManyTo","targets","starts","ends","tweenMany","applyInitialState","eventCount","eventsFor","remaining","ref","request","follow","objectsFor","objects","resulting","stop","set","unset","hasEvents","hasSprings","getSubject","wrapper","invoke","func","DeferAnimator","fill","each","iterator","filter","filterer","alive","getSubjects","reverse","mid","e0","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","Parser","newOptions","oldOptions","durations","delays","sleeps","repeats","scales","scaleBases","ParserDeltas","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","sort","from","half","to","times","maxTime","order","pathEasings","ParserTween","ParserMove","move","highestPriorityFactory","factoryName","is","priority","Factory","ObjectFactory","$animator","calculatorName","dom","DomFactory","cached","ids","elementAttribute","animatorId","DomAnimator","setAttribute","propertyName","defaultUnit","style","hyphenated","hyphenize","str","replace","currentStyle","document","defaultView","getComputedStyle","getPropertyValue","prefix","createElement","prefixes","convert","toPixels","baseUnit","defaultRate","body","div","appendChild","width","pixels","offsetWidth","removeChild","getFontSize","notUnit","fontSize","getConverterScale","px","relativeTo","variables","parentWidth","parentNode","scrollWidth","parentHeight","scrollHeight","height","offsetHeight","parentFontSize","htmlFontSize","htmlElement","getElementsByTagName","pt","cm","mm","vw","deg","rad","PI","em","rem","given","converter","toUnit","fromUnit","converter1","converter2","nm","converted","units","styles","factoryDerivable","deriver","factoryColor","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","outlineWidth","textIndent","borderSpacing","lineHeight","zIndex","backgroundColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor","minWidth","maxWidth","minHeight","maxHeight","offsetTop","offsetLeft","visibility","backface","css","transformOrigin","keywords","setOriginAttribute","setOrigin","origin","originZ","valueOr","transform","translate","translate3d","scale3d","d4","rotate3d","translateX","translateY","translateZ","scaleX","scaleY","scaleZ","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY","desiredUnit","transforms","join","opacity","grayscale","sepia","saturate","hueRotate","invert","brightness","contrast","blur","patterns","RegExp","filters","ccx","ccy","centerX","centerY","preset","rw","rh","orbit","DEGREE_TO_RADIAN","RADIAN_TO_DEGREE","ox","oy","orbitOffset","cunit","cox","coy","atan2","orbitX","orbitY","originUnit","originX","originY","outlineOffset","saturation","properties","propertiesPreset","attributeToProperty","styled","stylesUpdated","getStyles","applyProperties","placeProperty","props","flash","other","subproperty","0,20,53,80,100","40,43","70","90","0,100","30","40","50","65","75","0,50,100","25,75","0","100","10,30,50,70,90","20,40,60,80","20","60","80","10,20","30,50,70,90","40,60,80","15","45","50,55","40,45","final","20,60","0.00,100.00","12.50","37.50","58.33","75.00","87.50","95.83","actions","slide","fade","zoom","directions","Out","In","vertical","Down","Up","horizontal","Right","Left","sizes","Big","dir","ver","hor","siz","animName","jQueryFactory","jQuery","jquery","$","cloner","removeAttr","dataPlay","animationAttribute","animationText","data","dataQueue","dataTransition","dataTransitionInto","html","wrapCharacters","find","tagName","tagBegin","tagEnd","contents","text","wholeText","previousSpace","space","outer","outerHTML","firstChild","quotes"],"mappings":"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","file":"anim8js-jquery.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {array} subject\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   * \n   * @type {number}\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @type {string|function}\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @type {string|function}\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @type {number}\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @type {number}\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @type {number}\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @type {number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @type {number}\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition delta.\n   * \n   * @type {number}\n   */\n  transitionDelta: 0.2,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {number}\n   */\n  transitionIntoDelta: 0.2,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {string|function}\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * @type {boolean}\n   */\n  cache: false\n\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * If the user is interested in seeing warnings they can override this by specifying\n * a function which accepts a text argument providing a generc message, a second argument\n * which has the input that caused the warning, and a third agument with the object\n * throwing the warning. Most warnings that are thrown occur when an animation is\n * trying to be parsed an the user provided an invalid animation, time, easing, etc.\n *\n * @param {string} message\n * @param {any} source\n */\nanim8.log = false;\n\n/**\n * Returns the size of the variable. The size of a variable is dependent on the variable\n * type. For arrays and strings their length is returned. If it's an object the number of\n * enumerable properties is returned. If it's a number, the number is returned. Otherwise\n * zero is returned.\n *\n * @param {any} x\n */\n anim8.size = function(x)\n {\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length;\n  }\n  else if ( x === null )\n  {\n    return 0;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var size = 0;\n\n    for (var prop in x)\n    {\n      size++;\n    }\n\n    return size;\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n};\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding overriding any existing properties.\n * \n * @param  {object} out\n * @return {object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding existing properties where necessary.\n * \n * @param  {object}\n * @return {object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses scale from a string or number.\n * \n * @param  {string|number}\n * @return {number}\n */\nanim8.scale = function(scale, returnOnInvalid)\n{\n  if ( anim8.isNumber( scale ) )\n  {\n    return scale;\n  }\n\n  return anim8.coalesce( returnOnInvalid, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n * \n * @param  {number} v\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n      \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t        eventListeners.length = 0;\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an array.\n * This is especially beneficial when most of the time the contents of the structure need to be iterated.\n */\nanim8.FastMap = function()\n{\n  this.values = [];\n  this.keys = [];\n  this.indices = {};\n};\n\nanim8.FastMap.prototype =\n{\n  /**\n   * Puts the value in the map by the given key.\n   * \n   * @param  {string} key\n   * @param  {any} value\n   * @return {this}\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   * \n   * @param  {anim8.FastMap}\n   * @return {this}\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   * \n   * @param  {string} key\n   * @return {any}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   * \n   * @param  {string} key\n   * @return {this}\n   */\n  remove: function(key)\n  {\n    if ( key in this.indices )\n    {\n      var index = this.indices[ key ];\n      var lastValue = this.values.pop();\n      var lastKey = this.keys.pop();\n\n      if ( index < this.values.length )\n      {\n        this.values[ index ] = lastValue;\n        this.keys[ index ] = lastKey;\n        this.indices[ lastKey ] = index;\n      }\n\n      delete this.indices[ key ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   * \n   * @param  {string} key\n   * @return {number}\n   */\n  indexOf: function(key)\n  {\n    return this.indices[ key ];\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   * \n   * @return {number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  }\n\n};","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n    \n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * [bezier description]\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\n/**\n * [default description]\n * @type {[type]}\n */\nanim8.easing.default      = anim8.easing.ease;\n","\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) {\n\t\treturn easing( x );\n\t};\n};\n\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) {\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } else {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\nanim8.easingType.pong = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x );\n\t  } else {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n// yoyo is an alias for pong\nanim8.easingType.yoyo = anim8.easingType.pong;\n","\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * [computed description]\n * @type {Object}\n */\nanim8.computed = {};\n\n/**\n * Calculates the current value for an animator.\n * \n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.current = function(event, animator)\n{\n  var attr = event.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currenrtly in the animator.\n * \n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.relative = function(relativeAmount)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( anim8.isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(event, animator)\n  { \n    var attr = event.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      return calc.add( calc.clone( animator.frame[ attr ] ), relativeAmount );\n    }\n    else\n    {\n      return calc.add( attribute.cloneDefault(), relativeAmount );\n    }\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  return relativeFunction;\n};\n\n/**\n * [isComputed description]\n * @param  {[type]}\n * @return {Boolean}\n */\nanim8.isComputed = function(x)\n{\n  return anim8.isFunction( x ) && x.computed;\n};","/**\n * Calculators perform math and basic operations for a specific data structure.\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Instantiates a new Calculator instance.\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * [copy description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * [clone description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clone: function(out) \n  {\n    return this.copy( this.create(), out );\n  },\n\n  /**\n   * [create description]\n   * @return {[type]}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * [scale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * [add description]\n   * @param {[type]}\n   * @param {[type]}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * [adds description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * [sub description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * [mul description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * [interpolate description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * [distance description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * [distanceSq description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * [isValid description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * [isNaN description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * [isZero description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * [isEqual description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * [isRelative description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * [relativeAmount description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n */\nanim8.NumberCalculator = function()\n{\n\n};\n\nanim8.override( anim8.NumberCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  }\n});\n\n/**\n * Register the calculators.\n */\nanim8.calculator['number']      = new anim8.NumberCalculator();\nanim8.calculator['default']     = anim8.calculator['number'];\n","\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.Point2dCalculator = function()\n{\n\n};\n\nanim8.override( anim8.Point2dCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n\n        if ( this.isRelative( cx ) || this.isRelative( cy ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  }\n});\n\n/**\n * Register all calculators.\n */\nanim8.calculator['2d']          = new anim8.Point2dCalculator();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.Point3dCalculator = function()\n{\n\n};\n\nanim8.override( anim8.Point3dCalculator.prototype = new anim8.Calculator(), \n{\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n\n        if ( this.isRelative( cx ) || this.isRelative( cy ) || this.isRelative( cz ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['3d']          = new anim8.Point3dCalculator();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.QuaternionCalculator = function()\n{\n\n};\n\nanim8.override( anim8.QuaternionCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n\n        if ( this.isRelative( cx ) || this.isRelative( cy ) || this.isRelative( cz ) || this.isRelative( ca ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  }\n});\n\n\n/**\n * Register the calculator.\n */\nanim8.calculator['quaternion']  = new anim8.QuaternionCalculator();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.RGBCalculator = function()\n{\n\n};\n\nanim8.override( anim8.RGBCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n\n        if ( this.isRelative( cr ) || this.isRelative( cg ) || this.isRelative( cb ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n\t\t\n    // Try to parse the color.\n\t\tvar parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgb']         = new anim8.RGBCalculator();\n","\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.RGBACalculator = function()\n{\n\n};\n\nanim8.override( anim8.RGBACalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n\n        if ( this.isRelative( cr ) || this.isRelative( cg ) || this.isRelative( cb ) || this.isRelative( ca ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgba']        = new anim8.RGBACalculator();\n","\n/**\n * [path description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n/**\n * [Path description]\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * [reset description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n\t{\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * [reference description]\n   * @return {[type]}\n   */\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n\n  /**\n   * [last description]\n   * @return {[type]}\n   */\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n\n  /**\n   * [first description]\n   * @return {[type]}\n   */\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n\n  /**\n   * [point description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n\n  /**\n   * [replaceComputed description]\n   * @return {[type]}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * [resolvePoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  }\n\n};\n","\n/**\n * [Tween description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n\n});\n\n/**\n * [tween description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.tween = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  var defaultValue = calc.create();\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, defaultValue ),\n    calc.parse( path.end, defaultValue )\n  );\n};\n","\n/**\n * [CubicPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.CubicPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  }\n\n});\n\n/**\n * [cubic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.cubic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * [QuadraticPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.QuadraticPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  }\n\n});\n\n/**\n * [quadratic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.quadratic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * [DeltaPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.DeltaPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n      return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n\n});\n\n/**\n * [delta description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.delta = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * [JumpPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.JumpPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n  }\n\n});\n\n/**\n * [jump description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.jump = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * [CompiledPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.CompiledPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CompiledPath( this.name, this, this.points.length );\n  }\n\n});\n\n/**\n * [compiled description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.compiled = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * [KeyframePath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.KeyframePath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n\n});\n\n/**\n * [keyframe description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.keyframe = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * [PointPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.override( anim8.PointPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.copy( out, this.resolvePoint( 0 ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n  }\n\n});\n\n/**\n * [point description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.point = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.Spring.prototype = \n{\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  reset: function(attribute, calculator, rest, position, gravity)\n  { \n    this.attribute    = attribute;\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = null;\n    this.time         = 0;\n  },\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  preupdate: function(animator)\n  {\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.create() );\n    this.velocity   = calc.create();\n  },\n\n  /**\n   * [parseValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isFunction( parsed ) )\n    {\n      if ( parsed.computed )\n      {\n        parsed = parsed( this, animator );\n      }\n    }\n\n    return parsed;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} now\n   * @param {object} frame\n   */\n  update: function(now, frame)\n  {\n    if (this.time === 0)\n    {\n      this.time = now;\n    }\n    \n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (now - this.time) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.copy( {}, this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    this.time = now;\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  }\n};\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * [LinearSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.LinearSpring.prototype = new anim8.Spring(), \n{\n  preupdate: function(animator)\n  {\n    anim8.Spring.prototype.preupdate.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring.linear = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\n/**\n * [DistanceSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.DistanceSpring.prototype = new anim8.Spring(), \n{\n  preupdate: function(animator)\n  {\n    anim8.Spring.prototype.preupdate.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring.distance = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\n/**\n * [EventState description]\n * @type {[type]}\n */\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\n/**\n * [Event description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {Boolean}\n * @param {[type]}\n * @param {Function}\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  if ( attribute )\n  {\n    this.attribute        = attribute;\n    this.path             = path;\n    this.easing           = anim8.easing( easing );\n    this.delay            = anim8.delay( delay );\n    this.duration         = anim8.duration( duration );\n    this.sleep            = anim8.sleep( sleep );\n    this.repeat           = anim8.repeat( repeat );\n    this.scale            = anim8.scale( scale );\n    this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.create() );\n    this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n    this.parser           = parser;\n    this.next             = next; \n  }\n};\n\nanim8.Event.prototype = \n{\n  /**\n   * [newInstance description]\n   * @return {[type]}\n   */\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this );\n  },\n\n  /**\n   * [isInstance description]\n   * @return {Boolean}\n   */\n  isInstance: function()\n  {\n    return false\n  },\n\n  /**\n   * [getParser description]\n   * @return {[type]}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * [totalTime description]\n   * @return {[type]}\n   */\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n\n  /**\n   * [isInfinite description]\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n\n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(e)\n  {\n    if ( this.next )\n    {\n      this.next.queue( e );\n    }\n    else\n    {\n      this.next = e;\n    }\n  }\n\n};\n","\n/**\n * [EventInstance description]\n * @param {[type]}\n */\nanim8.EventInstance = function(event)\n{\n\tthis.event \t\t\t      = event;\n\tthis.attribute \t      = event.attribute;\n\tthis.path \t\t\t      = event.path;\n\tthis.duration \t      = event.duration;\n\tthis.easing \t\t      = event.easing;\n\tthis.delay \t\t\t      = event.delay;\n\tthis.sleep \t\t\t      = event.sleep;\n\tthis.repeat \t\t      = event.repeat;\n  this.scale            = event.scale;\n  this.scaleBase        = event.scaleBase;\n  this.hasInitialState  = event.hasInitialState;\n  this.next             = null;\n  this.state \t\t\t      = anim8.EventState.CREATED;\n  this.time \t\t\t      = 0;\n  this.pauseTime \t      = 0;\n  this.pauseState       = 0;\n\tthis.elapsed\t\t      = 0;\n  this.cycle            = 0;\n};\n\nanim8.override( anim8.EventInstance.prototype = new anim8.Event(),\n{\n  /**\n   * [newInstance description]\n   * @return {[type]}\n   */\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this.event );\n  },\n\n  /**\n   * [isInstance description]\n   * @return {Boolean}\n   */\n  isInstance: function()\n  {\n    return true\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.EventInstance( this.event );\n  },\n\n  /**\n   * [getParser description]\n   * @return {[type]}\n   */\n  getParser: function()\n  {\n    return this.event.parser;\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * [update description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(now, frame) \n\t{\n    var updated = false;\n    var elapsed = this.catchup( now );\n    \n    if ( this.isAnimating() ) \n\t\t{\t\t\t\n      var delta = elapsed / this.duration;\n      \n      if (delta >= 1 || this.duration === 0)\n\t\t\t{\n        if (!this.isInfinite() && --this.repeat === 0) \n\t\t\t\t{\n          this.finish(frame);\n\t\t\t\t\t\n          return true;\n        } \n\t\t\t\telse \n\t\t\t\t{\n          if (this.sleep)\n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING ); \n            delta = 1;\n            \n            this.trigger('sleeping', this);\n          } \n\t\t\t\t\telse \n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.ANIMATING );\n            delta -= 1;\n          }\n        }\n      }\n      \n      this.applyValue( frame, frame[this.attribute], delta );\n      updated = true;\n    }\n    \n    return updated;\n  },\n\n  /**\n   * [catchup description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  catchup: function(now)\n  {\n    if ( this.isPaused() )\n    {\n      return;\n    }\n    \n    if ( this.state === anim8.EventState.CREATED )\n    {\n      this.time = now;\n      \n      if ( this.delay )\n      {\n        this.state = anim8.EventState.DELAYED;\n        \n        this.trigger('delaying', this);\n      } \n      else\n      {\n        this.state = anim8.EventState.ANIMATING;\n      }\n    }\n    \n    var elapsed = now - this.time;\n    \n    if ( this.isDelayed() )\n    {\n      if ( elapsed > this.delay ) \n      {\n        this.trigger('delayed', this);\n        \n        elapsed = this.progress( elapsed, this.delay, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isSleeping() )\n    {\n      if ( elapsed > this.sleep )\n      {\n        this.trigger('slept', this);\n        \n        elapsed = this.progress( elapsed, this.sleep, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isAnimating() && this.duration )\n    {\n      var cycle = this.duration + this.sleep;\n      var cycleCount = Math.floor( ( elapsed + this.sleep ) / cycle );\n      var maxCycles = Math.min( this.repeat, cycleCount );\n            \n      elapsed = this.progress( elapsed, maxCycles * cycle, anim8.EventState.ANIMATING );\n      \n      if ( !this.isInfinite() )\n      { \n        if (maxCycles === this.repeat)\n        {\n          elapsed = this.duration;\n          this.repeat = 1;\n        }\n        else\n        {\n          this.repeat -= cycleCount;\n        }\n      }\n      \n      if ( elapsed > this.duration )\n      {\n        elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING );\n        \n        this.trigger('sleeping', this);\n      }\n    }\n    \n    return elapsed;\n  },\n\n  /**\n   * [computeValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * [progress description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  progress: function(elapsed, time, newState) \n  {\n    this.time += time;\n    this.elapsed += time;\n    this.state = newState;\n    \n    return elapsed - time;\n  },\n\n  /**\n   * [finish description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n    \n    this.trigger('finish', this);\n  },\n\n  /**\n   * [applyValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[this.attribute] = value;\n    }\n  },\n\n  /**\n   * [getDelta description]\n   * @return {[type]}\n   */\n  getDelta: function()\n  {\n    return this.isAnimating() ? Math.min( 1.0, (anim8.now() - this.time) / this.duration ) : 0.0;\n  },\n\n  /**\n   * [getPoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getPoint: function(delta)\n  {\n    return this.computeValue( this.path.calculator.create(), delta );\n  },\n\n  /**\n   * [getFuture description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getFuture: function(fdelta)\n  {\n    return this.getPoint( Math.min( 1.0, this.getDelta() + fdelta ) );\n  },\n\n  /**\n   * [getStart description]\n   * @return {[type]}\n   */\n  getStart: function()\n  {\n    return this.getPoint( 0 );\n  },\n\n  /**\n   * [getEnd description]\n   * @return {[type]}\n   */\n  getEnd: function() \n\t{\n    return this.getPoint( 1 );\n  },\n\n  /**\n   * [pause description]\n   * @return {[type]}\n   */\n  pause: function() \n  {\n    if (this.state !== anim8.EventState.PAUSED) \n    {\n      this.pauseTime = anim8.now();\n      this.pauseState = this.state;\n      this.state = anim8.EventState.PAUSED; \n    }\n  },\n\n  /**\n   * [resume description]\n   * @return {[type]}\n   */\n  resume: function() \n  {\n    if (this.state === anim8.EventState.PAUSED) \n    {\n      this.time += anim8.now() - this.pauseTime;\n      this.state = this.pauseState; \n    }\n  },\n\n  /**\n   * [hasStarted description]\n   * @return {Boolean}\n   */\n  hasStarted: function()\n  {\n    return (this.state !== anim8.EventState.CREATED && this.state !== anim8.EventState.DELAYED);\n  },\n\n  /**\n   * [isAnimating description]\n   * @return {Boolean}\n   */\n  isAnimating: function() \n  {\n    return (this.state === anim8.EventState.ANIMATING);\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function() \n  {\n    return (this.state === anim8.EventState.FINISHED);\n  },\n\n  /**\n   * [isDelayed description]\n   * @return {Boolean}\n   */\n  isDelayed: function() \n  {\n    return (this.state === anim8.EventState.DELAYED);\n  },\n\n  /**\n   * [isPaused description]\n   * @return {Boolean}\n   */\n  isPaused: function() \n  {\n    return (this.state === anim8.EventState.PAUSED);\n  },\n\n  /**\n   * [isSleeping description]\n   * @return {Boolean}\n   */\n  isSleeping: function() \n  {\n    return (this.state === anim8.EventState.SLEEPING);\n  },\n\n  /**\n   * [hasStates description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  hasStates: function(states) \n  {\n    return (this.state & states) !== 0;\n  },\n\n  /**\n   * [stateText description]\n   * @return {[type]}\n   */\n  stateText: function() \n  {\n    switch(this.state) \n    {\n      case anim8.EventState.CREATED:            return \"created\";\n      case anim8.EventState.DELAYED:            return \"delayed\";\n      case anim8.EventState.ANIMATING:          return \"animating\";\n      case anim8.EventState.SLEEPING:           return \"sleeping\";\n      case anim8.EventState.FINISHED:           return \"finished\";\n    }\n  }\n\n});\n\n/**\n * Adds the following event methods to EventInstances: on, once, off, trigger.\n */\nanim8.eventize( anim8.EventInstance.prototype );","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n * @param [boolean] cache\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) )\n\t{\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationStrings = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationStrings.length; k++)\n    {\n      var split = animationStrings[ k ].toLowerCase().split(' ');\n      var parsedAnimation = anim8.animation[ split[ 0 ] ];\n      var parsedOptions = anim8.options( split.slice( 1 ) );\n\n      if ( parsedAnimation )\n      {\n        if ( anim === false )\n        {\n          last = anim = parsedAnimation.extend( parsedOptions, true );\n        }\n        else\n        {\n          last = last.next = parsedAnimation.extend( parsedOptions, true );\n        }\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n\t\tvar events = [];\n\t\tvar options = options || {};\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, events );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (events.length)\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, events );\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n *\n * [duration] x[repeat] z[sleep] ~[delay] ![scale] [easing[-easingType]]\n * \n * @param  {object|string} options\n * @return {object}\n */\nanim8.options = function(options)\n{\n  if ( anim8.isString( options ) )\n  {\n    options = options.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( options ) )\n  {\n    var parsed = {};\n\n    for (var i = 0; i < options.length; i++)\n    {\n      var part = options[i];\n      var first = part.charAt( 0 );\n\n      // Repeats\n      if ( first === 'x' )\n      {\n        var repeat = anim8.repeat( part.substring(1), false );\n\n        if ( repeat !== false )\n        {\n          parsed.repeat = repeat;\n        }\n      }\n      // Sleeping\n      if ( first === 'z' )\n      {\n        var sleep = anim8.time( part.substring(1), false );\n\n        if ( sleep !== false )\n        {\n          parsed.sleep = sleep;\n        }\n      }\n      // Delay\n      if ( first === '~' )\n      {\n        var delay = anim8.time( part.substring(1), false );\n\n        if ( delay !== false )\n        {\n          parsed.delay = delay;\n        }\n      }\n      // Scaling\n      if ( first === '!' )\n      {\n        var scale = parseFloat( part.substring(1) );\n\n        if ( !isNaN(scale) )\n        {\n          parsed.scale = scale;\n        }\n      }\n      // Easing?\n      var easing = anim8.easing( part, false );\n\n      if ( easing !== false )\n      {\n        parsed.easing = easing;\n      }\n\n      // Duration?\n      var duration = anim8.time( part, false );\n\n      if ( duration !== false )\n      {\n        parsed.duration = duration;\n      }\n      else\n      {\n        // If not a duration, might be an alternative repeat? (doesn't start with x)\n        var repeat = anim8.repeat( part, false );\n\n        if ( repeat !== false )\n        {\n          parsed.repeat = repeat;\n        }\n      }\n    }\n\n    return parsed; \n  }\n\n  if ( anim8.isObject( options ) )\n  {\n    return options;\n  }\n\n  return {};\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the events that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate events, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} events\n */\nanim8.Animation = function(name, input, options, events)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.events = events;\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an array of event instances from the events in this animation.\n   */\n  newEvents: function()\n  {\n    var instances = [];\n    \n    for (var i = 0; i < this.events.length; i++)\n    {\n      instances.push( this.events[i].newInstance() );\n    }\n    \n    return instances;\n  },\n\n  /**\n   * Generates an array of event clones from the events in this animation.\n   * \n   * @return {array}\n   */\n  cloneEvents: function()\n  {\n    var events = [];\n\n    for (var i = 0; i < this.events.length; i++)\n    {\n      events.push( this.events[i].clone() );\n    }\n\n    return events;\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {object} options\n   * @param  {array} events\n   * @return {[type]}\n   */\n  merge: function(options, events)\n  {\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, events );\n      }\n    }\n\n    return events;\n  },\n\n  /**\n   * Extends this animation and returns an animation modified with the given options. \n   *\n   * @param {object} options\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var events = this.cloneEvents();\n\n    this.merge( options, events );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, events );\n  }\n\n};","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(subject)\n\t{\n\t  this.subject = subject;\n\t  this.events = {};\n    this.eventsAdded = [];\n    this.eventsComputed = [];\n    this.springs = {};\n    this.springsAdded = [];\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    this.cycleCurrent = 0;\n    this.cycleNext = 0;\n    \n    return this;\n\t},\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are placed\n   * to group them together so we know when to apply their initial value.\n   * \n   * @return {this}\n   */\n  newCycle: function()\n  {\n    this.cycleNext++;\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all events & springs with the same cycle\n   * identifier and applying their initial state.\n   * \n   * @return {this}\n   */\n  applyCurrentCycle: function()\n  {\n    /**\n     * Cycle is applied to event before its placed on the animator or queued\n     * When no events/springs exist for the current cycle, increment it and apply it\n     */\n\n    var cycle = this.cycleCurrent;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the attribute descriptor\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  { \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function()\n  {\n    // If there are events placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the even'ts path.\n    var ce = this.eventsComputed;\n    if ( ce.length )\n    {\n      for (var i = 0; i < ce.length; i++)\n      {\n        var e = ce[ i ];\n\n        e.path = e.path.replaceComputed( e, this );        \n      }\n\n      ce.length = 0;\n    }\n    \n    // If there isn't a value in frame for any of the events on the animator,\n    // place the default value.\n    var ea = this.eventsAdded;\n    if ( ea.length )\n    {\n      for (var i = 0; i < ea.length; i++)\n      {\n        this.setDefault( ea[ i].attribute );\n      }\n\n      ea.length = 0;\n    }\n\n    // Call pre update on any new springs.\n    var sa = this.springsAdded;\n    if ( sa.length )\n    {\n      for (var i = 0; i < sa.length; i++)\n      {\n        var s = sa[i];\n\n        this.setDefault( s.attribute );\n\n        s.preupdate( this );\n      }\n\n      sa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this Animator if there's no value there.\n   * \n   * @param {[type]}\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    \n    this.finished = true;\n\t\t\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      this.updated[ attr ] = e.update( now, this.frame );\n      \n      this.finished = this.finished && e.isFinished();\n    }\n    \n    for (var attr in this.springs)\n    {\n      var s = this.springs[ attr ];\n      \n      this.updated[ attr ] = s.update( now, this.frame );\n      \n      this.finished = false;\n    }\n\t\n\t\tthis.trigger('update');\n    \n    return this;\n  },\n  \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function(s)\n  {\n    var attr = s.attribute;\n    \n    this.springs[ attr ] = s;\n    this.springsAdded.push( s );\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function(e)\n  {\n    var attr = e.attribute;\n\n    this.events[ attr ] = e;\n    this.eventsAdded.push( e );\n    \n    if ( e.hasComputed() )\n    {\n       this.eventsComputed.push( e );\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimEvents();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      var e = this.events[attr];\n      \n      if ( e.isFinished() )\n      {\n        if ( e.next )\n        {                    \n          this.placeEvent( e.next );\n          this.finished = false;\n        }\n        else\n        {\n          delete this.events[attr];\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there already.\n   * \n   * @return {[type]}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createEvents: function(animation, options, cache)\n  {\n    var options = anim8.options( options );    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var events = animation.newEvents();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, events );\n    }\n    \n    this.onAnimation( animation, options, events );\n\n    if ( animation.next !== null )\n    {\n      var eventMap = {};\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[i];\n\n        eventMap[ e.attribute ] = e;\n      }\n\n      while ( animation.next !== null )\n      {\n        animation = animation.next;\n\n        var queueEvents = animation.newEvents();\n        var maxRemaining = 0;\n\n        for (var i = 0; i < events.length; i++)\n        {\n          var e = events[i];\n\n          if ( !e.isInfinite() )\n          {\n            maxRemaining = Math.max( maxRemaining, e.timeRemaining() );  \n          }\n        }\n\n        for (var i = 0; i < queueEvents.length; i++)\n        {\n          var e = queueEvents[ i ];\n          var existing = eventMap[ e.attribute ];\n\n          if ( existing && !existing.isInfinite() )\n          {\n            e.delay += (maxRemaining - existing.timeRemaining());\n            eventMap[ e.attribute ].queue( e );\n          }\n          else\n          {\n            e.delay += maxRemaining;\n            eventMap[ e.attribute ] = e;\n            events.push( e );\n          }\n        }\n\n        this.onAnimation( animation, options, queueEvents );\n      }      \n    }\n\n    return events;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeSpring( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Removes springs for the specified attributes. If no attributes are specified then all springs\n   * are removed. Attributes can be specified as an array of attribute names or a string with attribute\n   * names separated by a space.\n   *\n   * @param {string|Array} attributes\n   */\n  unspring: function(attributes)\n  {\n    return this.springsFor( attributes, function(s)\n    {\n      delete this.springs[ s.attribute ];\n    });\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Existing events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   * @param [boolean] cache\n   */\n\tplay: function(animation, options, all, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.playEvents( events, all );\n\n    return this.activate();\n\t},\n\n  /**\n   * Adds events to this Animator to be played (optionally finishing events for attributes not specified in the given \n   * attribute). Existing events will be replaced immediately. This method will not activate the Animator, that has\n   * to be done manually.\n   * \n   * @param  {array} events\n   * @param  [boolean] all\n   * @return {this}\n   */\n  playEvents: function(events, all)\n  {\n    var attrs = {};\n    \n    for (var i = 0; i < events.length; i++)\n    { \n      this.placeEvent( events[i] );\n      \n      attrs[ events[i].attribute ] = true;\n    }\n    \n    if ( all )\n    {\n      for (var attr in this.events)\n      {\n        if ( !(attr in attrs) )\n        {\n          this.events[ attr ].finish( this.frame );\n        }\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n        \n    this.queueEvents( events );\n\n    return this.activate();\n\t},\n\n  /**\n   * Queues an array of events on this Animator. The given events will be delayed to start at the same time - at the\n   * end of the events currently on the Animator. This method will not activate the Animator, that has to be done \n   * manually.\n   * \n   * @param  {array} events\n   * @return {this}\n   */\n  queueEvents: function(events)\n  {\n    var maxRemaining = this.timeRemaining();\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var existing = this.events[ attr ];\n      \n      if ( attr in this.events  && !existing.isInfinite() )\n      {    \n        e.delay += (maxRemaining - existing.timeRemaining());\n        \n        existing.queue( e );\n      }\n      else\n      {\n        e.delay += maxRemaining;\n        \n        this.placeEvent( e );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all, cache)\n  {\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n\n    this.transitionEvents( transitionTime, transitionDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation. This method will not activate the \n   * Animator, that has to be done manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param [array] events\n   * @param [boolean] all\n   */\n  transitionEvents: function(transitionTime, transitionDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n\n    // Parse given variables\n    var transitionTime = anim8.time( transitionTime, anim8.defaults.transitionTime );\n    var transitionDelta = anim8.coalesce( transitionDelta, anim8.defaults.transitionDelta );\n    var transitionEasing = anim8.easing( transitionEasing, anim8.defaults.transitionEasing );\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionDelta );\n          var p2 = e1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, calc, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transitionInto: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation, options, all, cache)\n  {\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.transitionIntoEvents( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation. This method will not activate the Animator, that has to be done \n   * manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {array} events\n   * @param [boolean] all\n   */\n  transitionIntoEvents: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n\n    // Parse given variables\n    var transitionTime = anim8.time( transitionTime, anim8.defaults.transitionTime );\n    var transitionFromDelta = anim8.coalesce( transitionFromDelta, anim8.defaults.transitionDelta );\n    var transitionIntoDelta = anim8.coalesce( transitionIntoDelta, anim8.defaults.transitionIntoDelta );\n    var transitionEasing = anim8.easing( transitionEasing, anim8.defaults.transitionEasing );\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionFromDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transitionIntoDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n      \n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {string} attr\n   * @param {any} target\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenTo: function(attr, target, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attribute to target values.\n   *\n   * @param {object} targets\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenManyTo: function(targets, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {string} attr\n   * @param {any} starts\n   * @param {any} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tween: function(attr, starts, ends, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {object} starts\n   * @param {object} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenMany: function(starts, ends, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n\t\n\t/**\n\t * Applies the initial state of all unstarted current events for the specified attributes immediately. \n\t * Attribute names can be given as an array or a space separated string. If no attributes are given all \n\t * attributes are assumed.\n\t *\n   * @param {string|array} attributes\n\t */\n\tapplyInitialState: function(attributes)\n\t{\n\t\tvar eventCount = this.eventsFor( attributes, function(event, attr)\n\t\t{\n\t\t\tif ( !event.hasStarted() && event.hasInitialState )\n\t\t\t{\n        this.setDefault( attr );\n\n\t\t\t\tevent.applyValue( this.frame, this.frame[ attr ], 0.0 );\n\t\t\t\t\n\t\t\t\tthis.updated[ attr ] = true;\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.apply();\n\t\t\n\t\treturn eventCount;\n\t},\n\n  /**\n   * Returns the amount of time remaining for all finite events in this Animator.\n   * \n   * @return {number} milliseconds\n   */\n  timeRemaining: function()\n  {\n    var remaining = 0;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      if ( !e.isInfinite() )\n      {\n        remaining = Math.max( remaining, e.timeRemaining() );  \n      }\n    }\n\n    return remaining;\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n    \n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n      \n      request[ attr ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n      \n      return attribute.defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number|string] duration\n   * @param [number|string] delay\n   * @param [function|string] easing\n   * @param [number|string] repeat\n   * @param [number|string] sleep  \n   * @param [number] scale\n   */\n  follow: function(attribute, path, options)\n  {\n    var options = anim8.options( options );\n    var path = anim8.path( path );\n    \n    var event = new anim8.Event( \n      attribute, \n      path, \n      options.duration,\n      options.easing,\n      options.delay, \n      options.sleep,\n      options.repeat,\n      options.scale,\n      options.scaleBase\n    );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  objectsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n    \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        \n        if ( attr in objects )\n        {\n          if ( resulting )\n          {\n            results.push( objects[attr] );\n          }\n          else\n          {\n            callback.call( this, objects[attr], attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      for (var attr in objects)\n      {\n        if ( resulting )\n        {\n          results.push( objects[attr] );\n        }\n        else\n        {\n          callback.call( this, objects[attr], attr );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n  \n  /**\n   * Invokes the callback for each event for the given attributes.\n   * \n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\teventsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.events );\n\t},\n  \n  /**\n   * Invokes the callback for each spring for the given attributes.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\tspringsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.springs );\n\t},\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event, attr) \n\t\t{\n\t\t\tdelete this.events[ attr ];\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event) \n\t\t{\n\t\t\twhile (event.next)\n\t\t\t{\n\t\t\t\tevent = event.next;\n\t\t\t}\n\t\t\t\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attribtues. Unsetting involves removing all events,\n   * springs, and the current value in the frame.\n   * \n   * @param  {string|array|object}\n   * @return {this}\n   */\n  unset: function(attributes)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      delete this.events[ attributes ];\n      delete this.springs[ attributes ];\n      delete this.frame[ attribute ];\n    }\n    else if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        this.unset( attributes[ i ] );\n      }\n    }\n    else if ( anim8.isObject( attributes ) )\n    {\n      for (var attr in attributes)\n      {\n        this.unset( attr );\n      }\n    }\n\n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator.\n   */\n  hasSprings: function()\n  {\n    for (var attr in this.springs)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator or animating events.\n   */\n  isAnimating: function()\n  {\n    if ( this.hasSprings() )\n    {\n      return true;\n    }\n    \n    for (var attr in this.events)\n    {\n      if ( this.events[attr].isAnimating() )\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  },\n\n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator if none is given. This is particularly\n   * useful for having a function be called on deferred statements.\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  invoke: function(func, context, arguments)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, arguments || [] );\n    }\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n   * @param [function] callback\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t}\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'play', 'queue', 'transition', 'transitionInto', 'restore', 'set', 'unset', 'resume', 'pause', \n  'finish', 'end', 'stop', 'follow', 'applyInitialState', 'tweenTo', \n  'tween', 'tweenMany', 'tweenManyTo', 'spring', 'unspring', 'apply', \n  'placeSpring', 'placeEvent', 'invoke'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.override( anim8s.fn = anim8.Animators.prototype = new Array(),\n{\n  /**\n   * Invokes a callback for each element in the array.\n   * \n   * @param {function} iterator\n   */\n  each: function(iterator, context) \n  {\n    for (var i = 0; i < this.length; i++) \n    {\n      if ( iterator.call( context || this[i], this[i], i ) === false ) \n      {\n        break;\n      }\n    }\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @param {array} animators\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n   *\n   * @param {function} filterer\n   */\n  filter: function(filterer)\n  {\t\n  \tvar alive = 0;\n  \t\n  \tfor (var i = 0; i < this.length; i++)\n  \t{\n  \t\tvar remove = filterer( this[i] );\n  \t\t\n  \t\tif ( !remove )\n  \t\t{\n  \t\t\tthis[alive++] = this[i];\n  \t\t}\n  \t}\n  \t\n  \tthis.length = alive;\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubjects: function(wrapper)\n  {\n    var subjects = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      subjects.push( this[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   */\n  first: function()\n  {\n    return this[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   */\n   reverse: function()\n   {\n    var last = this.length - 1;\n    var mid = Math.floor( this.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = this[ i ];\n      var e1 = this[ last - i ];\n\n      this[ i ] = e1;\n      this[ last - i ] = e0;\n    }\n\n    return this;\n   },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   * \n   * @return {this}\n   */\n  activate: function()\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var animator = this[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Returns an array of the subjects optionally\n   */\n\n  /**\n   * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * Adds the following methods to make an array of Animators appear like a single Animator.\n   */\n  restore              : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n  placeSpring          : anim8.delegate( 'placeSpring', anim8.delegate.RETURN_THIS ),\n  placeEvent           : anim8.delegate( 'placeEvent', anim8.delegate.RETURN_THIS ),\n  preupdate            : anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS ),\n  update               : anim8.delegate( 'update', anim8.delegate.RETURN_THIS ),\n  apply                : anim8.delegate( 'apply', anim8.delegate.RETURN_THIS ),\n  trimEvents           : anim8.delegate( 'trimEvents', anim8.delegate.RETURN_THIS ),\n  deactivate           : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n  destroy              : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n  spring               : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n  unspring             : anim8.delegate( 'unspring', anim8.delegate.RETURN_THIS ),\n  play                 : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n  playEvents           : anim8.delegate( 'playEvents', anim8.delegate.RETURN_THIS ),\n  queue                : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n  queueEvents          : anim8.delegate( 'queueEvents', anim8.delegate.RETURN_THIS ),\n  transition           : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n  transitionEvents     : anim8.delegate( 'transitionEvents', anim8.delegate.RETURN_THIS ),\n  transitionInto       : anim8.delegate( 'transitionInto', anim8.delegate.RETURN_THIS ),\n  transitionIntoEvents : anim8.delegate( 'transitionIntoEvents', anim8.delegate.RETURN_THIS ),\n  tween                : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n  tweenTo              : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n  tweenMany            : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n  tweenManyTo          : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n  applyInitialState    : anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS ),\n  follow               : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n  eventsFor            : anim8.delegate( 'eventsFor', anim8.delegate.RETURN_RESULTS ),\n  springsFor           : anim8.delegate( 'springsFor', anim8.delegate.RETURN_RESULTS ),\n  stop                 : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n  end                  : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n  finish               : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n  pause \t\t\t         : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n  resume \t\t\t         : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n  set                  : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n  get                  : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n  isAnimating          : anim8.delegate( 'isAnimating', anim8.delegate.RETURN_TRUE ),\n  hasEvents            : anim8.delegate( 'hasEvents', anim8.delegate.RETURN_TRUE ),\n  hasSprings           : anim8.delegate( 'hasSprings', anim8.delegate.RETURN_TRUE ),\n  on\t\t\t             : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n  once\t\t             : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n  off\t\t\t             : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n  trigger              : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n});\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate();\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * [Sequence description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * [maxDelay description]\n   * @return {[type]}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  /**\n   * [createEvents description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  createEvents: function(animation, options, i)\n  {\n    var events = animation.newEvents();\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = 0; k < events.length; k++)\n    {\n      events[k].delay += delayOffset;\n    }\n\n    animation.merge( options, events );\n    \n    return events;\n  },\n\n  /**\n   * [reverse description]\n   * @return {[type]}\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * [play description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  play: function(animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.playEvents( sequence.createEvents( anim, options, i ), all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(animation, options, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var events = sequence.createEvents( anim, options, i );\n      \n      for (var i = 0; i < events.length; i++)\n      {\n        events[ i ].delay += delayOffset;\n      }\n      \n      animator.queueEvents( events );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transition description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionEvents( transitionTime, transitionDelta, transitionEasing, sequence.createEvents( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transitionInto description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transitionInto: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionIntoEvents( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, sequence.createEvents( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [add description]\n   */\n  add: function()\n  {\n    this.animators.activate();\n    this.animators.applyInitialState();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var easings   = animation.easings || {};\n    var delays    = animation.delays || {};\n    var sleeps    = animation.sleeps || {};\n    var repeats   = animation.repeats || {};\n    var scales    = animation.scales || {};\n    var scaleBases= animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = anim8.easing( anim8.coalesce( easings[attr],   newOptions.easing,   oldOptions.easing   ), e.easing );\n      e.repeat    = anim8.repeat( anim8.coalesce( repeats[attr],   newOptions.repeat,   oldOptions.repeat   ), e.repeat );\n      e.delay     = anim8.time(   anim8.coalesce( delays[attr],    newOptions.delay,    oldOptions.delay    ), e.delay );\n      e.sleep     = anim8.time(   anim8.coalesce( sleeps[attr],    newOptions.sleep,    oldOptions.sleep    ), e.sleep );\n      e.duration  = anim8.time(   anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration ), e.duration );\n      e.scale     =               anim8.coalesce( scales[attr],    newOptions.scale,    oldOptions.scale     , e.scale );\n      e.scaleBase = calc.parse(   anim8.coalesce( scaleBases[attr],newOptions.scaleBase,oldOptions.scaleBase), e.scaleBase );\n    }\n  }\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the events\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar deltas = animation.deltas;\n  \tvar values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      var valueCount = 0;\n      \n  \t\tfor (var attr in values)\n  \t\t{\n        valueCount++; \n      }\n      \n      deltas = [];\n      \n      for (var i = 0; i < valueCount; i++)\n      {\n        deltas[i] = i / (valueCount - 1);\n      }\n    }\n  \tif ( anim8.isArray( deltas ) )\n  \t{\n  \t\tvar deltaObject = {};\n  \t\t\n  \t\tfor (var attr in values)\n  \t\t{\n  \t\t\tdeltaObject[attr] = deltas;\t\n  \t\t}\n  \t\t\n  \t\tdeltas = deltaObject;\n  \t}\n  \t\n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[ attr ];\n      var attribute = factory.attribute( attr );\n  \t\t\n  \t\tfor (var k = 0; k < value.length; k++)\n  \t\t{\n  \t\t\tvalue[k] = attribute.parse( value[k] );\n  \t\t}\n  \t\t\n      var duration  = anim8.coalesce( durations[attr], options.duration );\n      var easing    = anim8.coalesce( easings[attr], options.easing );\n      var delay     = anim8.coalesce( delays[attr], options.delay );\n      var sleep     = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat    = anim8.coalesce( repeats[attr], options.repeat );\n      var scale     = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path      = new anim8.DeltaPath( attr, attribute.calculator, values[attr], deltas[attr] );\n      var event     = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.values = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Generate the events, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar values = animation.final;\n    var delays = animation.delays || {};\n    var durations = animation.durations || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    var calculators = {};\n  \tvar defaults = {};\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var duration   = anim8.duration( anim8.coalesce( durations[attr], options.duration ) );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, scale, scaleBase, false, this );\n      \n      events.push( event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales    = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      var delay = anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay );\n      var duration = anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration );\n\n      e.delay = anim8.delay( delay ) + anim8.duration( duration );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.final = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Generate the events, only caring about the delays\n    \n    var factory    = anim8.factory( animation.factory );\n  \tvar values     = animation.initial;\n    var delays     = animation.delays || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      e.delay = anim8.time( anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay ), e.delay );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.initial = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the events\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    \n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n  \t\t\t\n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n  \t\n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = anim8.coalesce( durations[attr], options.duration );\n      var delay     = anim8.coalesce( delays[attr], options.delay );\n      var sleep     = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat    = anim8.coalesce( repeats[attr], options.repeat );\n      var scale     = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path      = new anim8.KeyframePath( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser.keyframe = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTween = function()\n{\n  \n};\n\n// ParserTween extends anim8.Parser()\nanim8.override( anim8.ParserTween.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n    var durations  = animation.durations || {};\n    var easings    = animation.easings || {};\n    var delays     = animation.delays || {};\n    var sleeps     = animation.sleeps || {};\n    var repeats    = animation.repeats || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBase || {};\n\n  \tfor (var attr in tweenTo)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[attr] );\n      var duration   = anim8.coalesce( durations[attr], options.duration );\n      var easing     = anim8.coalesce( easings[attr], options.easing );\n      var delay      = anim8.coalesce( delays[attr], options.delay );\n      var sleep      = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat     = anim8.coalesce( repeats[attr], options.repeat );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, value );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.tweenTo = new anim8.ParserTween();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParserMove = function()\n{\n  \n};\n\n// ParserMove extends anim8.Parser()\nanim8.override( anim8.ParserMove.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var move       = animation.move;\n    var durations  = animation.durations || {};\n    var easings    = animation.easings || {};\n    var delays     = animation.delays || {};\n    var sleeps     = animation.sleeps || {};\n    var repeats    = animation.repeats || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBase || {};\n\n  \tfor (var attr in move)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[attr] );\n      var duration   = anim8.coalesce( durations[attr], options.duration );\n      var easing     = anim8.coalesce( easings[attr], options.easing );\n      var delay      = anim8.coalesce( delays[attr], options.delay );\n      var sleep      = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat     = anim8.coalesce( repeats[attr], options.repeat );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, anim8.computed.relative( value ) );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.move = new anim8.ParserMove();\n","\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n * \n * @param  [string|anim8.Factory]\n * @return {anim8.Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory.default;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n  this.priority = 0;\n  this.attributes = {};\n};\n\nanim8.override( anim8.ObjectFactory.prototype = new anim8.Factory(),\n{\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;\n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.create() );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory.object = new anim8.ObjectFactory();\nanim8.factory.default = anim8.factory.object;\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute.default                 = {defaultValue: 0};\n","\n/**\n * A factory for HTML Elements\n */\nanim8.DomFactory = function()\n{\n  this.cached = {};\n  this.ids = 0;\n  this.elementAttribute = 'anim8';\n  this.priority = 5;\n  this.attributes = {};\n};\n\nanim8.override( anim8.DomFactory.prototype = new anim8.Factory(),\n{\n  \n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isElement( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animatorId = subject.getAttribute( this.elementAttribute );\n    \n    if (!(animatorId in this.cached)) \n    {\n      var animator = new anim8.DomAnimator( subject );\n      \n      subject.setAttribute( this.elementAttribute, animatorId = animator.id = ++this.ids );\n      \n      animator.factory = this;\n      \n      this.cached[animatorId] = animator;\n    }\n\n    return this.cached[ animatorId ];\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete this.cached[ animator.id ];\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.dom.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.create() );\n      var propertyName = anim8.coalesce( attribute.property, attr );\n      var property = anim8.dom.property( propertyName );\n      var defaultUnit = attribute.defaultUnit || '';\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.propertyName = propertyName;\n      attribute.property = property;\n      attribute.defaultUnit = defaultUnit;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the DOM factory.\n */\nanim8.factory.dom = new anim8.DomFactory();\nanim8.factory.default = anim8.factory.dom;\n\n/* TODO don't apply styles if they're impercivable (convert value to pixels of applicable) */\n\n/**\n * All DOM related\n */\nanim8.dom = {};\n\n/* \n  anim8.dom.property[name] = {\n    get: function(e, anim) {\n      // based on anim.animating, gets one or more value from the entity and places it on anim.frame. this function should only do this for an attribute if\n      // anim.animating[attribute] === false. When it successfully gets a value anim.animating[attribute] should be set to true. This is called before an animation\n      // begins on attributes that will be animated based on the current value. \n    },\n    set: function(e, anim) {\n      // applies the applicable attributes in anim.frame to the entity, \n    }\n }\n*/\nanim8.dom.property = function(prop) \n{\n  if ( anim8.isObject( prop ) && anim8.isFunction( prop.get ) && anim8.isFunction( prop.set ) ) \n  {\n    return prop;\n  }\n  if ( anim8.isString( prop ) && prop in anim8.dom.property )\n  {\n\t  return anim8.dom.property[ prop ];\n  }\n\t\n  throw prop + ' is not a valid property';\n}\n\n/**\n * Computes the desired style of the given element and returns it as a string. The style\n * given must be in hyphenated format like so: anim8.dom.style( element, 'font-size' ) = '12px'\n */\nanim8.dom.style = (function()\n{\n  var hyphenated = {};\n\n  var hyphenize = function(str) \n\t{\n    if ( str in hyphenated )\n    {\n      return hyphenated[ str ];\n    }\n\n    var key = str;\n\n    str = str.replace(/[a-z][A-Z]/g, function(str, letter)\n    {\n     return str[0] + '-' + str[1].toLowerCase();\n    });\n    \n    str = str.replace(/^Webkit/, '-webkit');\n    str = str.replace(/^Moz/, '-moz');\n    str = str.replace(/^Ms/, '-ms');\n    str = str.replace(/^O/, '-o');\n    str = str.replace(/^Khtml/, '-khtml');\n    \n    return hyphenated[ key ] = str;\n  };\n\t\n\treturn function(e, style) \n\t{\n\t  if (e.currentStyle)\n\t\t{\n\t    return e.currentStyle[ style ];\n\t  } \n\t\telse if (document.defaultView && document.defaultView.getComputedStyle) \n\t\t{\n\t    return document.defaultView.getComputedStyle( e, null ).getPropertyValue( hyphenize( style ) );\n\t  } \n\t\telse \n\t\t{\n\t    return e.style[ style ]; \n\t  }\n\t};\n\t\n})();\n\n/**\n * Given an array of styles this will return the first one that is present on elements in the current browser.\n */\nanim8.dom.prefix = (function() \n{\n  var a = document.createElement('a');\n  \n  return function(prefixes) \n  {\n    for (var i = 0; i < prefixes.length; i++) \n    {\n      if ( anim8.isDefined( a.style[ prefixes[ i ] ] ) ) \n      {\n        return prefixes[i];\n      }\n    }\n    return false;\n  };\n  \n})();\n\n/**\n * Parses the string for a value and a unit.\n *\n * @param {string} value\n */\nanim8.dom.parseValue = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(px|em|%|vw|ex|cm|mm|in|pt|pc|deg|rad)?/;\n  \n  return function(x)\n  {\n    var parsed = regex.exec( x );\n    \n    if (parsed) \n    {      \n      return {\n        value: parseFloat( parsed[1] ),\n        unit: parsed[3]\n      }\n    }\n    \n    return false;\n  };\n})();\n\n\n/**\n * Converts one unit to another for a given element.\n *\n * For Example: anim8.dom.convert( element, '100px', '%', 'parentWidth' )\n *    returns how much percent 100px relativeTo parentWidth of the given element\n *\n * @param {HTMLElement} e\n * @param {string} from\n * @param {string} toUnit\n * @param {string} relativeTo\n */\nanim8.dom.convert = (function()\n{\n  /**\n   * Calculators how many pixels a given value & unit is.\n   * \n   * For Example: anim8.toPixels( 100, 'in' ) \n   *    returns how many pixels are in 1 inch, with up to 2 decimal points of accuracy.\n   */\n  var toPixels = function(baseValue, baseUnit, defaultRate)\n  {\n    if ( document.body )\n    {\n      var div = document.createElement('div');\n      document.body.appendChild( div );\n      div.style.width = baseValue + baseUnit;\n      var pixels = (div.offsetWidth / baseValue);\n      document.body.removeChild( div );\n      return pixels || defaultRate;\n    }\n    \n    return defaultRate;\n  };\n\n  var getFontSize = function(e, notUnit)\n  {\n    var fontSize = anim8.dom.style( e, 'fontSize' );\n    var parsed = anim8.dom.parseValue( fontSize );\n    \n    if ( !parsed || parsed.unit === notUnit )\n    {\n      return 12;\n    }\n    \n    if ( parsed.unit === 'px' ) \n    {\n      return parsed.value;\n    }\n    \n    return getConverterScale( e, conversions[ parsed.unit ].px, relativeTo );\n  };\n\n  var variables = {};\n  \n  variables.parentWidth = function(e)\n  {\n    return e.parentNode.scrollWidth;\n  };\n  variables.parentHeight = function(e)\n  {\n    return e.parentNode.scrollHeight;\n  };\n  variables.width = function(e)\n  {\n    return e.offsetWidth;\n  };\n  variables.height = function(e)\n  {\n    return e.offsetHeight;\n  };\n  variables.fontSize = function(e)\n  {\n    return getFontSize( e, '%' );\n  };\n  variables.parentFontSize = function(e)\n  {\n    return getFontSize( e.parentNode, '%' );\n  };\n  variables.htmlFontSize = function(e)\n  {\n    var htmlElement = document.getElementsByTagName(\"html\")[0];\n    \n    return getFontSize( htmlElement, '%' );\n  };\n  \n  var conversions = {};\n  \n  conversions.pt  = { px: toPixels(100, 'pt') };\n  conversions.in  = { px: toPixels(100, 'in') };\n  conversions.cm  = { px: toPixels(1000, 'cm') };\n  conversions.mm  = { px: toPixels(100000, 'mm') };\n  conversions.vw  = { px: toPixels(1000, 'vw') };\n  conversions.deg = { rad: Math.PI / 180.0};\n\n  conversions.em = \n  {\n    px: function(e, relativeTo) \n    {\n      return getFontSize( e, 'em' );\n    }\n  };\n  \n  conversions.rem = \n  {\n    px: function(e, relativeTo) \n    {\n      var htmlElement = document.getElementsByTagName(\"html\")[0];\n      \n      return getFontSize( htmlElement, 'rem' );\n    }\n  };\n  \n  conversions['%'] = \n  {\n    px: function(e, relativeTo) \n    {\n      if ( anim8.isNumber( relativeTo ) )\n      {\n        return relativeTo;\n      }\n      if ( relativeTo in variables )\n      {\n        return variables[ relativeTo ]( e ) / 100.0;\n      }\n      \n      return 1.0;\n    }\n  };\n  \n  // Populate conversions going other way.\n  for (var unit in conversions)\n  {\n    for (var to in conversions[ unit ])\n    {\n      if ( !(to in conversions) )\n      {\n        conversions[ to ] = {};\n      }\n      \n      if ( !(unit in conversions[ to ]) )\n      {\n        var given = conversions[ unit ][ to ];\n        \n        if ( anim8.isNumber( given ) )\n        {\n          conversions[ to ][ unit ] = 1.0 / given;  \n        }\n        if ( anim8.isFunction( given ) )\n        {\n          conversions[ to ][ unit ] = (function(converter) \n          {\n            return function(e, relativeTo) \n            {\n              return 1.0 / converter( e, relativeTo );\n            };\n          })( given );\n        }\n      }\n    }\n  }\n  \n  // Given an element, convert, and relativeTo - return the number we need to multiply by.\n  var getConverterScale = function(e, converter, relativeTo)\n  {\n    if ( anim8.isNumber( converter ) )\n    {\n      return converter;\n    }\n    else if ( anim8.isFunction( converter ) )\n    {\n      return converter( e, relativeTo );\n    }\n    \n    return 1.0;\n  };\n  \n  return function(e, from, toUnit, relativeTo)\n  {\n    if ( anim8.isNumber( from ) )\n    {\n      return from;\n    }\n    \n    var parsed = anim8.dom.parseValue( from );\n    \n    if ( !parsed )\n    {\n      return false;\n    }\n    \n    var value = parsed.value;\n    var fromUnit = parsed.unit;\n    \n    if ( !fromUnit || fromUnit === toUnit )\n    {\n      return value;\n    }\n    \n    // First see if we have a direct conversion available...\n    if ( fromUnit in conversions && toUnit in conversions[ fromUnit ] )\n    {\n      var converter = conversions[ fromUnit ][ toUnit ];\n      \n      value *= getConverterScale( e, converter, relativeTo );\n    }\n    // Otherwise convert it to px, then to the desired unit\n    else if ( fromUnit in conversions && conversions[ fromUnit ].px && toUnit in conversions.px )\n    {\n      var converter1 = conversions[ fromUnit ].px;\n      var converter2 = conversions.px[ toUnit ];\n      \n      value *= getConverterScale( e, converter1, relativeTo );\n      value *= getConverterScale( e, converter2, relativeTo );\n    }\n    \n    return value;\n  };\n  \n})();\n\n\n","\nanim8.dom.property.factory = function(nm, relativeTo) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryDerivable = function(nm, relativeTo, deriver) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n        else if ( anim8.isFunction( deriver ) )\n        {\n          converted = anim8.dom.convert( e, deriver( e ), anim.units[ nm ], relativeTo );\n          \n          if ( converted !== false )\n          {\n            anim.frame[nm] = converted;\n            anim.animating[nm] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryColor = function(nm) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var parsed = anim8.color.parse( e.style[nm] );\n        \n        if (parsed !== false) \n        {\n          anim.frame[nm] = parsed;\n          anim.animating[nm] = true;\n        }              \n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[nm] = anim8.color.format( anim.frame[nm] );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.padding                  = anim8.dom.property.factory( 'padding', 'parentWidth' );\nanim8.dom.property.paddingTop               = anim8.dom.property.factory( 'paddingTop', 'parentWidth' );\nanim8.dom.property.paddingRight             = anim8.dom.property.factory( 'paddingRight', 'parentWidth' );\nanim8.dom.property.paddingBottom            = anim8.dom.property.factory( 'paddingBottom', 'parentWidth' );\nanim8.dom.property.paddingLeft              = anim8.dom.property.factory( 'paddingLeft', 'parentWidth' );\n\nanim8.dom.property.margin                   = anim8.dom.property.factory( 'margin', 'parentWidth' );\nanim8.dom.property.marginTop                = anim8.dom.property.factory( 'marginTop', 'parentWidth' );\nanim8.dom.property.marginRight              = anim8.dom.property.factory( 'marginRight', 'parentWidth' );\nanim8.dom.property.marginBottom             = anim8.dom.property.factory( 'marginBottom', 'parentWidth' );\nanim8.dom.property.marginLeft               = anim8.dom.property.factory( 'marginLeft', 'parentWidth' );\n\nanim8.dom.property.borderRadius             = anim8.dom.property.factory( 'borderRadius', 'width' );\nanim8.dom.property.borderTopLeftRadius      = anim8.dom.property.factory( 'borderTopLeftRadius', 'width' );\nanim8.dom.property.borderTopRightRadius     = anim8.dom.property.factory( 'borderTopRightRadius', 'width' );\nanim8.dom.property.borderBottomLeftRadius   = anim8.dom.property.factory( 'borderBottomLeftRadius', 'width' );\nanim8.dom.property.borderBottomRightRadius  = anim8.dom.property.factory( 'borderBottomRightRadius', 'width' );\n\nanim8.dom.property.borderWidth              = anim8.dom.property.factory( 'borderWidth' );\nanim8.dom.property.borderTopWidth           = anim8.dom.property.factory( 'borderTopWidth' );\nanim8.dom.property.borderRightWidth         = anim8.dom.property.factory( 'borderRightWidth' );\nanim8.dom.property.borderBottomWidth        = anim8.dom.property.factory( 'borderBottomWidth' );\nanim8.dom.property.borderLeftWidth          = anim8.dom.property.factory( 'borderLeftWidth' );\n\nanim8.dom.property.outlineWidth             = anim8.dom.property.factory( 'outlineWidth' );\nanim8.dom.property.textIndent               = anim8.dom.property.factory( 'textIndent', 'parentWidth' );\nanim8.dom.property.borderSpacing            = anim8.dom.property.factory( 'borderSpacing' );\nanim8.dom.property.fontSize                 = anim8.dom.property.factory( 'fontSize', 'parentFontSize' );\nanim8.dom.property.lineHeight               = anim8.dom.property.factory( 'lineHeight', 'fontSize' );\nanim8.dom.property.zIndex                   = anim8.dom.property.factory( 'zIndex' );\n\nanim8.dom.property.color                    = anim8.dom.property.factoryColor( 'color' );\nanim8.dom.property.backgroundColor          = anim8.dom.property.factoryColor( 'backgroundColor' );\nanim8.dom.property.borderTopColor           = anim8.dom.property.factoryColor( 'borderTopColor' );\nanim8.dom.property.borderRightColor         = anim8.dom.property.factoryColor( 'borderRightColor' );\nanim8.dom.property.borderBottomColor        = anim8.dom.property.factoryColor( 'borderBottomColor' );\nanim8.dom.property.borderLeftColor          = anim8.dom.property.factoryColor( 'borderLeftColor' );\nanim8.dom.property.outlineColor             = anim8.dom.property.factoryColor( 'outlineColor' );\n\nanim8.dom.property.minWidth                 = anim8.dom.property.factory( 'minWidth', 'parentWidth' );\nanim8.dom.property.maxWidth                 = anim8.dom.property.factory( 'maxWidth', 'parentWidth' );\nanim8.dom.property.minHeight                = anim8.dom.property.factory( 'minHeight', 'parentHeight' );\nanim8.dom.property.maxHeight                = anim8.dom.property.factory( 'maxHeight', 'parentHeight' );\n\nanim8.dom.property.width                    = anim8.dom.property.factoryDerivable('width', 'parentWidth', function(e) { return e.offsetWidth + 'px'; });\nanim8.dom.property.height                   = anim8.dom.property.factoryDerivable('height', 'parentHeight', function(e) { return e.offsetHeight + 'px'; });\n\nanim8.dom.property.top                      = anim8.dom.property.factoryDerivable('top', 'parentHeight', function(e) { return e.offsetTop + 'px'; });\nanim8.dom.property.right                    = anim8.dom.property.factoryDerivable('right', 'parentWidth', function(e) { return (e.parentNode.scrollWidth - (e.offsetLeft + e.offsetWidth)) + 'px'; });\nanim8.dom.property.bottom                   = anim8.dom.property.factoryDerivable('bottom', 'parentHeight', function(e) { return (e.parentNode.scrollHeight - (e.offsetTop + e.offsetHeight)) + 'px'; });\nanim8.dom.property.left                     = anim8.dom.property.factoryDerivable('left', 'parentWidth', function(e) { return e.offsetLeft + 'px'; });\n\nanim8.dom.property.visibility = \n{\n  get: function(e, anim) \n  {\n    if (anim.animating.visibility === false) \n    {\n      var style = anim8.dom.style( e, 'visibility' );\n      anim.frame.visibility = style === 'hidden' ? 0.0 : 1.0;\n      anim.animating = true;\n    }\n  },\n  set: function(e, anim) \n  {\n    anim.styles.visibility = anim.frame.visibility < 0.5 ? 'hidden' : 'visible'\n  },\n  unset: function(e, anim)\n  {\n    e.style.visibility = null;\n  }\n}\n\nanim8.dom.property.backface = (function()\n{\n  var css = anim8.dom.prefix(['WebkitBackfaceVisibility', 'MozBackfaceVisibility', 'msBackfaceVisibility', 'BackfaceVisibility']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim)\n    {\n      if ( anim.animating.backface === false )\n      {\n        var style = anim8.dom.style( e, css ); \n        \n        anim.frame.backface = (style === 'visible') ? 1.0 : 0.0;\n        anim.animating.backface = true;\n      }\n    },\n    set: function(e, anim)\n    {\n      anim.styles[css] = anim.frame.backface < 0.5 ? 'none' : 'visible';\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n    \n  };\n  \n})();\n\nanim8.dom.property.transformOrigin = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransformOrigin', 'MozTransformOrigin', 'OTransformOrigin', 'msTransformOrigin', 'transformOrigin']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  var keywords = \n  {\n    'left':   '0%',\n    'center': '50%',\n    'right':  '100%',\n    'top':    '0%',\n    'bottom': '100%'\n  };\n  \n  var setOriginAttribute = function(e, value, anim, attr, relativeTo ) \n  {\n    if (anim.animating[attr] === false) \n    {\n      if ( value in keywords )\n      {        \n        value = keywords[ value ];\n      }\n\n      var converted = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n      \n      if ( converted !== false )\n      {\n        anim.frame[ attr ] = converted;\n        anim.animating[ attr ] = true;\n      }\n    }\n  };\n  \n  var setOrigin = function(e, split, anim) \n  {\n    if (anim.animating.origin === false) \n    {\n      if ((split.length === 1) || \n          (split.length === 2 && split[0] === split[1]) || \n          (split.length === 3 && split[0] === split[1] && split[1] === split[2])) \n      {     \n        setOriginAttribute( e, split[0], anim, 'origin', 'width' );\n      }            \n    }\n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      if (style) \n      {\n        var origin = style.toLowerCase();\n        var split = origin.split(' ');\n        \n        switch (split.length) \n        {\n        case 3:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOriginAttribute( e, split[2], anim, 'originZ' );\n          setOrigin( e, split, anim );\n          break;\n        case 2:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        case 1:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[0], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var style = null;\n      \n      if ( anim8.isDefined( anim.frame.originZ ) )\n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' ) + ' ' + anim.valueOr( 'originZ', 'origin', 'z' );\n      } \n      else \n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' );\n      }\n      \n      anim.styles[css] = style;\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.transform = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);\n   \n  if ( !css )\n  {\n    return false;\n  }\n\n  var d2 = { translate: true, scale: true };\n  var d3 = { translate3d: true, scale3d: true };\n  var d4 = { rotate3d: true };\n  var axis = ['X', 'Y', 'Z'];\n    \n  var regex = \n  {\n    translate: /translate\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translate3d: /translate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translateX: /translateX\\(([^\\)]+)\\)/i,\n    translateY: /translateY\\(([^\\)]+)\\)/i,\n    translateZ: /translateZ\\(([^\\)]+)\\)/i,\n    scale: /scale\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scale3d: /scale3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scaleX: /scaleX\\(([^\\)]+)\\)/i,\n    scaleY: /scaleY\\(([^\\)]+)\\)/i,\n    scaleZ: /scaleZ\\(([^\\)]+)\\)/i,\n    rotate: /rotate\\(([^\\)]+)\\)/i,\n    rotate3d: /rotate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    rotateX: /rotateX\\(([^\\)]+)\\)/i,\n    rotateY: /rotateY\\(([^\\)]+)\\)/i,\n    rotateZ: /rotateZ\\(([^\\)]+)\\)/i,\n    skew: /skew\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    skewX: /skewX\\(([^\\)]+)\\)/i,\n    skewY: /skewY\\(([^\\)]+)\\)/i\n  };\n  \n  var parse = function( e, value, anim, attr, relativeTo )\n  {\n    var desiredUnit = anim.units[ attr ];\n    var converted = anim8.dom.convert( e, value, desiredUnit, relativeTo );\n    \n    if ( converted !== false )\n    {\n      return converted;\n    }\n    \n    // TODO show convert this to desiredUnit, however defaultValue may be non-scalar.\n    return anim.getAttribute( attr ).defaultValue;    \n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      for (var attr in anim.animating) \n      {\n        if ( anim.animating[ attr ] === false && attr in regex ) \n        {\n          var parsed = regex[ attr ].exec( style );\n\n          if ( parsed ) \n          {\n            if ( attr in d4 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr ),\n                angle: parse( e, parsed[4], anim, attr )\n              };\n            }\n            else if ( attr in d3 )\n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr )\n              };\n            }\n            else if ( attr in d2 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' )\n              };\n            }\n            else \n            {\n              anim.frame[attr] = parse( e, parsed[1], anim, attr, 'width' );\n            }\n            \n            anim.animating[attr] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    {  \n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n      var transforms = [];\n      \n      for (var attr in regex) \n      {\n        if (attr in anim.frame) \n        { \n          var value = anim.frame[ attr ];\n          var unit = anim.units[ attr ];\n          \n          if (attr in d4) \n          {\n            transforms.push( attr + '(' + value.x + ',' + value.y + ',' + value.z + ',' + value.angle + unit + ')' );\n          }\n          else if (attr in d3) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ',' + value.z + unit + ')' );\n          }\n          else if (attr in d2) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ')' );\n          }\n          else\n          {\n            transforms.push( attr + '(' + value + unit + ')' );\n          }\n        }\n      }\n\t\t\t\n      if (transforms.length) \n      {\n        anim.styles[css] = transforms.join(' ');\n      }\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.opacity = (function() \n{\n  var css = anim8.dom.prefix(['WebkitOpacity', 'MozOpacity', 'KhtmlOpacity', 'opacity']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating.opacity === false) \n      {\n        var style = anim8.dom.style( e, css );\n        var opacity = parseFloat( style );\n        \n        if ( !isNaN(opacity) ) \n        {\n          anim.frame.opacity = opacity\n          anim.animating.opacity = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[ css ] = anim8.clamp( anim.frame.opacity, 0, 1 );\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.filter = (function() \n{\n  var css = anim8.dom.prefix(['WebkitFilter', 'MozFilter', 'OFilter', 'msFilter', 'filter']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n\tvar methods = \n  {\n\t\tgrayscale: \t'grayscale',\n\t\tsepia: \t\t\t'sepia',\n\t\tsaturate: \t'saturate',\n\t\thueRotate: \t'hue-rotate',\n\t\tinvert: \t\t'invert',\n\t\tbrightness: 'brightness',\n\t\tcontrast: \t'contrast',\n    blur:       'blur'\n\t};\n\t\n\tvar patterns = {};\n\t\n\tfor (var attr in methods) \n  {\n\t\tpatterns[attr] = new RegExp( methods[attr] + '\\(([^\\)]+)\\)', 'i');\n\t}\n  \n\treturn {\n    \n\t\tget: function(e, anim) \n    {\n\t\t\tvar style = anim8.dom.style( e, css );\n      \n\t\t\tfor (var attr in patterns) \n      {\n\t\t\t\tif ( anim.animating[attr] === false ) \n        {\n\t\t\t\t\tvar parsed = patterns[attr].exec( style );\n          \n\t\t\t\t\tif (parsed !== false) \n          {\n            var converted = anim8.dom.convert( e, parsed[1], anim.units[ attr ] );\n            \n            if ( converted !== false )\n            {\n              anim.frame[ attr ] = converted;\n              anim.animating[ attr ] = true;\n            }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\t\tset: function(e, anim) \n    {\n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n\t\t\tvar filters = [];\n      \n\t\t\tfor (var attr in methods) \n      {\n\t\t\t\tif ( attr in anim.frame ) \n        {\n          filters.push( methods[attr] + '(' + anim.value( attr ) + ')' );\n\t\t\t\t}\n\t\t\t}\n      \n\t\t\tif (filters.length) \n      {\n\t\t\t\tanim.styles[ css ] = filters.join(' ');\n\t\t\t}\n\t\t},\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n\t};\n\t\n})();\n\nanim8.dom.property.center = \n{\n  get: function(e, anim)\n  {\n    var cx = (e.offsetLeft + e.offsetWidth * 0.5) + 'px';\n    var cy = (e.offsetTop + e.offsetHeight * 0.5) + 'px';\n    \n    if ( anim.animating.center === false )\n    {\n      var desiredUnit = anim.units.center;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n    \n      if ( ccx !== false && ccy !== false )\n      {\n        anim.frame.center = {\n          x: ccx,\n          y: ccy\n        };\n        anim.animating.center = true;\n      }\n    }\n    if ( anim.animating.centerX === false )\n    {\n      var desiredUnit = anim.units.centerX;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      \n      if ( ccx !== false )\n      {\n        anim.frame.centerX = ccx;\n        anim.animating.centerX = true;\n      }\n    }\n    if ( anim.animating.centerY === false )\n    {\n      var desiredUnit = anim.units.centerY;\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n      \n      if ( ccy !== false )\n      {\n        anim.frame.centerY = ccy;\n        anim.animating.centerY = true;\n      }\n    }\n  },\n  preset: function(e, anim)\n  {\n    anim.cached.width  = anim8.dom.convert( e, e.offsetWidth + 'px', anim.units.centerX || anim.units.center, 'parentWidth' );\n    anim.cached.height = anim8.dom.convert( e, e.offsetHeight + 'px', anim.units.centerY || anim.units.center, 'parentHeight' );\n  },\n  set: function(e, anim)\n  {\n    var rw = anim.cached.width * 0.5;\n    var rh = anim.cached.height * 0.5;\n        \n    if ( anim.updated.center )\n    {\n      anim.styles.left = (anim.frame.center.x - rw) + anim.units.center;\n      anim.styles.top = (anim.frame.center.y - rh) + anim.units.center;\n    }\n    if ( anim.updated.centerX )\n    {\n      anim.styles.left = (anim.frame.centerX - rw) + anim.units.centerX;\n    }\n    if ( anim.updated.centerY )\n    {\n      anim.styles.top = (anim.frame.centerY - rh) + anim.units.centerY;\n    }\n  }\n};\n\nanim8.dom.property.orbit = \n{\n  DEGREE_TO_RADIAN: Math.PI / 180.0,\n  \n  RADIAN_TO_DEGREE: 180.0 / Math.PI,\n  \n  get: function(e, anim)\n  {\n    var ox = (e.parentNode.scrollWidth * 0.5);\n    var oy = (e.parentNode.scrollHeight * 0.5); \n    var cx = (e.offsetLeft + e.offsetWidth * 0.5);\n    var cy = (e.offsetTop + e.offsetHeight * 0.5);\n    var dx = cx - ox;\n    var dy = cy - oy;\n  \n    if ( anim.animating.orbitOffset === false )\n    {\n      var cunit = anim.units.orbitOffset;\n      var cox = anim8.dom.convert( e, ox + 'px', cunit, 'parentWidth' );\n      var coy = anim8.dom.convert( e, oy + 'px', cunit, 'parentHeight' );\n      \n      if ( cox !== false && coy !== false )\n      {\n        anim.frame.orbitOffset = {\n          x: cox,\n          y: coy\n        };\n        anim.animating.orbitOffset = false;\n      }\n    }\n    \n    if ( anim.animating.distance === false )\n    {\n      anim.frame.distance = Math.sqrt( dx * dx + dy * dy );\n      anim.animating.distance = true;\n    }\n    \n    if ( anim.animating.angle === false )\n    {\n      anim.frame.angle = Math.atan2( dy, dx ) * this.RADIAN_TO_DEGREE;\n      anim.animating.angle = true;\n    }\n  },\n  \n  preset: function(e, anim)\n  {  \n    anim.cached.parentWidth = e.parentNode.scrollWidth;\n    anim.cached.parentHeight = e.parentNode.scrollHeight;\n    anim.cached.width = e.offsetWidth;\n    anim.cached.height = e.offsetHeight;\n  },\n  \n  set: function(e, anim)\n  {\n    // TODO calculator this correctly\n    var cunit = anim.units.orbitOffset || '%';\n    var orbitX = anim.frame.orbitOffset ? anim.frame.orbitOffset.x : 50;\n    var orbitY = anim.frame.orbitOffset ? anim.frame.orbitOffset.y : 50;\n    \n    var originUnit = anim.units.origin || '%';\n    var originX = anim.frame.origin ? anim.frame.origin.x : 50;\n    var originY = anim.frame.origin ? anim.frame.origin.y : 50;\n    \n    var cox = anim8.dom.convert( e, orbitX + cunit, 'px', anim.cached.parentWidth / 100.0 );\n    var coy = anim8.dom.convert( e, orbitY + cunit, 'px', anim.cached.parentHeight / 100.0 );\n    \n    var ox = anim8.dom.convert( e, originX + originUnit, 'px', anim.cached.width / 100.0 );\n    var oy = anim8.dom.convert( e, originY + originUnit, 'px', anim.cached.height / 100.0 );\n    \n    var angle = (anim.frame.angle || 0.0) * this.DEGREE_TO_RADIAN;\n    var distance = anim.frame.distance || 0.0;\n        \n    var cos = Math.cos( angle ) * distance;\n    var sin = Math.sin( angle ) * distance;\n    \n    anim.styles.left = (cox + cos - ox) + 'px';\n    anim.styles.top = (coy + sin - oy) + 'px';\n  }\n};","\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.dom.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.dom.attribute[ attr ];\n  }\n  \n  return anim8.dom.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.dom.attribute.default                 = {defaultValue: 0};\n\n/**\n * All animatable attributes for DomAnimators & HTMLElements.\n */\n\nanim8.dom.attribute.padding                 = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingTop              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingRight            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingBottom           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingLeft             = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.margin                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginTop               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginRight             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginBottom            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginLeft              = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderRadius            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopLeftRadius     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopRightRadius    = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomLeftRadius  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomRightRadius = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderWidth             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopWidth          = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderRightWidth        = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomWidth       = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderLeftWidth         = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.outlineWidth\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.outlineOffset\t\t\t\t\t\t= {defaultValue: 0};\nanim8.dom.attribute.textIndent\t\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderSpacing\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.fontSize\t\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\nanim8.dom.attribute.lineHeight\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\n\nanim8.dom.attribute.origin                  = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'transformOrigin', calculator: '2d'};\nanim8.dom.attribute.originX                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\nanim8.dom.attribute.originY                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\n\nanim8.dom.attribute.opacity                 = {defaultValue: 1};\nanim8.dom.attribute.zIndex                  = {defaultValue: 1};\n\nanim8.dom.attribute.width                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minWidth                = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxWidth                = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.height                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minHeight               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxHeight               = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.angle                   = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.distance                = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.orbitOffset             = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'orbitOffset', calculator: '2d'};\n\nanim8.dom.attribute.top                     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.right                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.bottom                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.left                    = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.center                  = {defaultValue: {x:0, y:0}, defaultUnit: 'px', property: 'center', calculator: '2d'};\nanim8.dom.attribute.centerX                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\nanim8.dom.attribute.centerY                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\n\nanim8.dom.attribute.blur                    = {defaultValue: 0, property: 'filter', defaultUnit: 'px'};\nanim8.dom.attribute.sepia                   = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.brightness              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.grayscale               = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.contrast                = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.invert                  = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.saturation              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.hueRotate               = {defaultValue: 0, property: 'filter', defaultUnit: 'deg'};\n\nanim8.dom.attribute.rotate                  = {defaultValue: 0, property: 'transform', defaultUnit: 'deg'};\nanim8.dom.attribute.rotate3d                = {defaultValue: {x:0, y:0, z:1, angle:0}, property: 'transform', calculator: 'quaternion', defaultUnit: 'deg'};\n\nanim8.dom.attribute.translate               = {defaultValue: {x:0, y:0}, property: 'transform', calculator: '2d', defaultUnit: 'px'};\nanim8.dom.attribute.translateX              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateY              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateZ              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translate3d             = {defaultValue: {x:0, y:0, z:0}, property: 'transform', calculator: '3d', defaultUnit: 'px'};\n\nanim8.dom.attribute.scale                   = {defaultValue: {x:1, y:1}, property: 'transform', calculator: '2d'};\nanim8.dom.attribute.scaleX\t                = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleY  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleZ  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scale3d                 = {defaultValue: {x:1, y:1, z:1}, property: 'transform', calculator: '3d'};\n\nanim8.dom.attribute.skew                    = {defaultValue: {x:0, y:0}, defaultUnit: 'deg', property: 'transform', calculator: '2d'};\nanim8.dom.attribute.skewX                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\nanim8.dom.attribute.skewY                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\n\nanim8.dom.attribute.backface                = {defaultValue: 0};\nanim8.dom.attribute.visibility              = {defaultValue: 1};\n\nanim8.dom.attribute.backgroundColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.color                   = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderTopColor          = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderRightColor        = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderBottomColor       = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderLeftColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.outlineColor            = {defaultValue: anim8.color(), calculator: 'rgba'};\n","\n/**\n * Instantiates a new DomAnimator given a subject.\n * \n * @param {HTMLElement} e\n */\nanim8.DomAnimator = function(e)\n{\n\tthis.reset( e );\n  this.properties = {};\n  this.propertiesPreset = {};\n  this.attributeToProperty = {};\n  this.animating = {};\n  this.cached = {};\n  this.units = {};\n  this.styles = {};\n  this.styled = false;\n  this.stylesUpdated = false;\n};\n\n/**\n * Extends anim8.Animator\n */\nanim8.override( anim8.DomAnimator.prototype = new anim8.Animator(),\n{\n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   *\n   * If any events that were recently added have true values this is where we replace\n   * this true values with the values currently on the subject.\n   */\n  preupdate: function()\n  {\n    // If there are events with paths that contain computed values we should\n    // populate the frame directly from the HTML element.\n    var ce = this.eventsComputed;\n    if ( ce.length )\n    {\n      var properties = {};\n    \n      for (var i = 0; i < ce.length; i++)\n      {\n        var attr = ce[ i ].attribute;\n\n        if ( !(attr in this.frame) )\n        {\n          properties[ this.attributeToProperty[ attr ] ] = true;\n      \n          this.animating[ attr ] = false; \n        }\n      }\n      \n      for (var prop in properties)\n      {\n        this.properties[ prop ].get( this.subject, this );\n      }\n    }\n\n    // If a property currently being animated requires some heads up before it\n    // gets or sets a value, notify it. TODO removed dead properties.\n    for (var prop in this.propertiesPreset)\n    { \n      this.propertiesPreset[ prop ].preset( this.subject, this );\n    }\n\n    // Finish updating computed events, filling in the frame, and triggering.\n    anim8.Animator.prototype.preupdate.apply( this, arguments );\n\n    return this;\n  },\n    \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now)\n  {\n    anim8.Animator.prototype.update.apply( this, arguments );\n      \n    this.getStyles();\n    this.stylesUpdated = true;\n\n    return this;\n  },\n\n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {  \n    if ( animation.input.units )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[i];\n        var attr = e.attribute;\n      \n        if ( attr in animation.input.units )\n        {\n          e.unit = animation.input.units[ attr ];\n        }\n      }  \n    }\n  },\n\n  /**\n   * Builds the styles map in preparation to be applied.\n   */\n  getStyles: function()\n  {\n    this.styles = {};\n    \n    var applyProperties = {};\n    \n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        var prop = this.attributeToProperty[ attr ];\n        \n        if ( prop in this.properties )\n        {\n          applyProperties[ prop ] = true; \n        }\n      }\n    }\n    \n    for (var prop in applyProperties)\n    {\n      this.properties[ prop ].set( this.subject, this );  \n      \n      this.styled = true;\n    }\n  },\n\n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n  {\n    if ( !this.styled && !this.stylesUpdated )\n    {\n      this.getStyles();\n    }\n    \n    if ( this.styled )\n    {    \n      for (var prop in this.styles)\n      {\n         this.subject.style[ prop ] = this.styles[ prop ];\n      }\n      \n      for (var attr in this.frame)\n      {\n        this.updated[ attr ] = false;\n      }\n    \n      this.styled = false;\n    }\n    \n    this.stylesUpdated = false;\n    \n    this.trigger('apply');\n    \n    this.trimEvents();\n\n    return this;\n  },\n    \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function( e )\n  {\n    anim8.Animator.prototype.placeEvent.apply( this, arguments );\n    \n    return this.placeProperty( e.attribute, e.unit );\n  },\n    \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function( s )\n  {\n    anim8.Animator.prototype.placeSpring.apply( this, arguments );\n    \n    return this.placeProperty( s.attribute );\n  },\n\n  /**\n   * Places all necessary property information on the Animator for animating the given attribute.\n   * \n   * @param  {string} attr\n   * @return {this}\n   */\n  placeProperty: function( attr, unit )\n  {\n    var attribute = this.getAttribute( attr );\n    \n    this.properties[ attribute.propertyName ] = attribute.property;\n    this.attributeToProperty[ attr ] = attribute.propertyName;\n    this.units[ attr ] = unit || attribute.defaultUnit;\n\n    if ( attribute.property && anim8.isFunction( attribute.property.preset ) )\n    {\n      this.propertiesPreset[ attribute.propertyName ] = attribute.property;\n    }\n\n    return this;\n  },\n    \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  {\n    for (var prop in this.properties)\n    {\n      this.properties[ prop ].unset( this.subject, this );\n    }\n  \t\n  \tthis.frame = {};\n\n    return this;\n  },\n\n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    var props = {};\n    var updated = {};\n    var units = {};\n    var styles = {};\n    \n    for (var attr in attributes)\n    {\n      var attribute = this.getAttribute( attr );\n      var value     = attributes[ attr ];\n      \n      units[ attr ] = attribute.defaultUnit;\n      \n      if ( anim8.isString( value ) )\n      {\n        var parsed = anim8.dom.parseValue( value, attribute.defaultUnit );\n        \n        if ( parsed !== false )\n        {\n          units[ attr ] = parsed.unit || attribute.defaultUnit;\n          value = parsed.value;\n        }  \n      }\n      \n      var parsed = attribute.parse( value );\n      \n      if ( parsed !== false )\n      {\n        props[ attribute.propertyName ] = attribute.property;\n        attributes[ attr ] = parsed;\n        updated[ attr ] = true;\n      }\n    }\n      \n    var flash = \n    {\n      units: units,\n       \n      frame: attributes,\n      \n      updated: updated,\n      \n      styles: styles,\n      \n      cached: {},\n      \n      value: function(attr)\n      {\n        return attributes[ attr ] + units[ attr ];\n      },\n      \n      valueOr: function(attr, other, subproperty)\n      {\n        var value = attributes[ attr ];\n        \n        if ( !anim8.isDefined( value ) )\n        {\n          value = attributes[ attr = other ];\n        \n          if ( anim8.isDefined( subproperty ) )\n          {\n            value = value[ subproperty ];\n          }\n        }\n    \n        return value + units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      var property = props[ prop ];\n      \n      if ( anim8.isFunction( property.preset ) )\n      {\n        props[ prop ].preset( this.subject, flash );\n      }\n    }\n    \n    for (var prop in props)\n    {\n      props[ prop ].set( this.subject, flash );\n    }\n    \n    for (var prop in styles)\n    {\n      this.subject.style[ prop ] = styles[ prop ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute and the value is the desired unit.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var props = {};\n    var animating = {};\n    var units = {};\n    var out = {};\n    \n    for (var attr in attributes)\n    {    \n      var attribute = this.getAttribute( attr );\n      \n      animating[ attr ] = false;    \n      units[ attr ] = attributes[ attr ] || attribute.defaultUnit;\n      props[ attribute.propertyName ] = attribute.property;\n      out[ attr ] = attribute.cloneDefault();\n    }\n    \n    var flash = \n    {    \n      units: units,\n      \n      frame: out,\n      \n      animating: animating,\n      \n      unit: function(attr)\n      {\n        return units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      props[ prop ].get( this.subject, flash );\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute, desiredUnit, relativeTo)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame && anim8.isNumber( animator.frame[ attribute ] ) )\n      {\n        return anim8.dom.convert( animator.e, animator.value( attribute ), desiredUnit, relativeTo );\n      }\n      \n      request[ attribute ] = desiredUnit;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return animator.getAttribute( attribute ).defaultValue;\n    };\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ] + this.units[ attr ];\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   * if the attribute doesn't exist a secondary one is looked up. If that value\n   * is an object and contains the given subproperty the value is resolved once again.\n   *\n   * @param {string} attr\n   * @param {string} other\n   * @param [string] subproperty\n   */\n  valueOr: function(attr, other, subproperty)\n  {\n    var value = this.frame[ attr ];\n      \n    if ( !anim8.isDefined( value ) )\n    {\n      value = this.frame[ attr = other ];\n      \n      if ( anim8.isDefined( subproperty ) )\n      {\n        value = value[ subproperty ];\n      }\n    }\n    \n    return value + this.units[ attr ];\n  }\n\n});\n","/**\n * Animate.css animations in anim8js.\n *\n * http://daneden.github.io/animate.css/\n */\n\nanim8.save('bounce', {\n\tkeyframe: {\n    '0,20,53,80,100': {\n      translate3d: 0,\n      easing: [0.215, 0.610, 0.355, 1.000]\n    },\n    '40,43': {\n      translate3d: {y:-30},\n      easing: [0.755, 0.050, 0.855, 0.060]\n    },\n    '70': {\n      translate3d: {y:-15},\n      easing: [0.755, 0.050, 0.855, 0.060]\n    },\n    '90': {\n      translate3d: {y:-4}\n    }\n\t}\n});\n\nanim8.save('rubberBand', {\n\tkeyframe: {\n    '0,100': {\n      scale3d: 1\n    },\n    '30': {\n      scale3d: {x:1.25, y:0.75}\n    },\n    '40': {\n      scale3d: {x:0.75, y:1.25}\n    },\n    '50': {\n      scale3d: {x:1.15, y:0.85}\n    },\n    '65': {\n      scale3d: {x:0.95, y:1.05}\n    },\n    '75': {\n      scale3d: {x:1.05, y:0.95}\n    }\n\t},\n  scaleBases: {\n    scale3d: 1\n  }\n});\n\nanim8.save('flash', {\n  keyframe: {\n    '0,50,100': {\n      opacity: 1\n    },\n    '25,75': {\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('pulse', {\n  keyframe: {\n    '0': {\n      scale3d: 1\n    },\n    '50': {\n      scale3d: 1.05\n    },\n    '100': {\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1\n  }\n});\n\nanim8.save('shake', {\n  keyframe: {\n    '0,100': {\n      translateX: 0.0\n    },\n    '10,30,50,70,90': {\n      translateX: -10.0\n    },\n    '20,40,60,80': {\n      translateX: 10.0\n    } \n  }\n});\n\nanim8.save('swing', {\n  keyframe: {\n    '0': {\n      rotate: 0\n    },\n    '20': {\n      rotate: 15\n    },\n    '40': {\n      rotate: -10\n    },\n    '60': {\n      rotate: 5\n    },\n    '80': {\n      rotate: -5\n    },\n    '100': {\n      rotate: 0\n    }\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'center top'\n  }\n});\n\nanim8.save('tada', {\n  keyframe: {\n    '0,100': {\n      scale3d: 1,\n      rotate: 0\n    },\n    '10,20': {\n      scale3d: 0.9,\n      rotate: -3\n    },\n    '30,50,70,90': {\n      scale3d: 1.1,\n      rotate: 3\n    },\n    '40,60,80': {\n      scale3d: 1.1,\n      rotate: -3\n    }\n  },\n  scaleBases: {\n    scale3d: 1\n  }\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('wobble', {\n  keyframe: {\n    '0,100': {\n      translateX: 0,\n      rotate: 0\n    },\n    '15': {\n      translateX: -25,\n      rotate: -5\n    },\n    '30': {\n      translateX: 20,\n      rotate: 3\n    },\n    '45': {\n      translateX: -15,\n      rotate: -3\n    },\n    '60': {\n      translateX: 10,\n      rotate: 2\n    },\n    '75': {\n      translateX: -5,\n      rotate: -1\n    }\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('bounceIn', {\n  keyframe: {\n    '0': {\n      opacity: 0.0,\n      scale3d: 0.3\n    },\n    '20': {\n      scale3d: 1.1\n    },\n    '40': {\n      scale3d: 0.9\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 1.03\n    },\n    '80': {\n      scale3d: 0.97\n    },\n    '100': {\n      opacity: 1.0,\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n}, {\n  easing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceInDown', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: -3000\n    },\n    '60': {\n      opacity: 1,\n      translateY: 25\n    },\n    '75': {\n      translateY: -10\n    },\n    '90': {\n      translateY: 5\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 2000,\n  easing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceInLeft', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -3000\n    },\n    '60': {\n      opacity: 1,\n      translateX: 25\n    },\n    '75': {\n      translateX: -10\n    },\n    '90': {\n      translateX: 5\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 2000,\n  teasing: [0.215, 0.610, 0.355, 1.000]\n});\n\n\nanim8.save('bounceInRight', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: 3000\n    },\n    '60': {\n      opacity: 1,\n      translateX: -25\n    },\n    '75': {\n      translateX: 10\n    },\n    '90': {\n      translateX: -5\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 2000,\n  teasing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceInUp', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: 3000\n    },\n    '60': {\n      opacity: 1,\n      translateY: -25\n    },\n    '75': {\n      translateY: 10\n    },\n    '90': {\n      translateY: -5\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 1000,\n  teasing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceOut', {\n  keyframe: {\n    '0': {\n      scale3d: 1\n    },\n    '20': {\n      scale3d: 0.9\n    },\n    '50,55': {\n      opacity: 1,\n      scale3d: 1.1\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.3\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n}, {\n  duration: 750\n});\n\nanim8.save('bounceOutDown', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '20': {\n      translateY: 10\n    },\n    '40,45': {\n      opacity: 1,\n      translateY: -20\n    },\n    '100': {\n      opacity: 0,\n      translateY: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('bounceOutLeft', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '20': {\n      opacity: 1,\n      translateX: 20\n    },\n    '100': {\n      opacity: 0,\n      translateX: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('bounceOutRight', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '20': {\n      opacity: 1,\n      translateX: -20\n    },\n    '100': {\n      opacity: 0,\n      translateX: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('bounceOutUp', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '20': {\n      translateY: -10\n    },\n    '40,45': {\n      opacity: 1,\n      translateY: 20\n    },\n    '100': {\n      opacity: 0,\n      translateY: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeIn', {\n  keyframe: {\n    '0': {\n      opacity: 0\n    },\n    '100': {\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInDown', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: -100\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeInDownBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: -2000\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInLeft', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -100\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeInLeftBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -2000\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInRight', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: 100\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeInRightBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: 2000\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInUp', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: 100\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }, \n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeInUpBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: 2000\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOut', {\n  keyframe: {\n    '0': {\n      opacity: 1\n    },\n    '100': {\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutDown', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: 100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeOutDownBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutLeft', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: -100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeOutLeftBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutRight', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: 100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeOutRightBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutUp', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: -100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeOutUpBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('flip', {\n  keyframe: {\n    '0': {\n      translateZ: 0,\n      rotate3d: {x:0, y:1, z:0, angle:-360},\n      scale3d: 1,\n      easing: 'cssEaseOut'\n    },\n    '40': {\n      translateZ: 150,\n      rotate3d: {x:0, y:1, z:0, angle:-190},\n      easing: 'cssEaseOut'\n    },\n    '50': {\n      translateZ: 150,\n      rotate3d: {x:0, y:1, z:0, angle:-170},\n      easing: 'cssEaseIn'\n    },\n    '80': {\n      translateZ: 0,\n      rotate3d: {x:0, y:1, z:0, angle:0},\n      scale3d: 0.95,\n      easing: 'cssEaseIn'\n    },\n    '100': {\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n});\n\nanim8.save('flipInX', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      rotate3d: {x:1, y:0, z:0, angle:90},\n      easing: 'cssEaseIn'\n    },\n    '40': {\n      rotate3d: {x:1, y:0, z:0, angle:-20},\n      easing: 'cssEaseIn'\n    },\n    '60': {\n      opacity: 1,\n      rotate3d: {x:1, y:0, z:0, angle:10}\n    },\n    '80': {\n      rotate3d: {x:1, y:0, z:0, angle:-5}\n    },\n    '100': {\n      rotate3d: {x:1, y:0, z:0, angle:0}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n});\n\nanim8.save('flipInY', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      rotate3d: {x:0, y:1, z:0, angle:90},\n      easing: 'cssEaseIn'\n    },\n    '40': {\n      rotate3d: {x:0, y:1, z:0, angle:-20},\n      easing: 'cssEaseIn'\n    },\n    '60': {\n      opacity: 1,\n      rotate3d: {x:0, y:1, z:0, angle:10}\n    },\n    '80': {\n      rotate3d: {x:0, y:1, z:0, angle:-5}\n    },\n    '100': {\n      rotate3d: {x:0, y:1, z:0, angle:0}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n});\n\nanim8.save('flipOutX', {\n  keyframe: {\n    '0': {\n      rotate3d: {x:1, y:0, z:0, angle:0}\n    },\n    '30': {\n      opacity: 1,\n      rotate3d: {x:1, y:0, z:0, angle:-20}\n    },\n    '100': {\n      opacity: 0,\n      rotate3d: {x:1, y:0, z:0, angle:90}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n}, {\n  duration: 750\n});\n\nanim8.save('flipOutY', {\n  keyframe: {\n    '0': {\n      rotate3d: {x:0, y:1, z:0, angle:0}\n    },\n    '30': {\n      opacity: 1,\n      rotate3d: {x:0, y:1, z:0, angle:-20}\n    },\n    '100': {\n      opacity: 0,\n      rotate3d: {x:0, y:1, z:0, angle:90}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n}, {\n  duration: 750\n});\n\nanim8.save('lightSpeedIn', {\n  keyframe: {\n    '0': {\n      translateX: 100,\n      skewX: -30,\n      opacity: 0\n    },\n    '60': {\n      skewX: 20,\n      opacity: 1\n    },\n    '80': {\n      skewX: -5\n    },\n    '100': {\n      translateX: 0,\n      skewX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n}, {\n  easing: 'cssEaseOut'\n});\n\nanim8.save('lightSpeedOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0,\n      skewX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: 100,\n      skewX: 30\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n}, {\n  easing: 'cssEaseIn'\n});\n\nanim8.save('rotateIn', {\n  keyframe: {\n    '0': {\n      rotate: -200,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'center'\n  }\n});\n\nanim8.save('rotateInDownLeft', {\n  keyframe: {\n    '0': {\n      rotate: -45,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n});\n\nanim8.save('rotateInDownRight', {\n  keyframe: {\n    '0': {\n      rotate: 45,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('rotateInUpLeft', {\n  keyframe: {\n    '0': {\n      rotate: 45,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n});\n\nanim8.save('rotateInUpRight', {\n  keyframe: {\n    '0': {\n      rotate: -90,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('rotateOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: 200\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'center'\n  }\n});\n\nanim8.save('rotateOutDownLeft', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: 45\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n})\n\nanim8.save('rotateOutDownRight', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: -45\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('rotateOutUpLeft', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: -45\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n});\n\nanim8.save('rotateOutUpRight', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: 90\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('hinge', {\n  keyframe: {\n    '0': {\n      rotate: 0\n    },\n    '20,60': {\n      rotate: 80\n    },\n    '40': {\n      rotate: 60\n    },\n    '80': {\n      rotate: 60,\n      translateY: 0,\n      opacity: 1\n    },\n    '100': {\n      rotate: 0,\n      translateY: 700,\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'top left'\n  }\n}, {\n  easing: 'cssEaseInOut',\n  duration: 2000\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('rollIn', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -100,\n      rotate: -120\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0,\n      rotate: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('rollOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0.0,\n      translateX: 100,\n      rotate: 120\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('zoomIn', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.3\n    },\n    '50': {\n      opacity: 1\n    },\n    '100': {\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInDown', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: -1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: 60,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInLeft', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: -1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: 10,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInRight', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: 1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: -10,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInUp', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: 1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: -10,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      scale3d: 1\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.3\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n}, {\n  duration: '500ms'\n});\n\nanim8.save('zoomOutDown', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateY: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: -60,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: 2000,\n      origin: 'center bottom'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('zoomOutLeft', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateX: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: 42,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: -2000,\n      origin: 'left center'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('zoomOutRight', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateX: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: -42,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: 2000,\n      origin: 'right center'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('zoomOutUp', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateY: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: 60,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: -2000,\n      origin: 'center bottom'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('slideInDown', {\n  keyframe: {\n    '0': {\n      translateY: -100\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('slideInLeft', {\n  keyframe: {\n    '0': {\n      translateX: -100\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('slideInRight', {\n  keyframe: {\n    '0': {\n      translateX: 100\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('slideInUp', {\n  keyframe: {\n    '0': {\n      translateY: 100\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('slideOutDown', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '100': {\n      translateY: 100\n    }\n  },\n  units: {\n    translateY: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\nanim8.save('slideOutLeft', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '100': {\n      translateX: -100\n    }\n  },\n  units: {\n    translateX: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\nanim8.save('slideOutRight', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '100': {\n      translateX: 100\n    }\n  },\n  units: {\n    translateX: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\nanim8.save('slideOutUp', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '100': {\n      translateY: -100\n    }\n  },\n  units: {\n    translateY: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\n/* anim8js animations */\n\nanim8.save('blurOut', {\n  keyframe: {\n    '0': {\n      blur: 0,\n      opacity: 1\n    },\n    '50': {\n      blur: 4,\n      opacity: 0.9\n    },\n    '100': {\n      blur: 5,\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('blurIn', {\n  keyframe: {\n    '0': {\n      blur: 5,\n      opacity: 0\n    },\n    '50': {\n      blur: 4,\n      opacity: 0.9\n    },\n    '100': {\n      blur: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('rotateLeft', {\n  move: {\n    rotate: -90\n  }\n});\n\nanim8.save('rotateRight', {\n  move: {\n    rotate: 90\n  }\n});\n\nanim8.save('rotateLeftFull', {\n  move: {\n    rotate: -360\n  }\n});\n\nanim8.save('rotateRightFull', {\n  move: {\n    rotate: 360\n  }\n});\n\nanim8.save('wiggle', {\n  keyframe: {\n    '0.00,100.00': {\n      rotate: 0 \n    },\n    '12.50': {\n      rotate: -45\n    },\n    '37.50': {\n      rotate: 45\n    },\n    '58.33': {\n      rotate: -30\n    },\n    '75.00': {\n      rotate: 30\n    },\n    '87.50': {\n      rotate: -15\n    },\n    '95.83': {\n      rotate: 15\n    }\n  },\n  initial: {\n    origin: 'center'\n  }\n});\n\n/**\n * Generate animations for all permutations of the following concepts:\n *\n * (slide|fade|zoom)(Out|In)(Down|Up)(Right|Left)(|x2|Big)\n */\n(function() \n{\n  var actions = {\n    'slide': {},\n    'fade': {opacity:{from:0,to:1}},\n    'zoom': {scale3d:{from:0,to:1}}\n  };\n  \n  var directions = {\n    'Out':  {from:0, to:1},\n    'In':   {from:1, to:0}\n  };\n  \n  var vertical = {\n    'Down': 1,\n    'Up': -1\n  };\n  \n  var horizontal = {\n    'Right': 1,\n    'Left': -1\n  };\n  \n  var sizes = {\n    '':     {value: 100, unit: '%'},\n    'x2':   {value: 200, unit: '%'},\n    'Big':  {value: 2000, unit: 'px'}\n  };\n  \n  for ( var a in actions )\n  {\n    var attrs = actions[ a ];\n    \n    for ( var d in directions )\n    {\n      var dir = directions[ d ];\n      \n      for ( var v in vertical )\n      {\n        var ver = vertical[ v ];\n        \n        for ( var h in horizontal )\n        {\n          var hor = horizontal[ h ];\n          \n          for ( var s in sizes )\n          {\n            var siz = sizes[ s ];\n            \n            var animName = a + d + v + h + s;\n            \n            if ( animName in anim8.animation )\n            {\n              continue;\n            }\n            \n            var anim = \n            {\n              keyframe: {\n                from: {\n                  translateX: hor * dir.from * siz.value,\n                  translateY: ver * dir.from * siz.value\n                },\n                to: {\n                  translateX: hor * dir.to * siz.value,\n                  translateY: ver * dir.to * siz.value\n                }\n              },\n              units: {\n                translateX: siz.unit,\n                translateY: siz.unit\n              }\n            };\n            \n            for (var attr in attrs)\n            {\n              var attribute = attrs[attr];\n              \n              anim.keyframe.from[ attr ] = dir.to * attribute.to + dir.to * attribute.from;\n              anim.keyframe.to[ attr ]   = dir.from * attribute.from + dir.from * attribute.to;\n            }\n            \n            anim8.save( animName, anim );\n          }\n        }\n      }\n    }\n  }\n  \n})();","/**\n * Adds useful anim8js functions to jQuery.\n * \n * @param  {jQuery}\n * @param  {anim8}\n * @param  {anim8s}\n * @return {function}\n */\n(function($, m8, m8s)\n{\n\n  /**\n   * Extend the clone function to remove the attribute which stores the animator ID so clones get new animators.\n   * \n   * @return {jQuery}\n   */\n  var cloner = $.fn.clone;\n  \n  $.fn.clone = function()\n  {\n    this.removeAttr( anim8.factory.dom.attribute );\n\n    return cloner.apply( this, arguments );\n  };\n\n  /**\n   * Adds the m8, anim8, and animator functions to jQuery. An instance of anim8.Animator will be returned.\n   * \n   * @return {anim8.Animator}\n   */\n  $.fn.m8 = $.fn.anim8 = $.fn.animator = function()\n  {\n    return m8( this[0] );\n  };\n\n  /**\n   * Adds the m8s, anim8s, animators functions to jQuery. An instance of anim8.Animators will be returned.\n   * \n   * @return {anim8.Animators}\n   */\n  $.fn.m8s = $.fn.anim8s = $.fn.animators = function()\n  {\n    return m8s( this.get() );\n  };\n  \n  /**\n   * Plays the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  [boolean] all\n   * @param  [boolean] cache\n   * @return {this}\n   * @see anim8.Animator.play\n   */\n  $.fn.dataPlay = function( animationAttribute, all, cache )\n  {\n    var options = {};\n\n\t\treturn this.filter(function()\n\t  {\n\t\t\tvar animationText = $(this).data( animationAttribute );\n\t\t\n\t\t\tif ( animationText )\n\t\t\t{\n        var animation = anim8.animation( animationText, options, cache );\n\n        if ( animation !== false )\n        {\n          m8( this ).play( animation ); \n\n          return true;\n        }\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n  \t});\n  };\n  \n  /**\n   * Queues the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  [boolean] cache\n   * @return {this}\n   * @see anim8.Animator.queue\n   */\n  $.fn.dataQueue = function( animationAttribute, cache )\n  {\t\n    var options = {};\n\n  \treturn this.filter(function()\n    {\n  \t\tvar animationText = $(this).data( animationAttribute );\n\t\t\n  \t\tif ( animationText )\n  \t\t{\n        var animation = anim8.animation( animationText, options, cache );\n\n        if ( animation !== false )\n        {\n          m8( this ).queue( animation );\n\n          return true;\n        }\n  \t\t}\n\t\t\t\n\t\t\treturn false;\n    });\n  };\n\n  /**\n   * Transitions into the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  {number} transitionTime\n   * @param  {number} transitionDelta\n   * @param  {string|function} transitionEasing\n   * @param  {boolean} cache\n   * @return {this}\n   */\n  $.fn.dataTransition = function( animationAttribute, transitionTime, transitionDelta, transitionEasing, cache )\n  { \n    var options = {};\n\n    return this.filter(function()\n    {\n      var animationText = $(this).data( animationAttribute );\n    \n      if ( animationText )\n      {\n        var animation = anim8.animation( animationText, options, cache );\n \n        if ( animation !== false )\n        {\n          m8( this ).transition( transitionTime, transitionDelta, transitionEasing, animation );\n          \n          return true;\n        }\n      }\n      \n      return false;\n    });\n  };\n\n  /**\n   * Transitions into the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  {number} transitionTime\n   * @param  {number} transitionFromDelta\n   * @param  {number} transitionIntoDelta\n   * @param  {string|function} transitionEasing\n   * @param  {boolean} cache\n   * @return {this}\n   */\n  $.fn.dataTransitionInto = function( animationAttribute, transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, cache )\n  { \n    var options = {};\n\n    return this.filter(function()\n    {\n      var animationText = $(this).data( animationAttribute );\n    \n      if ( animationText )\n      {\n        var animation = anim8.animation( animationText, options, cache );\n \n        if ( animation !== false )\n        {\n          m8( this ).transitionInto( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation );\n          \n          return true;\n        }\n      }\n      \n      return false;\n    });\n  };\n\n  /**\n   * Wraps every character with a span and the class sequenced and returns a jquery\n   * element containing all wrapped characters.\n   * \n   * @return {jQuery}\n   */\n  $.fn.sequence = function()\n  {\n    this.each(function()\n    {\n      $(this).html( $(this).wrapCharacters('div', 'class=\"sequenced\"') );\n    });\n\n    return this.find('.sequenced');\n  };\n\n  /**\n   * Wraps every character in ever element in the jQuery object with a tag.\n   * If an element already only has one character it remains untouched.\n   * \n   * @param  {string} tagName\n   * @param  {string} attributes\n   * @return {string} attributes\n   */\n  $.fn.wrapCharacters = function(tagName, attributes)\n  {\n    var tagBegin = '<' + tagName + (typeof attributes === 'string' ? ' ' + attributes : '') + '>';\n    var tagEnd = '</' + tagName + '>';\n    var html = '';\n\n    $(this).contents().each(function()\n    {\n      // Is this a text node?\n      if (this.nodeType === 3)\n      {\n        // Break up node wrapping each character\n        var text = this.wholeText;\n\n        if (text.length > 1)\n        {\n          // Collapse whitespaces\n          var previousSpace = false;\n          for (var i = 0; i < text.length; i++)\n          {\n            var space = text[i] <= ' ';\n            if (!space || !previousSpace)\n            {\n              html += tagBegin + text[i] + tagEnd;\n            }\n            previousSpace = space;\n          }\n        }\n        else\n        {\n          html += text;\n        }\n      }\n      else\n      {\n        // Not a text node!\n        var outer = this.outerHTML;\n        // If there are children, we need to recursively break them down\n        if (this.firstChild)\n        {\n          // Grab the element tag and attributes manually.\n          var start = 0;\n          var quotes = false;\n          while (start < outer.length)\n          {\n            var c = outer[start++];\n            if (c === '\"' || c === \"'\")\n            {\n              quotes = !quotes;\n            }\n            else if (c === '\\\\')\n            {\n              start++;\n            }\n            else if (c === '>' && !quotes)\n            {\n              break;\n            }\n          }\n          html += outer.substring(0, start) + $(this).wrapCharacters(tagName) + '</' + this.tagName.toLowerCase() + '>';\n        }\n        // No child nodes, just append outer HTML.\n        else\n        {\n          html += outer;\n        }\n      }\n    });\n\n    return html;\n  };\n  \n})(jQuery, anim8, anim8s);\n"],"sourceRoot":"/source/"}