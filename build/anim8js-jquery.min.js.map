{"version":3,"sources":["anim8js-core.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-point.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-event.js","anim8js-event-instance.js","anim8js-animation.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tween.js","anim8js-factory.js","anim8js-object.js","anim8js-dom-core.js","anim8js-dom-property.js","anim8js-dom-attribute.js","anim8js-dom-animator.js","anim8js-animate.css.js","anim8js-jquery.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","log","size","prop","isEmpty","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","delay","defaults","sleep","duration","repeat","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","scale","constant","variable","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","easing","teasing","transitionTime","transitionDelta","transitionIntoDelta","transitionEasing","cache","Defer","methods","$factory","$push","prototype","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","indexOf","pair","e","t","easingType","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","pong","yoyo","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attr","attribute","getAttribute","calc","getCalculator","clone","frame","defaultValue","relative","relativeAmount","relativeFunction","add","calculator","Calculator","create","adds","amount","sub","mul","interpolate","start","end","delta","zero","distance","distanceSq","isValid","isZero","isEqual","isRelative","getRelativeAmount","z","NumberCalculator","amountScale","ab","epsilon","Point2dCalculator","y","cx","cy","rx","ry","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Point3dCalculator","cz","rz","dz","QuaternionCalculator","angle","ra","da","RGBCalculator","rr","rg","rb","dr","dg","db","RGBACalculator","path","Path","spring","type","reset","name","points","hasComputed","compute","ps","isComputedValue","reference","trues","last","first","point","replaceComputed","resolvePoint","Tween","tween","CubicPath","p0","p1","p2","p3","d1","d2","d3","i1","i3","QuadraticPath","quadratic","DeltaPath","deltas","ds","d0","pd","JumpPath","index","jump","CompiledPath","pointCount","compiled","KeyframePath","easings","ea","keyframe","defaultEasing","PointPath","Spring","rest","position","gravity","velocity","preupdate","parseValue","value","update","dt","MAX_DT","starting","updateVelocity","updated","EPSILON","resolveRest","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","temp","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","scaleBase","hasInitialState","parser","newInstance","EventInstance","isInstance","getParser","totalTime","isInfinite","timeRemaining","timeRemainingInChain","finiteTimeRemaining","finiteTimeRemainingInChain","queue","state","pauseTime","pauseState","elapsed","catchup","isAnimating","finish","progress","applyValue","isPaused","isDelayed","isSleeping","cycle","cycleCount","maxCycles","computeValue","baseValue","newState","getDelta","getPoint","getFuture","fdelta","getStart","getEnd","pause","resume","hasStarted","isFinished","hasStates","states","stateText","animation","options","Animation","key","animationStrings","anim","parsedAnimation","parsedOptions","parserName","save","part","charAt","substring","isSaved","newEvents","instances","cloneEvents","merge","force","fn","eventsAdded","eventsComputed","springs","springsAdded","attributes","calculators","finished","active","restore","ce","setDefault","sa","wasFinished","placeSpring","placeEvent","trimEvents","activate","deactivate","destroy","createEvents","onAnimation","eventMap","queueEvents","maxRemaining","existing","unspring","springsFor","play","all","playEvents","attrs","transition","transitionEvents","e1","e2","transitionPath","transitionEvent","transitionInto","transitionFromDelta","transitionIntoEvents","tweenTo","target","tweenManyTo","targets","starts","ends","tweenMany","applyInitialState","eventCount","eventsFor","remaining","ref","request","get","follow","objectsFor","objects","resulting","stop","set","hasEvents","hasSprings","getSubject","wrapper","invoke","func","DeferAnimator","fill","each","iterator","filter","filterer","alive","remove","getSubjects","reverse","mid","e0","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","Parser","newOptions","oldOptions","durations","delays","sleeps","repeats","scales","scaleBases","ParserDeltas","values","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","sort","from","half","to","times","maxTime","order","pathEasings","ParserTween","highestPriorityFactory","factoryName","is","priority","Factory","ObjectFactory","$animator","dom","DomFactory","cached","ids","elementAttribute","animatorId","DomAnimator","setAttribute","style","hyphenated","hyphenize","str","replace","currentStyle","document","defaultView","getComputedStyle","getPropertyValue","prefix","createElement","prefixes","convert","toPixels","baseUnit","defaultRate","body","div","appendChild","width","pixels","offsetWidth","removeChild","getFontSize","notUnit","fontSize","getConverterScale","px","relativeTo","variables","parentWidth","parentNode","scrollWidth","parentHeight","scrollHeight","height","offsetHeight","parentFontSize","htmlFontSize","htmlElement","getElementsByTagName","pt","cm","mm","vw","deg","rad","PI","em","rem","given","converter","toUnit","fromUnit","converter1","converter2","nm","converted","units","styles","unset","factoryDerivable","deriver","factoryColor","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","outlineWidth","textIndent","borderSpacing","lineHeight","zIndex","backgroundColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor","minWidth","maxWidth","minHeight","maxHeight","offsetTop","offsetLeft","visibility","backface","css","transformOrigin","keywords","setOriginAttribute","setOrigin","origin","originZ","valueOr","transform","translate","translate3d","scale3d","d4","rotate3d","translateX","translateY","translateZ","scaleX","scaleY","scaleZ","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY","desiredUnit","transforms","join","opacity","grayscale","sepia","saturate","hueRotate","invert","brightness","contrast","blur","patterns","RegExp","filters","ccx","ccy","centerX","centerY","preset","rw","rh","orbit","DEGREE_TO_RADIAN","RADIAN_TO_DEGREE","ox","oy","orbitOffset","cunit","cox","coy","atan2","orbitX","orbitY","originUnit","originX","originY","defaultUnit","outlineOffset","saturation","properties","attributeToProperty","styled","stylesUpdated","getStyles","applyProperties","props","flash","other","subproperty","0,20,53,80,100","40,43","70","90","0,100","30","40","50","65","75","0,50,100","25,75","0","100","10,30,50,70,90","20,40,60,80","20","60","80","10,20","30,50,70,90","40,60,80","15","45","50,55","40,45","final","20,60","actions","slide","fade","zoom","directions","Out","In","vertical","Down","Up","horizontal","Right","Left","sizes","Big","dir","ver","hor","siz","animName","jQueryFactory","jQuery","jquery","$","cloner","removeAttr","dataPlay","animationAttribute","animationText","data","dataQueue","dataTransition","dataTransitionInto","html","wrapCharacters","find","tagName","tagBegin","tagEnd","contents","text","wholeText","previousSpace","space","outer","outerHTML","firstChild","quotes"],"mappings":"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","file":"anim8js-jquery.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {array} subject\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * If the user is interested in seeing warnings they can override this by specifying\n * a function which accepts a text argument providing a generc message, a second argument\n * which has the input that caused the warning, and a third agument with the object\n * throwing the warning. Most warnings that are thrown occur when an animation is\n * trying to be parsed an the user provided an invalid animation, time, easing, etc.\n *\n * @param {string} message\n * @param {any} source\n */\nanim8.log = false;\n\n/**\n * Returns the size of the variable. The size of a variable is dependent on the variable\n * type. For arrays and strings their length is returned. If it's an object the number of\n * enumerable properties is returned. If it's a number, the number is returned. Otherwise\n * zero is returned.\n *\n * @param {any} x\n */\n anim8.size = function(x)\n {\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length;\n  }\n  else if ( x === null )\n  {\n    return 0;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var size = 0;\n\n    for (var prop in x)\n    {\n      size++;\n    }\n\n    return size;\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n};\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding overriding any existing properties.\n * \n * @param  {object} out\n * @return {object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding existing properties where necessary.\n * \n * @param  {object}\n * @return {object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses scale from a string or number.\n * \n * @param  {string|number}\n * @return {number}\n */\nanim8.scale = function(scale, returnOnInvalid)\n{\n  if ( anim8.isNumber( scale ) )\n  {\n    return scale;\n  }\n\n  return anim8.coalesce( returnOnInvalid, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n * \n * @param  {number} v\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n      \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t        eventListeners.length = 0;\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   * \n   * @type {number}\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @type {string|function}\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @type {string|function}\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @type {number}\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @type {number}\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @type {number}\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @type {number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @type {number}\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition delta.\n   * \n   * @type {number}\n   */\n  transitionDelta: 0.2,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {number}\n   */\n  transitionIntoDelta: 0.2,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {string|function}\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * @type {boolean}\n   */\n  cache: false\n\n};\n","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n    \n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * [bezier description]\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\n/**\n * [default description]\n * @type {[type]}\n */\nanim8.easing.default      = anim8.easing.ease;\n","\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) {\n\t\treturn easing( x );\n\t};\n};\n\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) {\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } else {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\nanim8.easingType.pong = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x );\n\t  } else {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n// yoyo is an alias for pong\nanim8.easingType.yoyo = anim8.easingType.pong;\n","\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * [computed description]\n * @type {Object}\n */\nanim8.computed = {};\n\n/**\n * Calculates the current value for an animator.\n * \n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.current = function(event, animator)\n{\n  var attr = event.attribute;\n  var attribute = animator.getAttribute( attr );\n  var calc = animator.getCalculator( attr );\n\n  if ( attr in animator.frame )\n  {\n    return calc.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return calc.clone( attribute.defaultValue );\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currenrtly in the animator.\n * \n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.relative = function(relativeAmount)\n{\n  var relativeFunction = function(event, animator)\n  { \n    var attr = event.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = animator.getCalculator( attr );\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = calc.clone( attribute.defaultValue );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  return relativeFunction;\n};","/**\n * Calculators perform math and basic operations for a specific data structure.\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Instantiates a new Calculator instance.\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * [copy description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * [clone description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clone: function(out) \n  {\n    return this.copy( this.create(), out );\n  },\n\n  /**\n   * [create description]\n   * @return {[type]}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * [scale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * [add description]\n   * @param {[type]}\n   * @param {[type]}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * [adds description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * [sub description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * [mul description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * [interpolate description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * [distance description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * [distanceSq description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * [isValid description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * [isNaN description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * [isZero description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * [isEqual description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * [isRelative description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * [relativeAmount description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n */\nanim8.NumberCalculator = function()\n{\n\n};\n\nanim8.override( anim8.NumberCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  }\n});\n\n/**\n * Register the calculators.\n */\nanim8.calculator['number']      = new anim8.NumberCalculator();\nanim8.calculator['default']     = anim8.calculator['number'];\n","\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.Point2dCalculator = function()\n{\n\n};\n\nanim8.override( anim8.Point2dCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n\n        if ( this.isRelative( cx ) || this.isRelative( cy ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  }\n});\n\n/**\n * Register all calculators.\n */\nanim8.calculator['2d']          = new anim8.Point2dCalculator();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.Point3dCalculator = function()\n{\n\n};\n\nanim8.override( anim8.Point3dCalculator.prototype = new anim8.Calculator(), \n{\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n\n        if ( this.isRelative( cx ) || this.isRelative( cy ) || this.isRelative( cz ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['3d']          = new anim8.Point3dCalculator();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.QuaternionCalculator = function()\n{\n\n};\n\nanim8.override( anim8.QuaternionCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n\n        if ( this.isRelative( cx ) || this.isRelative( cy ) || this.isRelative( cz ) || this.isRelative( ca ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  }\n});\n\n\n/**\n * Register the calculator.\n */\nanim8.calculator['quaternion']  = new anim8.QuaternionCalculator();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.RGBCalculator = function()\n{\n\n};\n\nanim8.override( anim8.RGBCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n\n        if ( this.isRelative( cr ) || this.isRelative( cg ) || this.isRelative( cb ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n\t\t\n    // Try to parse the color.\n\t\tvar parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgb']         = new anim8.RGBCalculator();\n","\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.RGBACalculator = function()\n{\n\n};\n\nanim8.override( anim8.RGBACalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n\n        if ( this.isRelative( cr ) || this.isRelative( cg ) || this.isRelative( cb ) || this.isRelative( ca ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgba']        = new anim8.RGBACalculator();\n","\n/**\n * [path description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n/**\n * [Path description]\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * [reset description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n\t{\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( this.isComputedValue( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * [isComputedValue description]\n   * @return {Boolean}\n   */\n  isComputedValue: function(x)\n  {\n    return anim8.isFunction( x ) && x.computed;\n  },\n\n  /**\n   * [reference description]\n   * @return {[type]}\n   */\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n\n  /**\n   * [last description]\n   * @return {[type]}\n   */\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n\n  /**\n   * [first description]\n   * @return {[type]}\n   */\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n\n  /**\n   * [point description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n\n  /**\n   * [replaceComputed description]\n   * @return {[type]}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( this.isComputedValue( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * [resolvePoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  }\n\n};\n","\n/**\n * [Tween description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n\n});\n\n/**\n * [tween description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.tween = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  var defaultValue = calc.create();\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, defaultValue ),\n    calc.parse( path.end, defaultValue )\n  );\n};\n","\n/**\n * [CubicPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.CubicPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  }\n\n});\n\n/**\n * [cubic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.cubic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * [QuadraticPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.QuadraticPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  }\n\n});\n\n/**\n * [quadratic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.quadratic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * [DeltaPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.DeltaPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n      return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n\n});\n\n/**\n * [delta description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.delta = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * [JumpPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.JumpPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n  }\n\n});\n\n/**\n * [jump description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.jump = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * [CompiledPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.CompiledPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CompiledPath( this.name, this, this.points.length );\n  }\n\n});\n\n/**\n * [compiled description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.compiled = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * [KeyframePath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.KeyframePath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n\n});\n\n/**\n * [keyframe description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.keyframe = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * [PointPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.override( anim8.PointPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.copy( out, this.resolvePoint( 0 ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n  }\n\n});\n\n/**\n * [point description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.point = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.Spring.prototype = \n{\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  reset: function(attribute, calculator, rest, position, gravity)\n  { \n    this.attribute    = attribute;\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = null;\n    this.time         = 0;\n  },\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  preupdate: function(animator)\n  {\n    var attr = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attr.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attr.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attr.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.create() );\n    this.velocity   = calc.create();\n  },\n\n  /**\n   * [parseValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isFunction( parsed ) )\n    {\n      if ( parsed.computed )\n      {\n        parsed = parsed( this, animator );\n      }\n    }\n\n    return parsed;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} now\n   * @param {object} frame\n   */\n  update: function(now, frame)\n  {\n    if (this.time === 0)\n    {\n      this.time = now;\n    }\n    \n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (now - this.time) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.copy( {}, this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    this.time = now;\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  }\n};\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * [LinearSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.LinearSpring.prototype = new anim8.Spring(), \n{\n  preupdate: function(animator)\n  {\n    anim8.Spring.prototype.preupdate.apply( this, arguments );\n\n    var attr = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attr.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attr.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring.linear = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\n/**\n * [DistanceSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.DistanceSpring.prototype = new anim8.Spring(), \n{\n  preupdate: function(animator)\n  {\n    anim8.Spring.prototype.preupdate.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring.distance = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\n/**\n * [EventState description]\n * @type {[type]}\n */\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\n/**\n * [Event description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {Boolean}\n * @param {[type]}\n * @param {Function}\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  if ( attribute )\n  {\n    this.attribute        = attribute;\n    this.path             = path;\n    this.easing           = anim8.easing( easing );\n    this.delay            = anim8.delay( delay );\n    this.duration         = anim8.duration( duration );\n    this.sleep            = anim8.sleep( sleep );\n    this.repeat           = anim8.repeat( repeat );\n    this.scale            = anim8.scale( scale );\n    this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.create() );\n    this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n    this.parser           = parser;\n    this.next             = next; \n  }\n};\n\nanim8.Event.prototype = \n{\n  /**\n   * [newInstance description]\n   * @return {[type]}\n   */\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this );\n  },\n\n  /**\n   * [isInstance description]\n   * @return {Boolean}\n   */\n  isInstance: function()\n  {\n    return false\n  },\n\n  /**\n   * [getParser description]\n   * @return {[type]}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * [totalTime description]\n   * @return {[type]}\n   */\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n\n  /**\n   * [isInfinite description]\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime();\n  },\n\n  /**\n   * [timeRemainingInChain description]\n   * @return {[type]}\n   */\n  timeRemainingInChain: function()\n  {\n    return this.timeRemaining() + (this.next ? this.next.timeRemainingInChain() : 0);\n  },\n\n  /**\n   * [finiteTimeRemaining description]\n   * @return {[type]}\n   */\n  finiteTimeRemaining: function()\n  {\n    return this.isInfinite() ? 0 : this.timeRemaining();\n  },\n\n  /**\n   * [finiteTimeRemainingInChain description]\n   * @return {[type]}\n   */\n  finiteTimeRemainingInChain: function()\n  {\n    return this.isInfinite() ? 0 : this.timeRemaining() + (this.next ? this.next.finiteTimeRemainingInChain() : 0);\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n\n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(e)\n  {\n    if ( this.next )\n    {\n      this.next.queue( e );\n    }\n    else\n    {\n      this.next = e;\n    }\n  }\n\n};\n","\n/**\n * [EventInstance description]\n * @param {[type]}\n */\nanim8.EventInstance = function(event)\n{\n\tthis.event \t\t\t      = event;\n\tthis.attribute \t      = event.attribute;\n\tthis.path \t\t\t      = event.path;\n\tthis.duration \t      = event.duration;\n\tthis.easing \t\t      = event.easing;\n\tthis.delay \t\t\t      = event.delay;\n\tthis.sleep \t\t\t      = event.sleep;\n\tthis.repeat \t\t      = event.repeat;\n  this.scale            = event.scale;\n  this.scaleBase        = event.scaleBase;\n  this.hasInitialState  = event.hasInitialState;\n  this.next             = null;\n  this.state \t\t\t      = anim8.EventState.CREATED;\n  this.time \t\t\t      = 0;\n  this.pauseTime \t      = 0;\n  this.pauseState       = 0;\n\tthis.elapsed\t\t      = 0;\n};\n\nanim8.override( anim8.EventInstance.prototype = new anim8.Event(),\n{\n  /**\n   * [newInstance description]\n   * @return {[type]}\n   */\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this.event );\n  },\n\n  /**\n   * [isInstance description]\n   * @return {Boolean}\n   */\n  isInstance: function()\n  {\n    return true\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.EventInstance( this.event );\n  },\n\n  /**\n   * [getParser description]\n   * @return {[type]}\n   */\n  getParser: function()\n  {\n    return this.event.parser;\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed;\n  },\n\n  /**\n   * [update description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(now, frame) \n\t{\n    var updated = false;\n    var elapsed = this.catchup( now );\n    \n    if ( this.isAnimating() ) \n\t\t{\t\t\t\n      var delta = elapsed / this.duration;\n      \n      if (delta >= 1 || this.duration === 0)\n\t\t\t{\n        if (!this.isInfinite() && --this.repeat === 0) \n\t\t\t\t{\n          this.finish(frame);\n\t\t\t\t\t\n          return true;\n        } \n\t\t\t\telse \n\t\t\t\t{\n          if (this.sleep)\n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING ); \n            delta = 1;\n            \n            this.trigger('sleeping', this);\n          } \n\t\t\t\t\telse \n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.ANIMATING );\n            delta -= 1;\n          }\n        }\n      }\n      \n      this.applyValue( frame, frame[this.attribute], delta );\n      updated = true;\n    }\n    \n    return updated;\n  },\n\n  /**\n   * [catchup description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  catchup: function(now)\n  {\n    if ( this.isPaused() )\n    {\n      return;\n    }\n    \n    if ( this.state === anim8.EventState.CREATED )\n    {\n      this.time = now;\n      \n      if ( this.delay )\n      {\n        this.state = anim8.EventState.DELAYED;\n        \n        this.trigger('delaying', this);\n      } \n      else\n      {\n        this.state = anim8.EventState.ANIMATING;\n      }\n    }\n    \n    var elapsed = now - this.time;\n    \n    if ( this.isDelayed() )\n    {\n      if ( elapsed > this.delay ) \n      {\n        this.trigger('delayed', this);\n        \n        elapsed = this.progress( elapsed, this.delay, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isSleeping() )\n    {\n      if ( elapsed > this.sleep )\n      {\n        this.trigger('slept', this);\n        \n        elapsed = this.progress( elapsed, this.sleep, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isAnimating() && this.duration )\n    {\n      var cycle = this.duration + this.sleep;\n      var cycleCount = Math.floor( ( elapsed + this.sleep ) / cycle );\n      var maxCycles = Math.min( this.repeat, cycleCount );\n            \n      elapsed = this.progress( elapsed, maxCycles * cycle, anim8.EventState.ANIMATING );\n      \n      if ( !this.isInfinite() )\n      { \n        if (maxCycles === this.repeat)\n        {\n          elapsed = this.duration;\n          this.repeat = 1;\n        }\n        else\n        {\n          this.repeat -= cycleCount;\n        }\n      }\n      \n      if ( elapsed > this.duration )\n      {\n        elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING );\n        \n        this.trigger('sleeping', this);\n      }\n    }\n    \n    return elapsed;\n  },\n\n  /**\n   * [computeValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * [progress description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  progress: function(elapsed, time, newState) \n  {\n    this.time += time;\n    this.elapsed += time;\n    this.state = newState;\n    \n    return elapsed - time;\n  },\n\n  /**\n   * [finish description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n    \n    this.trigger('finish', this);\n  },\n\n  /**\n   * [applyValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[this.attribute] = value;\n    }\n  },\n\n  /**\n   * [getDelta description]\n   * @return {[type]}\n   */\n  getDelta: function()\n  {\n    return this.isAnimating() ? Math.min( 1.0, (anim8.now() - this.time) / this.duration ) : 0.0;\n  },\n\n  /**\n   * [getPoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getPoint: function(delta)\n  {\n    return this.computeValue( this.path.calculator.create(), delta );\n  },\n\n  /**\n   * [getFuture description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getFuture: function(fdelta)\n  {\n    return this.getPoint( Math.min( 1.0, this.getDelta() + fdelta ) );\n  },\n\n  /**\n   * [getStart description]\n   * @return {[type]}\n   */\n  getStart: function()\n  {\n    return this.getPoint( 0 );\n  },\n\n  /**\n   * [getEnd description]\n   * @return {[type]}\n   */\n  getEnd: function() \n\t{\n    return this.getPoint( 1 );\n  },\n\n  /**\n   * [pause description]\n   * @return {[type]}\n   */\n  pause: function() \n  {\n    if (this.state !== anim8.EventState.PAUSED) \n    {\n      this.pauseTime = anim8.now();\n      this.pauseState = this.state;\n      this.state = anim8.EventState.PAUSED; \n    }\n  },\n\n  /**\n   * [resume description]\n   * @return {[type]}\n   */\n  resume: function() \n  {\n    if (this.state === anim8.EventState.PAUSED) \n    {\n      this.time += anim8.now() - this.pauseTime;\n      this.state = this.pauseState; \n    }\n  },\n\n  /**\n   * [hasStarted description]\n   * @return {Boolean}\n   */\n  hasStarted: function()\n  {\n    return (this.state !== anim8.EventState.CREATED && this.state !== anim8.EventState.DELAYED);\n  },\n\n  /**\n   * [isAnimating description]\n   * @return {Boolean}\n   */\n  isAnimating: function() \n  {\n    return (this.state === anim8.EventState.ANIMATING);\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function() \n  {\n    return (this.state === anim8.EventState.FINISHED);\n  },\n\n  /**\n   * [isDelayed description]\n   * @return {Boolean}\n   */\n  isDelayed: function() \n  {\n    return (this.state === anim8.EventState.DELAYED);\n  },\n\n  /**\n   * [isPaused description]\n   * @return {Boolean}\n   */\n  isPaused: function() \n  {\n    return (this.state === anim8.EventState.PAUSED);\n  },\n\n  /**\n   * [isSleeping description]\n   * @return {Boolean}\n   */\n  isSleeping: function() \n  {\n    return (this.state === anim8.EventState.SLEEPING);\n  },\n\n  /**\n   * [hasStates description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  hasStates: function(states) \n  {\n    return (this.state & states) !== 0;\n  },\n\n  /**\n   * [stateText description]\n   * @return {[type]}\n   */\n  stateText: function() \n  {\n    switch(this.state) \n    {\n      case anim8.EventState.CREATED:            return \"created\";\n      case anim8.EventState.DELAYED:            return \"delayed\";\n      case anim8.EventState.ANIMATING:          return \"animating\";\n      case anim8.EventState.SLEEPING:           return \"sleeping\";\n      case anim8.EventState.FINISHED:           return \"finished\";\n    }\n  }\n\n});\n\n/**\n * Adds the following event methods to EventInstances: on, once, off, trigger.\n */\nanim8.eventize( anim8.EventInstance.prototype );","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n * @param [boolean] cache\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) )\n\t{\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationStrings = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationStrings.length; k++)\n    {\n      var split = animationStrings[ k ].toLowerCase().split(' ');\n      var parsedAnimation = anim8.animation[ split[ 0 ] ];\n      var parsedOptions = anim8.options( split.slice( 1 ) );\n\n      if ( parsedAnimation )\n      {\n        if ( anim === false )\n        {\n          last = anim = parsedAnimation.extend( parsedOptions, true );\n        }\n        else\n        {\n          last = last.next = parsedAnimation.extend( parsedOptions, true );\n        }\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n\t\tvar events = [];\n\t\tvar options = options || {};\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, events );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (events.length)\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, events );\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n *\n * [duration] x[repeat] z[sleep] ~[delay] ![scale] [easing[-easingType]]\n * \n * @param  {object|string} options\n * @return {object}\n */\nanim8.options = function(options)\n{\n  if ( anim8.isString( options ) )\n  {\n    options = options.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( options ) )\n  {\n    var parsed = {};\n\n    for (var i = 0; i < options.length; i++)\n    {\n      var part = options[i];\n      var first = part.charAt( 0 );\n\n      // Repeats\n      if ( first === 'x' )\n      {\n        var repeat = anim8.repeat( part.substring(1), false );\n\n        if ( repeat !== false )\n        {\n          parsed.repeat = repeat;\n        }\n      }\n      // Sleeping\n      if ( first === 'z' )\n      {\n        var sleep = anim8.time( part.substring(1), false );\n\n        if ( sleep !== false )\n        {\n          parsed.sleep = sleep;\n        }\n      }\n      // Delay\n      if ( first === '~' )\n      {\n        var delay = anim8.time( part.substring(1), false );\n\n        if ( delay !== false )\n        {\n          parsed.delay = delay;\n        }\n      }\n      // Scaling\n      if ( first === '!' )\n      {\n        var scale = parseFloat( part.substring(1) );\n\n        if ( !isNaN(scale) )\n        {\n          parsed.scale = scale;\n        }\n      }\n      // Easing?\n      var easing = anim8.easing( part, false );\n\n      if ( easing !== false )\n      {\n        parsed.easing = easing;\n      }\n\n      // Duration?\n      var duration = anim8.time( part, false );\n\n      if ( duration !== false )\n      {\n        parsed.duration = duration;\n      }\n      else\n      {\n        // If not a duration, might be an alternative repeat? (doesn't start with x)\n        var repeat = anim8.repeat( part, false );\n\n        if ( repeat !== false )\n        {\n          parsed.repeat = repeat;\n        }\n      }\n    }\n\n    return parsed; \n  }\n\n  if ( anim8.isObject( options ) )\n  {\n    return options;\n  }\n\n  return {};\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the events that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate events, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} events\n */\nanim8.Animation = function(name, input, options, events)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.events = events;\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an array of event instances from the events in this animation.\n   */\n  newEvents: function()\n  {\n    var instances = [];\n    \n    for (var i = 0; i < this.events.length; i++)\n    {\n      instances.push( this.events[i].newInstance() );\n    }\n    \n    return instances;\n  },\n\n  /**\n   * Generates an array of event clones from the events in this animation.\n   * \n   * @return {array}\n   */\n  cloneEvents: function()\n  {\n    var events = [];\n\n    for (var i = 0; i < this.events.length; i++)\n    {\n      events.push( this.events[i].clone() );\n    }\n\n    return events;\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {object} options\n   * @param  {array} events\n   * @return {[type]}\n   */\n  merge: function(options, events)\n  {\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, events );\n      }\n    }\n\n    return events;\n  },\n\n  /**\n   * Extends this animation and returns an animation modified with the given options. \n   *\n   * @param {object} options\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var events = this.cloneEvents();\n\n    this.merge( options, events );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, events );\n  }\n\n};","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(subject)\n\t{\n\t  this.subject = subject;\n\t  this.events = {};\n    this.eventsAdded = [];\n    this.eventsComputed = [];\n    this.springs = {};\n    this.springsAdded = [];\n\t  this.attributes = {};\n    this.calculators = {};\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    \n    return this;\n\t},\n\n  /**\n   * Returns the attribute descriptor\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getAttribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = this.factory.attribute( attr );\n    }\n\n    return attribute;\n  },\n\n  /**\n   * Returns the calculator for the given attribtue.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getCalculator: function(attr)\n  {\n    var calculator = this.calculators[ attr ];\n\n    if ( !calculator )\n    {\n      calculator = this.calculators[ attr ] = anim8.calculator( this.getAttribute( attr ).calculator );\n    }\n\n    return calculator;\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  { \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function()\n  {\n    // If there are events placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the even'ts path.\n    var ce = this.eventsComputed;\n    if ( ce.length )\n    {\n      for (var i = 0; i < ce.length; i++)\n      {\n        var e = ce[ i ];\n\n        e.path = e.path.replaceComputed( e, this );        \n      }\n\n      ce.length = 0;\n    }\n    \n    // If there isn't a value in frame for any of the events on the animator,\n    // place the default value.\n    var ea = this.eventsAdded;\n    if ( ea.length )\n    {\n      for (var i = 0; i < ea.length; i++)\n      {\n        this.setDefault( ea[ i].attribute );\n      }\n\n      ea.length = 0;\n    }\n\n    // Call pre update on any new springs.\n    var sa = this.springsAdded;\n    if ( sa.length )\n    {\n      for (var i = 0; i < sa.length; i++)\n      {\n        var s = sa[i];\n\n        this.setDefault( s.attribute );\n\n        s.preupdate( this );\n      }\n\n      sa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this Animator if there's no value there.\n   * \n   * @param {[type]}\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      var attribute = this.getAttribute( attr );\n      var calc = this.getCalculator( attr );\n\n      this.frame[ attr ] = calc.clone( attribute.defaultValue );\n    }\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    \n    this.finished = true;\n\t\t\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      this.updated[ attr ] = e.update( now, this.frame );\n      \n      this.finished = this.finished && e.isFinished();\n    }\n    \n    for (var attr in this.springs)\n    {\n      var s = this.springs[ attr ];\n      \n      this.updated[ attr ] = s.update( now, this.frame );\n      \n      this.finished = false;\n    }\n\t\n\t\tthis.trigger('update');\n    \n    return this;\n  },\n  \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function(s)\n  {\n    var attr = s.attribute;\n    \n    this.springs[ attr ] = s;\n    this.springsAdded.push( s );\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function(e)\n  {\n    var attr = e.attribute;\n\n    this.events[ attr ] = e;\n    this.eventsAdded.push( e );\n    \n    if ( e.hasComputed() )\n    {\n       this.eventsComputed.push( e );\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimEvents();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      var e = this.events[attr];\n      \n      if ( e.isFinished() )\n      {\n        if ( e.next )\n        {                    \n          this.placeEvent( e.next );\n          this.finished = false;\n        }\n        else\n        {\n          delete this.events[attr];\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there already.\n   * \n   * @return {[type]}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createEvents: function(animation, options, cache)\n  {\n    var options = anim8.options( options );    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var events = animation.newEvents();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, events );\n    }\n    \n    this.onAnimation( animation, options, events );\n\n    if ( animation.next !== null )\n    {\n      var eventMap = {};\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[i];\n\n        eventMap[ e.attribute ] = e;\n      }\n\n      while ( animation.next !== null )\n      {\n        animation = animation.next;\n\n        var queueEvents = animation.newEvents();\n        var maxRemaining = 0;\n\n        for (var i = 0; i < events.length; i++)\n        {\n          var e = events[i];\n\n          if ( !e.isInfinite() )\n          {\n            maxRemaining = Math.max( maxRemaining, e.finiteTimeRemainingInChain() );  \n          }\n        }\n\n        for (var i = 0; i < queueEvents.length; i++)\n        {\n          var e = queueEvents[ i ];\n          var existing = eventMap[ e.attribute ];\n\n          if ( existing && !existing.isInfinite() )\n          {\n            e.delay += (maxRemaining - existing.finiteTimeRemainingInChain());\n            eventMap[ e.attribute ].queue( e );\n          }\n          else\n          {\n            e.delay += maxRemaining;\n            eventMap[ e.attribute ] = e;\n            events.push( e );\n          }\n        }\n\n        this.onAnimation( animation, options, queueEvents );\n      }      \n    }\n\n    return events;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeSpring( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Removes springs for the specified attributes. If no attributes are specified then all springs\n   * are removed. Attributes can be specified as an array of attribute names or a string with attribute\n   * names separated by a space.\n   *\n   * @param {string|Array} attributes\n   */\n  unspring: function(attributes)\n  {\n    return this.springsFor( attributes, function(s)\n    {\n      delete this.springs[ s.attribute ];\n    });\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Existing events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   * @param [boolean] cache\n   */\n\tplay: function(animation, options, all, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.playEvents( events, all );\n\n    return this.activate();\n\t},\n\n  /**\n   * Adds events to this Animator to be played (optionally finishing events for attributes not specified in the given \n   * attribute). Existing events will be replaced immediately. This method will not activate the Animator, that has\n   * to be done manually.\n   * \n   * @param  {array} events\n   * @param  [boolean] all\n   * @return {this}\n   */\n  playEvents: function(events, all)\n  {\n    var attrs = {};\n    \n    for (var i = 0; i < events.length; i++)\n    { \n      this.placeEvent( events[i] );\n      \n      attrs[ events[i].attribute ] = true;\n    }\n    \n    if ( all )\n    {\n      for (var attr in this.events)\n      {\n        if ( !(attr in attrs) )\n        {\n          this.events[ attr ].finish( this.frame );\n        }\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n        \n    this.queueEvents( events );\n\n    return this;\n\t},\n\n  /**\n   * Queues an array of events on this Animator. The given events will be delayed to start at the same time - at the\n   * end of the events currently on the Animator. This method will not activate the Animator, that has to be done \n   * manually.\n   * \n   * @param  {array} events\n   * @return {this}\n   */\n  queueEvents: function(events)\n  {\n    var maxRemaining = this.finiteTimeRemaining();\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var existing = this.events[ attr ];\n      \n      if ( attr in this.events  && !existing.isInfinite() )\n      {    \n        e.delay += (maxRemaining - existing.timeRemainingInChain());\n        \n        existing.queue( e );\n      }\n      else\n      {\n        e.delay += maxRemaining;\n        \n        this.placeEvent( e );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all, cache)\n  {\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n\n    this.transitionEvents( transitionTime, transitionDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation. This method will not activate the \n   * Animator, that has to be done manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param [array] events\n   * @param [boolean] all\n   */\n  transitionEvents: function(transitionTime, transitionDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n\n    // Parse given variables\n    var transitionTime = anim8.time( transitionTime, anim8.defaults.transitionTime );\n    var transitionDelta = anim8.coalesce( transitionDelta, anim8.defaults.transitionDelta );\n    var transitionEasing = anim8.easing( transitionEasing, anim8.defaults.transitionEasing );\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionDelta );\n          var p2 = e1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, calc, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transitionInto: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation, options, all, cache)\n  {\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.transitionIntoEvents( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation. This method will not activate the Animator, that has to be done \n   * manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {array} events\n   * @param [boolean] all\n   */\n  transitionIntoEvents: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n\n    // Parse given variables\n    var transitionTime = anim8.time( transitionTime, anim8.defaults.transitionTime );\n    var transitionFromDelta = anim8.coalesce( transitionFromDelta, anim8.defaults.transitionDelta );\n    var transitionIntoDelta = anim8.coalesce( transitionIntoDelta, anim8.defaults.transitionIntoDelta );\n    var transitionEasing = anim8.easing( transitionEasing, anim8.defaults.transitionEasing );\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionFromDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transitionIntoDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n      \n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {string} attribute\n   * @param {any} target\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenTo: function(attribute, target, options)\n  {\n    var options = anim8.options( options );\n    var attr = this.getAttribute( attribute );\n    var calc = this.getCalculator( attribute );\n    var start = calc.parse( true );\n    var end = calc.parse( target, attr.defaultValue );\n\n    var path = new anim8.Tween( attribute, calc, start, end );\n    var event = new anim8.Event( attribute, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attribute to target values.\n   *\n   * @param {object} targets\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenManyTo: function(targets, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attribute in targets )\n    {\n      var attr = this.getAttribute( attribute );\n      var calc = this.getCalculator( attribute );\n      var start = calc.parse( true );\n      var end = calc.parse( targets[ attribute ], attr.defaultValue );      \n      \n      var path = new anim8.Tween( attribute, calc, start, end );\n      var event = new anim8.Event( attribute, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {string} attribute\n   * @param {any} starts\n   * @param {any} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tween: function(attribute, starts, ends, options)\n  {\n    var options = anim8.options( options );\n    var attr = this.getAttribute( attribute );\n    var calc = this.getCalculator( attribute );\n    var start = calc.parse( starts, attr.defaultValue );\n    var end = calc.parse( ends, attr.defaultValue );\n\n    var path = new anim8.Tween( attribute, calc, start, end );\n    var event = new anim8.Event( attribute, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {object} starts\n   * @param {object} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenMany: function(starts, ends, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attribute in starts )\n    {\n      var attr = this.getAttribute( input );\n      var calc = this.getCalculator( attr.calculator );\n      var start = calc.parse( starts[ attribute ], attr.defaultValue );\n      var end = calc.parse( ends[ attribute ], attr.defaultValue );\n      \n      var path = new anim8.Tween( attribute, calc, start, end );\n      var event = new anim8.Event( attribute, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n\t\n\t/**\n\t * Applies the initial state of all unstarted current events for the specified attributes immediately. \n\t * Attribute names can be given as an array or a space separated string. If no attributes are given all \n\t * attributes are assumed.\n\t *\n   * @param {string|array} attributes\n\t */\n\tapplyInitialState: function(attributes)\n\t{\n\t\tvar eventCount = this.eventsFor( attributes, function(event, attr)\n\t\t{\n\t\t\tif ( !event.hasStarted() && event.hasInitialState )\n\t\t\t{\n        this.setDefault( attr );\n\n\t\t\t\tevent.applyValue( this.frame, this.frame[ attr ], 0.0 );\n\t\t\t\t\n\t\t\t\tthis.updated[ attr ] = true;\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.apply();\n\t\t\n\t\treturn eventCount;\n\t},\n\n  /**\n   * Returns the amount of time remaining for all finite events in this Animator.\n   * \n   * @return {number} milliseconds\n   */\n  finiteTimeRemaining: function()\n  {\n    var remaining = 0;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      if ( !e.isInfinite() )\n      {\n        remaining = Math.max( remaining, this.events[attr].finiteTimeRemainingInChain() );  \n      }\n    }\n\n    return remaining;\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame )\n      {\n        return animator.frame[ attribute ];\n      }\n      \n      request[ attribute ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return animator.getAttribute( attribute ).defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number|string] duration\n   * @param [number|string] delay\n   * @param [function|string] easing\n   * @param [number|string] repeat\n   * @param [number|string] sleep  \n   * @param [number] scale\n   */\n  follow: function(attribute, path, options)\n  {\n    var options = anim8.options( options );\n    var path = anim8.path( path );\n    \n    var event = new anim8.Event( \n      attribute, \n      path, \n      options.duration,\n      options.easing,\n      options.delay, \n      options.sleep,\n      options.repeat,\n      options.scale,\n      options.scaleBase\n    );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  objectsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n    \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        \n        if ( attr in objects )\n        {\n          if ( resulting )\n          {\n            results.push( objects[attr] );\n          }\n          else\n          {\n            callback.call( this, objects[attr], attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      for (var attr in objects)\n      {\n        if ( resulting )\n        {\n          results.push( objects[attr] );\n        }\n        else\n        {\n          callback.call( this, objects[attr], attr );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n  \n  /**\n   * Invokes the callback for each event for the given attributes.\n   * \n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\teventsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.events );\n\t},\n  \n  /**\n   * Invokes the callback for each spring for the given attributes.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\tspringsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.springs );\n\t},\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event, attr) \n\t\t{\n\t\t\tdelete this.events[ attr ];\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event) \n\t\t{\n\t\t\twhile (event.next)\n\t\t\t{\n\t\t\t\tevent = event.next;\n\t\t\t}\n\t\t\t\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator.\n   */\n  hasSprings: function()\n  {\n    for (var attr in this.springs)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator or animating events.\n   */\n  isAnimating: function()\n  {\n    if ( this.hasSprings() )\n    {\n      return true;\n    }\n    \n    for (var attr in this.events)\n    {\n      if ( this.events[attr].isAnimating() )\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  },\n\n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator if none is given. This is particularly\n   * useful for having a function be called on deferred statements.\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  invoke: function(func, context, arguments)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, arguments || [] );\n    }\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n   * @param [function] callback\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t}\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'play', 'queue', 'transition', 'transitionInto', 'restore', 'set', 'resume', 'pause', \n  'finish', 'end', 'stop', 'follow', 'applyInitialState', 'tweenTo', \n  'tween', 'tweenMany', 'tweenManyTo', 'spring', 'unspring', 'apply', \n  'placeSpring', 'placeEvent', 'invoke'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.override( anim8s.fn = anim8.Animators.prototype = new Array(),\n{\n  /**\n   * Invokes a callback for each element in the array.\n   * \n   * @param {function} iterator\n   */\n  each: function(iterator, context) \n  {\n    for (var i = 0; i < this.length; i++) \n    {\n      if ( iterator.call( context || this[i], this[i], i ) === false ) \n      {\n        break;\n      }\n    }\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @param {array} animators\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n   *\n   * @param {function} filterer\n   */\n  filter: function(filterer)\n  {\t\n  \tvar alive = 0;\n  \t\n  \tfor (var i = 0; i < this.length; i++)\n  \t{\n  \t\tvar remove = filterer( this[i] );\n  \t\t\n  \t\tif ( !remove )\n  \t\t{\n  \t\t\tthis[alive++] = this[i];\n  \t\t}\n  \t}\n  \t\n  \tthis.length = alive;\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubjects: function(wrapper)\n  {\n    var subjects = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      subjects.push( this[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   */\n  first: function()\n  {\n    return this[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   */\n   reverse: function()\n   {\n    var last = this.length - 1;\n    var mid = Math.floor( this.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = this[ i ];\n      var e1 = this[ last - i ];\n\n      this[ i ] = e1;\n      this[ last - i ] = e0;\n    }\n\n    return this;\n   },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   * \n   * @return {this}\n   */\n  activate: function()\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var animator = this[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Returns an array of the subjects optionally\n   */\n\n  /**\n   * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * Adds the following methods to make an array of Animators appear like a single Animator.\n   */\n  restore              : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n  placeSpring          : anim8.delegate( 'placeSpring', anim8.delegate.RETURN_THIS ),\n  placeEvent           : anim8.delegate( 'placeEvent', anim8.delegate.RETURN_THIS ),\n  preupdate            : anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS ),\n  update               : anim8.delegate( 'update', anim8.delegate.RETURN_THIS ),\n  apply                : anim8.delegate( 'apply', anim8.delegate.RETURN_THIS ),\n  trimEvents           : anim8.delegate( 'trimEvents', anim8.delegate.RETURN_THIS ),\n  deactivate           : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n  destroy              : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n  spring               : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n  unspring             : anim8.delegate( 'unspring', anim8.delegate.RETURN_THIS ),\n  play                 : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n  playEvents           : anim8.delegate( 'playEvents', anim8.delegate.RETURN_THIS ),\n  queue                : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n  queueEvents          : anim8.delegate( 'queueEvents', anim8.delegate.RETURN_THIS ),\n  transition           : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n  transitionEvents     : anim8.delegate( 'transitionEvents', anim8.delegate.RETURN_THIS ),\n  transitionInto       : anim8.delegate( 'transitionInto', anim8.delegate.RETURN_THIS ),\n  transitionIntoEvents : anim8.delegate( 'transitionIntoEvents', anim8.delegate.RETURN_THIS ),\n  tween                : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n  tweenTo              : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n  tweenMany            : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n  tweenManyTo          : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n  applyInitialState    : anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS ),\n  follow               : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n  eventsFor            : anim8.delegate( 'eventsFor', anim8.delegate.RETURN_RESULTS ),\n  springsFor           : anim8.delegate( 'springsFor', anim8.delegate.RETURN_RESULTS ),\n  stop                 : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n  end                  : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n  finish               : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n  pause \t\t\t         : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n  resume \t\t\t         : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n  set                  : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n  get                  : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n  isAnimating          : anim8.delegate( 'isAnimating', anim8.delegate.RETURN_TRUE ),\n  hasEvents            : anim8.delegate( 'hasEvents', anim8.delegate.RETURN_TRUE ),\n  hasSprings           : anim8.delegate( 'hasSprings', anim8.delegate.RETURN_TRUE ),\n  on\t\t\t             : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n  once\t\t             : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n  off\t\t\t             : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n  trigger              : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n});\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate();\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * [Sequence description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * [maxDelay description]\n   * @return {[type]}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  /**\n   * [createEvents description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  createEvents: function(animation, options, i)\n  {\n    var events = animation.newEvents();\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = 0; k < events.length; k++)\n    {\n      events[k].delay += delayOffset;\n    }\n\n    animation.merge( options, events );\n    \n    return events;\n  },\n\n  /**\n   * [reverse description]\n   * @return {[type]}\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * [play description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  play: function(animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.playEvents( sequence.createEvents( anim, options, i ), all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(animation, options, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.finiteTimeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var events = sequence.createEvents( anim, options, i );\n      \n      for (var i = 0; i < events.length; i++)\n      {\n        events[ i ].delay += delayOffset;\n      }\n      \n      animator.queueEvents( events );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transition description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionEvents( transitionTime, transitionDelta, transitionEasing, sequence.createEvents( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transitionInto description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transitionInto: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionIntoEvents( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, sequence.createEvents( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [add description]\n   */\n  add: function()\n  {\n    this.animators.activate();\n    this.animators.applyInitialState();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var easings   = animation.easings || {};\n    var delays    = animation.delays || {};\n    var sleeps    = animation.sleeps || {};\n    var repeats   = animation.repeats || {};\n    var scales    = animation.scales || {};\n    var scaleBases= animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = anim8.easing( anim8.coalesce( easings[attr],   newOptions.easing,   oldOptions.easing   ), e.easing );\n      e.repeat    = anim8.repeat( anim8.coalesce( repeats[attr],   newOptions.repeat,   oldOptions.repeat   ), e.repeat );\n      e.delay     = anim8.time(   anim8.coalesce( delays[attr],    newOptions.delay,    oldOptions.delay    ), e.delay );\n      e.sleep     = anim8.time(   anim8.coalesce( sleeps[attr],    newOptions.sleep,    oldOptions.sleep    ), e.sleep );\n      e.duration  = anim8.time(   anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration ), e.duration );\n      e.scale     =               anim8.coalesce( scales[attr],    newOptions.scale,    oldOptions.scale     , e.scale );\n      e.scaleBase = calc.parse(   anim8.coalesce( scaleBases[attr],newOptions.scaleBase,oldOptions.scaleBase), e.scaleBase );\n    }\n  }\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the events\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar deltas = animation.deltas;\n  \tvar values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      var valueCount = 0;\n      \n  \t\tfor (var attr in values)\n  \t\t{\n        valueCount++; \n      }\n      \n      deltas = [];\n      \n      for (var i = 0; i < valueCount; i++)\n      {\n        deltas[i] = i / (valueCount - 1);\n      }\n    }\n  \tif ( anim8.isArray( deltas ) )\n  \t{\n  \t\tvar deltaObject = {};\n  \t\t\n  \t\tfor (var attr in values)\n  \t\t{\n  \t\t\tdeltaObject[attr] = deltas;\t\n  \t\t}\n  \t\t\n  \t\tdeltas = deltaObject;\n  \t}\n  \t\n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[ attr ];\n      var attribute = factory.attribute( attr );\n      var calculator = anim8.calculator( attribute );\n  \t\tvar defaultValue = attributes.defaultValue;\n  \t\t\n  \t\tfor (var k = 0; k < value.length; k++)\n  \t\t{\n  \t\t\tvalue[k] = calculator.parse( value[k], defaultValue );\n  \t\t}\n  \t\t\n      var duration = anim8.coalesce( durations[attr], options.duration );\n      var easing   = anim8.coalesce( easings[attr], options.easing );\n      var delay    = anim8.coalesce( delays[attr], options.delay );\n      var sleep    = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat   = anim8.coalesce( repeats[attr], options.repeat );\n      var scale    = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n\n      var path     = new anim8.DeltaPath( attr, calculator, values[attr], deltas[attr] );\n      var event    = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.values = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Generate the events, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar values = animation.final;\n  \t\n    var delays = animation.delays || {};\n    var durations = animation.durations || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    var calculators = {};\n  \tvar defaults = {};\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[ attr ];\n      var attribute = factory.attribute( attr );\n      var calculator = anim8.calculator( attribute );\n  \t\tvar defaultValue = attribute.defaultValue;\n  \t\t\n      value = calculator.parse( value, defaultValue ); \n  \t\t\n      var delay    = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var duration = anim8.duration( anim8.coalesce( durations[attr], options.duration ) );\n      var scale    = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n\n      var path     = new anim8.PointPath( attr, calculator, value );\n      var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, scale, scaleBase, false, this );\n      \n      events.push( event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales    = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      var delay = anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay );\n      var duration = anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration );\n\n      e.delay = anim8.delay( delay ) + anim8.duration( duration );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.final = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Generate the events, only caring about the delays\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar values = animation.initial;\n  \t\n    var delays = animation.delays || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    var calculators = {};\n  \tvar defaults = {};\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[ attr ];\n      var attribute = factory.attribute( attr );\n      var calculator = anim8.calculator( attribute.calculator );\n  \t\tvar defaultValue = attribute.defaultValue;\n  \t\t\n      value = calculator.parse( value, defaultValue ); \n  \t\t\n      var delay    = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var scale    = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n      \n      var path     = new anim8.PointPath( attr, calculator, value );\n      var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      e.delay = anim8.time( anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay ), e.delay );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.initial = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the events\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    \n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var calculators = {};\n  \tvar defaults = {};\n    var pathEasings = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          var attribute = factory.attribute( attr );\n\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          calculators[attr] = anim8.calculator( attribute.calculator );\n  \t\t\t  defaults[attr] = attribute.defaultValue;\n        }\n  \t\t\t\n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( calculators[attr].parse( frame.value[attr], defaults[attr] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[attr], easing ) ) );\n      }\n    }\n  \t\n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration = anim8.coalesce( durations[attr], options.duration );\n      var delay    = anim8.coalesce( delays[attr], options.delay );\n      var sleep    = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat   = anim8.coalesce( repeats[attr], options.repeat );\n      var scale    = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n      \n      var path     = new anim8.KeyframePath( attr, calculators[attr], values[attr], deltas[attr], pathEasings[attr] );\n      var event    = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser.keyframe = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTween = function()\n{\n  \n};\n\n// ParserTween extends anim8.Parser()\nanim8.override( anim8.ParserTween.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory = anim8.factory( animation.factory );\n    var tweenTo = animation.tweenTo;\n\n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBase || {};\n\n  \tfor (var attr in tweenTo)\n  \t{\n      var attribute = factory.attribute( attr );\n      var calculator = anim8.calculator( attribute.calculator );\n  \t\tvar defaultValue = attribute.defaultValue;\n  \t\t\n      var value    = calculator.parse( tweenTo[attr], defaultValue );\n      var duration = anim8.coalesce( durations[attr], options.duration );\n      var easing   = anim8.coalesce( easings[attr], options.easing );\n      var delay    = anim8.coalesce( delays[attr], options.delay );\n      var sleep    = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat   = anim8.coalesce( repeats[attr], options.repeat );\n      var scale    = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n      \n      var path     = new anim8.Tween( attr, calculator, calculator.parse( true ), value );\n      var event    = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.tweenTo = new anim8.ParserTween();\n","\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n * \n * @param  [string|anim8.Factory]\n * @return {anim8.Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory.default;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n  this.priority = 0;\n};\n\nanim8.override( anim8.ObjectFactory.prototype = new anim8.Factory(),\n{\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;\n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    return anim8.object.attribute( attr );\n  }\n\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory.object = new anim8.ObjectFactory();\nanim8.factory.default = anim8.factory.object;\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute.default                 = {defaultValue: 0};\n","\n/**\n * A factory for HTML Elements\n */\nanim8.DomFactory = function()\n{\n  this.cached = {};\n  this.ids = 0;\n  this.elementAttribute = 'anim8';\n  this.priority = 5;\n};\n\nanim8.override( anim8.DomFactory.prototype = new anim8.Factory(),\n{\n  \n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isElement( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animatorId = subject.getAttribute( this.elementAttribute );\n    \n    if (!(animatorId in this.cached)) \n    {\n      var animator = new anim8.DomAnimator( subject );\n      \n      subject.setAttribute( this.elementAttribute, animatorId = animator.id = ++this.ids );\n      \n      animator.factory = this;\n      \n      this.cached[animatorId] = animator;\n    }\n\n    return this.cached[ animatorId ];\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete this.cached[ animator.id ];\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    return anim8.dom.attribute( attr );\n  }\n\n});\n\n/**\n * Registers the DOM factory.\n */\nanim8.factory.dom = new anim8.DomFactory();\nanim8.factory.default = anim8.factory.dom;\n\n/* TODO don't apply styles if they're impercivable (convert value to pixels of applicable) */\n\n/**\n * All DOM related\n */\nanim8.dom = {};\n\n/* \n  anim8.dom.property[name] = {\n    get: function(e, anim) {\n      // based on anim.animating, gets one or more value from the entity and places it on anim.frame. this function should only do this for an attribute if\n      // anim.animating[attribute] === false. When it successfully gets a value anim.animating[attribute] should be set to true. This is called before an animation\n      // begins on attributes that will be animated based on the current value. \n    },\n    set: function(e, anim) {\n      // applies the applicable attributes in anim.frame to the entity, \n    }\n }\n*/\nanim8.dom.property = function(prop) \n{\n  if ( anim8.isObject( prop ) && anim8.isFunction( prop.get ) && anim8.isFunction( prop.set ) ) \n  {\n    return prop;\n  }\n  if ( anim8.isString( prop ) && prop in anim8.dom.property )\n  {\n\t  return anim8.dom.property[ prop ];\n  }\n\t\n  throw prop + ' is not a valid property';\n}\n\n/**\n * Computes the desired style of the given element and returns it as a string. The style\n * given must be in hyphenated format like so: anim8.dom.style( element, 'font-size' ) = '12px'\n */\nanim8.dom.style = (function()\n{\n  var hyphenated = {};\n\n  var hyphenize = function(str) \n\t{\n    if ( str in hyphenated )\n    {\n      return hyphenated[ str ];\n    }\n\n    var key = str;\n\n    str = str.replace(/[a-z][A-Z]/g, function(str, letter)\n    {\n     return str[0] + '-' + str[1].toLowerCase();\n    });\n    \n    str = str.replace(/^Webkit/, '-webkit');\n    str = str.replace(/^Moz/, '-moz');\n    str = str.replace(/^Ms/, '-ms');\n    str = str.replace(/^O/, '-o');\n    str = str.replace(/^Khtml/, '-khtml');\n    \n    return hyphenated[ key ] = str;\n  };\n\t\n\treturn function(e, style) \n\t{\n\t  if (e.currentStyle)\n\t\t{\n\t    return e.currentStyle[ style ];\n\t  } \n\t\telse if (document.defaultView && document.defaultView.getComputedStyle) \n\t\t{\n\t    return document.defaultView.getComputedStyle( e, null ).getPropertyValue( hyphenize( style ) );\n\t  } \n\t\telse \n\t\t{\n\t    return e.style[ style ]; \n\t  }\n\t};\n\t\n})();\n\n/**\n * Given an array of styles this will return the first one that is present on elements in the current browser.\n */\nanim8.dom.prefix = (function() \n{\n  var a = document.createElement('a');\n  \n  return function(prefixes) \n  {\n    for (var i = 0; i < prefixes.length; i++) \n    {\n      if ( anim8.isDefined( a.style[ prefixes[ i ] ] ) ) \n      {\n        return prefixes[i];\n      }\n    }\n    return false;\n  };\n  \n})();\n\n/**\n * Parses the string for a value and a unit.\n *\n * @param {string} value\n */\nanim8.dom.parseValue = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(px|em|%|vw|ex|cm|mm|in|pt|pc|deg|rad)?/;\n  \n  return function(x)\n  {\n    var parsed = regex.exec( x );\n    \n    if (parsed) \n    {      \n      return {\n        value: parseFloat( parsed[1] ),\n        unit: parsed[3]\n      }\n    }\n    \n    return false;\n  };\n})();\n\n\n/**\n * Converts one unit to another for a given element.\n *\n * For Example: anim8.dom.convert( element, '100px', '%', 'parentWidth' )\n *    returns how much percent 100px relativeTo parentWidth of the given element\n *\n * @param {HTMLElement} e\n * @param {string} from\n * @param {string} toUnit\n * @param {string} relativeTo\n */\nanim8.dom.convert = (function()\n{\n  /**\n   * Calculators how many pixels a given value & unit is.\n   * \n   * For Example: anim8.toPixels( 100, 'in' ) \n   *    returns how many pixels are in 1 inch, with up to 2 decimal points of accuracy.\n   */\n  var toPixels = function(baseValue, baseUnit, defaultRate)\n  {\n    if ( document.body )\n    {\n      var div = document.createElement('div');\n      document.body.appendChild( div );\n      div.style.width = baseValue + baseUnit;\n      var pixels = (div.offsetWidth / baseValue);\n      document.body.removeChild( div );\n      return pixels || defaultRate;\n    }\n    \n    return defaultRate;\n  };\n\n  var getFontSize = function(e, notUnit)\n  {\n    var fontSize = anim8.dom.style( e, 'fontSize' );\n    var parsed = anim8.dom.parseValue( fontSize );\n    \n    if ( !parsed || parsed.unit === notUnit )\n    {\n      return 12;\n    }\n    \n    if ( parsed.unit === 'px' ) \n    {\n      return parsed.value;\n    }\n    \n    return getConverterScale( e, conversions[ parsed.unit ].px, relativeTo );\n  };\n\n  var variables = {};\n  \n  variables.parentWidth = function(e)\n  {\n    return e.parentNode.scrollWidth;\n  };\n  variables.parentHeight = function(e)\n  {\n    return e.parentNode.scrollHeight;\n  };\n  variables.width = function(e)\n  {\n    return e.offsetWidth;\n  };\n  variables.height = function(e)\n  {\n    return e.offsetHeight;\n  };\n  variables.fontSize = function(e)\n  {\n    return getFontSize( e, '%' );\n  };\n  variables.parentFontSize = function(e)\n  {\n    return getFontSize( e.parentNode, '%' );\n  };\n  variables.htmlFontSize = function(e)\n  {\n    var htmlElement = document.getElementsByTagName(\"html\")[0];\n    \n    return getFontSize( htmlElement, '%' );\n  };\n  \n  var conversions = {};\n  \n  conversions.pt  = { px: toPixels(100, 'pt') };\n  conversions.in  = { px: toPixels(100, 'in') };\n  conversions.cm  = { px: toPixels(1000, 'cm') };\n  conversions.mm  = { px: toPixels(100000, 'mm') };\n  conversions.vw  = { px: toPixels(1000, 'vw') };\n  conversions.deg = { rad: Math.PI / 180.0};\n\n  conversions.em = \n  {\n    px: function(e, relativeTo) \n    {\n      return getFontSize( e, 'em' );\n    }\n  };\n  \n  conversions.rem = \n  {\n    px: function(e, relativeTo) \n    {\n      var htmlElement = document.getElementsByTagName(\"html\")[0];\n      \n      return getFontSize( htmlElement, 'rem' );\n    }\n  };\n  \n  conversions['%'] = \n  {\n    px: function(e, relativeTo) \n    {\n      if ( anim8.isNumber( relativeTo ) )\n      {\n        return relativeTo;\n      }\n      if ( relativeTo in variables )\n      {\n        return variables[ relativeTo ]( e ) / 100.0;\n      }\n      \n      return 1.0;\n    }\n  };\n  \n  // Populate conversions going other way.\n  for (var unit in conversions)\n  {\n    for (var to in conversions[ unit ])\n    {\n      if ( !(to in conversions) )\n      {\n        conversions[ to ] = {};\n      }\n      \n      if ( !(unit in conversions[ to ]) )\n      {\n        var given = conversions[ unit ][ to ];\n        \n        if ( anim8.isNumber( given ) )\n        {\n          conversions[ to ][ unit ] = 1.0 / given;  \n        }\n        if ( anim8.isFunction( given ) )\n        {\n          conversions[ to ][ unit ] = (function(converter) \n          {\n            return function(e, relativeTo) \n            {\n              return 1.0 / converter( e, relativeTo );\n            };\n          })( given );\n        }\n      }\n    }\n  }\n  \n  // Given an element, convert, and relativeTo - return the number we need to multiply by.\n  var getConverterScale = function(e, converter, relativeTo)\n  {\n    if ( anim8.isNumber( converter ) )\n    {\n      return converter;\n    }\n    else if ( anim8.isFunction( converter ) )\n    {\n      return converter( e, relativeTo );\n    }\n    \n    return 1.0;\n  };\n  \n  return function(e, from, toUnit, relativeTo)\n  {\n    if ( anim8.isNumber( from ) )\n    {\n      return from;\n    }\n    \n    var parsed = anim8.dom.parseValue( from );\n    \n    if ( !parsed )\n    {\n      return false;\n    }\n    \n    var value = parsed.value;\n    var fromUnit = parsed.unit;\n    \n    if ( !fromUnit || fromUnit === toUnit )\n    {\n      return value;\n    }\n    \n    // First see if we have a direct conversion available...\n    if ( fromUnit in conversions && toUnit in conversions[ fromUnit ] )\n    {\n      var converter = conversions[ fromUnit ][ toUnit ];\n      \n      value *= getConverterScale( e, converter, relativeTo );\n    }\n    // Otherwise convert it to px, then to the desired unit\n    else if ( fromUnit in conversions && conversions[ fromUnit ].px && toUnit in conversions.px )\n    {\n      var converter1 = conversions[ fromUnit ].px;\n      var converter2 = conversions.px[ toUnit ];\n      \n      value *= getConverterScale( e, converter1, relativeTo );\n      value *= getConverterScale( e, converter2, relativeTo );\n    }\n    \n    return value;\n  };\n  \n})();\n\n\n","\nanim8.dom.property.factory = function(nm, relativeTo) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryDerivable = function(nm, relativeTo, deriver) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n        else if ( anim8.isFunction( deriver ) )\n        {\n          converted = anim8.dom.convert( e, deriver( e ), anim.units[ nm ], relativeTo );\n          \n          if ( converted !== false )\n          {\n            anim.frame[nm] = converted;\n            anim.animating[nm] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryColor = function(nm) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var parsed = anim8.color.parse( e.style[nm] );\n        \n        if (parsed !== false) \n        {\n          anim.frame[nm] = parsed;\n          anim.animating[nm] = true;\n        }              \n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[nm] = anim8.color.format( anim.frame[nm] );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.padding                  = anim8.dom.property.factory( 'padding', 'parentWidth' );\nanim8.dom.property.paddingTop               = anim8.dom.property.factory( 'paddingTop', 'parentWidth' );\nanim8.dom.property.paddingRight             = anim8.dom.property.factory( 'paddingRight', 'parentWidth' );\nanim8.dom.property.paddingBottom            = anim8.dom.property.factory( 'paddingBottom', 'parentWidth' );\nanim8.dom.property.paddingLeft              = anim8.dom.property.factory( 'paddingLeft', 'parentWidth' );\n\nanim8.dom.property.margin                   = anim8.dom.property.factory( 'margin', 'parentWidth' );\nanim8.dom.property.marginTop                = anim8.dom.property.factory( 'marginTop', 'parentWidth' );\nanim8.dom.property.marginRight              = anim8.dom.property.factory( 'marginRight', 'parentWidth' );\nanim8.dom.property.marginBottom             = anim8.dom.property.factory( 'marginBottom', 'parentWidth' );\nanim8.dom.property.marginLeft               = anim8.dom.property.factory( 'marginLeft', 'parentWidth' );\n\nanim8.dom.property.borderRadius             = anim8.dom.property.factory( 'borderRadius', 'width' );\nanim8.dom.property.borderTopLeftRadius      = anim8.dom.property.factory( 'borderTopLeftRadius', 'width' );\nanim8.dom.property.borderTopRightRadius     = anim8.dom.property.factory( 'borderTopRightRadius', 'width' );\nanim8.dom.property.borderBottomLeftRadius   = anim8.dom.property.factory( 'borderBottomLeftRadius', 'width' );\nanim8.dom.property.borderBottomRightRadius  = anim8.dom.property.factory( 'borderBottomRightRadius', 'width' );\n\nanim8.dom.property.borderWidth              = anim8.dom.property.factory( 'borderWidth' );\nanim8.dom.property.borderTopWidth           = anim8.dom.property.factory( 'borderTopWidth' );\nanim8.dom.property.borderRightWidth         = anim8.dom.property.factory( 'borderRightWidth' );\nanim8.dom.property.borderBottomWidth        = anim8.dom.property.factory( 'borderBottomWidth' );\nanim8.dom.property.borderLeftWidth          = anim8.dom.property.factory( 'borderLeftWidth' );\n\nanim8.dom.property.outlineWidth             = anim8.dom.property.factory( 'outlineWidth' );\nanim8.dom.property.textIndent               = anim8.dom.property.factory( 'textIndent', 'parentWidth' );\nanim8.dom.property.borderSpacing            = anim8.dom.property.factory( 'borderSpacing' );\nanim8.dom.property.fontSize                 = anim8.dom.property.factory( 'fontSize', 'parentFontSize' );\nanim8.dom.property.lineHeight               = anim8.dom.property.factory( 'lineHeight', 'fontSize' );\nanim8.dom.property.zIndex                   = anim8.dom.property.factory( 'zIndex' );\n\nanim8.dom.property.color                    = anim8.dom.property.factoryColor( 'color' );\nanim8.dom.property.backgroundColor          = anim8.dom.property.factoryColor( 'backgroundColor' );\nanim8.dom.property.borderTopColor           = anim8.dom.property.factoryColor( 'borderTopColor' );\nanim8.dom.property.borderRightColor         = anim8.dom.property.factoryColor( 'borderRightColor' );\nanim8.dom.property.borderBottomColor        = anim8.dom.property.factoryColor( 'borderBottomColor' );\nanim8.dom.property.borderLeftColor          = anim8.dom.property.factoryColor( 'borderLeftColor' );\nanim8.dom.property.outlineColor             = anim8.dom.property.factoryColor( 'outlineColor' );\n\nanim8.dom.property.minWidth                 = anim8.dom.property.factory( 'minWidth', 'parentWidth' );\nanim8.dom.property.maxWidth                 = anim8.dom.property.factory( 'maxWidth', 'parentWidth' );\nanim8.dom.property.minHeight                = anim8.dom.property.factory( 'minHeight', 'parentHeight' );\nanim8.dom.property.maxHeight                = anim8.dom.property.factory( 'maxHeight', 'parentHeight' );\n\nanim8.dom.property.width                    = anim8.dom.property.factoryDerivable('width', 'parentWidth', function(e) { return e.offsetWidth + 'px'; });\nanim8.dom.property.height                   = anim8.dom.property.factoryDerivable('height', 'parentHeight', function(e) { return e.offsetHeight + 'px'; });\n\nanim8.dom.property.top                      = anim8.dom.property.factoryDerivable('top', 'parentHeight', function(e) { return e.offsetTop + 'px'; });\nanim8.dom.property.right                    = anim8.dom.property.factoryDerivable('right', 'parentWidth', function(e) { return (e.parentNode.scrollWidth - (e.offsetLeft + e.offsetWidth)) + 'px'; });\nanim8.dom.property.bottom                   = anim8.dom.property.factoryDerivable('bottom', 'parentHeight', function(e) { return (e.parentNode.scrollHeight - (e.offsetTop + e.offsetHeight)) + 'px'; });\nanim8.dom.property.left                     = anim8.dom.property.factoryDerivable('left', 'parentWidth', function(e) { return e.offsetLeft + 'px'; });\n\nanim8.dom.property.visibility = \n{\n  get: function(e, anim) \n  {\n    if (anim.animating.visibility === false) \n    {\n      var style = anim8.dom.style( e, 'visibility' );\n      anim.frame.visibility = style === 'hidden' ? 0.0 : 1.0;\n      anim.animating = true;\n    }\n  },\n  set: function(e, anim) \n  {\n    anim.styles.visibility = anim.frame.visibility < 0.5 ? 'hidden' : 'visible'\n  },\n  unset: function(e, anim)\n  {\n    e.style.visibility = null;\n  }\n}\n\nanim8.dom.property.backface = (function()\n{\n  var css = anim8.dom.prefix(['WebkitBackfaceVisibility', 'MozBackfaceVisibility', 'msBackfaceVisibility', 'BackfaceVisibility']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim)\n    {\n      if ( anim.animating.backface === false )\n      {\n        var style = anim8.dom.style( e, css ); \n        \n        anim.frame.backface = (style === 'visible') ? 1.0 : 0.0;\n        anim.animating.backface = true;\n      }\n    },\n    set: function(e, anim)\n    {\n      anim.styles[css] = anim.frame.backface < 0.5 ? 'none' : 'visible';\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n    \n  };\n  \n})();\n\nanim8.dom.property.transformOrigin = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransformOrigin', 'MozTransformOrigin', 'OTransformOrigin', 'msTransformOrigin', 'transformOrigin']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  var keywords = \n  {\n    'left':   '0%',\n    'center': '50%',\n    'right':  '100%',\n    'top':    '0%',\n    'bottom': '100%'\n  };\n  \n  var setOriginAttribute = function(e, value, anim, attr, relativeTo ) \n  {\n    if (anim.animating[attr] === false) \n    {\n      if ( value in keywords )\n      {        \n        value = keywords[ value ];\n      }\n\n      var converted = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n      \n      if ( converted !== false )\n      {\n        anim.frame[ attr ] = converted;\n        anim.animating[ attr ] = true;\n      }\n    }\n  };\n  \n  var setOrigin = function(e, split, anim) \n  {\n    if (anim.animating.origin === false) \n    {\n      if ((split.length === 1) || \n          (split.length === 2 && split[0] === split[1]) || \n          (split.length === 3 && split[0] === split[1] && split[1] === split[2])) \n      {     \n        setOriginAttribute( e, split[0], anim, 'origin', 'width' );\n      }            \n    }\n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      if (style) \n      {\n        var origin = style.toLowerCase();\n        var split = origin.split(' ');\n        \n        switch (split.length) \n        {\n        case 3:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOriginAttribute( e, split[2], anim, 'originZ' );\n          setOrigin( e, split, anim );\n          break;\n        case 2:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        case 1:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[0], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var style = null;\n      \n      if ( anim8.isDefined( anim.frame.originZ ) )\n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' ) + ' ' + anim.valueOr( 'originZ', 'origin', 'z' );\n      } \n      else \n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' );\n      }\n      \n      anim.styles[css] = style;\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.transform = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);\n   \n  if ( !css )\n  {\n    return false;\n  }\n\n  var d2 = { translate: true, scale: true };\n  var d3 = { translate3d: true, scale3d: true };\n  var d4 = { rotate3d: true };\n  var axis = ['X', 'Y', 'Z'];\n    \n  var regex = \n  {\n    translate: /translate\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translate3d: /translate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translateX: /translateX\\(([^\\)]+)\\)/i,\n    translateY: /translateY\\(([^\\)]+)\\)/i,\n    translateZ: /translateZ\\(([^\\)]+)\\)/i,\n    scale: /scale\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scale3d: /scale3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scaleX: /scaleX\\(([^\\)]+)\\)/i,\n    scaleY: /scaleY\\(([^\\)]+)\\)/i,\n    scaleZ: /scaleZ\\(([^\\)]+)\\)/i,\n    rotate: /rotate\\(([^\\)]+)\\)/i,\n    rotate3d: /rotate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    rotateX: /rotateX\\(([^\\)]+)\\)/i,\n    rotateY: /rotateY\\(([^\\)]+)\\)/i,\n    rotateZ: /rotateZ\\(([^\\)]+)\\)/i,\n    skew: /skew\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    skewX: /skewX\\(([^\\)]+)\\)/i,\n    skewY: /skewY\\(([^\\)]+)\\)/i\n  };\n  \n  var parse = function( e, value, anim, attr, relativeTo )\n  {\n    var desiredUnit = anim.units[ attr ];\n    var converted = anim8.dom.convert( e, value, desiredUnit, relativeTo );\n    \n    if ( converted !== false )\n    {\n      return converted;\n    }\n    \n    // TODO show convert this to desiredUnit, however defaultValue may be non-scalar.\n    return anim.getAttribute( attr ).defaultValue;    \n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      for (var attr in anim.animating) \n      {\n        if ( anim.animating[ attr ] === false && attr in regex ) \n        {\n          var parsed = regex[ attr ].exec( style );\n\n          if ( parsed ) \n          {\n            if ( attr in d4 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr ),\n                angle: parse( e, parsed[4], anim, attr )\n              };\n            }\n            else if ( attr in d3 )\n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' ),\n                z: parse( e, parsed[3], anim, attr )\n              };\n            }\n            else if ( attr in d2 ) \n            {\n              anim.frame[attr] = {\n                x: parse( e, parsed[1], anim, attr, 'width' ),\n                y: parse( e, parsed[2], anim, attr, 'height' )\n              };\n            }\n            else \n            {\n              anim.frame[attr] = parse( e, parsed[1], anim, attr, 'width' );\n            }\n            \n            anim.animating[attr] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    {  \n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n      var transforms = [];\n      \n      for (var attr in regex) \n      {\n        if (attr in anim.frame) \n        { \n          var value = anim.frame[ attr ];\n          var unit = anim.units[ attr ];\n          \n          if (attr in d4) \n          {\n            transforms.push( attr + '(' + value.x + ',' + value.y + ',' + value.z + ',' + value.angle + unit + ')' );\n          }\n          else if (attr in d3) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ',' + value.z + unit + ')' );\n          }\n          else if (attr in d2) \n          {\n            transforms.push( attr + '(' + value.x + unit + ',' + value.y + unit + ')' );\n          }\n          else\n          {\n            transforms.push( attr + '(' + value + unit + ')' );\n          }\n        }\n      }\n\t\t\t\n      if (transforms.length) \n      {\n        anim.styles[css] = transforms.join(' ');\n      }\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.opacity = (function() \n{\n  var css = anim8.dom.prefix(['WebkitOpacity', 'MozOpacity', 'KhtmlOpacity', 'opacity']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating.opacity === false) \n      {\n        var style = anim8.dom.style( e, css );\n        var opacity = parseFloat( style );\n        \n        if ( !isNaN(opacity) ) \n        {\n          anim.frame.opacity = opacity\n          anim.animating.opacity = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[ css ] = anim8.clamp( anim.frame.opacity, 0, 1 );\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.filter = (function() \n{\n  var css = anim8.dom.prefix(['WebkitFilter', 'MozFilter', 'OFilter', 'msFilter', 'filter']);\n  \n  if ( !css )\n  {\n    return false;\n  }\n  \n\tvar methods = \n  {\n\t\tgrayscale: \t'grayscale',\n\t\tsepia: \t\t\t'sepia',\n\t\tsaturate: \t'saturate',\n\t\thueRotate: \t'hue-rotate',\n\t\tinvert: \t\t'invert',\n\t\tbrightness: 'brightness',\n\t\tcontrast: \t'contrast',\n    blur:       'blur'\n\t};\n\t\n\tvar patterns = {};\n\t\n\tfor (var attr in methods) \n  {\n\t\tpatterns[attr] = new RegExp( methods[attr] + '\\(([^\\)]+)\\)', 'i');\n\t}\n  \n\treturn {\n    \n\t\tget: function(e, anim) \n    {\n\t\t\tvar style = anim8.dom.style( e, css );\n      \n\t\t\tfor (var attr in patterns) \n      {\n\t\t\t\tif ( anim.animating[attr] === false ) \n        {\n\t\t\t\t\tvar parsed = patterns[attr].exec( style );\n          \n\t\t\t\t\tif (parsed !== false) \n          {\n            var converted = anim8.dom.convert( e, parsed[1], anim.units[ attr ] );\n            \n            if ( converted !== false )\n            {\n              anim.frame[ attr ] = converted;\n              anim.animating[ attr ] = true;\n            }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, \n\t\tset: function(e, anim) \n    {\n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n\t\t\tvar filters = [];\n      \n\t\t\tfor (var attr in methods) \n      {\n\t\t\t\tif ( attr in anim.frame ) \n        {\n          filters.push( methods[attr] + '(' + anim.value( attr ) + ')' );\n\t\t\t\t}\n\t\t\t}\n      \n\t\t\tif (filters.length) \n      {\n\t\t\t\tanim.styles[ css ] = filters.join(' ');\n\t\t\t}\n\t\t},\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n\t};\n\t\n})();\n\nanim8.dom.property.center = \n{\n  get: function(e, anim)\n  {\n    var cx = (e.offsetLeft + e.offsetWidth * 0.5) + 'px';\n    var cy = (e.offsetTop + e.offsetHeight * 0.5) + 'px';\n    \n    if ( anim.animating.center === false )\n    {\n      var desiredUnit = anim.units.center;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n    \n      if ( ccx !== false && ccy !== false )\n      {\n        anim.frame.center = {\n          x: ccx,\n          y: ccy\n        };\n        anim.animating.center = true;\n      }\n    }\n    if ( anim.animating.centerX === false )\n    {\n      var desiredUnit = anim.units.centerX;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      \n      if ( ccx !== false )\n      {\n        anim.frame.centerX = ccx;\n        anim.animating.centerX = true;\n      }\n    }\n    if ( anim.animating.centerY === false )\n    {\n      var desiredUnit = anim.units.centerY;\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n      \n      if ( ccy !== false )\n      {\n        anim.frame.centerY = ccy;\n        anim.animating.centerY = true;\n      }\n    }\n  },\n  preset: function(e, anim)\n  {\n    anim.cached.width  = anim8.dom.convert( e, e.offsetWidth + 'px', anim.units.centerX || anim.units.center, 'parentWidth' );\n    anim.cached.height = anim8.dom.convert( e, e.offsetHeight + 'px', anim.units.centerY || anim.units.center, 'parentHeight' );\n  },\n  set: function(e, anim)\n  {\n    var rw = anim.cached.width * 0.5;\n    var rh = anim.cached.height * 0.5;\n        \n    if ( anim.updated.center )\n    {\n      anim.styles.left = (anim.frame.center.x - rw) + anim.units.center;\n      anim.styles.top = (anim.frame.center.y - rh) + anim.units.center;\n    }\n    if ( anim.updated.centerX )\n    {\n      anim.styles.left = (anim.frame.centerX - rw) + anim.units.centerX;\n    }\n    if ( anim.updated.centerY )\n    {\n      anim.styles.top = (anim.frame.centerY - rh) + anim.units.centerY;\n    }\n  }\n};\n\nanim8.dom.property.orbit = \n{\n  DEGREE_TO_RADIAN: Math.PI / 180.0,\n  \n  RADIAN_TO_DEGREE: 180.0 / Math.PI,\n  \n  get: function(e, anim)\n  {\n    var ox = (e.parentNode.scrollWidth * 0.5);\n    var oy = (e.parentNode.scrollHeight * 0.5); \n    var cx = (e.offsetLeft + e.offsetWidth * 0.5);\n    var cy = (e.offsetTop + e.offsetHeight * 0.5);\n    var dx = cx - ox;\n    var dy = cy - oy;\n  \n    if ( anim.animating.orbitOffset === false )\n    {\n      var cunit = anim.units.orbitOffset;\n      var cox = anim8.dom.convert( e, ox + 'px', cunit, 'parentWidth' );\n      var coy = anim8.dom.convert( e, oy + 'px', cunit, 'parentHeight' );\n      \n      if ( cox !== false && coy !== false )\n      {\n        anim.frame.orbitOffset = {\n          x: cox,\n          y: coy\n        };\n        anim.animating.orbitOffset = false;\n      }\n    }\n    \n    if ( anim.animating.distance === false )\n    {\n      anim.frame.distance = Math.sqrt( dx * dx + dy * dy );\n      anim.animating.distance = true;\n    }\n    \n    if ( anim.animating.angle === false )\n    {\n      anim.frame.angle = Math.atan2( dy, dx ) * this.RADIAN_TO_DEGREE;\n      anim.animating.angle = true;\n    }\n  },\n  \n  preset: function(e, anim)\n  {  \n    anim.cached.parentWidth = e.parentNode.scrollWidth;\n    anim.cached.parentHeight = e.parentNode.scrollHeight;\n    anim.cached.width = e.offsetWidth;\n    anim.cached.height = e.offsetHeight;\n  },\n  \n  set: function(e, anim)\n  {\n    // TODO calculator this correctly\n    var cunit = anim.units.orbitOffset || '%';\n    var orbitX = anim.frame.orbitOffset ? anim.frame.orbitOffset.x : 50;\n    var orbitY = anim.frame.orbitOffset ? anim.frame.orbitOffset.y : 50;\n    \n    var originUnit = anim.units.origin || '%';\n    var originX = anim.frame.origin ? anim.frame.origin.x : 50;\n    var originY = anim.frame.origin ? anim.frame.origin.y : 50;\n    \n    var cox = anim8.dom.convert( e, orbitX + cunit, 'px', anim.cached.parentWidth / 100.0 );\n    var coy = anim8.dom.convert( e, orbitY + cunit, 'px', anim.cached.parentHeight / 100.0 );\n    \n    var ox = anim8.dom.convert( e, originX + originUnit, 'px', anim.cached.width / 100.0 );\n    var oy = anim8.dom.convert( e, originY + originUnit, 'px', anim.cached.height / 100.0 );\n    \n    var angle = (anim.frame.angle || 0.0) * this.DEGREE_TO_RADIAN;\n    var distance = anim.frame.distance || 0.0;\n        \n    var cos = Math.cos( angle ) * distance;\n    var sin = Math.sin( angle ) * distance;\n    \n    anim.styles.left = (cox + cos - ox) + 'px';\n    anim.styles.top = (coy + sin - oy) + 'px';\n  }\n};","\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.dom.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.dom.attribute[ attr ];\n  }\n  \n  return anim8.dom.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.dom.attribute.default                 = {defaultValue: 0};\n\n/**\n * All animatable attributes for DomAnimators & HTMLElements.\n */\n\nanim8.dom.attribute.padding                 = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingTop              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingRight            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingBottom           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingLeft             = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.margin                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginTop               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginRight             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginBottom            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginLeft              = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderRadius            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopLeftRadius     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopRightRadius    = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomLeftRadius  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomRightRadius = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderWidth             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopWidth          = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderRightWidth        = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomWidth       = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderLeftWidth         = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.outlineWidth\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.outlineOffset\t\t\t\t\t\t= {defaultValue: 0};\nanim8.dom.attribute.textIndent\t\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderSpacing\t\t\t\t\t\t= {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.fontSize\t\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\nanim8.dom.attribute.lineHeight\t\t\t\t\t\t\t= {defaultValue: 1, defaultUnit: 'em'};\n\nanim8.dom.attribute.origin                  = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'transformOrigin', calculator: '2d'};\nanim8.dom.attribute.originX                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\nanim8.dom.attribute.originY                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\n\nanim8.dom.attribute.opacity                 = {defaultValue: 1};\nanim8.dom.attribute.zIndex                  = {defaultValue: 1};\n\nanim8.dom.attribute.width                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minWidth                = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxWidth                = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.height                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minHeight               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxHeight               = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.angle                   = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.distance                = {defaultValue: 0, property: 'orbit'};\nanim8.dom.attribute.orbitOffset             = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'orbitOffset', calculator: '2d'};\n\nanim8.dom.attribute.top                     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.right                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.bottom                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.left                    = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.center                  = {defaultValue: {x:0, y:0}, defaultUnit: 'px', property: 'center', calculator: '2d'};\nanim8.dom.attribute.centerX                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\nanim8.dom.attribute.centerY                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\n\nanim8.dom.attribute.blur                    = {defaultValue: 0, property: 'filter', defaultUnit: 'px'};\nanim8.dom.attribute.sepia                   = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.brightness              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.grayscale               = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.contrast                = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.invert                  = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.saturation              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.hueRotate               = {defaultValue: 0, property: 'filter', defaultUnit: 'deg'};\n\nanim8.dom.attribute.rotate                  = {defaultValue: 0, property: 'transform', defaultUnit: 'deg'};\nanim8.dom.attribute.rotate3d                = {defaultValue: {x:0, y:0, z:1, angle:0}, property: 'transform', calculator: 'quaternion', defaultUnit: 'deg'};\n\nanim8.dom.attribute.translate               = {defaultValue: {x:0, y:0}, property: 'transform', calculator: '2d', defaultUnit: 'px'};\nanim8.dom.attribute.translateX              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateY              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateZ              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translate3d             = {defaultValue: {x:0, y:0, z:0}, property: 'transform', calculator: '3d', defaultUnit: 'px'};\n\nanim8.dom.attribute.scale                   = {defaultValue: {x:1, y:1}, property: 'transform', calculator: '2d'};\nanim8.dom.attribute.scaleX\t                = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleY  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleZ  \t              = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scale3d                 = {defaultValue: {x:1, y:1, z:1}, property: 'transform', calculator: '3d'};\n\nanim8.dom.attribute.skew                    = {defaultValue: {x:0, y:0}, defaultUnit: 'deg', property: 'transform', calculator: '2d'};\nanim8.dom.attribute.skewX                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\nanim8.dom.attribute.skewY                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\n\nanim8.dom.attribute.backface                = {defaultValue: 0};\nanim8.dom.attribute.visibility              = {defaultValue: 1};\n\nanim8.dom.attribute.backgroundColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.color                   = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderTopColor          = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderRightColor        = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderBottomColor       = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderLeftColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.outlineColor            = {defaultValue: anim8.color(), calculator: 'rgba'};\n","\n/**\n * Instantiates a new DomAnimator given a subject.\n * \n * @param {HTMLElement} e\n */\nanim8.DomAnimator = function(e)\n{\n\tthis.reset( e );\n  this.properties = {};\n  this.attributeToProperty = {};\n  this.animating = {};\n  this.cached = {};\n  this.units = {};\n  this.styles = {};\n  this.styled = false;\n  this.stylesUpdated = false;\n};\n\n/**\n * Extends anim8.Animator\n */\nanim8.override( anim8.DomAnimator.prototype = new anim8.Animator(),\n{\n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   *\n   * If any events that were recently added have true values this is where we replace\n   * this true values with the values currently on the subject.\n   */\n  preupdate: function()\n  {\n    // If there are events with paths that contain computed values we should\n    // populate the frame directly from the HTML element.\n    var ce = this.eventsComputed;\n    if ( ce.length )\n    {\n      var properties = {};\n    \n      for (var i = 0; i < ce.length; i++)\n      {\n        var attr = ce[ i ].attribute;\n\n        if ( !(attr in this.frame) )\n        {\n          properties[ this.attributeToProperty[ attr ] ] = true;\n      \n          this.animating[ attr ] = false; \n        }\n      }\n      \n      for (var prop in properties)\n      {\n        this.properties[ prop ].get( this.subject, this );\n      }\n    }\n\n    // If a property currently being animated requires some heads up before it\n    // gets or sets a value, notify it. TODO removed dead properties.\n    for (var prop in this.properties)\n    {\n      var property = this.properties[ prop ];\n      \n      if ( anim8.isFunction( property.preset ) )\n      {\n        property.preset( this.subject, this );\n      }\n    }\n\n    // Finish updating computed events, filling in the frame, and triggering.\n    anim8.Animator.prototype.preupdate.apply( this, arguments );\n\n    return this;\n  },\n    \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now)\n  {\n    anim8.Animator.prototype.update.apply( this, arguments );\n      \n    this.getStyles();\n    this.stylesUpdated = true;\n\n    return this;\n  },\n\n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {  \n    if ( animation.input.units )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[i];\n        var attr = e.attribute;\n      \n        if ( attr in animation.input.units )\n        {\n          e.unit = animation.input.units[ attr ];\n        }\n      }  \n    }\n  },\n\n  /**\n   * Builds the styles map in preparation to be applied.\n   */\n  getStyles: function()\n  {\n    this.styles = {};\n    \n    var applyProperties = {};\n    \n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        var prop = this.attributeToProperty[ attr ];\n        \n        if ( prop in this.properties )\n        {\n          applyProperties[ prop ] = true; \n        }\n      }\n    }\n    \n    for (var prop in applyProperties)\n    {\n      this.properties[ prop ].set( this.subject, this );  \n      \n      this.styled = true;\n    }\n  },\n\n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n  {\n    if ( !this.styled && !this.stylesUpdated )\n    {\n      this.getStyles();\n    }\n    \n    if ( this.styled )\n    {    \n      for (var prop in this.styles)\n      {\n         this.subject.style[ prop ] = this.styles[ prop ];\n      }\n      \n      for (var attr in this.frame)\n      {\n        this.updated[ attr ] = false;\n      }\n    \n      this.styled = false;\n    }\n    \n    this.stylesUpdated = false;\n    \n    this.trigger('apply');\n    \n    this.trimEvents();\n\n    return this;\n  },\n    \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function( e )\n  {\n    anim8.Animator.prototype.placeEvent.apply( this, arguments );\n    \n    var attr = e.attribute;\n    var attribute = this.getAttribute( attr );\n    var prop = anim8.coalesce( attribute.property, attr );\n    var property = anim8.dom.property( prop );\n        \n    this.properties[ prop ] = property;\n    this.attributeToProperty[ attr ] = prop;\n    this.units[ attr ] = e.unit || attribute.defaultUnit || '';\n\n    return this;\n  },\n    \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function( s )\n  {\n    anim8.Animator.prototype.placeSpring.apply( this, arguments );\n    \n    var attr = s.attribute;\n    var attribute = this.getAttribute( attr );\n    var prop = anim8.coalesce( attribute.property, attr );\n    var property = anim8.dom.property( prop );\n    \n    this.properties[ prop ] = property;\n    this.attributeToProperty[ attr ] = prop;\n    this.units[ attr ] = attribute.defaultUnit || '';\n\n    return this;\n  },\n    \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  {\n    for (var prop in this.properties)\n    {\n      this.properties[ prop ].unset( this.subject, this );\n    }\n  \t\n  \tthis.frame = {};\n\n    return this;\n  },\n\n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    var props = {};\n    var updated = {};\n    var units = {};\n    var styles = {};\n    \n    for (var attr in attributes)\n    {\n      var attribute = this.getAttribute( attr );\n      var prop      = anim8.coalesce( attribute.property, attr );\n      var property  = anim8.dom.property( prop );\n      var calc      = this.getCalculator( attr );\n      var value     = attributes[ attr ];\n      \n      units[ attr ] = attribute.defaultUnit || '';\n      \n      if ( anim8.isString( value ) )\n      {\n        var parsed = anim8.dom.parseValue( value, attribute.defaultUnit );\n        \n        if ( parsed !== false )\n        {\n          units[ attr ] = parsed.unit || attribute.defaultUnit || '';\n          value = parsed.value;\n        }  \n      }\n      \n      var parsed = calc.parse( value, attribute.defaultValue );\n      \n      if ( parsed !== false )\n      {\n        props[ prop ] = property;\n        attributes[ attr ] = parsed;\n        updated[ attr ] = true;\n      }\n    }\n      \n    var flash = \n    {\n      units: units,\n       \n      frame: attributes,\n      \n      updated: updated,\n      \n      styles: styles,\n      \n      cached: {},\n      \n      value: function(attr)\n      {\n        return attributes[ attr ] + units[ attr ];\n      },\n      \n      valueOr: function(attr, other, subproperty)\n      {\n        var value = attributes[ attr ];\n        \n        if ( !anim8.isDefined( value ) )\n        {\n          value = attributes[ attr = other ];\n        \n          if ( anim8.isDefined( subproperty ) )\n          {\n            value = value[ subproperty ];\n          }\n        }\n    \n        return value + units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      var property = props[ prop ];\n      \n      if ( anim8.isFunction( property.preset ) )\n      {\n        props[ prop ].preset( this.subject, flash );\n      }\n    }\n    \n    for (var prop in props)\n    {\n      props[ prop ].set( this.subject, flash );\n    }\n    \n    for (var prop in styles)\n    {\n      this.subject.style[ prop ] = styles[ prop ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute and the value is the desired unit.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var props = {};\n    var animating = {};\n    var units = {};\n    var out = {};\n    \n    for (var attr in attributes)\n    {    \n      var attribute = this.getAttribute( attr );\n      var prop      = anim8.coalesce( attribute.property, attr );\n      var property  = anim8.dom.property( prop );\n      var calc      = this.getCalculator( attr );\n      \n      animating[ attr ] = false;    \n      units[ attr ] = attributes[ attr ] || attribute.defaultUnit || '';\n      props[ prop ] = property;\n      out[ attr ] = calc.clone( attribute.defaultValue );\n    }\n    \n    var flash = \n    {    \n      units: units,\n      \n      frame: out,\n      \n      animating: animating,\n      \n      unit: function(attr)\n      {\n        return units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      props[ prop ].get( this.subject, flash );\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute, desiredUnit, relativeTo)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame && anim8.isNumber( animator.frame[ attribute ] ) )\n      {\n        return anim8.dom.convert( animator.e, animator.value( attribute ), desiredUnit, relativeTo );\n      }\n      \n      request[ attribute ] = desiredUnit;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return animator.getAttribute( attribute ).defaultValue;\n    };\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ] + this.units[ attr ];\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   * if the attribute doesn't exist a secondary one is looked up. If that value\n   * is an object and contains the given subproperty the value is resolved once again.\n   *\n   * @param {string} attr\n   * @param {string} other\n   * @param [string] subproperty\n   */\n  valueOr: function(attr, other, subproperty)\n  {\n    var value = this.frame[ attr ];\n      \n    if ( !anim8.isDefined( value ) )\n    {\n      value = this.frame[ attr = other ];\n      \n      if ( anim8.isDefined( subproperty ) )\n      {\n        value = value[ subproperty ];\n      }\n    }\n    \n    return value + this.units[ attr ];\n  }\n\n});\n","/**\n * Animate.css animations in anim8js.\n *\n * http://daneden.github.io/animate.css/\n */\n\nanim8.save('bounce', {\n\tkeyframe: {\n    '0,20,53,80,100': {\n      translate3d: 0,\n      easing: [0.215, 0.610, 0.355, 1.000]\n    },\n    '40,43': {\n      translate3d: {y:-30},\n      easing: [0.755, 0.050, 0.855, 0.060]\n    },\n    '70': {\n      translate3d: {y:-15},\n      easing: [0.755, 0.050, 0.855, 0.060]\n    },\n    '90': {\n      translate3d: {y:-4}\n    }\n\t}\n});\n\nanim8.save('rubberBand', {\n\tkeyframe: {\n    '0,100': {\n      scale3d: 1\n    },\n    '30': {\n      scale3d: {x:1.25, y:0.75}\n    },\n    '40': {\n      scale3d: {x:0.75, y:1.25}\n    },\n    '50': {\n      scale3d: {x:1.15, y:0.85}\n    },\n    '65': {\n      scale3d: {x:0.95, y:1.05}\n    },\n    '75': {\n      scale3d: {x:1.05, y:0.95}\n    }\n\t},\n  scaleBases: {\n    scale3d: 1\n  }\n});\n\nanim8.save('flash', {\n  keyframe: {\n    '0,50,100': {\n      opacity: 1\n    },\n    '25,75': {\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('pulse', {\n  keyframe: {\n    '0': {\n      scale3d: 1\n    },\n    '50': {\n      scale3d: 1.05\n    },\n    '100': {\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1\n  }\n});\n\nanim8.save('shake', {\n  keyframe: {\n    '0,100': {\n      translateX: 0.0\n    },\n    '10,30,50,70,90': {\n      translateX: -10.0\n    },\n    '20,40,60,80': {\n      translateX: 10.0\n    } \n  }\n});\n\nanim8.save('swing', {\n  keyframe: {\n    '0': {\n      rotate: 0\n    },\n    '20': {\n      rotate: 15\n    },\n    '40': {\n      rotate: -10\n    },\n    '60': {\n      rotate: 5\n    },\n    '80': {\n      rotate: -5\n    },\n    '100': {\n      rotate: 0\n    }\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'center top'\n  }\n});\n\nanim8.save('tada', {\n  keyframe: {\n    '0,100': {\n      scale3d: 1,\n      rotate: 0\n    },\n    '10,20': {\n      scale3d: 0.9,\n      rotate: -3\n    },\n    '30,50,70,90': {\n      scale3d: 1.1,\n      rotate: 3\n    },\n    '40,60,80': {\n      scale3d: 1.1,\n      rotate: -3\n    }\n  },\n  scaleBases: {\n    scale3d: 1\n  }\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('wobble', {\n  keyframe: {\n    '0,100': {\n      translateX: 0,\n      rotate: 0\n    },\n    '15': {\n      translateX: -25,\n      rotate: -5\n    },\n    '30': {\n      translateX: 20,\n      rotate: 3\n    },\n    '45': {\n      translateX: -15,\n      rotate: -3\n    },\n    '60': {\n      translateX: 10,\n      rotate: 2\n    },\n    '75': {\n      translateX: -5,\n      rotate: -1\n    }\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('bounceIn', {\n  keyframe: {\n    '0': {\n      opacity: 0.0,\n      scale3d: 0.3\n    },\n    '20': {\n      scale3d: 1.1\n    },\n    '40': {\n      scale3d: 0.9\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 1.03\n    },\n    '80': {\n      scale3d: 0.97\n    },\n    '100': {\n      opacity: 1.0,\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n}, {\n  easing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceInDown', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: -3000\n    },\n    '60': {\n      opacity: 1,\n      translateY: 25\n    },\n    '75': {\n      translateY: -10\n    },\n    '90': {\n      translateY: 5\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 2000,\n  easing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceInLeft', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -3000\n    },\n    '60': {\n      opacity: 1,\n      translateX: 25\n    },\n    '75': {\n      translateX: -10\n    },\n    '90': {\n      translateX: 5\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 2000,\n  teasing: [0.215, 0.610, 0.355, 1.000]\n});\n\n\nanim8.save('bounceInRight', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: 3000\n    },\n    '60': {\n      opacity: 1,\n      translateX: -25\n    },\n    '75': {\n      translateX: 10\n    },\n    '90': {\n      translateX: -5\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 2000,\n  teasing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceInUp', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: 3000\n    },\n    '60': {\n      opacity: 1,\n      translateY: -25\n    },\n    '75': {\n      translateY: 10\n    },\n    '90': {\n      translateY: -5\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n}, {\n  duration: 1000,\n  teasing: [0.215, 0.610, 0.355, 1.000]\n});\n\nanim8.save('bounceOut', {\n  keyframe: {\n    '0': {\n      scale3d: 1\n    },\n    '20': {\n      scale3d: 0.9\n    },\n    '50,55': {\n      opacity: 1,\n      scale3d: 1.1\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.3\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n}, {\n  duration: 750\n});\n\nanim8.save('bounceOutDown', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '20': {\n      translateY: 10\n    },\n    '40,45': {\n      opacity: 1,\n      translateY: -20\n    },\n    '100': {\n      opacity: 0,\n      translateY: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('bounceOutLeft', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '20': {\n      opacity: 1,\n      translateX: 20\n    },\n    '100': {\n      opacity: 0,\n      translateX: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('bounceOutRight', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '20': {\n      opacity: 1,\n      translateX: -20\n    },\n    '100': {\n      opacity: 0,\n      translateX: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('bounceOutUp', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '20': {\n      translateY: -10\n    },\n    '40,45': {\n      opacity: 1,\n      translateY: 20\n    },\n    '100': {\n      opacity: 0,\n      translateY: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeIn', {\n  keyframe: {\n    '0': {\n      opacity: 0\n    },\n    '100': {\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInDown', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: -100\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeInDownBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: -2000\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInLeft', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -100\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeInLeftBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -2000\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInRight', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: 100\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeInRightBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: 2000\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeInUp', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: 100\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }, \n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeInUpBig', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateY: 2000\n    },\n    '100': {\n      opacity: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOut', {\n  keyframe: {\n    '0': {\n      opacity: 1\n    },\n    '100': {\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutDown', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: 100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeOutDownBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutLeft', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: -100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeOutLeftBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutRight', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: 100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('fadeOutRightBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: 2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('fadeOutUp', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: -100\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('fadeOutUpBig', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateY: 0\n    },\n    '100': {\n      opacity: 0,\n      translateY: -2000\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('flip', {\n  keyframe: {\n    '0': {\n      translateZ: 0,\n      rotate3d: {x:0, y:1, z:0, angle:-360},\n      scale3d: 1,\n      easing: 'cssEaseOut'\n    },\n    '40': {\n      translateZ: 150,\n      rotate3d: {x:0, y:1, z:0, angle:-190},\n      easing: 'cssEaseOut'\n    },\n    '50': {\n      translateZ: 150,\n      rotate3d: {x:0, y:1, z:0, angle:-170},\n      easing: 'cssEaseIn'\n    },\n    '80': {\n      translateZ: 0,\n      rotate3d: {x:0, y:1, z:0, angle:0},\n      scale3d: 0.95,\n      easing: 'cssEaseIn'\n    },\n    '100': {\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n});\n\nanim8.save('flipInX', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      rotate3d: {x:1, y:0, z:0, angle:90},\n      easing: 'cssEaseIn'\n    },\n    '40': {\n      rotate3d: {x:1, y:0, z:0, angle:-20},\n      easing: 'cssEaseIn'\n    },\n    '60': {\n      opacity: 1,\n      rotate3d: {x:1, y:0, z:0, angle:10}\n    },\n    '80': {\n      rotate3d: {x:1, y:0, z:0, angle:-5}\n    },\n    '100': {\n      rotate3d: {x:1, y:0, z:0, angle:0}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n});\n\nanim8.save('flipInY', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      rotate3d: {x:0, y:1, z:0, angle:90},\n      easing: 'cssEaseIn'\n    },\n    '40': {\n      rotate3d: {x:0, y:1, z:0, angle:-20},\n      easing: 'cssEaseIn'\n    },\n    '60': {\n      opacity: 1,\n      rotate3d: {x:0, y:1, z:0, angle:10}\n    },\n    '80': {\n      rotate3d: {x:0, y:1, z:0, angle:-5}\n    },\n    '100': {\n      rotate3d: {x:0, y:1, z:0, angle:0}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n});\n\nanim8.save('flipOutX', {\n  keyframe: {\n    '0': {\n      rotate3d: {x:1, y:0, z:0, angle:0}\n    },\n    '30': {\n      opacity: 1,\n      rotate3d: {x:1, y:0, z:0, angle:-20}\n    },\n    '100': {\n      opacity: 0,\n      rotate3d: {x:1, y:0, z:0, angle:90}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n}, {\n  duration: 750\n});\n\nanim8.save('flipOutY', {\n  keyframe: {\n    '0': {\n      rotate3d: {x:0, y:1, z:0, angle:0}\n    },\n    '30': {\n      opacity: 1,\n      rotate3d: {x:0, y:1, z:0, angle:-20}\n    },\n    '100': {\n      opacity: 0,\n      rotate3d: {x:0, y:1, z:0, angle:90}\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  initial: {\n    backface: 1.0\n  },\n  final: {\n    backface: 0.0\n  }\n}, {\n  duration: 750\n});\n\nanim8.save('lightSpeedIn', {\n  keyframe: {\n    '0': {\n      translateX: 100,\n      skewX: -30,\n      opacity: 0\n    },\n    '60': {\n      skewX: 20,\n      opacity: 1\n    },\n    '80': {\n      skewX: -5\n    },\n    '100': {\n      translateX: 0,\n      skewX: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n}, {\n  easing: 'cssEaseOut'\n});\n\nanim8.save('lightSpeedOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0,\n      skewX: 0\n    },\n    '100': {\n      opacity: 0,\n      translateX: 100,\n      skewX: 30\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n}, {\n  easing: 'cssEaseIn'\n});\n\nanim8.save('rotateIn', {\n  keyframe: {\n    '0': {\n      rotate: -200,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'center'\n  }\n});\n\nanim8.save('rotateInDownLeft', {\n  keyframe: {\n    '0': {\n      rotate: -45,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n});\n\nanim8.save('rotateInDownRight', {\n  keyframe: {\n    '0': {\n      rotate: 45,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('rotateInUpLeft', {\n  keyframe: {\n    '0': {\n      rotate: 45,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n});\n\nanim8.save('rotateInUpRight', {\n  keyframe: {\n    '0': {\n      rotate: -90,\n      opacity: 0\n    },\n    '100': {\n      rotate: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('rotateOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: 200\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'center'\n  }\n});\n\nanim8.save('rotateOutDownLeft', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: 45\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n})\n\nanim8.save('rotateOutDownRight', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: -45\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('rotateOutUpLeft', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: -45\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'left bottom'\n  }\n});\n\nanim8.save('rotateOutUpRight', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0,\n      rotate: 90\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'right bottom'\n  }\n});\n\nanim8.save('hinge', {\n  keyframe: {\n    '0': {\n      rotate: 0\n    },\n    '20,60': {\n      rotate: 80\n    },\n    '40': {\n      rotate: 60\n    },\n    '80': {\n      rotate: 60,\n      translateY: 0,\n      opacity: 1\n    },\n    '100': {\n      rotate: 0,\n      translateY: 700,\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  scales: {\n    origin: 1.0\n  },\n  initial: {\n    origin: 'top left'\n  }\n}, {\n  easing: 'cssEaseInOut',\n  duration: 2000\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('rollIn', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      translateX: -100,\n      rotate: -120\n    },\n    '100': {\n      opacity: 1,\n      translateX: 0,\n      rotate: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\n/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */\n\nanim8.save('rollOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      translateX: 0,\n      rotate: 0\n    },\n    '100': {\n      opacity: 0.0,\n      translateX: 100,\n      rotate: 120\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('zoomIn', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.3\n    },\n    '50': {\n      opacity: 1\n    },\n    '100': {\n      scale3d: 1\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInDown', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: -1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: 60,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInLeft', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: -1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: 10,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInRight', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: 1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: -10,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateX: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomInUp', {\n  keyframe: {\n    '0': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: 1000,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '60': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: -10,\n      easing: [0.175, 0.885, 0.320, 1.000]\n    },\n    '100': {\n      scale3d: 1,\n      translateY: 0\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n});\n\nanim8.save('zoomOut', {\n  keyframe: {\n    '0': {\n      opacity: 1,\n      scale3d: 1\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.3\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  }\n}, {\n  duration: '500ms'\n});\n\nanim8.save('zoomOutDown', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateY: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: -60,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: 2000,\n      origin: 'center bottom'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('zoomOutLeft', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateX: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: 42,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: -2000,\n      origin: 'left center'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('zoomOutRight', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateX: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateX: -42,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateX: 2000,\n      origin: 'right center'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('zoomOutUp', {\n  keyframe: {\n    '0': {\n      scale3d: 1,\n      translateY: 0,\n      origin: 'center'\n    },\n    '40': {\n      opacity: 1,\n      scale3d: 0.475,\n      translateY: 60,\n      easing: [0.550, 0.055, 0.675, 0.190]\n    },\n    '100': {\n      opacity: 0,\n      scale3d: 0.1,\n      translateY: -2000,\n      origin: 'center bottom'\n    }\n  },\n  scaleBases: {\n    scale3d: 1,\n    opacity: 1\n  },\n  scales: {\n    origin: 1\n  }\n});\n\nanim8.save('slideInDown', {\n  keyframe: {\n    '0': {\n      translateY: -100\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('slideInLeft', {\n  keyframe: {\n    '0': {\n      translateX: -100\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('slideInRight', {\n  keyframe: {\n    '0': {\n      translateX: 100\n    },\n    '100': {\n      translateX: 0\n    }\n  },\n  units: {\n    translateX: '%'\n  }\n});\n\nanim8.save('slideInUp', {\n  keyframe: {\n    '0': {\n      translateY: 100\n    },\n    '100': {\n      translateY: 0\n    }\n  },\n  units: {\n    translateY: '%'\n  }\n});\n\nanim8.save('slideOutDown', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '100': {\n      translateY: 100\n    }\n  },\n  units: {\n    translateY: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\nanim8.save('slideOutLeft', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '100': {\n      translateX: -100\n    }\n  },\n  units: {\n    translateX: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\nanim8.save('slideOutRight', {\n  keyframe: {\n    '0': {\n      translateX: 0\n    },\n    '100': {\n      translateX: 100\n    }\n  },\n  units: {\n    translateX: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\nanim8.save('slideOutUp', {\n  keyframe: {\n    '0': {\n      translateY: 0\n    },\n    '100': {\n      translateY: -100\n    }\n  },\n  units: {\n    translateY: '%'\n  },\n  final: {\n    visibility: 0\n  }\n});\n\n/* anim8js animations */\n\nanim8.save('blurOut', {\n  keyframe: {\n    '0': {\n      blur: 0,\n      opacity: 1\n    },\n    '50': {\n      blur: 4,\n      opacity: 0.9\n    },\n    '100': {\n      blur: 5,\n      opacity: 0\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\nanim8.save('blurIn', {\n  keyframe: {\n    '0': {\n      blur: 5,\n      opacity: 0\n    },\n    '50': {\n      blur: 4,\n      opacity: 0.9\n    },\n    '100': {\n      blur: 0,\n      opacity: 1\n    }\n  },\n  scaleBases: {\n    opacity: 1\n  }\n});\n\n/**\n * Generate animations for all permutations of the following concepts:\n *\n * (slide|fade|zoom)(Out|In)(Down|Up)(Right|Left)(|x2|Big)\n */\n(function() \n{\n  var actions = {\n    'slide': {},\n    'fade': {opacity:{from:0,to:1}},\n    'zoom': {scale3d:{from:0,to:1}}\n  };\n  \n  var directions = {\n    'Out':  {from:0, to:1},\n    'In':   {from:1, to:0}\n  };\n  \n  var vertical = {\n    'Down': 1,\n    'Up': -1\n  };\n  \n  var horizontal = {\n    'Right': 1,\n    'Left': -1\n  };\n  \n  var sizes = {\n    '':     {value: 100, unit: '%'},\n    'x2':   {value: 200, unit: '%'},\n    'Big':  {value: 2000, unit: 'px'}\n  };\n  \n  for ( var a in actions )\n  {\n    var attrs = actions[ a ];\n    \n    for ( var d in directions )\n    {\n      var dir = directions[ d ];\n      \n      for ( var v in vertical )\n      {\n        var ver = vertical[ v ];\n        \n        for ( var h in horizontal )\n        {\n          var hor = horizontal[ h ];\n          \n          for ( var s in sizes )\n          {\n            var siz = sizes[ s ];\n            \n            var animName = a + d + v + h + s;\n            \n            if ( animName in anim8.animation )\n            {\n              continue;\n            }\n            \n            var anim = \n            {\n              keyframe: {\n                from: {\n                  translateX: hor * dir.from * siz.value,\n                  translateY: ver * dir.from * siz.value\n                },\n                to: {\n                  translateX: hor * dir.to * siz.value,\n                  translateY: ver * dir.to * siz.value\n                }\n              },\n              units: {\n                translateX: siz.unit,\n                translateY: siz.unit\n              }\n            };\n            \n            for (var attr in attrs)\n            {\n              var attribute = attrs[attr];\n              \n              anim.keyframe.from[ attr ] = dir.to * attribute.to + dir.to * attribute.from;\n              anim.keyframe.to[ attr ]   = dir.from * attribute.from + dir.from * attribute.to;\n            }\n            \n            anim8.save( animName, anim );\n          }\n        }\n      }\n    }\n  }\n  \n})();","/**\n * Adds useful anim8js functions to jQuery.\n * \n * @param  {jQuery}\n * @param  {anim8}\n * @param  {anim8s}\n * @return {function}\n */\n(function($, m8, m8s)\n{\n\n  /**\n   * Extend the clone function to remove the attribute which stores the animator ID so clones get new animators.\n   * \n   * @return {jQuery}\n   */\n  var cloner = $.fn.clone;\n  \n  $.fn.clone = function()\n  {\n    this.removeAttr( anim8.factory.dom.attribute );\n\n    return cloner.apply( this, arguments );\n  };\n\n  /**\n   * Adds the m8, anim8, and animator functions to jQuery. An instance of anim8.Animator will be returned.\n   * \n   * @return {anim8.Animator}\n   */\n  $.fn.m8 = $.fn.anim8 = $.fn.animator = function()\n  {\n    return m8( this[0] );\n  };\n\n  /**\n   * Adds the m8s, anim8s, animators functions to jQuery. An instance of anim8.Animators will be returned.\n   * \n   * @return {anim8.Animators}\n   */\n  $.fn.m8s = $.fn.anim8s = $.fn.animators = function()\n  {\n    return m8s( this.get() );\n  };\n  \n  /**\n   * Plays the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  [boolean] all\n   * @param  [boolean] cache\n   * @return {this}\n   * @see anim8.Animator.play\n   */\n  $.fn.dataPlay = function( animationAttribute, all, cache )\n  {\n    var options = {};\n\n\t\treturn this.filter(function()\n\t  {\n\t\t\tvar animationText = $(this).data( animationAttribute );\n\t\t\n\t\t\tif ( animationText )\n\t\t\t{\n        var animation = anim8.animation( animationText, options, cache );\n\n        if ( animation !== false )\n        {\n          m8( this ).play( animation ); \n\n          return true;\n        }\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n  \t});\n  };\n  \n  /**\n   * Queues the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  [boolean] cache\n   * @return {this}\n   * @see anim8.Animator.queue\n   */\n  $.fn.dataQueue = function( animationAttribute, cache )\n  {\t\n    var options = {};\n\n  \treturn this.filter(function()\n    {\n  \t\tvar animationText = $(this).data( animationAttribute );\n\t\t\n  \t\tif ( animationText )\n  \t\t{\n        var animation = anim8.animation( animationText, options, cache );\n\n        if ( animation !== false )\n        {\n          m8( this ).queue( animation );\n\n          return true;\n        }\n  \t\t}\n\t\t\t\n\t\t\treturn false;\n    });\n  };\n\n  /**\n   * Transitions into the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  {number} transitionTime\n   * @param  {number} transitionDelta\n   * @param  {string|function} transitionEasing\n   * @param  {boolean} cache\n   * @return {this}\n   */\n  $.fn.dataTransition = function( animationAttribute, transitionTime, transitionDelta, transitionEasing, cache )\n  { \n    var options = {};\n\n    return this.filter(function()\n    {\n      var animationText = $(this).data( animationAttribute );\n    \n      if ( animationText )\n      {\n        var animation = anim8.animation( animationText, options, cache );\n \n        if ( animation !== false )\n        {\n          m8( this ).transition( transitionTime, transitionDelta, transitionEasing, animation );\n          \n          return true;\n        }\n      }\n      \n      return false;\n    });\n  };\n\n  /**\n   * Transitions into the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  {number} transitionTime\n   * @param  {number} transitionFromDelta\n   * @param  {number} transitionIntoDelta\n   * @param  {string|function} transitionEasing\n   * @param  {boolean} cache\n   * @return {this}\n   */\n  $.fn.dataTransitionInto = function( animationAttribute, transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, cache )\n  { \n    var options = {};\n\n    return this.filter(function()\n    {\n      var animationText = $(this).data( animationAttribute );\n    \n      if ( animationText )\n      {\n        var animation = anim8.animation( animationText, options, cache );\n \n        if ( animation !== false )\n        {\n          m8( this ).transitionInto( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation );\n          \n          return true;\n        }\n      }\n      \n      return false;\n    });\n  };\n\n  /**\n   * Wraps every character with a span and the class sequenced and returns a jquery\n   * element containing all wrapped characters.\n   * \n   * @return {jQuery}\n   */\n  $.fn.sequence = function()\n  {\n    this.each(function()\n    {\n      $(this).html( $(this).wrapCharacters('div', 'class=\"sequenced\"') );\n    });\n\n    return this.find('.sequenced');\n  };\n\n  /**\n   * Wraps every character in ever element in the jQuery object with a tag.\n   * If an element already only has one character it remains untouched.\n   * \n   * @param  {string} tagName\n   * @param  {string} attributes\n   * @return {string} attributes\n   */\n  $.fn.wrapCharacters = function(tagName, attributes)\n  {\n    var tagBegin = '<' + tagName + (typeof attributes === 'string' ? ' ' + attributes : '') + '>';\n    var tagEnd = '</' + tagName + '>';\n    var html = '';\n\n    $(this).contents().each(function()\n    {\n      // Is this a text node?\n      if (this.nodeType === 3)\n      {\n        // Break up node wrapping each character\n        var text = this.wholeText;\n\n        if (text.length > 1)\n        {\n          // Collapse whitespaces\n          var previousSpace = false;\n          for (var i = 0; i < text.length; i++)\n          {\n            var space = text[i] <= ' ';\n            if (!space || !previousSpace)\n            {\n              html += tagBegin + text[i] + tagEnd;\n            }\n            previousSpace = space;\n          }\n        }\n        else\n        {\n          html += text;\n        }\n      }\n      else\n      {\n        // Not a text node!\n        var outer = this.outerHTML;\n        // If there are children, we need to recursively break them down\n        if (this.firstChild)\n        {\n          // Grab the element tag and attributes manually.\n          var start = 0;\n          var quotes = false;\n          while (start < outer.length)\n          {\n            var c = outer[start++];\n            if (c === '\"' || c === \"'\")\n            {\n              quotes = !quotes;\n            }\n            else if (c === '\\\\')\n            {\n              start++;\n            }\n            else if (c === '>' && !quotes)\n            {\n              break;\n            }\n          }\n          html += outer.substring(0, start) + $(this).wrapCharacters(tagName) + '</' + this.tagName.toLowerCase() + '>';\n        }\n        // No child nodes, just append outer HTML.\n        else\n        {\n          html += outer;\n        }\n      }\n    });\n\n    return html;\n  };\n  \n})(jQuery, anim8, anim8s);\n"],"sourceRoot":"/source/"}