{"version":3,"sources":["anim8js-core.js","anim8js-fast-map.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-dynamic.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-attrimator.js","anim8js-attrimator-map.js","anim8js-event.js","anim8js-oncer.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-physics.js","anim8js-animation.js","anim8js-transition.js","anim8js-options.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-and.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tweenTo.js","anim8js-parser-tweenFrom.js","anim8js-parser-move.js","anim8js-parser-queue.js","anim8js-parser-springs.js","anim8js-parser-physics.js","anim8js-parser-travel.js","anim8js-factory.js","anim8js-object.js","anim8js-dom-core.js","anim8js-dom-property.js","anim8js-dom-attribute.js","anim8js-dom-animator.js","anim8js-jquery.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","defaults","duration","easing","teasing","delay","sleep","repeat","scale","offset","transitionTime","transitionOutro","transitionIntro","transitionEasing","transitionGranularity","transitionLookup","cache","cacheOptions","cacheTransitions","noOptions","noTransition","frameRate","pauseTime","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isBoolean","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","trim","String","prototype","replace","isEmpty","prop","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","number","value","constant","variable","resolve","clamp","v","max","delegate","functionName","returning","RETURN_THIS","array","this","$","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","target","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","deleteProperty","obj","off","$on","$once","triggerListeners","argument","clear","slice","trigger","FastMap","map","reset","putMap","put","values","keys","indices","key","get","remove","removeAt","index","lastValue","pop","lastKey","indexOf","has","hasOverlap","size","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","easingType","pair","e","t","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","yoyo","mirror","reverse","flip","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attrimator","attr","attribute","getAttribute","frame","calculator","clone","cloneDefault","relative","relativeAmount","mask","isComputed","relativeFunction","calc","mul","add","randomSelection","randomFunction","selected","ZERO","Path","compute","create","resolvedMin","resolvedMax","composite","partial","subattribute","spread","attributes","Calculator","createConstants","ONE","INFINITY","adds","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","lengthSq","isValid","isZero","isEqual","dot","distSq","setLength","isRelative","getRelativeAmount","z","CalculatorNumber","defaultValue","amountScale","ab","epsilon","Calculator2d","y","cx","cy","rx","ry","ix","iy","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Calculator3d","cz","rz","iz","dz","CalculatorQuaternion","angle","ra","ia","da","CalculatorRGB","rr","rg","rb","ir","ig","ib","dr","dg","db","CalculatorRGBA","path","spring","type","name","points","hasComputed","ps","replaceComputed","resolvePoint","isLinear","granularity","prev","temp","Tween","PathCubic","p0","p1","p2","p3","d1","d2","d3","i1","i3","PathQuadratic","PathDelta","deltas","ds","d0","pd","PathJump","PathCompiled","pointCount","PathKeyframe","easings","ea","defaultEasing","Attrimator","parser","startTime","elapsed","stopTime","paused","cycle","finished","startCycle","setTime","updated","finish","update","getElapsed","stopIn","milliseconds","nopeat","valueAt","totalTime","timeRemaining","isInfinite","pause","resume","isPaused","isFinished","getParser","queue","parseValue","AttrimatorMap","queueMap","onNewAttribute","maxRemaining","attrimators","existing","unqueueAt","applyCycle","nextCycle","currentDepth","nextDepth","iterate","depth","EventState","DELAYED","ANIMATING","SLEEPING","FINISHED","Event","scaleBase","hasInitialState","computeValue","baseValue","applyValue","ceil","state","oldState","newState","iteration","fromOptions","options","Oncer","applied","getValue","Spring","set","rest","position","velocity","gravity","finishOnRest","resolveRest","updateVelocity","dt","MAX_DT","starting","EPSILON","SpringLinear","damping","stiffness","temp0","temp1","SpringDistance","Physics","acceleration","terminal","resolveVelocity","resolveAcceleration","initalPosition","vel","acc","pos","usePosition","animation","hasOptions","Animation","newAttrimators","merge","attrimatorsFor","helper","ParserHelper","parserName","saved","cacheIt","animationsQueued","animationsMerged","base","j","animationString","animationSplit","parsedAnimation","parsedOptions","hasParsedOptions","parsedAttrimators","save","attrimatorMap","transition","originalInput","transitionArray","part","first","charAt","intro","substring","outro","lookup","parseProperty","propertyAdd","propertyScale","fn","attrimatorsAdded","active","cycleCurrent","cycleNext","cycleEnded","newCycle","applyCurrentCycle","endCurrentCycle","restore","applyInitialState","preupdate","aa","setDefault","wasFinished","minCycle","placeAttrimator","trimAttrimators","activate","deactivate","destroy","play","all","playAttrimators","finishNotPresent","queueAttrimators","transitionAttrimators","curr","pastLookahead","pastVelocity","pastNegativeVelocity","past","outTime","outPoint","outNext","inTime","inPoint","inNext","outVelocity","outPerMillis","inVelocity","inPerMillis","compiled","lastPoint","totalDistance","distances","requiredTime","timeDelta","transitionEvent","tweenTo","tweenManyTo","targets","tweenFrom","tweenManyFrom","startings","tween","starts","ends","tweenMany","move","moveMany","amounts","ref","request","follow","resulting","stop","unset","hasAttrimators","getSubject","wrapper","invoke","func","args","DeferAnimator","onCycleStart","onCycleEnd","fill","at","each","iterator","filter","filterer","alive","getSubjects","last","mid","e0","e1","animating","running","requestRun","run","sequence","Sequence","handleFinished","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","id","setTimeout","maxDelay","createAttrimators","template","delayOffset","remaining","Parser","ID","newOptions","oldOptions","mergeAttrimator","mergeEasing","mergeRepeat","mergeDelay","mergeSleep","mergeDuration","mergeOffset","mergeScale","mergeScaleBase","prepareSpecifics","specifics","parseEasing","parseFirst","parseRepeat","parseNumber","parseDelay","parseSleep","parseDuration","parseOffset","parseScale","parseScaleBase","option","parseEvent","parseOptionFunction","optionAdd","optionScale","baseRaw","mergeFirst","mergeNumber","specific","ParserAnd","and","ParserDeltas","deltaObject","valueMax","ParserFinal","ParserInitial","initial","oncer","ParserKeyframe","kframes","keyframe","sort","from","half","to","times","maxTime","order","pathEasings","ParserTweenTo","ParserTweenFrom","ParserMove","ParserQueue","ParseSpring","springs","ParsePhysics","physics","physic","stopAt","ParserTravel","travel","pointing","subtractVelocity","pointingFunction","targetValue","difference","traveling","traveler","highestPriorityFactory","factoryName","is","priority","Factory","FactoryObject","$animator","object","calculatorName","FactoryDom","cached","ids","elementAttribute","animatorId","AnimatorDom","setAttribute","dom","propertyName","defaultUnit","style","hyphenated","hyphenize","str","currentStyle","document","defaultView","getComputedStyle","getPropertyValue","prefix","createElement","prefixes","convert","toPixels","baseUnit","defaultRate","body","div","appendChild","width","pixels","offsetWidth","removeChild","getFontSize","notUnit","fontSize","getConverterScale","px","relativeTo","variables","parentWidth","parentNode","scrollWidth","parentHeight","scrollHeight","height","offsetHeight","parentFontSize","htmlFontSize","htmlElement","getElementsByTagName","rad","PI","given","converter","toUnit","fromUnit","converter1","converter2","combined","nm","anim","converted","units","styles","factoryDerivable","deriver","factoryColor","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","outlineWidth","textIndent","borderSpacing","lineHeight","letterSpacing","zIndex","backgroundColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","borderColor","outlineColor","minWidth","maxWidth","minHeight","maxHeight","offsetTop","offsetLeft","visibility","backface","css","transformOrigin","keywords","setOriginAttribute","setOrigin","origin","originZ","valueOr","transform","desiredUnit","getter1d","getter2d","getter3d","getter4d","setter1d","setter2d","setter3d","setter4d","combine","ax","ay","bx","by","ascl","bscl","place1d","place2d","valueX","valueY","relativeToX","relativeToY","place3d","valueZ","relativeToZ","place4d","valueRotate","relativeToRotate","regexes","translate","translate3d","translateX","translateY","translateZ","scale3d","scaleX","scaleY","scaleZ","rotate","skew","skewX","skewY","rotate3d","rotateX","rotateY","rotateZ","matrix","getters","setters","props","attrs","matrixParsed","tx","ty","atan2","transforms","join","opacity","shadow","parsePart","updating","parts","inset","shift","blur","shadowPosition","parsedX","parsedY","shadowInset","shadowColor","shadowBlur","shadowSpread","textShadow","textShadowPosition","textShadowColor","textShadowBlur","textShadowSpread","grayscale","sepia","saturate","hueRotate","invert","brightness","contrast","patterns","RegExp","filters","ccx","ccy","centerX","centerY","preset","rw","rh","orbit","DEGREE_TO_RADIAN","RADIAN_TO_DEGREE","ox","oy","orbitOffset","cunit","cox","coy","orbitX","orbitY","originUnit","originX","originY","outlineOffset","saturation","textShadowX","textShadowY","shadowX","shadowY","properties","propertiesPreset","attributeToProperty","styled","stylesUpdated","presets","getStyles","flash","source","other","subproperty","applyProperties","convertExisting","convertExistingMany","jQueryFactory","jQuery","cloner","removeAttr","dataPlay","animationAttribute","animationText","data","dataQueue","dataTransition","html","wrapCharacters","find","tagName","tagBegin","tagEnd","contents","text","previousSpace","space","outer","outerHTML","firstChild","quotes"],"mappings":"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","file":"anim8js-jquery.min.js","sourcesContent":["\n/**\n * @module anim8\n * @class Core\n */\n\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately. If the subject can't be\n * animated then false is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.factoryFor:method\"}}{{/crossLink}}\n * \n * @param {Any} subject\n * @return {Animator|false}\n * @method anim8\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {Array} subject\n * @return {Animators}\n * @method anim8s\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n/**\n * The default values for anim8js properties.\n *\n * @property {Object} anim8.defaults\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   *\n   * @property {Number} duration\n   * @for anim8.defaults\n   * @default 1000\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @property {String|Function|Array} easing\n   * @for anim8.defaults\n   * @default 'ease'\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @property {String|Function|Array} teasing\n   * @for anim8.defaults\n   * @default 'linear'\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @property {Number} delay\n   * @for anim8.defaults\n   * @default 0\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @property {Number} sleep\n   * @for anim8.defaults\n   * @default 0\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @property {Number} repeat\n   * @for anim8.defaults\n   * @default 1\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @property scale\n   * @for anim8.defaults\n   * @default 1.0\n   * @type {Number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default animation offset in milliseconds.\n   *\n   * @property {Number} offset\n   * @for anim8.defaults\n   * @default 0\n   */\n  offset: 0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @property {Number} transitionTime\n   * @for anim8.defaults\n   * @default 500\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition outroduction time in milliseconds.\n   * \n   * @property {Number} transitionOutro\n   * @for anim8.defaults\n   * @default 100\n   */\n  transitionOutro: 100,\n\n  /**\n   * The default transition introduction time in milliseconds.\n   * \n   * @property {Number} transitionIntro\n   * @for anim8.defaults\n   * @default 100\n   */\n  transitionIntro: 100,\n\n  /**\n   * The default transition easing when none is specified.\n   * \n   * @property {String|Function|Array} transitionEasing\n   * @for anim8.defaults\n   * @default 'linear'\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * The default transition granularity. This is used for smooth transitions to\n   * provide a smooth transition from the outro velocity to the intro velocity,\n   * the cubic or quadratic path between the two is a curve with unknown length\n   * so the length needs to be calculated using a maximum number of points to\n   * calculate along the path - summing the distances between the consecutive points.\n   * \n   * @property {Number} transitionGranularity\n   * @for anim8.defaults\n   * @default 0\n   */\n  transitionGranularity: 0,\n\n  /**\n   * TODO\n   * \n   * @property {Number} transitionLookup\n   * @for anim8.defaults\n   * @default 10\n   */\n  transitionLookup: 10,\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}}\n   * \n   * @property {Boolean} cache\n   * @for anim8.defaults\n   * @default false\n   */\n  cache: false,\n\n  /**\n   * Whether parsed options are cached whenever possible. Options that can be\n   * cached must be strings.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @property {Boolean} cacheOptions\n   * @for anim8.defaults\n   * @default false\n   */\n  cacheOptions: false,\n\n  /**\n   * Whether parsed transitions are cached whenever possible. Transitions that can be\n   * cached must be strings.\n   * \n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}}\n   * \n   * @property {Boolean} cacheTransitions\n   * @for anim8.defaults\n   * @default false\n   */\n  cacheTransitions: false,\n\n  /**\n   * The value to return when options could not be parsed from input.\n   * \n   * @property {Object} noOptions\n   * @for anim8.defaults\n   * @default {}\n   */\n  noOptions: {},\n\n  /**\n   * The value to return when a transition could not be parsed from input.\n   * \n   * @property {Object} noTransition\n   * @for anim8.defaults\n   * @default {}\n   */\n  noTransition: {},\n\n  /**\n   * The target number of milliseconds between frames. This only applies if the\n   * browser doesn't support any of the requestAnimationFrame variations.\n   * \n   * @property {Number} frameRate\n   * @for anim8.defaults\n   * @default 33\n   */\n  frameRate: 16,\n\n  /**\n   * The number of milliseconds to pause between looping to let the UI react\n   * to user events.\n   *\n   * @property {Number} pauseTime\n   * @for anim8.defaults\n   * @default 5\n   */\n  pauseTime: 5\n\n};\n\n/**\n * @class Core\n */\n\n/**\n * A function that does nothing.\n * \n * @property anim8.noop\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n *\n * **Examples:**\n *\n *     anim8.isDefined( 0 );     // true\n *     anim8.isDefined( false ); // true\n *     anim8.isDefined();        // false\n * \n * @method anim8.isDefined\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n *\n * @method anim8.isFunction\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n *\n * **Examples:**\n *\n *     anim8.isNumber( 0 );     // true\n *     anim8.isNumber( -45.6 ); // true\n *     anim8.isNumber( true );  // false\n *     anim8.isNumber( '1' );   // false\n *     anim8.isNumber();        // false\n *\n * @method anim8.isNumber\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a boolean variable.\n *\n * **Examples:**\n *\n *     anim8.isBoolean( 0 );     // false\n *     anim8.isBoolean( -45.6 ); // false\n *     anim8.isBoolean( true );  // true\n *     anim8.isBoolean( false ); // true\n *     anim8.isBoolean( '1' );   // false\n *     anim8.isBoolean();        // false\n *\n * @method anim8.isBoolean\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isBoolean = function(x) \n{\n  return typeof x === 'boolean';\n};\n\n/**\n * Returns true if the given variable is a string.\n *\n * **Examples:**\n *\n *     anim8.isString( '' );    // true\n *     anim8.isString( '1' );   // true\n *     anim8.isString( 4.5 );   // false\n *     anim8.isString();        // false\n *\n * @method anim8.isString\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n *\n * **Examples:**\n *\n *     anim8.isArray( [] );     // true\n *     anim8.isArray( [4, 5] ); // true\n *     anim8.isArray( 4.5 );    // false\n *     anim8.isArray();         // false\n *\n * @method anim8.isArray\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object. Arrays are considered \n * objects.\n *\n * **Examples:**\n *\n *     anim8.isObject( {} );     // true\n *     anim8.isObject( [] );     // true\n *     anim8.isObject( 4.5 );    // false\n *     anim8.isObject();         // false\n *     anim8.isObject( null );   // false\n *\n * @method anim8.isObject\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object' && x !== null;\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n *\n * @method anim8.isElement\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n *\n * @method anim8.now\n * @return {Number}\n */\nanim8.now = (function() \n{\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * Returns the trimmed version of the given string. A trimmed string has no\n * whitespace in the beginning or end of it.\n *\n * **Examples:**\n *\n *     anim8.trim( 'x' );     // 'x'\n *     anim8.trim( '   x' );  // 'x'\n *     anim8.trim( 'x   ' );  // 'x'\n *     anim8.trim( '  x ' );  // 'x'\n *     anim8.trim( '    ' );  // ''\n * \n * @method anim8.trim\n * @param  {String} x\n * @return {String}\n */\nanim8.trim = (function()\n{ \n  if (String.prototype.trim) {\n    return function(x) {\n      return x.trim();\n    };\n  }\n  return function(x) {\n    return x.replace(/^([\\s]*)|([\\s]*)$/g, '');\n  };\n})();\n\n/**\n * Determines whether the given variable is empty.\n *\n * **Examples:**\n *\n *     anim8.isEmpty( '' );        // true\n *     anim8.isEmpty( 0 );         // true\n *     anim8.isEmpty( [] );        // true\n *     anim8.isEmpty( {} );        // true\n *     anim8.isEmpty( null );      // true\n *     anim8.isEmpty( true );      // true\n *     anim8.isEmpty( false );     // true\n *     anim8.isEmpty( 'x' );       // false\n *     anim8.isEmpty( 0.3 );       // false\n *     anim8.isEmpty( [0] );       // false\n *     anim8.isEmpty( {x:3} );     // false\n *\n * @method anim8.isEmpty\n * @param {Any} x\n * @return {Boolean}\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or \n * object a new instance of that type is created where the values are copied as \n * well. All other types can't be copied (most likely because they're scalar) so\n * they are returned as-is.\n *\n * @method anim8.copy\n * @param {T} x\n * @return {T}\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding \n * overriding any existing properties.\n * \n * @method anim8.extend\n * @param  {Object} out\n * @return {Object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding \n * existing properties where necessary.\n * \n * @method anim8.override\n * @param  {Object} out\n * @return {Object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n *\n * **Examples:**\n *\n *     anim8.coalesce( 1, 2, 3 );           // 1\n *     anim8.coalesce( undefined, 2, 3 );   // 2\n *     anim8.coalesce();                    // undefined\n * \n * @method anim8.coalesce\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's \n * assumed to be milliseconds and is returned immediately. If a string is given\n * a unit is looked for to determine how to scale the number into milliseconds.\n * If the given time is invalid and returnOnInvalid is not given then zero is\n * returned.\n *\n * **Examples:**\n *\n *     anim8.time( 45 );       // 45\n *     anim8.time( 45.9 );     // 45\n *     anim8.time( -4.1 );     // -5\n *     anim8.time( '5ms' );    // 5\n *     anim8.time( '23' );     // 23\n *     anim8.time( '5c' );     // 500\n *     anim8.time( '5cs' );    // 500\n *     anim8.time( '5jiffy' ); // 833\n *     anim8.time( '5third' ); // 833\n *     anim8.time( '10s' );    // 10000\n *     anim8.time( '10sec' );  // 10000\n *     anim8.time( '1.5m' );   // 90000\n *     anim8.time( '1.5min' ); // 90000\n *     anim8.time( '0.4h' );   // 144000\n *     anim8.time( '0.4hr' );  // 144000\n *\n * @method anim8.time\n * @param {String|Number} time\n * @param {Any} [returnOnInvalid]\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/delay:property\"}}anim8.defaults.delay{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n *\n * @method anim8.delay\n * @param {String|Number} time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/sleep:property\"}}anim8.defaults.sleep{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n *\n * @method anim8.sleep\n * @param {String|Number} time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/duration:property\"}}anim8.defaults.duration{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n * \n * @method anim8.duration\n * @param {String|Number} time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses offset from a string or number. If the input is not a valid time then\n * {{#crossLink \"anim8.defaults/offset:property\"}}anim8.defaults.offset{{/crossLink}}\n * is returned.\n *\n * **See:** {{#crossLink \"Core/anim8.time:method\"}}anim8.time{{/crossLink}}\n * \n * @method anim8.offset\n * @param {String|Number} time\n */ \nanim8.offset = function(time)\n{\n  return anim8.time( time, anim8.defaults.offset );\n};\n\n/**\n * Parses repeats from a string or number. If a valid repeat is not given then\n * `returnOnInvalid` is returned, if that is not given then\n * {{#crossLink \"anim8.defaults/repeat:property\"}}anim8.defaults.repeat{{/crossLink}}\n * is returned.\n *\n * **Examples:**\n *\n *     anim8.repeat( 5 );            // 5\n *     anim8.repeat( 'inf' );        // Infinity\n *     anim8.repeat( 'infinity' );   // Infinity\n *     anim8.repeat( 'infinite' );   // Infinity\n *     anim8.repeat( 'once' );       // 1\n *     anim8.repeat( 'twice' );      // 2\n *     anim8.repeat( 'thrice' );     // 3\n *     anim8.repeat( 'dozen' );      // 12\n *     anim8.repeat( 'random' );     // 4\n *     anim8.repeat( 'invalid', 6 ); // 6\n *     anim8.repeat( false, 7 );     // 7\n *     anim8.repeat();               // anim8.defaults.repeat\n *\n * @method anim8.repeat\n * @param {String|Number} time\n * @param {E} [returnOnInvalid]\n * @return {Number|E}\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses a number from the given input and if the input isn't a valid number\n * then returnOnInvalid is returned.\n *\n * **Examples:**\n *\n *     anim8.number( 5 );       // 5\n *     anim8.number( '5' );     // 5\n *     anim8.number( '5e4' );   // 50000\n *     anim8.number( 'x' );     // undefined\n *     anim8.number( 'x', 23 ); // 23\n * \n * @method anim8.number\n * @param {String|Number} value\n * @param {E} returnOnInvalid\n * @return {Number|E}\n */\nanim8.number = function(value, returnOnInvalid)\n{\n  var parsed = parseFloat( value );\n\n  return isNaN( parsed ) ? returnOnInvalid : parsed;\n};\n\n/**\n * Parses scale from a string or number.\n *\n * **See:** {{#crossLink \"Core/anim8.number:method\"}}anim8.number{{/crossLink}}\n * \n * @method anim8.scale\n * @param {String|Number} scale\n * @return {Number}\n */\nanim8.scale = function(scale)\n{\n  return anim8.number( scale, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * **Examples:**\n *\n *     anim8.constant( 5 );   // function() { return 5; }\n *\n * @method anim8.constant\n * @param {T} variable\n * @return {Function}\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Resolves the given variable. If the variable is a function the result is \n * returned.\n *\n * **Examples:**\n *\n *     anim8.resolve( 5 );                     // 5\n *     anim8.resolve( true );                  // true\n *     anim8.resolve( function(){return 7;} ); // 7\n * \n * @method anim8.resolve\n * @param  {Function|E} variable\n * @return {E}\n */\nanim8.resolve = function(variable)\n{\n  return anim8.isFunction( variable ) ? variable() : variable;\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n *\n * **Examples:**\n *\n *     anim8.clamp( 5, 1, 6 );   // 5\n *     anim8.clamp( 0, 1, 6 );   // 1\n *     anim8.clamp( 7, 1, 6 );   // 6\n * \n * @method anim8.clamp\n * @param  {Number} v\n * @param  {Number} min\n * @param  {Number} max\n * @return {Number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on \n * the first element.\n *\n * @method anim8.delegate\n * @param {String} functionName\n * @param {String} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      var array = this.$ || this;\n\n      for (var i = 0; i < array.length; i++) \n      {\n        array[i][functionName].apply( array[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var array = this.$ || this;\n      var results = [];\n    \n      for (var i = 0; i < array.length; i++)\n      {\n        results.push( array[i][functionName].apply( array[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      var array = this.$ || this;\n\n      return array.length === 0 ? undefined : array[0][functionName].apply( array[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      var array = this.$ || this;\n\n      for (var i = 0; i < array.length; i++)\n      {\n        if ( array[i][functionName].apply( array[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n *\n * @property RETURN_THIS\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n *\n * @property RETURN_RESULTS\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n *\n * @property RETURN_FIRST\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n *\n * @property RETURN_TRUE\n * @for anim8.delegate\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any \n * number of events on the given object, optionally once. Listeners can be \n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( event, [argument] )\n *\n * Where... \n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is \n *   invoked. If no context is given the default value is the object which has \n *   the trigger function that was invoked.\n *\n * @method anim8.eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger` \n *    functions to.\n */\nanim8.eventize = function(target)\n{\n  /**\n   * **See:** {{#crossLink \"Core/anim8.eventize:method\"}}{{/crossLink}}\n   * \n   * @class anim8.eventize\n   */\n\n  // Adds a listener to $this\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @method on\n   * @for anim8.eventize\n   * @param {String} events\n   * @param {Function} callback\n   * @param {Object} context\n   * @chainable\n   */\n  target.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n\n    return this;\n  };\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @method once\n   * @for anim8.eventize\n   * @param {String} events\n   * @param {Function} callback\n   * @param {Object} context\n   * @chainable\n   */\n  target.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n\n    return this;\n  };\n  \n  // Removes a listener from an array of listeners.\n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n\n  // Deletes a property from the given object if it exists\n  var deleteProperty = function(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  };\n  \n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * @method off\n   * @for anim8.eventize\n   * @param {String} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  target.off = function(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !anim8.isString( events ) )\n    {\n      deleteProperty( this, '$on' );\n      deleteProperty( this, '$once' );\n    }\n    else\n    {\n      events = events.split(' ');\n\n      // Remove listeners for given events\n      if ( !anim8.isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$on, events[i] );\n          deleteProperty( this.$once, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$on, events[i], callback );\n          offListeners( this.$once, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  };\n  \n  // Triggers listeneers for the given event\n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var max = eventListeners.length;\n     \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n        if ( eventListeners.length !== max )\n        {\n          listeners[ event ] = eventListeners.slice( max );  \n        }\n        else\n        {\n          delete listeners[ event ];  \n        }\n      }\n    }\n  };\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @method trigger\n   * @for anim8.eventize\n   * @param {String} event\n   * @param {Any} argument\n   * @chainable\n   */\n  target.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n\n    return this;\n  };\n};\n\n","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @param {FastMap|Object} map\n * @class FastMap\n * @constructor\n */\nanim8.FastMap = function(map)\n{\n  this.reset();\n\n  if ( map instanceof anim8.FastMap )\n  {\n    this.putMap( map );\n  }\n  else if ( anim8.isObject( map ) )\n  {\n    for (var prop in map)\n    {\n      this.put( prop, map[ prop ] );\n    }\n  }\n};\n\nanim8.FastMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @method reset\n   * @chainable\n   */\n  reset: function()\n  {\n    /**\n     * An array of the values in this map.\n     * \n     * @property {Array} values\n     */\n    this.values = [];\n\n    /**\n     * An array of the keys in this map.\n     * \n     * @property {Array} keys\n     */\n    this.keys = [];\n\n    /**\n     * An object of key to index mappings.\n     * \n     * @property {Object} indices\n     */\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @method put\n   * @param {String} key\n   * @param {V} value\n   * @chainable\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   *\n   * @method putMap\n   * @param {FastMap} map\n   * @chainable\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @method get\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @method remove\n   * @param {String} key\n   * @chainable\n   */\n  remove: function(key)\n  {\n    if ( key in this.indices )\n    {\n      this.removeAt( this.indices[ key ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @method removeAt\n   * @param {Number} index\n   * @chainable\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   *\n   * @method indexOf\n   * @param {String} key\n   * @return {Number}\n   */\n  indexOf: function(key)\n  {\n    return anim8.coalesce( this.indices[ key ], -1 );\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @method has\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns whether the given input has overlap with keys in this map.\n   *\n   * @method hasOverlap\n   * @param {FastMap|Object} map\n   * @return {Boolean}\n   */\n  hasOverlap: function(map)\n  {\n    var keys = this.keys;\n    var indices = map.indices;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      if ( keys[i] in indices )\n      {\n        return true;\n      }\n    }\n   \n    return false;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @method size\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Clears all keys & values from the map.\n   *\n   * @method clear\n   * @chainable\n   */\n  clear: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  }\n\n};","\n/**\n * Instantiates a Defer instance. Defer instances keep track of method calls\n * to call at a later time - after an event occurs. The first argument needs\n * to be a function which returns an instance of anim8.Defer when it's invoked.\n * The second argument is an array of methods that can be deferred.\n * \n * @param {Function} factory\n * @param {Array} methods\n * @class Defer\n * @constructor\n */\nanim8.Defer = function(factory, methods)\n{\n  this.$factory = factory;\n  \n  for (var i = 0; i < methods.length; i++)\n  {  \n    this[ methods[i] ] = this.$push( methods[i] );\n  }\n};\n\nanim8.Defer.prototype = \n{  \n  /**\n   * Resets the defer instance.\n   *\n   * @method $reset\n   * @param {Object} eventable\n   * @param {Any} previous\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} callback\n   */\n  $reset: function(eventable, previous, eventType, event, callback)\n  {\n    this.$eventable = eventable;\n    this.$previous = previous;\n    this.$eventType = eventType;\n    this.$event = event;\n    this.$callback = callback;\n    this.$calls = [];\n    this.$next = [];\n    \n    if ( this.$isRoot() )\n    {\n      this.$register();\n    }\n  },\n\n  /**\n   * Determines whether this Defer instance is at the root.\n   *\n   * @method $isRoot\n   * @return {Boolean}\n   */\n  $isRoot: function()\n  {\n    return this.$eventable === this.$previous;\n  },\n\n  /**\n   * Registers this Defer instance with the eventable.\n   *\n   * @method $register\n   */\n  $register: function()\n  {\n    this.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n  },\n\n  /**\n   * Creates a defered function which passes the method and arguments for\n   * any method call into an array of calls on this Defer instance.\n   *\n   * @method $push\n   * @param {String} methodName\n   * @return {Function}\n   */\n  $push: function(methodName)\n  {\n    return function() \n    {\n      this.$calls.push( [methodName, arguments] );\n      \n      return this;\n    };\n  },\n\n  /**\n   * Executes all defered method calls and starts any child Defer instances.\n   *\n   * @method $run\n   */\n  $run: function() \n  {\n    // Invoke the callback if one was given.\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n    for (var i = 0; i < this.$calls.length; i++)\n    {\n      var call = this.$calls[ i ];\n      \n      this.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n    }\n    \n    for (var k = 0; k < this.$next.length; k++)\n    {\n      this.$next[ k ].$register();\n    }\n  },\n\n  /**\n   * Returns the object before the defer statement.\n   *\n   * @method undefer\n   * @return {Any}\n   */\n  undefer: function()\n  {\n    return this.$previous;\n  },\n\n  /**\n   * Defers any following method calls to after the given event is triggered. A\n   * callback can be specified which is a function invoked after the event is\n   * triggered.\n   *\n   * @method defer\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} callback\n   * @return {Defer}\n   */\n  defer: function(eventType, event, callback)\n  {\n    var next = new this.$factory( this.$eventable, this, eventType, event, callback );\n    \n    this.$next.push( next );\n    \n    return next;\n  }\n  \n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's \n * assumed to be an easing function and is returned immediately. If the input is\n * a string the easing with that name is returned. If the input is a string in \n * the format 'easing-easingType' then an easing is returned that is a \n * combination of the easing with the given name and the easingType with the \n * given name. If the given input is an array with 4 elements it's assumed to be\n * a bezier path and one is created and returned. If no input is given the \n * default easing is returned. If an easing cannot be determined then an error\n * is thrown.\n *\n * **Examples:**\n *\n *     anim8.easing();               // anim8.defaults.easing\n *     anim8.easing( 'linear' );     // anim8.easing.linear\n *     anim8.easing( 'reverse' );    // anim8.easingType.reverse( anim8.defaults.easing )\n *     anim8.easing( 'ease-yoyo' );  // anim8.easingType.yoyo( anim8.easing.ease )\n *     anim8.easing( [0,0,1,1] );    // anim8.easing.bezier( 0, 0, 1, 1 )\n *     anim8.easing( 5, false );     // false\n *     anim8.easing( 'invalid', 1 ); // 1\n *     anim8.easing( [0,0,1], 1 );   // 1\n *\n * @method anim8.easing\n * @for Core\n * @param {Function|String|Array} easing\n * @param {E} [returnOnInvalid]\n * @return {Function|E}\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n  {\n    return easing;\n  }\n  if ( anim8.isString( easing ) )\n  {\n    if ( easing in anim8.easing )\n    {\n      return anim8.easing[ easing ];\n    }\n    if ( easing in anim8.easingType )\n    {\n      return anim8.easingType[ easing ]( anim8.easing( anim8.defaults.easing ) );\n    }\n    \n    if ( easing.indexOf('-') !== -1 )\n    {\n      var pair = easing.split('-');\n      var e = pair[0];\n      var t = pair[1];\n      \n      if ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n      {        \n        return anim8.easingType[ t ]( anim8.easing[ e ] );\n      }\n    }\n  }\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n  {\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n  {\n    return anim8.easing( anim8.defaults.easing );\n  }\n  \n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n * \n * @method anim8.isEasingName\n * @for Core\n * @param {String} easing\n * @return {Boolean}\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n  var pair = easing.split('-');\n  var e = pair[0];\n  var t = pair[1];\n  \n  if ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n  {        \n    return true;\n  }\n  \n  return false;\n};\n\n/**\n * A collection of easing functions. An easing functions takes a single number\n * as input that's between 0 and 1 inclusively and returns a number that \n * progresses from 0 to 1 but in-between values may return a number that's less \n * than 0 or greater than 1.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n * \n * @class anim8.easing\n */\n\n/**\n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method linear\n * @for anim8.easing\n */\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quad\n * @for anim8.easing\n */\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quad\n * @for anim8.easing\n */ \nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method cubic\n * @for anim8.easing\n */\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method quartic\n * @for anim8.easing\n */\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method quintic\n * @for anim8.easing\n */\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method back\n * @for anim8.easing\n */\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  return x3 + x2 - x;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method sine\n * @for anim8.easing\n */\nanim8.easing.sine = function(x) \n{\n  return Math.sin( x * 1.57079632679 );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method overshot\n * @for anim8.easing\n */\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method elastic\n * @for anim8.easing\n */\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n  var wave = -Math.sin(x * 10.9955742876);\n  return scale * wave;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method revisit\n * @for anim8.easing\n */\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method lasso\n * @for anim8.easing\n */\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method slowbounce\n * @for anim8.easing\n */\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d)\n *\n * @method bounce\n * @for anim8.easing\n */\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method smallbounce\n * @for anim8.easing\n */\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n  return (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method tinybounce\n * @for anim8.easing\n */\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n  return (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method hesitant\n * @for anim8.easing\n */\nanim8.easing.hesitant = function(x) \n{\n  return (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method sqrt\n * @for anim8.easing\n */\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method sqrtf\n * @for anim8.easing\n */\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method log10\n * @for anim8.easing\n */\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--)\n *\n * @method slingshot\n * @for anim8.easing\n */\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n    return (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method circular\n * @for anim8.easing\n */\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n/** \n * [View Easing Function](http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-)\n *\n * @method gentle\n * @for anim8.easing\n */\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * Generates a bezier easing function given the two middle control points. The\n * first point is {0,0} and the last point is {1, 1}.\n *\n * @method bezier\n * @for anim8.easing\n * @param {Number} mX1\n * @param {Number} mY1\n * @param {Number} mX2\n * @param {Number} mY2\n * @return {Function}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n","\n/**\n * Returns an easing type based on the input. If the input is a function that \n * function is immediately returned. If the input is a string the easing type \n * with that name is returned. If no easing type could be determined an error is\n * thrown.\n *\n * @param {Function|String} easingType\n * @param [Boolean] optional\n * @return {Function|false}\n */\nanim8.easingType = function(easingType, optional)\n{\n  if ( anim8.isFunction( easingType ) )\n  {\n    return easingType;\n  }\n  if ( anim8.isString( easingType ) && easingType in anim8.easingType )\n  {\n    return anim8.easingType[ easingType ];\n  }\n  \n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw easingType + ' is not a valid easing type';\n};\n\n/**\n * A collection of easing type functions. An easing type functions takes an\n * easing function as an argument and modifies it's input and output values.\n *\n * **See:** {{#crossLink \"Core/anim8.easing\"}}{{/crossLink}}\n * \n * @class anim8.easingType\n */\n\n/**\n * Plays the animation forward normally.\n *\n * @method in\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType['in'] = function(easing) \n{\n  return function(x) \n  {\n    return easing( x );\n  };\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum.\n * \n * @method out\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.out = function(easing) \n{\n  return function(x) \n  {\n    return 1.0 - easing( 1.0 - x );\n  };\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum halfway.\n * \n * @method inout\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.inout = function(easing) \n{\n  return function(x) \n  {\n    if ( x < 0.5 ) \n    {\n      return easing( 2.0 * x ) * 0.5;\n    } \n    else \n    {\n      return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n    }\n  };\n};\n\n/**\n * Plays the aninmation forwards with the given easing, and backwards with the same easing momentum.\n * \n * @method yoyo\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.yoyo = function(easing) \n{\n  return function(x) \n  {\n    if ( x < 0.5 ) \n    {\n      return easing( 2.0 * x );\n    } \n    else \n    {\n      return easing( 2.0 - 2.0 * x );\n    }\n  };\n};\n\n/**\n * Plays the animation forwards with the given easing, and backwards reflecting the easing's momentum.\n * \n * @method mirror\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.mirror = function(easing)\n{\n  return function(x)\n  {\n    if ( x < 0.5 )\n    {\n      return easing( 2.0 * x );\n    }\n    else\n    {\n      return 1.0 - easing( 2.0 - 2.0 * x );\n    }\n  };\n};\n\n/**\n * Plays the animation backwards with using the same easing momentum.\n * \n * @method reverse\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.reverse = function(easing)\n{\n  return function(x)\n  {\n    return easing( 1.0 - x );\n  };\n};\n\n/**\n * Plays the animation backwards by flipping the easing's momentum.\n * \n * @method flip\n * @for anim8.easingType\n * @param {Function} easing\n * @return {Function}\n */\nanim8.easingType.flip = function(easing)\n{\n  return function(x)\n  {\n    return 1.0 - easing( x );\n  };\n};\n","\n/**\n * Easings equivalent to the CSS animations. These are approximations since the\n * exact functions are not performant enough.\n */\n\nanim8.easing.cssEase      = anim8.easing.ease;\n\nanim8.easing.cssEaseIn    = anim8.easing.quad;\n\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\n\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\n\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n *\n * @method anim8.color\n * @for Core\n * @param {Number} [r=255]\n * @param {Number} [g=255]\n * @param {Number} [b=255]\n * @param {Number} [a=1]\n * @return {Object}\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @method anim8.color.parse\n * @for Core\n * @param {String} input\n * @return {Object|False}\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n *\n * @method anim8.color.format\n * @for Core\n * @param {Object} color\n * @return {String}\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * A collection of computed functions. Computed functions are functions that\n * are invoked once at the start of an animation given the \n * {{#crossLink \"Attrimator\"}}{{/crossLink}} and \n * {{#crossLink \"Animator\"}}{{/crossLink}} and the result replaces the function.\n *\n * **See:** {{#crossLink \"anim8.computed/current:method\"}}{{/crossLink}},\n *          {{#crossLink \"anim8.computed/relative:method\"}}{{/crossLink}},\n *          {{#crossLink \"anim8.computed/random:method\"}}{{/crossLink}}\n * \n * @class anim8.computed\n */\nanim8.computed = {};\n\n/**\n * Calculates and returns the current value for an \n * {{#crossLink \"Animator\"}}{{/crossLink}}. If the animator doesn't have a \n * current value the default value for the attribute is returned.\n *\n * @method current\n * @param {Attrimator} attrimator\n * @param {Animator} animator\n * @return {T}\n */\nanim8.computed.current = function(attrimator, animator)\n{\n  var attr = attrimator.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currently in the animator.\n * A mask can be used for mixed relative & absolute values in a single value\n * where 1 makes it relative and 0 makes it absolute.\n *\n * **Examples:**\n *\n *     anim8.computed.relative( 40 ); // returns function which adds 40 to current value\n *     anim8.computed.relative( 40, 0.5 ); // returns function which adds 40 to half of the current value\n *     anim8.computed.relative( {x: 20, y: 10}, {x: 1, y: 0} ); // returns function which adds 20 to the x of the current value and sets the y of the current value to 10\n * \n * @method relative\n * @param {T} relativeAmount\n * @param {T} mask\n * @return {Function}\n */\nanim8.computed.relative = function(relativeAmount, mask)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( anim8.isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(attrimator, animator)\n  { \n    var attr = attrimator.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = attribute.cloneDefault();\n    }\n\n    if ( mask )\n    {\n      current = calc.mul( current, mask );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  relativeFunction.relativeAmount = relativeAmount;\n  relativeFunction.mask = mask;\n\n  return relativeFunction;\n};\n\n/**\n * Returns a random value based on the given random selection.\n * \n * 1. If an array is given an item is randomly chosen from that array.\n * 2. If an instance of {{#crossLink \"Path\"}}{{/crossLink}} is given a point is randomly computed and returned.\n * 3. If an object with min & max values is given a random value between them is returned.\n *\n * **Examples:**\n *\n *     anim8.computed.random( [1, 2, 3] ); // returns function which returns a 1, 2, or 3\n *     anim8.computed.random( {min: 1, max: 5} ); // returns function which returns a value between 1 and 5\n *     anim8.computed.random( {min: {x: 0, y: 0}, max: {x: 100, y: 200}} ); // returns function which returns a point in the rectangle {0,0,100,200}\n *     anim8.computed.random( path ); // returns function which returns a value anywhere along the given path\n * \n * @method random\n * @param  {Array|Object|Path} randomSelection\n * @return {Function}\n */\nanim8.computed.random = function(randomSelection)\n{\n  var randomFunction = null;\n\n  if ( anim8.isArray( randomSelection ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var selected = randomSelection[ Math.floor( Math.random() * randomSelection.length ) ];\n\n      return calc.parse( selected, calc.ZERO );\n    };\n  }\n  else if ( randomSelection instanceof anim8.Path )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n\n      return randomSelection.compute( calc.create(), Math.random() );\n    };\n  }\n  else if ( anim8.isObject( randomSelection ) && anim8.isDefined( randomSelection.min ) && anim8.isDefined( randomSelection.max ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var resolvedMin = anim8.resolve( randomSelection.min );\n      var resolvedMax = anim8.resolve( randomSelection.max );\n      var min = calc.parse( resolvedMin, calc.ZERO );\n      var max = calc.parse( resolvedMax, calc.ZERO );\n\n      return calc.random( calc.create(), min, max );\n    };\n  }\n  else\n  {\n    throw 'Invalid random input: ' + randomSelection;\n  }\n\n  // Marks the function as computed which is a signal to paths & events.\n  randomFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  randomFunction.randomSelection = randomSelection;\n\n  return randomFunction;\n};\n\n/**\n * Determines whether the given value is a computed value. A computed value is\n * function with a variable 'computed' set to a true value.\n * \n * @param  {any} x\n * @return {Boolean}\n */\nanim8.isComputed = function(x)\n{\n  return anim8.isFunction( x ) && x.computed;\n};\n","\n/**\n * Creates a composite dyanmic attribute which is an object of existing \n * attributes which takes advantage of an object based calculator.\n *\n * **Example:**\n * \n *     anim8.object.attribute.topLeft = { \n *       dynamic: anim8.composite({x:'left', y:'top'}), \n *       calculator:'2d', \n *       defaultValue: {x: 0, y: 0}, \n *       defaultUnit: 'px' \n *     };\n *\n * Which results in the values in 'topLeft' being placed in left and top.\n * \n * @method anim8.composite\n * @param  {Object} map\n * @for Core\n * @return {Function}\n */\nanim8.composite = function( map )\n{\n  return function( value, frame )\n  {\n    for ( var prop in map )\n    {\n      frame[ map[ prop ] ] = value[ prop ];\n    }\n  };\n};\n\n/**\n * Creates a partial dynamic attribute which is a value that's placed in a \n * sub-property of an attribute.\n *\n * **Example:**\n * \n *     anim8.object.attribute.x = {\n *       dynamic: anim8.partial( 'position', 'x' ),\n *       calculator: 'number',\n *       defaultValue: 0,\n *       defaultUnit: 'px'\n *     };\n *\n * Which results in the values in 'x' being placed in position.x\n *\n * @method anim8.partial\n * @param {String} attribute\n * @param {String} subattribute\n * @for Core\n * @return {Function}\n */\nanim8.partial = function( attribute, subattribute )\n{\n  return function( value, frame )\n  {\n    if ( !anim8.isObject( frame[ attribute ] ) )\n    {\n      frame[ attribute ] = {};\n    }\n\n    frame[ attribute ][ subattribute ] = value;\n  }\n};\n\n/**\n * Creates a dynamic attribute which spreads its value over several attributes.\n *\n * **Example:**\n * \n *     anim8.dom.attribute.padding = {\n *       dynamic: anim8.spread( ['paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom' ] ),\n *       calculator: 'number',\n *       defaultValue: 0,\n *       defaultUnit: 'px'\n *     };\n *\n * Which results in the value in 'padding' being placed in paddingLeft, paddingTop,\n * paddingRight, and paddingBottom.\n * \n * @param  {Array} attributes\n * @return {Function}\n */\nanim8.spread = function( attributes )\n{\n  return function( value, frame )\n  {\n    for ( var i = 0; i < attributes.length; i++ )\n    {\n      frame[ attributes[ i ] ] = value;\n    }\n  };\n};","/**\n * A collection of calculators. A calculator is responsible for performing\n * mathematical operations for a specific animatable data type.\n * \n * @class anim8.calculator\n */\n\n/**\n * Returns a calculator based on the input. If the input is an instance of\n * {{#crossLink \"Calculator\"}}{{/crossLink}} it is immediately returned. If the \n * input is a string the calculator with that name is returned. If no calculator \n * could be determined the default calculator is returned.\n *\n * @method anim8.calculator\n * @for Core\n * @param {Calculator|String} calc\n * @return {Calculator}\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n  if ( anim8.isString( calc ) && calc in anim8.calculator )\n  {\n    return anim8.calculator[ calc ];\n  }\n  \n  return anim8.calculator['default'];\n};\n\n/**\n * Instantiates a new Calculator instance.\n *\n * @class Calculator\n * @constructor\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n\n  /**\n   * Creates the constants for this calculator.\n   *\n   * @method createConstants\n   */\n  createConstants: function()\n  {\n    this.ZERO = this.create();\n    this.ONE = this.parse( 1.0, this.ZERO );\n    this.INFINITY = this.parse( Number.POSITIVE_INFINITY, this.ZERO );\n  },\n\n  /**\n   * Parses the given input for a value this calculator understands.\n   *\n   * @method parse\n   * @param  {T} x\n   * @param  {T} defaultValue\n   * @return {T|Function|False}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * Copies a value and places it in out and returns out.\n   *\n   * @method copy\n   * @param {T} out\n   * @param {T} copy\n   * @return {T}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * Clones the value and returns the clone.\n   *\n   * @method clone\n   * @param {T} clone\n   * @return {T}\n   */\n  clone: function(clone) \n  {\n    return this.copy( this.create(), clone );\n  },\n\n  /**\n   * Creates an empty value equivalent to zero.\n   * \n   * @method create\n   * @return {T}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * Scales out by the given scalar value and returns out.\n   * \n   * @method scale\n   * @param {T} out\n   * @param {Number} scale\n   * @return {T}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * Adds an amount to out and returns out.\n   * \n   * @method add\n   * @param {T} out\n   * @param {T} amount\n   * @return {T}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * Adds an amount scaled by a scalar value to out and returns out.\n   * \n   * @method adds\n   * @param {T} out\n   * @param {T} amount\n   * @param {Number} amountScale\n   * @return {T}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * Subtracts an amount from out and returns out.\n   * \n   * @method sub\n   * @param {T} out\n   * @param {T} amount\n   * @return {T}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * Multiplies out by some amount and returns out.\n   * \n   * @method mul\n   * @param {T} out\n   * @param {T} scale\n   * @return {T}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * Interpolates out between start & end given a delta value and returns out. \n   * A delta value typically lies between 0 and 1 inclusively.\n   * \n   * @method interpolate\n   * @param {T} out\n   * @param {T} start\n   * @param {T} end\n   * @param {Number} delta\n   * @return {T}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * Returns a random value between the given min and max.\n   * \n   * @method random\n   * @param {T} out\n   * @param {T} min\n   * @param {T} max\n   * @return {T}\n   */\n  random: function(out, min, max)\n  {\n    return this.interpolate( out, min, max, Math.random() );\n  },\n\n  /**\n   * Calculates the distance between the two values.\n   * \n   * @method distance\n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * Calculates the squared distance between the two values.\n   * \n   * @method distanceSq\n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * Returns the distance the given value is from zero.\n   * \n   * @method length\n   * @param {T} a\n   * @return {Number}\n   */\n  length: function(a)\n  {\n    return this.distance( a, this.ZERO );\n  },\n\n  /**\n   * Returns the squared distance the given value is from zero.\n   * \n   * @method lengthSq\n   * @param {T} a\n   * @return {Number}\n   */\n  lengthSq: function(a)\n  {\n    return this.distanceSq( a, this.ZERO );\n  },\n\n  /**\n   * Determines whether the given value is valid for this calculator.\n   * \n   * @method isValid\n   * @param {any} a\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * Returns whether the given value is not a number or has a component which is\n   * not a number.\n   * \n   * @method isNaN\n   * @param {T} a\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * Determines whether the given value is equivalent to zero given an \n   * acceptable distance from zero (epsilon).\n   * \n   * @method isZero\n   * @param {T} a\n   * @param {Number} epsilon\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * Determines whether the given values are equivalent up to an acceptable\n   * distance apart.\n   * \n   * @method isEqual\n   * @param {T} a\n   * @param {T} b\n   * @param {Number} epsilon\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * Sets out to the minimum value between the two values and returns out.\n   * \n   * @method min\n   * @param {T} out\n   * @param {T} a\n   * @param {T} b\n   * @return {T}\n   */\n  min: function(out, a, b)\n  {\n    throw 'Calculator.min not implemented';\n  },\n\n  /**\n   * Sets out to the maximum value between two values and returns out.\n   * \n   * @method max\n   * @param {T} out\n   * @param {T} a\n   * @param {T} b\n   * @return {T}\n   */\n  max: function(out, a, b)\n  {\n    throw 'Calculator.max not implemented';\n  },\n\n  /**\n   * Performs the dot product between two values.\n   * \n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  dot: function(a, b)\n  {\n    throw 'Calculator.dot not implemented';\n  },\n\n  /**\n   * Clamps out between the given minimum and maximum values and returns out.\n   * \n   * @method clamp\n   * @param {T} out\n   * @param {T} min\n   * @param {T} max\n   * @return {T}\n   */\n  clamp: function(out, min, max)\n  {\n    var distSq = this.distanceSq( out, this.ZERO );\n\n    if ( distSq < min * min )\n    {\n      return this.scale( out, min / Math.sqrt( distSq ) );\n    }\n    else if ( distSq > max * max )\n    {\n      return this.scale( out, max / Math.sqrt( distSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * Sets the length of the given value and returns the new value.\n   * \n   * @param {T} out\n   * @param {Number} length\n   * @return {T}\n   */\n  setLength: function(out, length)\n  {\n    var lengthSq = this.lengthSq( out );\n\n    if ( lengthSq !== 0 )\n    {\n      return this.scale( out, length / Math.sqrt( lengthSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * Determines whether the given value appears to be a relative value. Relative\n   * values are stored as strings starting with a plus or minus for positive or\n   * negative respectively.\n   * \n   * @method isRelative\n   * @param {Any} x\n   * @return {Boolean}\n   * @protected\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * Returns the relative amount of the given relative value. If the value is \n   * not a valid relative value false is returned.\n   * \n   * @method getRelativeAmount\n   * @param {String} x\n   * @return {Number}\n   * @protected\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n *\n * @class CalculatorNumber\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorNumber = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorNumber.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    return (end - start) * delta + start;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  distance: function(a, b)\n  {\n    return Math.abs( a - b );\n  },\n  length: function(a)\n  {\n    return Math.abs( a );\n  },\n  lengthSq: function(a)\n  {\n    return a * a;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    return Math.min( a, b );\n  },\n  max: function(out, a, b)\n  {\n    return Math.max( a, b );\n  },\n  dot: function(a, b)\n  {\n    return a * b;\n  }\n});\n\n/**\n * A calculator for numbers.\n *\n * @property {CalculatorNumber} number\n * @for anim8.calculator\n */\nanim8.calculator['number'] = new anim8.CalculatorNumber();\n\n/**\n * The default calculator.\n *\n * @property {CalculatorNumber} default\n * @for anim8.calculator\n */\nanim8.calculator['default'] = anim8.calculator['number'];","\n/*\n * A calculator for objects with an x and y component (number)\n *\n * @class Calculator2d\n * @constructor\n * @extends Calculator\n */\nanim8.Calculator2d = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Calculator2d.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: x,\n        y: x\n      };\n    }\n    // When an array is given, assume [x, y]\n    if ( anim8.isArray( x ) )\n    {\n      x = { x: x[0], y: x[1] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n\n        if ( ix || iy )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n  {\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    return out;\n  }\n});\n\n/**\n * A calculator for 2d points; objects with x & y Number components.\n *\n * @property {Calculator2d} 2d\n * @for anim8.calculator\n */\nanim8.calculator['2d'] = new anim8.Calculator2d();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n *\n * @class Calculator3d\n * @constructor\n * @extends Calculator\n */\nanim8.Calculator3d = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Calculator3d.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: x,\n        y: x,\n        z: x\n      };\n    }\n    // When an array is given, assume [x, y, z]\n    if ( anim8.isArray( x ) )\n    {\n      x = { x: x[0], y: x[1], z: x[2] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n\n        if ( ix || iy || iz )\n        { \n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    out.z = copy.z;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n  { \n    out.x = 0.0;\n    out.y = 0.0;\n    out.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    out.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    out.z = (end.z - start.z) * delta + start.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n    var dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon && \n           Math.abs(a.z - b.z) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y + a.z * b.z;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    return out;\n  }\n});\n\n/**\n * A calculator for 3d points; objects with x, y, & z Number components.\n *\n * @property {Calculator3d} 3d\n * @for anim8.calculator\n */\nanim8.calculator['3d'] = new anim8.Calculator3d();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n *\n * @class CalculatorQuaternion\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorQuaternion = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorQuaternion.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: 0,\n        y: 0,\n        z: 1,\n        angle: x\n      };\n    }\n    // When an array is given, assume [x, y, z, angle]\n    if ( anim8.isArray( x ) )\n    {\n      x = { x: x[0], y: x[1], z: x[2], angle: x[3] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n        var ia = this.isRelative( ca );\n\n        if ( ix || iy || iz || ia )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0,\n            angle: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n    }\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx }, { x:0, y:0, z:0, angle:1 } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    out.z = copy.z;\n    out.angle = copy.angle;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n  {\n    out.x = 0.0;\n    out.y = 0.0;\n    out.z = 0.0;\n    out.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    out.z += amount.z * amountScale;\n    out.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    out.angle *= scale.angle;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    out.z = (end.z - start.z) * delta + start.z;\n    out.angle = (end.angle - start.angle) * delta + start.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n    var dz = a.z - b.z; \n    var da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon && \n           Math.abs(a.z) < epsilon && \n           Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon && \n           Math.abs(a.z - b.z) < epsilon && \n           Math.abs(a.angle - b.angle) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    out.angle = Math.min(a.angle, b.angle);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    out.angle = Math.max(a.angle, b.angle);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.x * b.x + a.y * b.y + a.z * b.z + a.angle * b.angle;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    out.angle = (max.angle - min.angle) * Math.random() + min.angle;\n    return out;\n  }\n});\n\n/**\n * A calculator for quaternions; objects with x, y, z, & angle Number components.\n *\n * @property {CalculatorQuaternion} quaternion\n * @for anim8.calculator\n */\nanim8.calculator['quaternion'] = new anim8.CalculatorQuaternion();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n *\n * @class CalculatorRGB\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorRGB = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorRGB.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        r: x,\n        g: x,\n        b: x\n      };\n    }\n    // When an array is given, assume [r, g, b]\n    if ( anim8.isArray( x ) )\n    {\n      x = { r: x[0], g: x[1], b: x[2] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n\n        if ( ir || ig || ib )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n  },\n  copy: function(out, copy) \n  {\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n  {\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n  {\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.r = (end.r - start.r) * delta + start.r;\n    out.g = (end.g - start.g) * delta + start.g;\n    out.b = (end.b - start.b) * delta + start.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n  {\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.r * b.r + a.g * b.g + a.b * b.b;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    return out;\n  }\n});\n\n/**\n * A calculator for opaque colors; objects with r, g, & b Number components.\n *\n * @property {CalculatorRGB} rgb\n * @for anim8.calculator\n */\nanim8.calculator['rgb'] = new anim8.CalculatorRGB();\n","\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n *\n * @class CalculatorRGBA\n * @constructor\n * @extends Calculator\n */\nanim8.CalculatorRGBA = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.CalculatorRGBA.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        r: x,\n        g: x,\n        b: x,\n        a: 1.0\n      };\n    }\n    // When an array is given, assume [r, g, b, a]\n    if ( anim8.isArray( x ) )\n    {\n      x = { r: x[0], g: x[1], b: x[2], a: x[3] };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n        var ia = this.isRelative( ca );\n\n        if ( ir || ig || ib || ia )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0,\n            a: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n  },\n  copy: function(out, copy) \n  {\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n  {\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n  {\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.r = (end.r - start.r) * delta + start.r;\n    out.g = (end.g - start.g) * delta + start.g;\n    out.b = (end.b - start.b) * delta + start.b;\n    out.a = (end.a - start.a) * delta + start.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n  {\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    out.a = Math.min(a.a, b.a);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    out.a = Math.max(a.a, b.a);\n    return out;\n  },\n  dot: function(a, b)\n  {\n    return a.r * b.r + a.g * b.g + a.b * b.b + a.a * b.a;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    out.a = (max.a - min.a) * Math.random() + min.a;\n    return out;\n  }\n});\n\n/**\n * A calculator for colors; objects with r, g, b, & a Number components.\n *\n * @property {CalculatorRGBA} rgba\n * @for anim8.calculator\n */\nanim8.calculator['rgba'] = new anim8.CalculatorRGBA();\n","\n/**\n * Parses a path given the input and returns an instance of anim8.Path or throws\n * an error if the path could not be parsed. If the input is an object and has\n * a type property with a value that maps to a path type the path's parsing\n * function is invoked with the object.\n *\n * @method anim8.path\n * @for Core\n * @param  {anim8.Path|String|Object} path\n * @return {anim8.Path}\n * @throws {String} If the input is not a valid path.\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  throw path + ' is not a valid path';\n};\n\n/**\n * Path class computes a value given a delta value [0, 1].\n *\n * @class Path\n * @constructor\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * Resets the path with the given name, calculator, and points.\n   * \n   * @method reset\n   * @param {String|false} name\n   * @param {anim8.Calculator} calculator\n   * @param {Array} points\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * Computes a value at the given delta setting and returning out.\n   * \n   * @method compute\n   * @param {T} out\n   * @param {Number} delta\n   * @return {T}\n   */\n  compute: function(out, delta) \n  {\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * Determines if this path has at least one computed value.\n   *\n   * **See:** {{#crossLink \"anim8.computed\"}}{{/crossLink}}\n   * \n   * @method reset\n   * @return {Boolean}\n   */\n  hasComputed: function() \n  {\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Replaces any computed values in this path with the result from invoking\n   * the function and returns a clone of this path.\n   * \n   * @method replaceComputed\n   * @return {anim8.Path}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * Resolves and returns the point at the given index.\n   * \n   * @method resolvePoint\n   * @param {Number} i\n   * @return {T}\n   */\n  resolvePoint: function(i)\n  {\n    return anim8.resolve( this.points[ i ] );\n  },\n\n  /**\n   * Returns whether the path is linear. Linear paths go directly from point to\n   * point where curved paths do not. Linear paths can have their length \n   * calculated fairly easily however curves you must compute length with a \n   * given granularity.\n   * \n   * @method isLinear\n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return true;\n  },\n\n  /**\n   * Computes the length of the Path with a given granularity. Granularity is \n   * used for non-linear paths - it's the number of segments are calculated on \n   * the path where the length of the segments are summed and returned as the \n   * length.\n   * \n   * @method length\n   * @param {Number} granularity\n   * @return {Number}\n   */\n  length: function(granularity)\n  {\n    var distance = 0;\n    var calc = this.calculator;\n\n    if ( this.isLinear() )\n    {\n      var prev = this.resolvePoint( 0 );\n\n      for (var i = 1; i < this.points.length; i++)\n      {\n        var next = this.resolvePoint( i );\n\n        distance += calc.distance( prev, next );\n\n        prev = next;\n      }\n    }\n    else\n    {\n      var deltadelta = 1.0 / granularity;\n      var delta = delta;\n      var prev = calc.clone( this.resolvePoint( 0 ) );\n      var temp = calc.create();\n\n      for (var i = 1; i <= granularity; i++)\n      {\n        var next = this.compute( temp, delta );\n\n        distance += calc.distance( prev, next );\n\n        temp = prev;\n        prev = next;\n      }\n    }\n\n    return distance;\n  }\n\n};\n","\n/**\n * Instantiates a new Tween.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} start\n * @param {T} end\n * @class Tween\n * @constructor\n * @extends Path\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n});\n\n\n/**\n * Parses an object for a tween path.\n * \n * @param {Object} path\n * @return {Tween}\n */\nanim8.path['tween'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, calc.ZERO ),\n    calc.parse( path.end, calc.ZERO )\n  );\n};\n","\n/**\n * Instantiates a new PathCubic.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} p0\n * @param {T} p1\n * @param {T} p2\n * @param {T} p3\n * @class PathCubic\n * @constructor\n * @extends Path\n */\nanim8.PathCubic = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.PathCubic.prototype = new anim8.Path(),\n{\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  copy: function() \n  {\n    return new anim8.PathCubic( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  },\n  isLinear: function()\n  {\n    return false;\n  }\n});\n\n/**\n * Parses an object for a cubic path.\n * \n * @param {Object} path\n * @return {PathCubic}\n */\nanim8.path['cubic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PathCubic(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * Instantiates a new PathQuadratic.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {T} p0\n * @param {T} p1\n * @param {T} p2\n * @class PathQuadratic\n * @constructor\n * @extends Path\n */\nanim8.PathQuadratic = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.PathQuadratic.prototype = new anim8.Path(),\n{\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n  copy: function() \n  {\n    return new anim8.PathQuadratic( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  },\n  isLinear: function()\n  {\n    return false;\n  }\n});\n\n\n/**\n * Parses an object for a quadratic path.\n * \n * @param {Object} path\n * @return {PathQuadratic}\n */\nanim8.path['quadratic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PathQuadratic(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * Instantiates a new PathDelta.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @param {Array} deltas\n * @class PathDelta\n * @constructor\n * @extends Path\n */\nanim8.PathDelta = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.PathDelta.prototype = new anim8.Path(),\n{\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  copy: function() \n  {\n    return new anim8.PathDelta( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n});\n\n/**\n * Parses an object for a delta path.\n * \n * @param {Object} path\n * @return {PathDelta}\n */\nanim8.path['delta'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.PathDelta(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * Instantiates a new PathJump.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @class PathJump\n * @constructor\n * @extends Path\n */\nanim8.PathJump = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.PathJump.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  copy: function() \n  {\n    return new anim8.PathJump( this.name, this.calculator, anim8.copy(this.points) );\n  }\n});\n\n/**\n * Parses an object for a jump path.\n * \n * @param {Object} path\n * @return {PathJump}\n */\nanim8.path['jump'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.PathJump(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * Instantiates a new PathCompiled.\n * \n * @param {String|false} name\n * @param {Path} path\n * @param {Number} pointCount\n * @class PathCompiled\n * @constructor\n * @extends Path\n */\nanim8.PathCompiled = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.PathCompiled.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  copy: function() \n  {\n    return new anim8.PathCompiled( this.name, this, this.points.length );\n  }\n});\n\n/**\n * Parses an object for a compiled path.\n * \n * @param {Object} path\n * @return {PathCompiled}\n */\nanim8.path['compiled'] = function(path)\n{\n  return new anim8.PathCompiled(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * Instantiates a new PathKeyframe.\n * \n * @param {String|false} name\n * @param {Calculator} calculator\n * @param {Array} points\n * @param {Array} deltas\n * @param {Array} easings\n * @class PathKeyframe\n * @constructor\n * @extends Path\n */\nanim8.PathKeyframe = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.PathKeyframe.prototype = new anim8.Path(),\n{\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  copy: function() \n  {\n    return new anim8.PathKeyframe( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n});\n\n/**\n * Parses an object for a keyframe path.\n * \n * @param {Object} path\n * @return {PathKeyframe}\n */\nanim8.path['keyframe'] = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.PathKeyframe(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * Animates a single attribute over any period of time.\n *\n * @class Attrimator\n * @constructor\n */\nanim8.Attrimator = function()\n{\n\n};\n\nanim8.Attrimator.prototype =\n{\n\n  /**\n   * Resets this attrimator for the given attribute created by the given parser.\n   *\n   * @method reset\n   * @param {String} attribute\n   * @param {Parser} parser\n   * @param {Attrimator} [next]\n   */\n  reset: function(attribute, parser, next)\n  {\n    /**\n     * The name of the attribute this attrimator is animating.\n     * \n     * @property {String} attribute\n     */\n    this.attribute = attribute;\n\n    /**\n     * The parser that created this attrimator (if any).\n     * \n     * @property {Parser} parser\n     */\n    this.parser = parser;\n\n    /**\n     * The next attrimator to be played once this one has finished.\n     * \n     * @property {Attrimator} next\n     */\n    this.next = next;\n\n    /**\n     * The time the attrimator was started by the animator.\n     * \n     * @property {Number} startTime\n     */\n    this.startTime = 0;\n\n    /**\n     * The time the attrimator was last paused.\n     * \n     * @property {Number} pauseTime\n     */\n    this.pauseTime = 0;\n\n    /**\n     * The amount of time that has elapsed since the attrimator started.\n     * \n     * @property {Number} elapsed\n     */\n    this.elapsed = 0;\n\n    /**\n     * The time this attrimator should stop itself after it started in milliseconds.\n     * \n     * @property {Number} stopTime\n     */\n    this.stopTime = Number.POSITIVE_INFINITY;\n\n    /**\n     * Whether or not the attrimator is paused.\n     * \n     * @property {Boolean} paused\n     */\n    this.paused = false;\n\n    /**\n     * The cycle this attrimator belongs to.\n     * \n     * @type {Number} cycle\n     */\n    this.cycle = 0;\n\n    /**\n     * The amount of time in milliseconds this attrimator is delayed since start.\n     * \n     * @property {Number} delay\n     */\n    this.delay = 0;\n\n    /**\n     * The initial elapsed time in milliseconds when the attrimator is started.\n     * \n     * @property {Number} offset\n     */\n    this.offset = 0;\n  },\n\n  /**\n   * Prepares this attrimator for animation on the given subject \n   * animator. This is called once in anim8.Animator.preupdate before the first \n   * time this attrimator is updated.\n   *\n   * @method start\n   * @param {Number} now\n   * @param {Animator} animator\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now - this.offset;\n    this.elapsed = this.offset;\n    this.finished = false;\n  },\n\n  /**\n   * Invoked once when a new animation cycle is started on an Animator. If this\n   * attrimator updated the frame true must be returned.\n   *\n   * @method startCycle\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  startCycle: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Updates this attrimator given a time to animate to and the frame to\n   * provide with a new value. This method will return true if the attribute\n   * this is animating has been updated and needs to be applied to the subject.\n   *\n   * @method setTime\n   * @param {Number} now\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  setTime: function(now, frame)\n  {\n    if ( this.paused )\n    {\n      return false;\n    }\n\n    var updated = false;\n    var elapsed = now - this.startTime;\n    var updated = false;\n\n    if ( elapsed > this.stopTime )\n    {\n      updated = this.finish( frame );\n    }\n    else if ( elapsed >= this.delay )\n    {\n      updated = this.update( elapsed, frame );\n    }\n\n    this.elapsed = elapsed;\n\n    return updated;\n  },\n\n  /**\n   * Updates the attrimator given elapsed time in milliseconds, the frame to \n   * apply a value to, and returns whether the frame was updated or not.\n   *\n   * @method update\n   * @param {Number} elapsed\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  update: function(elapsed, frame)\n  {\n    throw 'Attrimator.update not implemented';\n  },\n\n  /**\n   * Returns the amount of time that has elapsed in milliseconds.\n   *\n   * @method getElapsed\n   * @return {Number}\n   */\n  getElapsed: function()\n  {\n    return this.elapsed;\n  },\n\n  /**\n   * Stops this attrimator in the given number of milliseconds.\n   *\n   * @method stopIn\n   * @param {Number} milliseconds\n   * @chainable\n   */\n  stopIn: function(milliseconds)\n  {\n    this.stopTime = this.getElapsed() + milliseconds;\n\n    return this;\n  },\n\n  /**\n   * If this attrimator repeats its animation this method will stop repitition\n   * after the next animation cycle.\n   * \n   * @chainable\n   */\n  nopeat: function()\n  {\n    return this;\n  },\n\n  /**\n   * Returns the value at the given time or returns false if it can't be\n   * calculated.\n   *\n   * @method valueAt\n   * @param {Number} time\n   * @param {Any} out\n   * @return {Any|False}\n   */\n  valueAt: function(time, out)\n  {\n    return false;\n  },\n\n  /**\n   * The total amount of time this attrimator will take in milliseconds. This \n   * may be an infinite number.\n   *\n   * @method totalTime\n   * @return {Number}\n   */\n  totalTime: function()\n  {\n    return this.stopTime;\n  },\n\n  /**\n   * The time remaining before this attrimator and any following will be \n   * finished.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * Clones this attrimator.\n   *\n   * @method clone\n   * @return {Attrimator}\n   */\n  clone: function()\n  {\n    throw 'AttributeAnimator.clone not implemented';\n  },\n\n  /**\n   * Returns whether this attrimator has computed values which need to be \n   * resolved by the subject animator calling prepare on this attrimator.\n   *\n   * @method hasComputed\n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return false;\n  },\n\n  /**\n   * Determines whether this attrimator will run infinitely.\n   *\n   * @method isInfinite\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * Pauses this attrimator if it isn't already paused.\n   *\n   * @method pause\n   * @chainable\n   */\n  pause: function()\n  {\n    if ( !this.paused )\n    {\n      this.pauseTime = anim8.now();\n      this.paused = true;\n    }\n\n    return this;\n  },\n\n  /**\n   * Resumes this attrimator if it's paused. This involves resetting the start\n   * time of the attrimator.\n   *\n   * @method resume\n   * @chainable\n   */\n  resume: function()\n  {\n    if ( this.paused )\n    {\n      this.startTime += anim8.now() - this.pauseTime;\n      this.paused = false;\n    }\n\n    return this;\n  },\n\n  /**\n   * Whether this attrimator is paused.\n   *\n   * @method isPaused\n   * @return {Boolean}\n   */\n  isPaused: function()\n  {\n    return this.paused;\n  },\n\n  /**\n   * Sets the final state of the attrimator to the frame if one exists and \n   * returns true, otherwise false is returned and frame remains unchanged.\n   *\n   * @method finish\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Whether this attrimator is finished.\n   *\n   * @method isFinished\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return false;\n  },\n\n  /**\n   * Returns the parser that created this attrimator (if any).\n   *\n   * @method getParser\n   * @return {Parser}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * Places the given attrimator on the end of the chain of attrimators starting\n   * with this attrimator.\n   *\n   * @method queue\n   * @param {Attrimator} next\n   * @chainable\n   */\n  queue: function(next)\n  {\n    if ( this.next )\n    {\n      this.next.queue( next );\n    }\n    else\n    {\n      this.next = next;\n    }\n\n    return this;\n  },\n\n  /**\n   * Parses a value with the calculator given a default value to fallback on.\n   *\n   * @method parseValue\n   * @param {Animator} animator\n   * @param {T|Function|True} value\n   * @param {T} defaultValue\n   * @return {T|Function}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isComputed( parsed ) )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  }\n\n};","\n/**\n * A map of attrimators by their attribute name.\n *\n * @class AttrimatorMap\n * @constructor\n * @extends FastMap\n */\nanim8.AttrimatorMap = function()\n{\n  this.reset();\n};\n\nanim8.override( anim8.AttrimatorMap.prototype = new anim8.FastMap(),\n{\n\n  /**\n   * Queues the attrimator on this map. If the attribute is already on this map\n   * this is placed on the end of the Attrimator chain, otherwise the attrimator\n   * is added to the map. If there is an attrimator already on the map it's\n   * returned.\n   *\n   * @method queue\n   * @param {Attrimator} attrimator\n   * @return {Attrimator}\n   */\n  queue: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n    var current = this.get( attr );\n\n    if ( current )\n    {\n      current.queue( attrimator );\n    }\n    else\n    {\n      this.put( attr, attrimator );\n    }\n\n    return current;\n  },\n\n  /**\n   * Queues the given map to this map. The attrimators placed on this map are\n   * queued and delayed in a way that they all start at the same time. If a\n   * function is provided as the second argument it is invoked whenever an \n   * attrimator in the given map is new & added to this map.\n   *\n   * @method queueMap\n   * @param {AttrimatorMap} map\n   * @param {Function} [onNewAttribute]\n   * @param {Object} [context]\n   * @chainable\n   */\n  queueMap: function(map, onNewAttribute, context)\n  {\n    var maxRemaining = this.timeRemaining();\n    var attrimators = map.values;\n    \n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n      var existing = this.get( attr );\n\n      if ( existing )\n      {\n        if ( existing.isInfinite() )\n        {\n          existing.stopIn( attrimator.delay + maxRemaining );\n        }\n        else\n        {\n          attrimator.delay += (maxRemaining - existing.timeRemaining());\n        }\n\n        existing.queue( attrimator );\n      }\n      else\n      {\n        attrimator.delay += maxRemaining;\n\n        this.put( attr, attrimator );\n        \n        if ( anim8.isFunction( onNewAttribute ) )\n        {\n          onNewAttribute.call( context || this, attrimator );\n        }\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Removes the attrimator at the given index replacing it with the next\n   * attrimator if one exists.\n   *\n   * @method unqueueAt\n   * @param {Number} index\n   * @chainable\n   */\n  unqueueAt: function(index)\n  {\n    var current = this.values[ index ];\n\n    if ( current.next )\n    {\n      this.values[ index ] = current.next;\n    }\n    else\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Clones this map returning a deep clone where all attrimators are cloned.\n   *\n   * @method clone\n   * @return {AttrimatorMap}\n   */\n  clone: function()\n  {\n    var values = this.values;\n    var keys = this.keys;\n    var clone = new anim8.AttrimatorMap();\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      clone.values[i] = values[i].clone();\n      clone.keys[i] = keys[i];\n      clone.indices[ keys[i] ] = i;\n    }\n\n    return clone;\n  },\n\n  /**\n   * Returns the time remaining for all finite attrimators in this map. The time\n   * remaining includes queued attrimators.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    var maxRemaining = 0;\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n\n      if ( !attrimator.isInfinite() )\n      {\n        maxRemaining = Math.max( maxRemaining, attrimator.timeRemaining() );\n      }\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Sets the cycle of the attrimators in this map. If there are attrimators\n   * queued the are given the next cycle number. The final cycle number is\n   * returned.\n   *\n   * @method applyCycle\n   * @param {Number} nextCycle\n   * @return {Number}\n   */\n  applyCycle: function(nextCycle)\n  {\n    var currentDepth = this.values;\n    var nextDepth = null;\n\n    while ( currentDepth.length )\n    {\n      nextDepth = [];\n\n      for (var i = currentDepth.length - 1; i >= 0; i--)\n      {\n        var attrimator = currentDepth[ i ];\n\n        attrimator.cycle = nextCycle;\n\n        if ( attrimator.next )\n        {\n          nextDepth.push( attrimator.next );\n        }\n      }\n\n      if ( nextDepth.length )\n      {\n        nextCycle++;\n      }\n\n      currentDepth = nextDepth;\n    }\n\n    return nextCycle;\n  },\n\n  /**\n   * Iterates through all attrimators in this map, at any depth.\n   *\n   * @method iterate\n   * @param  {Function} callback\n   * @param  {Object} [context]\n   * @chainable\n   */\n  iterate: function(callback, context)\n  {\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n      var previous = null;\n      var depth = 0;\n\n      while ( attrimator )\n      {\n        callback.call( context || this, attrimator, depth++, previous );\n\n        attrimator = (previous = attrimator).next;\n      }\n    }\n\n    return this;\n  }\n\n\n\n});","\n/**\n * Possible states an event can be in.\n * \n * @type {Object}\n */\nanim8.EventState = \n{\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  FINISHED: 8\n};\n\n/**\n * Instantiates a new Event which extends Attrimator.\n * \n * @param {String} attribute\n * @param {Path} path\n * @param {String|Number} duration\n * @param {String|Function|Array} easing\n * @param {String|Number} delay\n * @param {String|Number} sleep\n * @param {String|Number} offset\n * @param {String|Number} repeat\n * @param {Number} scale\n * @param {T|Number} scaleBase\n * @param {Boolean} hasInitialState\n * @param {Parser} parser\n * @param {Attrimator} next\n * @class Event\n * @constructor\n * @extends Attrimator\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, offset, repeat, scale, scaleBase, hasInitialState, parser, next, input) \n{\n  this.reset( attribute, parser, next );\n\n  /**\n   * The path the attribute will be animated along.\n   * \n   * @property {Path} path\n   */\n  this.path             = path;\n\n  /**\n   * The easing used to modify the delta value passed to the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.easing:method\"}}{{/crossLink}}\n   * \n   * @property {Function} easing\n   */\n  this.easing           = anim8.easing( easing );\n\n  /**\n   * The amount of time in milliseconds to animate an attribute over the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.duration:method\"}}{{/crossLink}}\n   * \n   * @property {Number} duration\n   */\n  this.duration         = anim8.duration( duration );\n\n  /**\n   * If this event repeats more than once, this is a pause between animations.\n   *\n   * **See:** {{#crossLink \"Core/anim8.sleep:method\"}}{{/crossLink}}\n   * \n   * @property {Number} sleep\n   */\n  this.sleep            = anim8.sleep( sleep );\n\n  /**\n   * The number of times to repeat the animation.\n   *\n   * **See:** {{#crossLink \"Core/anim8.repeat:method\"}}{{/crossLink}}\n   * \n   * @property {Number} repeat\n   */\n  this.repeat           = anim8.repeat( repeat );\n\n  /**\n   * The amount to scale the value computed from the path.\n   *\n   * **See:** {{#crossLink \"Core/anim8.scale:method\"}}{{/crossLink}}\n   * \n   * @property {T} scale\n   */\n  this.scale            = anim8.scale( scale );\n\n  /**\n   * The base value from which to scale from. This is essentially this data\n   * types default value.\n   * \n   * @property {T} scaleBase\n   */\n  this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.ZERO );\n\n  /**\n   * Whether or not this event has an initial value which can be applied at the\n   * start of the animation (or when \n   * {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} is invoked).\n   * \n   * @property {Boolean} hasInitialState\n   */\n  this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n\n  this.delay            = anim8.delay( delay );\n  this.offset           = anim8.offset( offset );\n  this.input            = input;\n};\n\nanim8.override( anim8.Event.prototype = new anim8.Attrimator(),\n{\n  /**\n   * Returns the computed value given a base value and a delta along the path.\n   *\n   * @method computeValue\n   * @param {T} baseValue\n   * @param {Number} delta\n   * @return {T}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * Applies the value to the frame and returns true, otherwise returns false.\n   *\n   * @method applyValue\n   * @param {Object} frame\n   * @param {T} baseValue\n   * @param {Number} delta\n   * @return {T}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[ this.attribute ] = value;\n    }\n\n    return value;\n  },\n\n  nopeat: function()\n  {\n    this.repeat = anim8.clamp( Math.ceil( ( this.elapsed - this.delay ) / ( this.duration + this.sleep ) ), 0, this.repeat );\n    \n    return this;\n  },\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n  },\n  start: function(now, animator)\n  {\n    anim8.Attrimator.prototype.start.apply( this, arguments );\n    \n    this.state = this.delay ? anim8.EventState.DELAYED : anim8.EventState.ANIMATING;\n\n    if ( this.hasComputed() )\n    {\n      this.path = this.path.replaceComputed( this, animator );\n    }\n  },\n  startCycle: function(frame)\n  {\n    if ( this.hasInitialState )\n    {\n      return this.applyValue( frame, frame[ this.attribute ], 0 );\n    }\n\n    return false;\n  },\n  update: function(elapsed, frame)\n  {\n    var updated = false;\n    var delay = this.delay;\n    var duration = this.duration;\n    var sleep = this.sleep;\n    var repeat = this.repeat;\n    var oldState = this.state;\n    var newState = this.state;\n    var delta = 0;\n\n    elapsed -= delay;\n\n    var cycle = duration + sleep;\n    var iteration = Math.floor( ( elapsed + sleep ) / cycle );\n\n    if ( iteration >= repeat )\n    {\n      newState = anim8.EventState.FINISHED;\n      delta = 1;\n    }\n    else\n    {\n      elapsed -= iteration * cycle;\n\n      if ( elapsed > duration )\n      {\n        newState = anim8.EventState.SLEEPING;\n        delta = 1;\n      }\n      else\n      {\n        newState = anim8.EventState.ANIMATING;\n        delta = elapsed / duration;\n      }\n    }\n    \n    if ( newState === anim8.EventState.ANIMATING || \n       ( newState !== anim8.EventState.ANIMATING && oldState === anim8.EventState.ANIMATING ) )\n    {\n      this.applyValue( frame, frame[ this.attribute ], delta );\n      updated = true;\n    }\n\n    this.state = newState;\n\n    return updated;\n  },\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay && !this.hasInitialState )\n    {\n      return false;\n    }\n\n    var delta = 0;\n\n    if ( time >= this.delay )\n    {\n      var cycle = (this.duration + this.sleep);\n      var elapsed = (time - this.delay);\n      var iteration = Math.floor( ( elapsed + this.sleep ) / cycle );\n\n      if ( iteration >= this.repeat )\n      {\n        delta = 1.0;\n      }\n      else\n      {\n        delta = Math.min( 1.0, (elapsed % cycle) / this.duration );        \n      }\n    }\n\n    return this.computeValue( out, delta );\n  },\n  totalTime: function()\n  {\n    return Math.min( this.stopTime, this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep) );\n  },\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.offset, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null, this.input );\n  },\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY) && (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n  isFinished: function()\n  {\n    return (this.state === anim8.EventState.FINISHED);\n  }\n\n});\n\n/**\n * Returns an Event given the attribute, the path, and a parsed options object.\n *\n * **See:** {{#crossLink \"Core/anim8.options:method\"}}anim8.options{{/crossLink}}\n * \n * @method fromOptions\n * @for Event\n * @param  {String} attr\n * @param  {Path} path\n * @param  {Object} options\n * @return {Event}\n */\nanim8.Event.fromOptions = function(attr, path, options)\n{\n  return new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.offset, options.repeat, options.scale, options.scaleBase );\n}\n","\n/**\n * Instantiates a new Oncer which extends Attrimator.\n * \n * @param {String} attribute\n * @param {T} value\n * @param {String|Number} delay\n * @param {Boolean} hasInitialState\n * @param {Parser} parser\n * @param {Attrimator} next\n * @class Oncer\n * @constructor\n * @extends Attrimator\n */\nanim8.Oncer = function( attribute, value, delay, hasInitialState, parser, next, input ) \n{\n  this.reset( attribute, parser, next );\n\n  /**\n   * The value that's set to the animator once.\n   * \n   * @property {T} value\n   */\n  this.value = value;\n\n  /**\n   * Whether or not this event has an initial value which can be applied at the\n   * start of the animation (or when \n   * {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} is invoked).\n   * \n   * @property {Boolean} hasInitialState\n   */\n  this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n\n  this.delay            = anim8.delay( delay );\n  this.applied          = false;\n  this.input            = input;\n};\n\nanim8.override( anim8.Oncer.prototype = new anim8.Attrimator(),\n{\n  /**\n   * Computes the value of this Oncer.\n   *\n   * @method getValue\n   * @return {T}\n   */\n  getValue: function()\n  {\n    return anim8.isFunction( this.value ) ? this.value() : this.value;\n  },\n  finish: function(frame)\n  {\n    var update = !this.applied;\n\n    if ( update )\n    {\n      frame[ this.attribute ] = this.getValue();\n     \n      this.applied = true;\n    }\n\n    return update;\n  },\n  start: function(now, animator)\n  {\n    anim8.Attrimator.prototype.start.apply( this, arguments );\n\n    this.value = animator.getAttribute( this.attribute ).parse( this.value );\n    \n    if ( anim8.isComputed( this.value ) )\n    {\n      this.value = this.value( this, animator );\n    }\n\n    this.applied = false;\n  },\n  startCycle: function(frame)\n  {\n    return this.hasInitialState && this.finish( frame );\n  },\n  update: function(elapsed, frame)\n  {\n    return elapsed >= this.delay && this.finish( frame );\n  },\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay )\n    {\n      return false;\n    }\n\n    return this.getValue();\n  },\n  totalTime: function()\n  {\n    return Math.min( this.stopTime, this.delay );\n  },\n  clone: function()\n  {\n    return new anim8.Oncer( this.attribute, this.value, this.delay, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.value );\n  },\n  isInfinite: function()\n  {\n    return false;\n  },\n  isFinished: function()\n  {\n    return this.applied;\n  }\n});","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, \n * or an object with a spring type to be created. If none of these conditions \n * are true then an error is thrown.\n *\n * @method anim8.spring\n * @for Core\n * @param {Spring|String|Object} spring\n * @return {Spring}\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n\n  throw spring + ' is not a valid spring';\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently \n * enacting on the position based on the implementing classes logic.\n *\n * @class Spring\n * @constructor\n * @extends Attrimator\n */\nanim8.Spring = function()\n{\n};\n\nanim8.override( anim8.Spring.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Resets the spring's properties.\n   *\n   * @method set\n   * @param {String} attribute\n   * @param {Calculator|String} calculator\n   * @param {T|Function|true} rest\n   * @param {T|Function|true} position\n   * @param {T|Function|true} velocity\n   * @param {T|Function|true} gravity\n   * @param {Boolean} finishOnRest\n   */\n  set: function(attribute, calculator, rest, position, velocity, gravity, finishOnRest)\n  { \n    this.reset( attribute, null, null );\n\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = velocity;\n    this.finishOnRest = finishOnRest;\n  },\n  \n  /**\n   * Resolves the rest to the expected format.\n   * \n   * @method resolveRest\n   * @return {T}\n   */\n  resolveRest: function()\n  {\n    return anim8.resolve( this.rest );\n  },\n  \n  /**\n   * Method that's invoked on each spring update.\n   *\n   * @method updateVelocity\n   * @param {Number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  },\n\n  start: function(now, animator)\n  {\n    anim8.Attrimator.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.ZERO );\n    this.velocity   = this.parseValue( animator, this.velocity, calc.ZERO );\n  },\n\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity );\n  },\n\n  update: function(elapsed, frame)\n  {\n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.clone( this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    else if ( this.finishOnRest && calc.isZero( this.velocity ) )\n    {\n      this.finished = true;\n    }\n    \n    return updated;\n  },\n\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  isFinished: function()\n  {\n    return this.finished;\n  }\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * Instantiates a new SpringLinear.\n * \n * @param {String|false} attribute\n * @param {Calculator} calculator\n * @param {T} position\n * @param {T} rest\n * @param {T} damping\n * @param {T} stiffness\n * @param {T} velocity\n * @param {T} gravity\n * @param {Boolean} finishOnRest\n * @class SpringLinear\n * @constructor\n * @extends Spring\n */\nanim8.SpringLinear = function(attribute, calculator, position, rest, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.SpringLinear.prototype = new anim8.Spring(), \n{\n\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  clone: function()\n  {\n    return new anim8.SpringLinear( this.attribute, this.calculator, this.position, this.rest, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.damping ) || \n           anim8.isComputed( this.stiffness );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n\n});\n\n/**\n * Register the spring parser.\n *\n * @param {Object}\n * @return {SpringLinear}\n */\nanim8.spring['linear'] = function(spring)\n{ \n  return new anim8.SpringLinear(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Instantiates a new SpringDistance.\n * \n * @param {String|false} attribute\n * @param {anim8.Calculator} calculator\n * @param {T} position\n * @param {T} rest\n * @param {Number} distance\n * @param {Number} damping\n * @param {Number} stiffness\n * @param {T} velocity\n * @param {T} gravity\n * @param {Boolean} finishOnRest\n * @class SpringDistance\n * @constructor\n * @extends Spring\n */\nanim8.SpringDistance = function(attribute, calculator, position, rest, distance, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.SpringDistance.prototype = new anim8.Spring(), \n{\n\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n\n  clone: function()\n  {\n    return new anim8.SpringDistance( this.attribute, this.calculator, this.position, this.rest, this.distance, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n  \n});\n\n/**\n * Register the spring parser.\n * \n * @param {Object}\n * @return {SpringDistance}\n */\nanim8.spring['distance'] = function(spring)\n{ \n  return new anim8.SpringDistance(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Animates a single attribute with a velocity and acceleration.\n *\n * @param {String} attribute\n * @param {Parser} parser\n * @param {Calculator} calculator\n * @param {T} position\n * @param {T} velocity\n * @param {T} acceleration\n * @param {Number} terminal\n * @param {Number} stopTime\n * @class Physics\n * @constructor\n * @extends Attrimator\n */\nanim8.Physics = function( attribute, parser, calculator, position, velocity, acceleration, terminal, stopTime )\n{\n  this.reset( attribute, parser, null );\n\n  this.calculator   = calculator;\n  this.position     = position;\n  this.velocity     = velocity;\n  this.acceleration = acceleration;\n  this.terminal     = anim8.number( terminal, Number.POSITIVE_INFINITY );\n  this.stopTime     = anim8.time( stopTime, Number.POSITIVE_INFINITY );\n  this.finished     = false;\n};\n\nanim8.override( anim8.Physics.prototype = new anim8.Attrimator(),\n{\n  /**\n   * Parses a value for the animator given a default value.\n   *\n   * @method parseValue\n   * @param {anim8.Animator} animator.\n   * @param {T} value\n   * @param {T} defaultValue\n   * @return {T}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isComputed( parsed ) )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n\n  /**\n   * Resolves the velocity to a value.\n   *\n   * @method resolveVelocity\n   * @return {T}\n   */\n  resolveVelocity: function()\n  {\n    return anim8.resolve( this.velocity );\n  },\n\n  /**\n   * Resolves the acceleration to a value.\n   *\n   * @method resolveAcceleration\n   * @return {T}\n   */\n  resolveAcceleration: function()\n  {\n    return anim8.resolve( this.acceleration );\n  },\n\n  start: function(now, animator)\n  {\n    anim8.Attrimator.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator     = calc;\n    this.position       = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.initalPosition = calc.clone( this.position );\n    this.velocity       = this.parseValue( animator, this.velocity, calc.ZERO );\n    this.acceleration   = this.parseValue( animator, this.acceleration, calc.ZERO );\n    this.temp           = calc.create();\n  },\n\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.position ) || \n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.acceleration );\n  },\n\n  update: function(elapsed, frame)\n  {\n    var value = this.valueAt( elapsed, this.temp, true );\n\n    if ( value !== false )\n    {\n      frame[ this.attribute ] = this.position = value;\n\n      return true;\n    }\n\n    var calc = this.calculator;\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Physics.MAX_DT );\n    var vel = calc.copy( this.temp, this.resolveVelocity() );\n    var acc = this.resolveAcceleration();\n    var pos = this.position;\n\n    vel = calc.adds( vel, acc, dt );\n\n    if ( this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      vel = calc.clamp( vel, 0, this.terminal );\n    }\n\n    pos = calc.adds( pos, vel, dt );\n    \n    this.position = pos;\n\n    if ( !anim8.isFunction( this.velocity ) )\n    {\n      this.velocity = calc.copy( this.velocity, vel );\n    }\n\n    frame[ this.attribute ] = pos;\n\n    return true;\n  },\n\n  valueAt: function(time, out, usePosition)\n  {\n    if ( anim8.isFunction( this.velocity ) || anim8.isFunction( this.acceleration ) || this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      return false;\n    }\n\n    time -= this.delay;\n    time *= 0.001;\n\n    var calc = this.calculator;\n    var value = usePosition ? calc.copy( this.position, this.initalPosition ) : calc.copy( out, this.initalPosition );\n    value = calc.adds( value, this.velocity, time );\n    value = calc.adds( value, this.acceleration, time * time );\n\n    return value;\n  },\n\n  clone: function()\n  {\n    return new anim8.Physics( this.attribute, this.parser, this.calculator, this.position, this.velocity, this.acceleration, this.terminal, this.stopTime );\n  },\n\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  isFinished: function()\n  {\n    return this.finished;\n  }\n  \n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Physics.MAX_DT = 0.1;\n","\n/**\n * Returns an instance of {{#crossLink \"Animation\"}}{{/crossLink}} based on the \n * given input & options. If the input is a string the animation with that name \n * is returned. If the input is a string with an animation name and an option \n * string the animation with the given name modified by any additional options \n * is returned. Commas can be used to queue animation & option pairs one after \n * another. Ampersands can be used to play animations at the same time. If the \n * input is an object an anonymous animation is created. If no animation could \n * be determined then false is returned.\n *\n * **Examples:**\n * \n *     anim8.animation('wiggle');\n *     anim8.animation('wiggle ~1s 4s z40ms x5 !1.2');\n *     anim8.animation('wiggle', {...options...});\n *     anim8.animation('wiggle, tada ~50ms, fadeOut 2s');\n *     anim8.animation('wiggle & tada !3, fadeOut');\n *     anim8.animation({...definition...});\n * \n * If the given input is a string you can cache it. An example would be\n * 'wiggle ~1s 2s x3' - if `cache` is true and you call this method again it won't\n * need to be parsed again.\n *\n * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n * \n * @method anim8.animation\n * @for Core\n * @param {Animation|String|Object} animation\n * @param {String|Object} [options]\n * @param {Boolean} [cache=false]\n * @return {Animation|False}\n * @throws {String} The animation string has an invalid animation name or the\n *    animation fails to create attrimators from the animation definition.\n */\nanim8.animation = function(animation, options, cache)\n{\n  var options = anim8.options( options, cache );\n  var hasOptions = !anim8.isEmpty( options );\n\n  if ( animation instanceof anim8.Animation )\n  {\n    if ( hasOptions )\n    {\n      var attrimators = animation.newAttrimators();\n\n      animation.merge( options, attrimators );\n\n      return new anim8.Animation( false, animation.input, options, attrimators);\n    }\n\n    return animation;\n  }\n  if ( anim8.isString( animation ) )\n  {\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation && !hasOptions )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var attrimators = anim8.attrimatorsFor( animation, options, cache );\n\n    if ( key in anim8.animation && !hasOptions )\n    {\n      return anim8.animation[ key ];\n    }\n\n    return new anim8.Animation( false, {}, options, attrimators );\n  }\n  if ( anim8.isObject( animation ) )\n  {\n    var attrimators = anim8.attrimatorsFor( animation, options, cache );\n\n    return new anim8.Animation( false, animation, options, attrimators );\n  }\n  \n  return false;\n};\n\n/**\n * Generates an AttrimatorMap for the given animation and options. If the \n * animation given is an instance of {{#crossLink \"Animation\"}}{{/crossLink}}\n * then a copy of that animations attrimators is returned, and if options are\n * specified then they are merged into the generated attrimators. If the \n * animation given is an object it's properties are iterated and for each parser\n * with a matching name attrimators are generated. If the animation given is a\n * string of a cached or saved animation then it's handled as if an instance of\n * {{#crossLink \"Animation\"}}{{/crossLink}} was given. If the animation given\n * is a string which isn't saved or cached it goes through the following parsing\n * logic.\n *\n * - Split up the string into sections with `,` which queues animations.\n * - Split up each of the sections with `&` which enables animations to play\n *   simultaneously.\n * - For each of those sections, take the first word as the name of the \n *   animation and any remaining text as the options for that animation.\n *\n * If no attrimators could be parsed, an empty attrimator map is returned. If\n * the animation given is a string that specifies animations that don't exist\n * an error is thrown.\n * \n * **Examples:**\n * \n *     anim8.attrimatorsFor('wiggle');\n *     anim8.attrimatorsFor('wiggle ~1s 4s z40ms x5 !1.2');\n *     anim8.attrimatorsFor('wiggle', {...options...});\n *     anim8.attrimatorsFor('wiggle, tada ~50ms, fadeOut 2s');\n *     anim8.attrimatorsFor('wiggle & tada !3, fadeOut');\n *     anim8.attrimatorsFor({...definition...});\n * \n * If the given input is a string you can cache it. An example would be\n * 'wiggle ~1s 2s x3' - if `cache` is true and you call this method again it won't\n * need to be parsed again.\n *\n * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n * \n * @method anim8.attrimatorsFor\n * @for Core\n * @param {Object|String} animation\n * @param {Object|String} [options]\n * @param {Boolean} [cache=false]\n * @return {AttrimatorMap}\n */\nanim8.attrimatorsFor = function( animation, options, cache )\n{\n  var options = anim8.options( options, cache );\n  var hasOptions = !anim8.isEmpty( options );\n  var attrimators = new anim8.AttrimatorMap();\n\n  if ( animation instanceof anim8.Animation )\n  {\n    attrimators.putMap( animation.newAttrimators() );\n\n    if ( hasOptions )\n    {\n      animation.merge( options, attrimators );\n    }\n  }\n  else if ( anim8.isObject( animation ) )\n  {\n    var helper = new anim8.ParserHelper( animation, options );\n\n    for (var parserName in animation)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.parse( animation, options, attrimators, helper );\n      }\n    }\n  }\n  else if ( anim8.isString( animation ) )\n  {\n    var key = animation.toLowerCase();\n    var saved = anim8.animation[ key ];\n    var cacheIt = anim8.coalesce( cache, anim8.defaults.cache );\n\n    if ( saved )\n    {\n      attrimators.putMap( saved.newAttrimators() );\n\n      if ( hasOptions )\n      {\n        saved.merge( options, attrimators );\n      }\n    }\n    else\n    {\n      var animationsQueued = animation.split( ',' );\n\n      for (var k = 0; k < animationsQueued.length; k++)\n      {\n        var animationsMerged = animationsQueued[ k ].split( '&' );\n        var base = new anim8.AttrimatorMap();\n\n        for (var j = 0; j < animationsMerged.length; j++)\n        {\n          var animationString = anim8.trim( animationsMerged[ j ].toLowerCase() );\n          var animationSplit = animationString.split( ' ' );\n          var parsedAnimation = anim8.animation[ animationSplit[ 0 ] ];\n          \n          if ( parsedAnimation )\n          {\n            var parsedOptions = anim8.options( animationSplit.slice( 1 ), cache );\n            var hasParsedOptions = !anim8.isEmpty( parsedOptions );\n            var parsedAttrimators = parsedAnimation.newAttrimators();\n\n            if ( hasOptions && hasParsedOptions )\n            {\n              parsedAnimation.merge( anim8.extend( {}, options, parsedOptions ), parsedAttrimators );\n            }\n            else if ( hasParsedOptions )\n            {\n              parsedAnimation.merge( parsedOptions, parsedAttrimators );\n            }\n            else if ( hasOptions )\n            {\n              parsedAnimation.merge( options, parsedAttrimators );\n            }\n\n            base.putMap( parsedAttrimators );\n          }\n          else\n          {\n            throw animationString + ' is not a valid animation in \"' + animationsQueued[ k ] + '\"';\n          }\n        }\n\n        attrimators.queueMap( base );\n      }\n\n      if ( cacheIt && !hasOptions )\n      {\n        anim8.animation[ key ] = new anim8.Animation( animation, {}, {}, attrimators );\n      }\n    }\n  }\n\n  return attrimators;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and \n * transitioned into at a later time providing the name and optionally options \n * to override with.\n *\n * **See:** {{#crossLink \"Core/anim8.animation:method\"}}anim8.animation{{/crossLink}},\n *          {{#crossLink \"Core/anim8.options:method\"}}anim8.options{{/crossLink}}\n *\n * @method anim8.save\n * @for Core\n * @param {String} name\n * @param {Animation|String|Object} animation\n * @param {String|Object} [options]\n */\nanim8.save = function( name, animation, options )\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and \n * the attrimators that were generated from the input & options. If the name is \n * false this is an anonymous animation. Input & Options are used by parsers to \n * generate attrimators, options allow for an animations default properties to \n * be overriden.\n *\n * @param {String|Boolean} name\n * @param {Object} input\n * @param {Object} options\n * @param {AttrimatorMap} attrimators\n * @class Animation\n * @constructor\n */\nanim8.Animation = function(name, input, options, attrimators)\n{\n  /**\n   * The name of the animation, or false if it's an anonymous animation. \n   *\n   * @property {String|False} name\n   */\n  this.name = name;\n\n  /**\n   * The object which created the animation.\n   *\n   * @property {Object} input\n   */\n  this.input = input;\n\n  /**\n   * The options given when the animation was created.\n   *\n   * @property {Object} [options]\n   */\n  this.options = options;\n\n  /**\n   * The name of the animation, or false if it's an anonymous animation. \n   *\n   * @property {AttrimatorMap} name\n   */\n  this.attrimators = attrimators;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Generates an map of event instances from the attrimators in this animation.\n   *\n   * @method newAttrimators\n   * @return {AttrimatorMap}\n   */\n  newAttrimators: function()\n  {\n    return this.attrimators.clone();\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @method merge\n   * @param {Object} [options]\n   * @param {AttrimatorMap} attrimatorMap\n   * @return {AttrimatorMap}\n   */\n  merge: function(options, attrimatorMap)\n  {\n    var helper = new anim8.ParserHelper( this.input, this.options, options );\n\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false && parser.merge )\n      {\n        parser.merge( this.input, options, this.options, attrimatorMap, helper );\n      }\n    }\n\n    return attrimatorMap;\n  }\n\n};","\n/**\n * Parses a value into a transition object. If the given input is a string it's\n * expected to be in a similar format to:\n * \n *     [time] [easing[-easingType]] >[outro] <[intro] /[granularity] ^[lookup]\n * \n * This is also a registry of transitions, you can add your own transitions that\n * can be used later with syntax like:\n * \n *     anim8.transition['myTransition'] = anim8.transition('50ms 0.05 linear');\n * \n * So you can use 'myTransition' as the transition input.\n * \n *     animator.transition('myTransition', 'myAnimation');\n * \n * @method anim8.transition\n * @for Core\n * @param {Object|String|Array} options\n * @param {Boolean} [cache]\n * @return {Object}\n */\nanim8.transition = function(transition, cache) \n{\n  // 1. If it's a string, convert it into an array.\n  // 2. If it's an array, parse it and convert it into an object.\n  // 3. If it's an object, fill in any missing values with the defaults.\n\n  var originalInput = transition;\n\n  if ( anim8.isString( transition ) )\n  {\n    if ( transition in anim8.transition )\n    {\n      return anim8.transition[ transition ];\n    }\n\n    transition = transition.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( transition ) )\n  {\n    var transitionArray = transition;\n\n    transition = {};\n\n    for (var i = 0; i < transitionArray.length; i++)\n    {\n      var part = transitionArray[i];\n      var first = part.charAt( 0 );\n\n      // Introduction Time (into next event)\n      if ( first === '<' )\n      {\n        var intro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( intro ) )\n        {\n          transition.intro = intro;\n        }\n      }\n      // Outroduction Time (out of current event)\n      else if ( first === '>' )\n      {\n        var outro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( outro ) )\n        {\n          transition.outro = outro;\n        }\n      }\n      // Granularity (for velocity conscious transitions)\n      else if ( first === '/' )\n      {\n        var granularity = anim8.number( part.substring(1), false );\n\n        if ( granularity !== false )\n        {\n          transition.granularity = granularity;\n        }\n      }\n      // Lookup (for velocity conscious transitions)\n      else if ( first === '^' )\n      {\n        var lookup = anim8.time( part.substring(1), false );\n\n        if ( lookup !== false )\n        {\n          transition.lookup = lookup;\n        }\n      }\n      else\n      {\n        // Easing\n        var easing = anim8.easing( part, false );\n\n        if ( easing !== false )\n        {\n          transition.easing = easing;\n        }\n\n        // Time\n        var time = anim8.time( part, false );\n\n        if ( time !== false )\n        {\n          transition.time = time;\n        }\n      }\n    }\n  }\n\n  if ( anim8.isObject( transition ) )\n  {\n    transition.time        = anim8.time( transition.time, anim8.defaults.transitionTime );\n    transition.outro       = anim8.time( transition.outro, anim8.defaults.transitionOutro );\n    transition.intro       = anim8.time( transition.intro, anim8.defaults.transitionIntro );\n    transition.easing      = anim8.easing( anim8.coalesce( transition.easing, anim8.defaults.transitionEasing ) );\n    transition.granularity = anim8.number( transition.granularity, anim8.defaults.transitionGranularity );\n    transition.lookup      = anim8.time( transition.lookup, anim8.defaults.transitionLookup );\n    \n    if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheTransitions ) )\n    {\n      anim8.transition[ originalInput ] = transition;\n    }\n\n    return transition;\n  }\n\n  return anim8.defaults.noTransition;\n};\n","\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n * \n *     [duration] x[repeat] z[sleep] ~[delay] @[offset] ![scale] [[easing][-easingType]]\n * \n * This is also a registry of options, you can add your own options that\n * can be used later with syntax like:\n * \n *     anim8.options['myOptions'] = anim8.options('1.5s x2 !2');\n * \n * So you can use 'myOptions' as the options input.\n *\n * You can also specify relative values & scaling values. If you have the \n * following options:\n *\n *     +2s x*2 ~-1s\n *\n * It will result in adding 2 seconds to the duration, repeating it twice as\n * much, and subtracting one second from the delay.\n *\n * For more information on acceptable values in options:\n *\n * **See:** {{#crossLink \"Core/anim8.duration:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.repeat:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.sleep:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.delay:method\"}}{{/crossLink}},\n *          {{#crossLink \"Core/anim8.scale:method\"}}{{/crossLink}}, and\n *          {{#crossLink \"Core/anim8.easing:method\"}}{{/crossLink}}\n * \n * @method anim8.options\n * @for Core\n * @param {Object|String|Array} options\n * @param {Boolean} [cache]\n * @return {Object}\n */\nanim8.options = (function()\n{\n  function parseProperty(input, out, parseFunction, property, propertyAdd, propertyScale)\n  {\n    var first = input.charAt( 0 );\n\n    if ( first === '*' )\n    {\n      parsed = anim8.number( input.substring( 1 ), false );\n\n      if ( parsed !== false )\n      {\n        out[ propertyScale ] = parsed;\n      }\n    }\n    else\n    {\n      if ( first === '+' || first === '-' )\n      {\n        property = propertyAdd;\n        input = input.substring( 1 );\n      }\n\n      var parsed = parseFunction( input, false )\n\n      if ( parsed !== false )\n      {\n        out[ property ] = parsed;\n      }  \n    }\n\n    return parsed;\n  }\n\n  return function(options, cache)\n  {\n    var originalInput = options;\n    var cacheIt = anim8.coalesce( cache, anim8.defaults.cacheOptions );\n\n    if ( anim8.isString( options ) )\n    {\n      if ( options in anim8.options )\n      {\n        return anim8.options[ options ];\n      }\n\n      options = options.toLowerCase().split(' ');\n    }\n\n    if ( anim8.isArray( options ) )\n    {\n      var parsed = {};\n\n      for (var i = 0; i < options.length; i++)\n      {\n        var part = options[i];\n        var first = part.charAt( 0 );\n\n        // Repeats\n        if ( first === 'x' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n        }\n        // Sleeping\n        else if ( first === 'z' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'sleep', 'sleepAdd', 'sleepScale' );\n        }\n        // Delay\n        else if ( first === '~' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'delay', 'delayAdd', 'delayScale' );\n        }\n        // Scaling\n        else if ( first === '!' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.number, 'scale', 'scaleAdd', 'scaleScale' );\n        }\n        // Offset\n        else if ( first === '@' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'offset', 'offsetAdd', 'offsetScale' );\n        }\n        else\n        {\n          // Easing?\n          var easing = anim8.easing( part, false );\n\n          if ( easing !== false )\n          {\n            parsed.easing = easing;\n          }\n\n          // Duration?\n          var duration = parseProperty( part, parsed, anim8.time, 'duration', 'durationAdd', 'durationScale' );\n\n          if ( duration === false )\n          {\n            // If not a duration, might be an alternative repeat? (doesn't start with x)\n            parseProperty( part, parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n          }\n        }\n      }\n\n      if ( anim8.isString( originalInput ) && cacheIt )\n      {\n        anim8.options[ originalInput ] = parsed;\n      }\n\n      return parsed; \n    }\n\n    if ( anim8.isObject( options ) )\n    {\n      return options;\n    }\n\n    return anim8.defaults.noOptions;\n  };\n\n})();","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {Any} e\n * @class Animator\n * @constructor\n * @extends anim8.eventize\n */\nanim8.Animator = function(e) \n{\n  this.reset( e );\n};\n\n/**\n * The event triggered after preupdate is called. Pre-update is used to run any\n * preparations on the subject before updates are made and attributes are \n * applied.\n * \n * @event preupdate\n */\n\n/**\n * The event triggered after all attrimators are updated and any new values\n * have been applied to the current values (frame) on the animator.\n * \n * @event update\n */\n\n/**\n * The event triggered after the current values (frame) on the animator are\n * applied to the subject.\n * \n * @event apply\n */\n\n/**\n * The event triggered when the given animation cycle starts (and initial \n * values are applied) for all attrimators in the cycle.\n * \n * @event cycleStart:#\n * @param {Number} cycleID\n */\n\n/**\n * The event triggered when the given animation cycle ends which occurs when the\n * last attrimator for an animation finishes or is interrupted by commands like \n * play, queue, transition, end, finish, & stop.\n * \n * @event cycleEnd:#\n * @param {Number} cycleID\n */\n\n/**\n * The event triggered when all animations on the animator have finished.\n * \n * @event finished\n * @param {Animator} animator\n */\n\n/**\n * The event triggered when an animator is deactivated which occurs when an \n * animator has finished animating and is being taken off the list of live\n * animators (anim8.animating).\n * \n * @event deactivate\n */\n\n/**\n * The event triggered after the user calls destroy on an animator.\n * \n * @event destroyed\n */\n\nanim8.fn = anim8.Animator.prototype = \n{\n\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @method reset\n   * @param {Any} subject\n   * @chainable\n   * @protected\n   */\n  reset: function(subject)\n  {\n    /**\n     * The subject which is being animated.\n     *\n     * @property {Any} subject\n     */\n    this.subject = subject;\n\n    /**\n     * The map of attrimators animating the subject.\n     *\n     * @property {AttrimatorMap} attrimators\n     */\n    this.attrimators = new anim8.AttrimatorMap();\n\n    /**\n     * The array of attrimators recently added to the animator that\n     * are ready to be started.\n     *\n     * @property {Array} attrimatorsAdded\n     * @protected\n     */\n    this.attrimatorsAdded = [];\n\n    /**\n     * The object which stores the attribute values being animated.\n     *\n     * @property {Object} frame\n     */\n    this.frame = {};\n\n    /**\n     * The object which stores the attributes last updated.\n     *\n     * @property {Object} updated\n     */\n    this.updated = {};\n\n    /**\n     * Whether or not this animator has completely finished animating it's subject.\n     *\n     * @property {Boolean} finished\n     */\n    this.finished = false;\n\n    /**\n     * The factory which created this Animator given a subject.\n     *\n     * @property {Factory} factory\n     */\n    this.factory = null;\n\n    /**\n     * Whether or not this animator is actively being updated.\n     *\n     * @property {Boolean} active\n     */\n    this.active = false;\n\n    /**\n     * The current cycle being animated. Multiple cycles can be animated at once, this is the first one.\n     *\n     * @property {Number} cycleCurrent\n     * @protected\n     */\n    this.cycleCurrent = 0;\n\n    /**\n     * The ID of the next cycle of animations to be added to this Animator.\n     *\n     * @property {Number} cycleNext\n     * @protected\n     */\n    this.cycleNext = 0;\n\n    /**\n     * The last cycle that was ended.\n     *\n     * @property {Number} cycleEnded\n     * @protected\n     */\n    this.cycleEnded = 0;\n    \n    return this;\n  },\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are \n   * placed to group them together so we know when to apply their initial value.\n   *\n   * @method newCycle\n   * @param {Attrimator|AttrimatorMap} attrimators\n   * @chainable\n   * @protected\n   */\n  newCycle: function(attrimators)\n  {\n    this.cycleNext++;\n\n    if ( attrimators instanceof anim8.AttrimatorMap )\n    {\n      this.cycleNext = attrimators.applyCycle( this.cycleNext );\n    }\n    else if ( attrimators instanceof anim8.Attrimator )\n    {\n      attrimators.cycle = this.cycleNext;\n    }\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all attrimators with the \n   * same cycle identifier and applying their initial state.\n   * \n   * @method applyCurrentCycle\n   * @chainable\n   * @protected\n   */\n  applyCurrentCycle: function()\n  {\n    var cycle = this.cycleCurrent;\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      if ( attrimator.cycle === cycle )\n      {\n        this.updated[ attr ] = (attrimator.startCycle( this.frame ) !== false) || this.updated[ attr ];\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Ends the current cycle which calls any listening functions.\n   * \n   * @method endCurrentCycle\n   * @chainable\n   * @protected\n   */\n  endCurrentCycle: function()\n  {\n    if ( this.cycleCurrent > this.cycleEnded )\n    {\n      this.cycleEnded = this.cycleCurrent;\n      this.trigger( 'cycleEnd:' + this.cycleCurrent, this.cycleCurrent ); \n    }\n  },\n\n  /**\n   * Returns the attribute descriptor given the name of the attribute.\n   * \n   * @method getAttribute\n   * @param  {String} attr\n   * @return {Object}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   *\n   * @method restore\n   * @chainable\n   */\n  restore: function()\n  { \n    return this;\n  },\n\n  /**\n   * Applies the initial state of recently added attrimators immediately.\n   * \n   * @method applyInitialState\n   * @chainable\n   */\n  applyInitialState: function()\n  {\n    var now = anim8.now();\n\n    this.preupdate( now );\n    this.update( now );\n    this.apply();\n\n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are \n   * called. This is used to make any necessary preparations before the animator\n   * is updated.\n   *\n   * @method preupdate\n   * @param {Number} now\n   * @chainable\n   */\n  preupdate: function(now)\n  {\n    // If there are attribute placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the attribute.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      for (var i = 0; i < aa.length; i++)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        if ( attr in this.subject )\n        {\n          this.frame[ attr ] = this.subject[ attr ];\n        }\n        else\n        {\n          this.setDefault( attr );\n        }\n\n        attrimator.start( now, this );     \n      }\n\n      aa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this \n   * Animator if there's no value there.\n   * \n   * @method setDefault\n   * @param {String} attr\n   * @protected\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n  \n  /**\n   * Updates all attrimators in this animator with the given time.\n   *\n   * @method update\n   * @param {Number} now\n   * @chainable\n   */\n  update: function(now) \n  {  \n    this.wasFinished = this.finished;\n    this.finished = true;\n\n    var attrimators = this.attrimators.values;\n    var minCycle = this.cycleNext;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      this.updated[ attr ] = attrimator.setTime( now, this.frame );\n\n      this.finished = this.finished && attrimator.isFinished();\n\n      minCycle = Math.min( minCycle, attrimator.cycle );\n    }\n\n    if ( this.cycleCurrent < minCycle )\n    {\n      while ( this.cycleCurrent < minCycle )\n      {\n        this.endCurrentCycle();\n        this.cycleCurrent++;\n      }\n\n      this.cycleCurrent = minCycle;\n      this.applyCurrentCycle();\n      this.trigger( 'cycleStart:' + this.cycleCurrent, this.cycleCurrent );\n    }\n\n    if ( !this.wasFinished && this.finished )\n    {\n      this.endCurrentCycle();\n    }\n\n    this.trigger('update');\n    \n    return this;\n  },\n\n  /**\n   * Places the attribute animator in this animator replacing any existing \n   * animator for the same attribute. The next time the animator is updated the \n   * attribute animator will be started. The previous (if any) attrimator is\n   * returned.\n   * \n   * @method placeAttrimator\n   * @param {Attrimator} attrimator\n   * @return {Attrimator}\n   */\n  placeAttrimator: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n    var existing = this.attrimators.get( attr );\n\n    this.attrimators.put( attr, attrimator );\n    this.attrimatorsAdded.push( attrimator );\n\n    this.finished = false;\n\n    return existing;\n  },\n\n  /**\n   * Applies all updated attributes to the subject. This method is invoked with \n   * all of the other animators at the end of the animation cycle.\n   *\n   * @method apply\n   * @chainable\n   */\n  apply: function()\n  {\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n        this.updated[ attr ] = false;\n      }\n    }\n  \n    this.trigger('apply');\n  \n    this.trimAttrimators();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished attrimators and places any queued attrimators. If the\n   * animator previously wasn't finished but now is the 'finished' event will\n   * be triggered.\n   *\n   * @method trimAttrimators\n   * @chainable\n   * @protected\n   */\n  trimAttrimators: function()\n  {\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( attrimator.isFinished() )\n      {\n        if ( attrimator.next )\n        {\n          this.placeAttrimator( attrimator.next );\n        }\n        else\n        {\n          this.attrimators.removeAt( i );\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n\n    return this;\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the \n   * attribute is not or has not animated).\n   *\n   * @method value\n   * @param {String} attr\n   * @return {Any}\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there \n   * already.\n   * \n   * @method activate\n   * @chainable\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed \n   * from the list of currently animating Animators.\n   *\n   * @method deactivate\n   * @chainable\n   */\n  deactivate: function()\n  { \n    this.trigger('deactivate', this);\n\n    return this;\n  },\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any \n   * relationship between the subject and animator. The next time an animator is\n   * generated for the subject a new animator will be created.\n   *\n   * @method destroy\n   * @chainable\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n\n    return this;\n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing attrimator for the \n   * same attribute. A spring object can be given, an instance of anim8.Spring, \n   * or a name of a saved Spring. The spring added to the animator is returned.\n   * \n   * @method spring\n   * @param {Spring|String|Object} spring\n   * @return {Spring}\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.newCycle( spring );\n    this.placeAttrimator( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Plays an animation. Attributes in the animation that are currently being\n   * animated will be stopped and replaced with the new attrimators. If `all` is\n   * true then any attrimators animating not specified in the given animation\n   * will be stopped.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   *\n   * @method play\n   * @param {Animation|String|Object} animation\n   * @param {String|Object} [options]\n   * @param {Boolean} [all=false] \n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  play: function(animation, options, all, cache)\n  {\n    var attrimatorMap = anim8.attrimatorsFor( animation, options, cache );\n    \n    this.newCycle( attrimatorMap );\n    this.playAttrimators( attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Plays a map of attrimators. Attributes in the attrimator map that are \n   * currently being animated will be stopped and replaced with the new\n   * attrimators. If \"all\" is true then any attrimators animating not specified\n   * in the given attrimator map will be stopped. This method will not activate \n   * the Animator, that has to be done manually.\n   * \n   * @method playAttrimators\n   * @param {AttrimatorMap} animatorMap\n   * @param {Boolean} [all]\n   * @chainable\n   * @protected\n   */\n  playAttrimators: function(attrimatorMap, all)\n  {\n    if ( all )\n    {\n      this.finishNotPresent( attrimatorMap, 0 );\n    }\n\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      this.placeAttrimator( attrimators[i] );\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation. The attrimators generated from the given animation \n   * will be started at the same time - as soon as all finite attrimators for\n   * the same attributes are finished. Any infinite attrimators will be \n   * automatically stopped when all queued attrimators are set to start.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method queue\n   * @param {Animation|String|Object} animation\n   * @param {String|Object} [options]\n   * @param {Boolean} [cache]\n   * @chainable\n   */\n  queue: function(animation, options, cache)\n  {\n    var attrimatorMap = anim8.attrimatorsFor( animation, options, cache );\n    \n    this.newCycle( attrimatorMap );\n    this.queueAttrimators( attrimatorMap );\n\n    return this.activate();\n  },\n\n  /**\n   * Queues a map of attrimators. The map of attrimators will be started at the\n   * same time - as soon as all finished attrimators for the same attribute are\n   * finished. Any infinite attrimators will be automatically stopped when all\n   * queued attrimators are set to start.\n   * \n   * @method queueAttrimators\n   * @param {AttrimatorMap} attrimatorMap\n   * @chainable\n   * @protected\n   */\n  queueAttrimators: function(attrimatorMap)\n  {\n    this.attrimators.queueMap( attrimatorMap, this.placeAttrimator, this );\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing attrimators into the beginning of a \n   * new animation. Several parameters can be specified in the transition object\n   * which determine how the transition is made. If \"all\" is true then any \n   * attrimators animating not specified in the given animation will be stopped.\n   *\n   * time: the total time to take to transition into a new animation.\n   * outro: time to look into the future for the current attrimator to curve to.\n   * intro: time to look into the future for the next attrimator to curve into.\n   * lookup: time to look into the future to calculate velocity which is used\n   *   for negative intros and maintaing consistent exit & entrance velocity.\n   * granularity: when greater than 2 it activates smooth transitions where the\n   *    velocity of the new & old attrimators is maintained over the transition.\n   * \n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method transition\n   * @param {String|Array|Object} transition\n   * @param {String|Object|Animation} animation\n   * @param {Object} [options]\n   * @param {Boolean} [all]\n   * @param {Boolean} [cache]\n   * @chainable\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var attrimatorMap = anim8.attrimatorsFor( animation, options, cache );\n\n    this.newCycle( attrimatorMap );\n    this.transitionAttrimators( transition, attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing attrimators into the beginning of a\n   * new animation. Several parameters can be specified in the transition object\n   * which determine how the transition is made. If \"all\" is true then any \n   * attrimators animating not specified in the given attrimator map will be \n   * stopped.\n   *\n   * time: the total time to take to transition into a new animation.\n   * outro: time to look into the future for the current attrimator to curve to.\n   * intro: time to look into the future for the next attrimator to curve into.\n   * lookup: time to look into the future to calculate velocity which is used\n   *   for negative intros and maintaing consistent exit & entrance velocity.\n   * granularity: when greater than 2 it activates smooth transitions where the\n   *    velocity of the new & old attrimators is maintained over the transition.\n   *\n   * @method transitionAttrimators\n   * @param {Object} transition\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {Boolean} [all]\n   * @chainable\n   * @protected\n   */\n  transitionAttrimators: function(transition, attrimatorMap, all)\n  {\n    // TRANSITIONING:\n    // If the animator doesn't have an attrimator for the given attribute just add the attrimator adding the total delay\n    // If the animator has an attrimator currently...\n    //   If the current attrimator or new attrimator don't have values at the desired times...\n    //      Stop the current attrimator after the total delay (adding the delay of the new attrimator as well)\n    //      Queue the new attrimator\n    //   Else\n    //      Create a path using the methods detailed above\n    // If all is true and there's an attrimator left on the animator that isn't being transitioned, stop it after the total delay.\n\n    // CREATING A TRANSITION PATH:\n    // If intro & outro are 0, use Tween\n    // If intro is 0, use Quadratic Path between current value, outro point, and first point on new path.\n    // If outro is 0, use Quadratic Path between current value, first point on new path, and intro point.\n    // If intro & outro are not 0, use Cubic Path between current value, outro point, first point on new path, and intro point.\n    // If granularity is given > 1 then compile the path, compute intro & outro velocities, and compute deltas for new \n    //    compiled path based on interpolated velocity over the path (knowing it's length and transition time)\n\n    var current = this.attrimators;\n    var attrimators = attrimatorMap.values;\n\n    // If transition all attributes, \n    if ( all )\n    {\n      this.finishNotPresent( attrimatorMap, transition.time );\n    }\n\n    // Only transition if we need to\n    if ( current.hasOverlap( attrimatorMap ) )\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var next = attrimators[ i ];\n        var attr = next.attribute;\n        var curr = current.get( attr );\n\n        if ( curr && anim8.isDefined( this.frame[ attr ] ) )\n        {\n          var attribute = this.getAttribute( attr );\n          var calc = attribute.calculator;\n\n          var p2 = next.valueAt( 0, calc.create() );\n          \n          if ( p2 !== false )\n          {\n            var transitionTime = transition.time;\n            var p0 = calc.clone( this.frame[ attr ] );            \n            var p1 = transition.outro ? curr.valueAt( curr.getElapsed() + transition.outro, calc.create() ) : false;\n            var p3 = transition.intro ? next.valueAt( transition.intro, calc.create() ) : false;\n            var path = null;\n\n            // If the intro is negative we can look into the past by looking a little bit into\n            // the future and assume the past is going in the same direction (only the opposite). \n            if ( p3 !== false && transition.intro < 0 && transition.lookup > 0 )\n            {\n              var pastLookahead = next.valueAt( transition.lookup, calc.create() );\n              var pastVelocity = calc.sub( pastLookahead, p2 );\n\n              if ( pastVelocity !== false )\n              {\n                var pastNegativeVelocity = calc.scale( pastVelocity, transition.intro / transition.lookup );\n                var past = calc.add( pastNegativeVelocity, p2 );\n                \n                p3 = p2;\n                p2 = past;\n              }\n            }\n\n            // Build a path with as many of the points as possible.\n            if ( p1 === false && p3 === false )\n            {\n              path = new anim8.Tween( attr, calc, p0, p2 );\n            }\n            else if ( p1 === false )\n            {\n              path = new anim8.PathQuadratic( attr, calc, p0, p2, p3 );\n            }\n            else if ( p3 === false )\n            {\n              path = new anim8.PathQuadratic( attr, calc, p0, p1, p2 );\n            }\n            else\n            {\n              path = new anim8.PathCubic( attr, calc, p0, p1, p2, p3 );\n            }\n            \n            // If granularity is specified we will try to make the transition \n            // smooth by maintaining exit (outro) velocity from the current attrimator\n            // and interpolating it to the entrance (intro) velocity for the \n            // attrimator we're transitioning into.\n            if ( transition.granularity > 2 && transition.lookup > 0 )\n            { \n              var outTime  = p1 === false ? curr.getElapsed() : curr.getElapsed() + transition.outro;\n              var outPoint = p1 === false ? p0 : p1;\n              var outNext  = curr.valueAt( outTime + transition.lookup, calc.create() );\n\n              var inTime   = p3 === false ? 0 : transition.intro;\n              var inPoint  = p3 === false ? p2 : p3;\n              var inNext   = next.valueAt( inTime + transition.lookup, calc.create() );\n\n              // We can only proceed if we have reference points to calculate\n              // exit & entrance velocity.\n              if ( outNext !== false && inNext !== false )\n              {\n                var outVelocity  = calc.sub( calc.clone( outNext ), outPoint );\n                var outPerMillis = calc.length( outVelocity ) / transition.lookup;\n\n                var inVelocity   = calc.sub( calc.clone( inNext ), inPoint );\n                var inPerMillis  = calc.length( inVelocity ) / transition.lookup;\n\n                var compiled = new anim8.PathCompiled( attr, path, transition.granularity );\n                var points = compiled.points;\n                var lastPoint = points.length - 1;\n                var totalDistance = 0;\n                var distances = [];\n\n                for (var k = 0; k < lastPoint; k++)\n                {\n                  distances[ k ] = totalDistance;\n                  totalDistance += calc.distance( points[ k ], points[ k + 1 ] );\n                }\n                distances[ lastPoint ] = totalDistance;\n\n                if ( !isNaN( totalDistance ) )\n                {\n                  var requiredTime = 2.0 * totalDistance / (outPerMillis + inPerMillis);\n                  var acceleration = 0.5 * (inPerMillis - outPerMillis) / requiredTime;\n                  var timeDelta = requiredTime / lastPoint;\n                  var deltas = [];\n\n                  for (var k = 0; k < lastPoint; k++)\n                  { \n                    var time = k * timeDelta;\n                    var position = outPerMillis * time + acceleration * time * time;\n\n                    deltas[ k ] = position / totalDistance;\n                  }\n                  deltas[ lastPoint ] = 1.0;\n\n                  path = new anim8.PathDelta( attr, calc, points, deltas );\n                  transitionTime = requiredTime;\n                }\n              }\n            }\n\n            var transitionEvent = new anim8.Event( attr, path, transitionTime, transition.easing, 0, 0, 0, 1 );\n          \n            transitionEvent.next = next;\n            transitionEvent.cycle = next.cycle;\n\n            next.offset = transition.intro;\n\n            this.placeAttrimator( transitionEvent );\n          }\n          else\n          {\n            curr.stopIn( transition.time + next.delay );\n            curr.queue( next );\n            next.delay = 0;\n          }\n        }\n        else\n        {\n          next.delay += transition.time;\n          \n          this.placeAttrimator( next );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        this.placeAttrimator( attrimators[ i ] );\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Finishes any attrimators on this animator that are not present in the given\n   * map of attrimators. Optionally a delay in stopping them can be given.\n   * \n   * @method finishNotPresent\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {Number} [delay=0]\n   * @chainable\n   * @protected\n   */\n  finishNotPresent: function(attrimatorMap, delay)\n  {\n    var attrimators = this.attrimators.values;\n    var stopIn = delay || 0;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( !attrimatorMap.has( attrimator.attribute ) )\n      {\n        attrimator.stopIn( stopIn );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenTo\n   * @param {String} attr\n   * @param {T} target\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenTo: function(attr, target, options, cache)\n  {\n    var options   = anim8.options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens multiple attributes to target values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenManyTo\n   * @param {Object} targets\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenManyTo: function(targets, options, cache)\n  {\n    var options = anim8.options( options, cache );\n\n    this.newCycle();\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n\n  /**\n   * Tweens a single attribute from a starting value to the current value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenFrom\n   * @param {String} attr\n   * @param {T} starting\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenFrom: function(attr, starting, options, cache)\n  {\n    var options   = anim8.options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starting );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, anim8.computed.current );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens multiple attributes from starting values to the current values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenManyFrom\n   * @param {Object} startings\n   * @param {String|Array|Object} [options]\n   * @chainable\n   */\n  tweenManyFrom: function(startings, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in startings )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( startings[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, anim8.computed.current );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tween\n   * @param {String} attr\n   * @param {T} starts\n   * @param {T} ends\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tween: function(attr, starts, ends, options, cache)\n  {\n    var options   = anim8.options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenMany\n   * @param {Object} starts\n   * @param {Object} ends\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  tweenMany: function(starts, ends, options, cache)\n  {\n    var options = anim8.options( options, cache );\n\n    this.newCycle();\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n\n  /**\n   * Moves an attribute relative to its current value.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method move\n   * @param {String} attr\n   * @param {T} amount\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  move: function(attr, amount, options, cache)\n  {\n    var options   = anim8.options( options, cache );\n    var attribute = this.getAttribute( attr );\n    var relative  = attribute.parse( amount );\n    var start     = anim8.computed.current;\n    var end       = anim8.isComputed( relative ) ? relative : anim8.computed.relative( relative );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n\n  /**\n   * Moves multiple attribute relative to their current value.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method moveMany\n   * @param {Object} amounts\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  moveMany: function(amounts, options, cache)\n  {\n    var options = anim8.options( options, cache );\n\n    this.newCycle();\n\n    for ( var attr in amounts )\n    {\n      var attribute = this.getAttribute( attr );\n      var relative  = attribute.parse( amounts[ attr ] );\n      var start     = anim8.computed.current;\n      var end       = anim8.isComputed( relative ) ? relative : anim8.computed.relative( relative );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = anim8.Event.fromOptions( attr, path, options );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute \n   * when invoked. The returned function can be given as values for paths & \n   * springs that are evaluated every frame.\n   * \n   * @method ref\n   * @param {String} attr\n   * @return {Function}\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n    \n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n      \n      request[ attr ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n      \n      return attribute.defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method follow\n   * @param {String} attr\n   * @param {Path|Object|String} path\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  follow: function(attr, path, options, cache)\n  {\n    var options = anim8.options( options, cache );\n    var path    = anim8.path( path );\n    var event   = anim8.Event.fromOptions( attr, path, options );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that iterates over given attributes. If callback is specified\n   * it is invoked for each attrimator in this animator for the given \n   * attributes. If no callback is given an array of anim8.Attrimators is \n   * returned for each attrimator in this animator for the given attributes.\n   *\n   * @method attrimatorsFor\n   * @param {String|Array} attributes\n   * @param {Function} callback\n   * @return {this|Array}\n   */\n  attrimatorsFor: function(attributes, callback)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      attributes = attributes.split( ' ' );\n    }\n   \n    var attrimatorMap = this.attrimators; \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n    if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        var attrimator = attrimatorMap.get( attr );\n        \n        if ( attrimator )\n        {\n          if ( resulting )\n          {\n            results.push( attrimator );\n          }\n          else\n          {\n            callback.call( this, attrimator, attr );\n          }\n        }\n      }\n    }\n    else\n    {\n      var attrimators = attrimatorMap.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n\n        if ( resulting )\n        {\n          results.push( attrimator );\n        }\n        else\n        {\n          callback.call( this, attrimator, attrimator.attribute );\n        }\n      }\n    }\n    \n    return resulting ? results : this;\n  },\n  \n  /**\n   * Stops all attributes for the specified attributes. Attribute names can be \n   * given as an array or a space separated string. If no attributes are given \n   * all attributes are assumed.\n   *\n   * @method stop\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  stop: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator, attr) \n    {\n      this.attrimators.remove( attr );\n    });\n  },\n  \n  /**\n   * Ends all attributes for the specified attributes. If attributes are queued \n   * the last value of the last attribute is applied to this Animator before \n   * being completely removed. Attribute names can be given as an array or a \n   * space separated string. If no attributes are given all attributes are \n   * assumed.\n   *\n   * @method end\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  end: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator) \n    {\n      while (attrimator.next)\n      {\n        attrimator = attrimator.next;\n      }\n      \n      attrimator.finish( this.frame );\n    });\n  },\n  \n  /**\n   * Finishes all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @method finish\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  finish: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.finish( this.frame );\n    });\n  },\n\n  /**\n   * Calls nopeat on all current attrimators for the specified attributes.\n   * Attribute names can be given as an array or a space separated string. If\n   * no attributes are given all attributes are assumed. \n   *\n   * **See:** {{#crossLink \"Attrimator/nopeat:method\"}}Attrimator.nopeat{{/crossLink}}\n   * \n   * @method nopeat\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  nopeat: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.nopeat();\n    });\n  },\n  \n  /**\n   * Pauses all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @method pause\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  pause: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.pause();\n    });\n  },\n  \n  /**\n   * Resumes all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @method resume\n   * @param {String|Array} [attributes]\n   * @chainable\n   */\n  resume: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.resume();\n    });\n  },\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @method set\n   * @param {Object} attributes\n   * @chainable\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n      this.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attributes. \n   * Unsetting involves removing all attrimators and the current value in the \n   * frame,\n   * \n   * @method unset\n   * @param {String|Array|Object} attributes\n   * @chainable\n   */\n  unset: function(attributes)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      this.attrimators.remove( attributes );\n      \n      delete this.frame[ attributes ];\n    }\n    else if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        this.unset( attributes[ i ] );\n      }\n    }\n    else if ( anim8.isObject( attributes ) )\n    {\n      for (var attr in attributes)\n      {\n        this.unset( attr );\n      }\n    }\n\n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The \n   * argument must be an object where the key is the name of an attribute.\n   *\n   * @method get\n   * @param {Object} attributes\n   * @return {Object}\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns the amount of finite time remaining before the animator is done\n   * animating. Attrimators that don't have a known end time are not included.\n   * If there are no attrimators with end times then zero is returned.\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    return this.attrimators.timeRemaining();\n  },\n  \n  /**\n   * Returns true if there are any attrimators on this Animator.\n   *\n   * @method hasAttrimators\n   * @return {Boolean}\n   */\n  hasAttrimators: function()\n  {\n    return this.attrimators.size() > 0;\n  },\n  \n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @method getSubject\n   * @param {Function} [wrapper]\n   * @return {Any}\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator \n   * if none is given. This is particularly useful for having a function be \n   * called on deferred statements.\n   * \n   * @method invoke\n   * @param {Function} func\n   * @param {Object} [context]\n   * @param {Array} [args]\n   * @chainable\n   */\n  invoke: function(func, context, args)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, args || [] );\n    }\n\n    return this;\n  },\n  \n  /**\n   * Defers the method calls following this one to when the given event type \n   * (on or once) and event. To return this animator you need to call undefer() \n   * as many times as you called defer().\n   *\n   * @method defer\n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} [callback]\n   * @return {DeferAnimator}\n   */\n  defer: function(eventType, event, callback)\n  {\n    return new anim8.DeferAnimator( this, this, eventType, event, callback );\n  },\n\n  /**\n   * Invokes the given callback when the last animation that was \n   * played/queued/transitioned starts.\n   * \n   * @method onCycleStart\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  onCycleStart: function(callback, context)\n  {\n    this.once( 'cycleStart:' + this.cycleNext, callback, context );\n\n    return this;\n  },\n\n  /**\n   * Invokes the given callback when the last animation that was\n   * played/queued/transitioned ends.\n   * \n   * @method onCycleEnd\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  onCycleEnd: function(callback, context)\n  {\n    this.once( 'cycleEnd:' + this.cycleNext, callback, context );\n\n    return this;\n  }\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n *\n * @class DeferAnimator\n * @constructor\n * @extends Defer\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n  this.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  /**\n   * Defers the {{#crossLink \"Animator/restore:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'restore', \n\n  /**\n   * Defers the {{#crossLink \"Animator/placeAttrimator:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method placeAttrimator\n   */\n  'placeAttrimator', \n\n  /**\n   * Defers the {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method applyInitialState\n   */\n  'applyInitialState',\n\n  /**\n   * Defers the {{#crossLink \"Animator/preupdate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method preupdate\n   */\n  'preupdate', \n\n  /**\n   * Defers the {{#crossLink \"Animator/update:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method update\n   */\n  'update', \n\n  /**\n   * Defers the {{#crossLink \"Animator/apply:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method apply\n   */\n  'apply', \n\n  /**\n   * Defers the {{#crossLink \"Animator/trimAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   * @protected\n   */\n  'trimAttrimators',\n\n  /**\n   * Defers the {{#crossLink \"Animator/activate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'activate', \n\n  /**\n   * Defers the {{#crossLink \"Animator/deactivate:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'deactivate', \n\n  /**\n   * Defers the {{#crossLink \"Animator/destroy:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'destroy', \n\n  /**\n   * Defers the {{#crossLink \"Animator/spring:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'spring', \n\n  /**\n   * Defers the {{#crossLink \"Animator/play:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   */\n  'play', \n\n  /**\n   * Defers the {{#crossLink \"Animator/playAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method restore\n   * @protected\n   */\n  'playAttrimators', \n\n  /**\n   * Defers the {{#crossLink \"Animator/queue:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method queue\n   */\n  'queue',\n\n  /**\n   * Defers the {{#crossLink \"Animator/queueAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method queueAttrimators\n   * @protected\n   */\n  'queueAttrimators', \n\n  /**\n   * Defers the {{#crossLink \"Animator/transition:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method transition\n   */\n  'transition', \n\n  /**\n   * Defers the {{#crossLink \"Animator/transitionAttrimators:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method transitionAttrimators\n   * @protected\n   */\n  'transitionAttrimators', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tween:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tween\n   */\n  'tween', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenTo:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenTo\n   */\n  'tweenTo', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenMany:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenMany\n   */\n  'tweenMany', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenManyTo:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenManyTo\n   */\n  'tweenManyTo', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenFrom:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenFrom\n   */\n  'tweenFrom', \n\n  /**\n   * Defers the {{#crossLink \"Animator/tweenManyFrom:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method tweenManyFrom\n   */\n  'tweenManyFrom',\n\n  /**\n   * Defers the {{#crossLink \"Animator/move:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method move\n   */\n  'move', \n\n  /**\n   * Defers the {{#crossLink \"Animator/moveMany:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method moveMany\n   */\n  'moveMany',\n\n  /**\n   * Defers the {{#crossLink \"Animator/follow:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method follow\n   */\n  'follow', \n\n  /**\n   * Defers the {{#crossLink \"Animator/stop:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method stop\n   */\n  'stop', \n\n  /**\n   * Defers the {{#crossLink \"Animator/end:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method end\n   */\n  'end', \n\n  /**\n   * Defers the {{#crossLink \"Animator/finish:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method finish\n   */\n  'finish', \n\n  /**\n   * Defers the {{#crossLink \"Animator/nopeat:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method nopeat\n   */\n  'nopeat', \n\n  /**\n   * Defers the {{#crossLink \"Animator/pause:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method pause\n   */\n  'pause', \n\n  /**\n   * Defers the {{#crossLink \"Animator/resume:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method resume\n   */\n  'resume',\n\n  /**\n   * Defers the {{#crossLink \"Animator/set:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method set\n   */\n  'set', \n\n  /**\n   * Defers the {{#crossLink \"Animator/unset:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method unset\n   */\n  'unset', \n\n  /**\n   * Defers the {{#crossLink \"Animator/get:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method get\n   */\n  'get', \n\n  /**\n   * Defers the {{#crossLink \"Animator/invoke:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method invoke\n   */\n  'invoke', \n\n  /**\n   * Defers the {{#crossLink \"Animator/onCycleStart:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method onCycleStart\n   */\n  'onCycleStart', \n\n  /**\n   * Defers the {{#crossLink \"Animator/onCycleEnd:method\"}}{{/crossLink}} method until the deferred event has occurred.\n   *\n   * @method onCycleEnd\n   */\n  'onCycleEnd'\n]);\n","\n/**\n * Instantiates an Array of {{#crossLink \"Animator\"}}{{/crossLink}} instances.\n * \n * @param {Array} [input]\n * @class Animators\n * @constructor\n * @extends {Array}\n */\nanim8.Animators = function(input)\n{\n  this.$ = [];\n\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8s.fn = anim8.Animators.prototype = \n{\n\n  /**\n   * Adds an animator to this set of animators.\n   * \n   * @param  {Animator} animator\n   * @chainable\n   */\n  push: function(animator)\n  {\n    this.$.push( animator );\n\n    return this;\n  },\n\n  /**\n   * Returns the number of animators in this set.\n   * \n   * @return {Number}\n   */\n  length: function()\n  {\n    return this.$.length;\n  }, \n\n  /**\n   * Returns the animator at the given index.\n   * \n   * @param  {Number} index\n   * @return {Animator}\n   */\n  at: function(index)\n  {\n    return this.$[ index ];\n  },\n\n  /**\n   * Invokes a callback for each element in the array.\n   *\n   * @method each\n   * @param {Function} iterator\n   * @param {Object} context\n   * @chainable\n   */\n  each: function(iterator, context) \n  {\n    var array = this.$;\n\n    for (var i = 0; i < array.length; i++) \n    {\n      if ( iterator.call( context || array[i], array[i], i ) === false ) \n      {\n        break;\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @method fill\n   * @param {Array} animators\n   * @chainable\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if a true value is\n   * returned  that element is removed from the array.\n   *\n   * @method filter\n   * @param {Function} filterer\n   * @chainable\n   */\n  filter: function(filterer)\n  {  \n    var array = this.$;\n    var alive = 0;\n    \n    for (var i = 0; i < array.length; i++)\n    {\n      var remove = filterer( array[i] );\n      \n      if ( !remove )\n      {\n        array[alive++] = array[i];\n      }\n    }\n    \n    array.length = alive;\n    \n    return this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a \n   * wrapper function before it's returned.\n   *\n   * @method getSubjects\n   * @param {Function} [wrapper]\n   * @return {Any}\n   */\n  getSubjects: function(wrapper)\n  {\n    var array = this.$;\n    var subjects = [];\n\n    for (var i = 0; i < array.length; i++)\n    {\n      subjects.push( array[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   *\n   * @method first\n   * @return {Animator}\n   */\n  first: function()\n  {\n    return this.$[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   *\n   * @method reverse\n   * @chainable\n   */\n  reverse: function()\n  {\n    var array = this.$;\n    var last = array.length - 1;\n    var mid = Math.floor( array.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = array[ i ];\n      var e1 = array[ last - i ];\n\n      array[ i ] = e1;\n      array[ last - i ] = e0;\n    }\n\n    return this;\n  },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   *\n   * @method activate\n   * @chainable\n   */\n  activate: function()\n  {\n    var array = this.$;\n\n    for (var i = 0; i < array.length; i++)\n    {\n      var animator = array[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Creates a sequence of events separated by a delay.\n   *\n   * @method sequence\n   * @param {String|Number} delay\n   * @param {String|Array|Function} easing\n   * @return {Sequence}\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * Returns the maximum time remaining out of all Animators in the array.\n   *\n   * **See:** {{#crossLink \"Animating/timeRemaining:method\"}}{{/crossLink}}\n   *\n   * @method timeRemaining\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    var array = this.$;\n    var maxRemaining = 0;\n\n    for (var i = 0; i < array.length; i++)\n    {\n      maxRemaining = Math.max( maxRemaining, array[ i ].timeRemaining() );\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/preupdate:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method preupdate\n   * @chainable\n   */\n  preupdate: function(now, max)\n  {\n    var array = this.$;\n    var length = max || array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n      array[ i ].preupdate( now );\n    }\n\n    return this;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/update:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method update\n   * @chainable\n   */\n  update: function(now, max)\n  {\n    var array = this.$;\n    var length = max || array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n      array[ i ].update( now );\n    }\n\n    return this;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/apply:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method apply\n   * @chainable\n   */\n  apply: function(max)\n  {\n    var array = this.$;\n    var length = max || array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n      array[ i ].apply();\n    }\n\n    return this;\n  },\n\n  /**\n   * Handles an animator if it's finished, and returns false if the animator can \n   * be removed from the set of animators.\n   *\n   * @method handleFinished\n   * @param {Animator} animator\n   * @return {Boolean}\n   */\n  handleFinished: function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  },\n\n  /**\n   * Calls {{#crossLink \"Animator/restore:method\"}}{{/crossLink}} on each \n   * animator in the array and returns this.\n   * \n   * @method restore\n   * @chainable\n   */\n  restore               : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/placeAttrimator:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method placeAttrimator\n   * @chainable\n   */\n  placeAttrimator       : anim8.delegate( 'placeAttrimator', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/applyInitialState:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method applyInitialState\n   * @chainable\n   */\n  applyInitialState     : anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/trimAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method trimAttrimators\n   * @chainable\n   */\n  trimAttrimators       : anim8.delegate( 'trimAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/activate:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method activate\n   * @chainable\n   */\n  activate              : anim8.delegate( 'activate', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/deactivate:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method deactivate\n   * @chainable\n   */\n  deactivate            : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/destroy:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method destroy\n   * @chainable\n   */\n  destroy               : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/spring:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method spring\n   * @chainable\n   */\n  spring                : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/play:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method play\n   * @chainable\n   */\n  play                  : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/playAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method playAttrimators\n   * @chainable\n   * @protected\n   */\n  playAttrimators       : anim8.delegate( 'playAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/queue:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method queue\n   * @chainable\n   */\n  queue                 : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/queueAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method queueAttrimators\n   * @chainable\n   * @protected\n   */\n  queueAttrimators      : anim8.delegate( 'queueAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/transition:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method transition\n   * @chainable\n   */\n  transition            : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/transitionAttrimators:method\"}}{{/crossLink}} \n   * on each animator in the array and returns this.\n   * \n   * @method transitionAttrimators\n   * @chainable\n   * @protected\n   */\n  transitionAttrimators : anim8.delegate( 'transitionAttrimators', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tween:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tween\n   * @chainable\n   */\n  tween                 : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenTo:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenTo\n   * @chainable\n   */\n  tweenTo               : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenFrom:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenFrom\n   * @chainable\n   */\n  tweenFrom             : anim8.delegate( 'tweenFrom', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenMany:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenMany\n   * @chainable\n   */\n  tweenMany             : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenManyTo:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenManyTo\n   * @chainable\n   */\n  tweenManyTo           : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/tweenManyFrom:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method tweenManyFrom\n   * @chainable\n   */\n  tweenManyFrom         : anim8.delegate( 'tweenManyFrom', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/move:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method move\n   * @chainable\n   */\n  move                  : anim8.delegate( 'move', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/moveMany:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method moveMany\n   * @chainable\n   */\n  moveMany              : anim8.delegate( 'moveMany', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/follow:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method follow\n   * @chainable\n   */\n  follow                : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/attrimatorsFor:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method attrimatorsFor\n   * @chainable\n   */\n  attrimatorsFor        : anim8.delegate( 'attrimatorsFor', anim8.delegate.RETURN_RESULTS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/stop:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method stop\n   * @chainable\n   */\n  stop                  : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/end:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method end\n   * @chainable\n   */\n  end                   : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/finish:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method finish\n   * @chainable\n   */\n  finish                : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n\n/**\n   * Calls {{#crossLink \"Animator/nopeat:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method nopeat\n   * @chainable\n   */\n  nopeat                : anim8.delegate( 'nopeat', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/pause:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method pause\n   * @chainable\n   */\n  pause                 : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/resume:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method resume\n   * @chainable\n   */\n  resume                : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/set:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method set\n   * @chainable\n   */\n  set                   : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/unset:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method unset\n   * @chainable\n   */\n  unset                 : anim8.delegate( 'unset', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/get:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method get\n   * @chainable\n   */\n  get                   : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n\n  /**\n   * Calls {{#crossLink \"Animator/hasAttrimators:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method hasAttrimators\n   * @chainable\n   */\n  hasAttrimators        : anim8.delegate( 'hasAttrimators', anim8.delegate.RETURN_TRUE ),\n\n  /**\n   * Calls {{#crossLink \"Animator/invoke:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method invoke\n   * @chainable\n   */\n  invoke                : anim8.delegate( 'invoke', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/onCycleStart:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method onCycleStart\n   * @chainable\n   */\n  onCycleStart          : anim8.delegate( 'onCycleStart', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/onCycleEnd:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method onCycleEnd\n   * @chainable\n   */\n  onCycleEnd            : anim8.delegate( 'onCycleEnd', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/on:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method on\n   * @chainable\n   */\n  on                    : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/once:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method once\n   * @chainable\n   */\n  once                  : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/off:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method off\n   * @chainable\n   */\n  off                   : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n\n  /**\n   * Calls {{#crossLink \"Animator/trigger:method\"}}{{/crossLink}} on \n   * each animator in the array and returns this.\n   * \n   * @method trigger\n   * @chainable\n   */\n  trigger               : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n};\n","\n/**\n * @class Core\n */\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n *\n * @property {Boolean} anim8.running\n * @readOnly\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n *\n * @property {Boolean} anim8.live\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n *\n * @property {Animators} anim8.animating\n * @readOnly\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @method anim8.requestRun\n * @param {Function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( anim8.defaults.pauseTime, anim8.defaults.frameRate - (now - lastTime) );\n      var id = window.setTimeout( function() { callback( now + timeToCall ); }, timeToCall );\n      lastTime = now + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list of animating if it isn't there already. If the \n * animation loop isn't currently running it's started.\n *\n * @method anim8.add\n * @param {Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation loop cycle which consists of four operations:\n * \n * 1. Call preupdate on all Animators\n * 2. Call update on all Animators\n * 3. Call apply on all Animators\n * 4. Remove finished Animators\n * \n * When there are no more animating the loop cycle is stopped.\n *\n * @method anim8.run\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  var animating = anim8.animating;\n  var active = animating.length();\n\n \n  // notify animators that we're about to update\n  animating.preupdate( now, active );\n  \n  // update animating based on the current time\n  animating.update( now, active );\n  \n  // apply the attributes calculated\n  animating.apply( active );\n  \n  // if the animator is done remove it\n  animating.filter( animating.handleFinished );\n  \n  // The loop has ended!  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( animating.length() || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Pauses all animators.\n *\n * **See:** {{#crossLink \"Animator/pause:method\"}}{{/crossLink}}\n *\n * @method anim8.pause\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.pause = function(attributes)\n{\n  anim8.animating.pause( attributes );\n\n  return anim8;\n};\n\n/**\n * Resumes all animators.\n * \n * **See:** {{#crossLink \"Animator/resume:method\"}}{{/crossLink}}\n *\n * @method anim8.resume\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.resume = function(attributes)\n{\n  anim8.animating.resume( attributes );\n\n  return anim8;\n};\n\n/**\n * Stops all animators.\n * \n * **See:** {{#crossLink \"Animator/stop:method\"}}{{/crossLink}}\n * \n * @method anim8.stop\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.stop = function(attributes)\n{\n  anim8.animating.stop( attributes );\n\n  return anim8;\n};\n\n/**\n * Ends all animators.\n * \n * **See:** {{#crossLink \"Animator/end:method\"}}{{/crossLink}}\n *\n * @method anim8.end\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.end = function(attributes)\n{\n  anim8.animating.end( attributes );\n\n  return anim8;\n};\n\n/**\n * Finishes all animators.\n * \n * **See:** {{#crossLink \"Animator/finish:method\"}}{{/crossLink}}\n *\n * @method anim8.finish\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.finish = function(attributes)\n{\n  anim8.animating.finish( attributes );\n\n  return anim8;\n};\n\n/**\n * Interrupts all animators from repeating currently running animations.\n * \n * **See:** {{#crossLink \"Animator/nopeat:method\"}}{{/crossLink}}\n *\n * @method anim8.nopeat\n * @param {String|Array} attributes\n * @return {anim8}\n */\nanim8.nopeat = function(attributes)\n{\n  anim8.animating.nopeat( attributes );\n\n  return anim8;\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * Creates a seqeuence for the given animators offseting animations be the given\n * delay and easing.\n * \n * @param {Animators} animators\n * @param {String|Number} delay\n * @param {String|Array|Function} easing\n * @class Sequence\n * @constructor\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  /**\n   * The animators to play a sequence of animations against.\n   * \n   * @property {Animators} animators\n   */\n  this.animators = animators;\n\n  /**\n   * The delay in milliseconds between animations.\n   * \n   * @property {Number} delay\n   */\n  this.delay = anim8.delay( delay );\n\n  /**\n   * The easing function to use to calculate the delay offset for an animation.\n   * \n   * @property {Function} easing\n   */\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * Returns the maximum delay for delaying generated attrimators.\n   *\n   * @method maxDelay\n   * @return {Number}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length() - 1);\n  },\n  \n  /**\n   * Creates an AttrimatorMap with the given options for the animator at the \n   * given index.\n   *\n   * @method createAttrimators\n   * @param {Animation} animation\n   * @param {Object} options\n   * @param {Number} i\n   * @return {AttrimatorMap}\n   */\n  createAttrimators: function(template, i)\n  {\n    var attrimatorMap = template.clone();\n    var attrimators = attrimatorMap.values;\n    var delta = i / (this.animators.length() - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = attrimators.length - 1; k >= 0; k--)\n    {\n      attrimators[ k ].delay += delayOffset;\n    }\n    \n    return attrimatorMap;\n  },\n\n  /**\n   * Reverses the sequence by reversing the underlying array of animators.\n   *\n   * @method reverse\n   * @chainable\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * Plays the animation across the animators in this sequence.\n   *\n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/play:method\"}}Animator.play{{/crossLink}}\n   *\n   * @method play \n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [all=false]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  play: function(animation, options, all, cache)\n  {\n    var template = anim8.attrimatorsFor( animation, options, cache );\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( template, i );\n      \n      animator.newCycle( attrimators );\n      animator.playAttrimators( attrimators, all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * Queues the animation across the animators in this sequence.\n   * \n   * **See:** {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/queue:method\"}}Animator.queue{{/crossLink}}\n   *\n   * @method queue\n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  queue: function(animation, options, cache)\n  {\n    var template = anim8.attrimatorsFor( animation, options, cache );\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var attrimatorMap = sequence.createAttrimators( template, i );\n      var attrimators = attrimatorMap.values;\n\n      for (var k = attrimators.length - 1; k >= 0; k--)\n      {\n        attrimators[ k ].delay += delayOffset;\n      }\n      \n      animator.newCycle( attrimatorMap );\n      animator.queueAttrimators( attrimatorMap );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * Transitions into the animation across the animators in this sequence.\n   * \n   * **See:** {{#crossLink \"Core/anim8.transition:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}},\n   *          {{#crossLink \"Animator/transition:method\"}}Animator.transition{{/crossLink}}\n   * \n   * @method transition\n   * @param {String|Array|Object} transition\n   * @param {Animation|String|Object} animation\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [all=false]\n   * @param {Boolean} [cache=false]\n   * @chainable\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var template = anim8.attrimatorsFor( animation, options, cache );\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( template, i );\n\n      animator.newCycle( attrimators );\n      animator.transitionAttrimators( transition, attrimators, all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * Activates all animators in this sequence and returns this.\n   *\n   * **See:** {{#crossLink \"Animator/activate:method\"}}Animator.activate{{/crossLink}}\n   * \n   * @method add\n   * @chainable\n   */\n  add: function()\n  {\n    this.animators.activate();\n    \n    return this;\n  }\n  \n};","\n/**\n * A collection of {{#crossLink \"Parser\"}}parsers{{/crossLink}} which takes \n * animation definitions (an Object passed to {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}})\n * and generates {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}}.\n * \n * @class anim8.parser\n */\n\n/**\n * Returns a parser based on the input. If the input is an instance of Parser\n * it's returned immediately. If the input is a string the parser with that name \n * is returned. If no parser could be determined then false is returned.\n *\n * **See:** {{#crossLink \"anim8.parser\"}}{{/crossLink}}\n * \n * @method anim8.parser\n * @for Core\n * @param {Parser|String} parser\n * @return {Parser|false}\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n  if ( anim8.isString( parser ) && parser in anim8.parser )\n  {\n    return anim8.parser[ parser ];\n  }\n  \n  return false;\n};\n\n\n/**\n * Instantiates a new Parser. Parsers are responsible for taking animation\n * definitions (an Object passed to {{#crossLink \"Core/anim8.animation:method\"}}{{/crossLink}})\n * and generating & placing {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}} \n * onto an {{#crossLink \"AttrimatorMap\"}}{{/crossLink}}.\n *\n * Parsers are added to the {{#crossLink \"anim8.parser\"}}{{/crossLink}} object\n * by a key and when that key exists in an animation definition, the animation\n * definition is passed to the {{#crossLink \"Parser/parse:method\"}}{{/crossLink}}\n * to generate {{#crossLink \"Attrimator\"}}Attrimators{{/crossLink}}.\n *\n * @class Parser\n * @constructor\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.ID = 0;\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimatorMap to the given array.\n   *\n   * @method parse\n   * @param {Object} animation\n   * @param {Object} options\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @method merge\n   * @param {Object} animation\n   * @param {Object} newOptions\n   * @param {Object} oldOptions\n   * @param {AttrimatorMap} attrimatorMap\n   * @param {ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  { \n    var parser = this;\n    var factory = anim8.factory( animation.factory );\n\n    attrimatorMap.iterate(function(e)\n    {      \n      if ( e.getParser() === parser )\n      {\n        parser.mergeAttrimator( e, e.attribute, helper, factory );\n      }\n    });\n  },\n\n  /**\n   * Merges new options contained in the helper into the given attrimator.\n   *\n   * @method mergeAttrimator\n   * @param {Attrimator} e\n   * @param {String} attr\n   * @param {ParserHelper} helper\n   * @param {Factory} factory\n   */\n  mergeAttrimator: function( e, attr, helper, factory )\n  {\n    e.easing    = helper.mergeEasing( attr, e.easing );\n    e.repeat    = helper.mergeRepeat( attr, e.repeat );\n    e.delay     = helper.mergeDelay( attr, e.delay );\n    e.sleep     = helper.mergeSleep( attr, e.sleep );\n    e.duration  = helper.mergeDuration( attr, e.duration );\n    e.offset    = helper.mergeOffset( attr, e.offset );\n    e.scale     = helper.mergeScale( attr, e.scale );\n    e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n  }\n};\n\n\n/**\n * Instantiates a new instance of Parser Helper.\n *\n * @param {Object} input\n * @param {Object} oldOptions\n * @param {Object} newOptions\n * @class ParserHelper\n * @constructor\n */\nanim8.ParserHelper = function( input, oldOptions, newOptions )\n{\n  this.input = input;\n  this.oldOptions = oldOptions || {};\n  this.newOptions = newOptions || {};\n\n  this.prepareSpecifics( 'easings' );\n  this.prepareSpecifics( 'repeats' );\n  this.prepareSpecifics( 'delays' );\n  this.prepareSpecifics( 'sleeps' );\n  this.prepareSpecifics( 'durations' );\n  this.prepareSpecifics( 'offsets' );\n  this.prepareSpecifics( 'scales' );\n  this.prepareSpecifics( 'scaleBases' );\n};\n\nanim8.ParserHelper.prototype = \n{\n\n  /**\n   * If an object with the given name doesn't exist on the input it's created.\n   *\n   * @method prepareSpecifics\n   * @param {String} specifics\n   */\n  prepareSpecifics: function(specifics)\n  {\n    if ( !anim8.isObject( this.input[ specifics ] ) )\n    {\n      this.input[ specifics ] = {};\n    }\n  },\n\n  /* PARSING */\n\n  /**\n   * Parses an easing from the input.\n   *\n   * @method parseEasing\n   * @param  {String} attr\n   * @return {String|Function|Array}\n   */\n  parseEasing: function(attr)\n  {\n    return this.parseFirst( attr, 'easing', 'easings' );\n  },\n\n  /**\n   * Parses repeats from the input.\n   * \n   * @method parseRepeat\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseRepeat: function(attr)\n  {\n    return this.parseNumber( attr, anim8.repeat, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * Parses delay from the input.\n   * \n   * @method parseDelay\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseDelay: function(attr)\n  {\n    return this.parseNumber( attr, anim8.delay, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * Parses sleep from the input.\n   * \n   * @method parseSleep\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseSleep: function(attr)\n  {\n    return this.parseNumber( attr, anim8.sleep, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'sleeps' );\n  },\n\n  /**\n   * Parses duration from the input.\n   * \n   * @method parseDuration\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseDuration: function(attr)\n  {\n    return this.parseNumber( attr, anim8.duration, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * Parses offset from the input.\n   * \n   * @method parseOffset\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseOffset: function(attr)\n  {\n    return this.parseNumber( attr, anim8.offset, anim8.time, 'offset', 'offsetAdd', 'offsetScale', 'offsets' );\n  },\n\n  /**\n   * Parses scale from the input.\n   * \n   * @method parseScale\n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseScale: function(attr)\n  {\n    return this.parseNumber( attr, anim8.scale, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * Parses scale base from the input.\n   * \n   * @method parseScaleBase\n   * @param  {String} attr\n   * @return {Any}\n   */\n  parseScaleBase: function(attr)\n  {\n    return this.parseFirst( attr, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * Parses a value from the input given the attribute, option, and specific.\n   * \n   * @method parseFirst\n   * @param {String} attr\n   * @param {String} option\n   * @param {String} specifics\n   * @return {Any}\n   */\n  parseFirst: function(attr, option, specifics)\n  {\n    return anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n  },\n\n  /**\n   * Parses an event from the input given a path & parser for the event.\n   * \n   * @method parseEvent\n   * @param {String} attr\n   * @param {Path} path\n   * @param {Parser} parser\n   * @param {Boolean} hasInitialState\n   * @return {Event}\n   */\n  parseEvent: function(attr, path, parser, hasInitialState)\n  {\n    var duration   = this.parseDuration( attr );\n    var easing     = this.parseEasing( attr );\n    var delay      = this.parseDelay( attr );\n    var sleep      = this.parseSleep( attr );\n    var repeat     = this.parseRepeat( attr );\n    var offset     = this.parseOffset( attr );\n    var scale      = this.parseScale( attr );\n    var scaleBase  = this.parseScaleBase( attr );\n    var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, offset, repeat, scale, scaleBase, hasInitialState, parser, null, this.input );\n\n    return event;\n  },\n\n  /**\n   * Parses a number from the input given parse functions.\n   * \n   * @method parseNumber\n   * @param {String} attr\n   * @param {Function} parseFunction\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} optionAdd\n   * @param {String} optionScale\n   * @param {String} specifics\n   * @return {Number}\n   */\n  parseNumber: function(attr, parseFunction, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n    var base = parseFunction( baseRaw );\n    var add = parseOptionFunction( this.oldOptions[ optionAdd ], 0 );\n    var scale = anim8.coalesce( this.oldOptions[ optionScale ], 1 );\n\n    return (add === 0 && scale === 1) ? baseRaw : (base + add) * scale;\n  },\n\n  /* MERGING */\n\n  /**\n   * Merges easing based on the input, new options, and the current easing.\n   * \n   * @method mergeEasing\n   * @param {String} attr\n   * @param {Function} current\n   * @return {Function}\n   */\n  mergeEasing: function(attr, current)\n  {\n    return this.mergeFirst( attr, current, anim8.easing, 'easing', 'easings' );\n  },\n\n  /**\n   * Merges repeats based on the input, new options, and the current repeat.\n   * \n   * @method mergeRepeat\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeRepeat: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * Merges delay based on the input, new options, and the current delay.\n   * \n   * @method mergeDelay\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeDelay: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * Merges sleep based on the input, new options, and the current sleep.\n   * \n   * @method mergeSleep\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeSleep: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'scales' );\n  },\n\n  /**\n   * Merges duration based on the input, new options, and the current duration.\n   * \n   * @method mergeDuration\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeDuration: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * Merges offset based on the input, new options, and the current offset.\n   * \n   * @method mergeOffset\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeOffset: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'offset', 'offsetAdd', 'offsetScale', 'offsets' );\n  },\n\n  /**\n   * Merges scale based on the input, new options, and the current scale.\n   * \n   * @method mergeScale\n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeScale: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * Merges scale base based on the input, new options, and the current scale \n   * base.\n   * \n   * @method mergeScaleBase\n   * @param {String} attr\n   * @param {T} current\n   * @param {Factory} factory\n   * @return {T}\n   */\n  mergeScaleBase: function(attr, current, factory)\n  {\n    var calc = factory.attribute( attr ).calculator;\n\n    var parseFunction = function(value, defaultValue) {\n      return calc.parse( value, defaultValue );\n    };\n\n    return this.mergeFirst( attr, current, parseFunction, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * Returns the first available option from input, new options, old options,\n   * and the current value.\n   * \n   * @method mergeFirst\n   * @param {String} attr\n   * @param {T} current\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} specifics\n   * @return {T}\n   */\n  mergeFirst: function(attr, current, parseOptionFunction, option, specifics)\n  {\n    var specific = this.input[ specifics ][ attr ];\n    var value = anim8.coalesce( specific, this.newOptions[ option ], this.oldOptions[ option ] );\n\n    return parseOptionFunction( value, current );\n  },\n\n  /**\n   * Merges a number by returning the first occurrence from input, new options,\n   * old options, and the current value.\n   * \n   * @method mergeNumber\n   * @param {String} attr\n   * @param {Number} current\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} optionAdd\n   * @param {String} optionScale\n   * @param {String} specifics\n   * @return {Number}\n   */\n  mergeNumber: function(attr, current, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] );\n    var base = parseOptionFunction( baseRaw, current );\n    var add = parseOptionFunction( anim8.coalesce( this.newOptions[ optionAdd ], this.oldOptions[ optionAdd ] ), 0 );\n    var scale = anim8.coalesce( this.newOptions[ optionScale ], this.oldOptions[ optionScale ], 1 );\n\n    return (base + add) * scale;\n  }\n\n};","\n/**\n * Instantiates a new parser for the 'and' animation type.\n *\n * @class ParserAnd\n * @constructor\n * @extends Parser\n */\nanim8.ParserAnd = function()\n{\n  \n};\n\n// ParserAnd extends anim8.Parser()\nanim8.override( anim8.ParserAnd.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    attrimatorMap.putMap( anim8.attrimatorsFor( animation.and, options ) );\n  },\n  merge: function( input, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var animation = input.and;\n    var helper = new anim8.ParserHelper( animation, oldOptions, newOptions );\n\n    for (var parserName in animation)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false && parser.merge )\n      {\n        parser.merge( animation, newOptions, oldOptions, attrimatorMap, helper );\n      }\n    }\n  }\n});\n\n/**\n * A parser which generates attrimators which tween from the current value to \n * the given values.\n *\n * **Examples:**\n * \n *     animator.play({\n *      ... other parsers ...\n *      and: {\n *       ... more parsers ...\n *      }\n *     });\n * \n *\n * @property {ParserAnd} and\n * @for anim8.parser\n */\nanim8.parser['and'] = new anim8.ParserAnd();\n","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n *\n * @class ParserDeltas\n * @constructor\n * @extends Parser\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var deltas = animation.deltas;\n    var values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      deltas = {};\n    }\n    else if ( anim8.isArray( deltas ) )\n    {\n      var deltaObject = {};\n      \n      for (var attr in values)\n      {\n        deltaObject[attr] = deltas;  \n      }\n      \n      deltas = deltaObject;\n    }\n    \n    for (var attr in values)\n    {\n      var value = values[ attr ];\n      var valueMax = value.length - 1;\n      var delta = deltas[ attr ];\n      var attribute = factory.attribute( attr );\n      \n      for (var k = 0; k <= valueMax; k++)\n      {\n        value[k] = attribute.parse( value[k] );\n      }\n\n      if ( !anim8.isArray( delta ) )\n      {\n        delta = [];\n        \n        for (var i = 0; i <= valueMax; i++)\n        {\n          delta[i] = i / valueMax;\n        }\n      }\n\n      var path      = new anim8.PathDelta( attr, attribute.calculator, value, delta );\n      var event     = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['values'] = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n *\n * @class ParserFinal\n * @constructor\n * @extends Parser\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n    var values = animation.final;\n    \n    for (var attr in values)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] );\n      var delay      = anim8.delay( helper.parseDelay( attr ) );\n      var duration   = anim8.duration( helper.parseDuration( attr ) );\n      var event      = new anim8.Oncer( attr, value, delay + duration, false, this, null, animation );\n      \n      attrimatorMap.put( attr, event );\n    }\n  },\n  mergeAttrimator: function( e, attr, helper, factory )\n  {\n    e.delay = helper.mergeDelay( attr, e.delay ) + \n              helper.mergeDuration( attr, e.duration );\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['final'] = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n *\n * @class ParserInitial\n * @constructor\n * @extends Parser\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays & scales\n    \n    var factory    = anim8.factory( animation.factory );\n    var values     = animation.initial;\n    \n    for (var attr in values)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = helper.parseDelay( attr );\n      var oncer      = new anim8.Oncer( attr, value, delay, true, this, null, animation );\n      \n      attrimatorMap.put( attr, oncer );\n    }\n  },\n  mergeAttrimator: function( e, attr, helper, factory )\n  {\n    e.delay = helper.mergeDelay( attr, e.delay );\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['initial'] = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n *\n * @class ParserKeyframe\n * @constructor\n * @extends Parser\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    var easings = animation.easings || {};\n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) \n      {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n        \n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n    \n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = helper.parseDuration( attr );\n      var delay     = helper.parseDelay( attr );\n      var sleep     = helper.parseSleep( attr );\n      var offset    = helper.parseOffset( attr );\n      var repeat    = helper.parseRepeat( attr );\n      var scale     = helper.parseScale( attr );\n      var scaleBase = helper.parseScaleBase( attr );\n      var path      = new anim8.PathKeyframe( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new anim8.Event( attr, path, duration, teasing, delay, sleep, offset, repeat, scale, scaleBase, true, this, null, animation );\n\n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser['keyframe'] = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n *\n * @class ParserTweenTo\n * @constructor\n * @extends Parser\n */\nanim8.ParserTweenTo = function()\n{\n  \n};\n\n// ParserTweenTo extends anim8.Parser()\nanim8.override( anim8.ParserTweenTo.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n\n    for (var attr in tweenTo)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, value );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * A parser which generates attrimators which tween from the current value to \n * the given values.\n *\n * **Examples:**\n * \n *     animator.play({\n *      tweenTo: {\n *       opacity: 1.0,       // absolute value\n *       left: '+40'         // 40 more units from current value  \n *      }\n *     });\n * \n *\n * @property {ParserTweenTo} tweenTo\n * @for anim8.parser\n */\nanim8.parser['tweenTo'] = new anim8.ParserTweenTo();\n","\n/**\n * Instantiates a new parser for the 'tweenFrom' animation type.\n *\n * @class ParserTweenFrom\n * @constructor\n * @extends Parser\n */\nanim8.ParserTweenFrom = function()\n{\n  \n};\n\n// ParserTweenFrom extends anim8.Parser()\nanim8.override( anim8.ParserTweenFrom.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenFrom  = animation.tweenFrom;\n\n    for (var attr in tweenFrom)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenFrom[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, value, anim8.computed.current );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenFrom'] = new anim8.ParserTweenFrom();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n *\n * @class ParserMove\n * @constructor\n * @extends Parser\n */\nanim8.ParserMove = function()\n{\n  \n};\n\n// ParserMove extends anim8.Parser()\nanim8.override( anim8.ParserMove.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var move       = animation.move;\n\n    for (var attr in move)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, anim8.computed.relative( value ) );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['move'] = new anim8.ParserMove();\n","\n/**\n * Instantiates a new parser for the 'and' animation type.\n *\n * @class ParserQueue\n * @constructor\n * @extends Parser\n */\nanim8.ParserQueue = function()\n{\n  \n};\n\n// ParserQueue extends anim8.Parser()\nanim8.override( anim8.ParserQueue.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    attrimatorMap.queueMap( anim8.attrimatorsFor( animation.queue, options ) );\n  },\n  merge: function( input, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var animation = input.queue;\n    var helper = new anim8.ParserHelper( animation, oldOptions, newOptions );\n\n    for (var parserName in animation)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false && parser.merge )\n      {\n        parser.merge( animation, newOptions, oldOptions, attrimatorMap, helper );\n      }\n    }\n  }\n});\n\n/**\n * A parser which generates attrimators which tween from the current value to \n * the given values.\n *\n * **Examples:**\n * \n *     animator.play({\n *      ... other parsers ...\n *      queue: {\n *       ... more parsers to play after the others ...\n *      }\n *     });\n * \n *\n * @property {ParserQueue} queue\n * @for anim8.parser\n */\nanim8.parser['queue'] = new anim8.ParserQueue();\n","\n/**\n * Instantiates a new parser for the 'springs' animation type.\n *\n * @class ParserSpring\n * @constructor\n * @extends Parser\n */\nanim8.ParseSpring = function()\n{\n  \n};\n\n// ParseSpring extends anim8.Parser()\nanim8.override( anim8.ParseSpring.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var springs    = animation.springs;\n\n    for (var attr in springs)\n    {\n      var spring     = springs[ attr ];\n\n      if ( !anim8.isDefined( spring.attribute ) )\n      {\n        spring.attribute = attr;\n      }\n\n      var parsed = anim8.spring( spring );\n      \n      if ( parsed !== false )\n      {\n        parsed.parser = this;\n\n        attrimatorMap.put( attr, parsed );  \n      }\n    }\n  },\n  merge: false\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['springs'] = new anim8.ParseSpring();\n","\n/**\n * Instantiates a new parser for the 'physics' animation type.\n *\n * @class ParserPhysics\n * @constructor\n * @extends Parser\n */\nanim8.ParsePhysics = function()\n{\n  \n};\n\n// ParsePhysics extends anim8.Parser()\nanim8.override( anim8.ParsePhysics.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var physics    = animation.physics;\n\n    for (var attr in physics)\n    {\n      var physic    = physics[ attr ];\n\n      var attrimator = new anim8.Physics(\n        attr, \n        this, \n        physic.calculator, \n        anim8.coalesce( physic.position, true ), \n        physic.velocity, \n        physic.acceleration, \n        physic.terminal,\n        physic.stopAt\n      );\n\n      attrimatorMap.put( attr, attrimator );\n    }\n  },\n  merge: false\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['physics'] = new anim8.ParsePhysics();\n","\n/**\n * Instantiates a new parser for the 'travel' animation type.\n *\n * @class ParserTravel\n * @constructor\n * @extends Parser\n */\nanim8.ParserTravel = function()\n{\n  \n};\n\n// ParserTravel extends anim8.Parser()\nanim8.override( anim8.ParserTravel.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var travel     = animation.travel;\n\n    /**\n     * The computed function which returns a function which returns a value pointing\n     * to a given target given the current position of the animator.\n     * \n     * @param  {Number}\n     * @param  {any}\n     * @param  {Number}\n     * @return {Function}\n     */\n    var pointing = function(amount, target, epsilon, subtractVelocity)\n    {\n      var pointingFunction = function(attrimator, animator)\n      {\n        var attribute = animator.getAttribute( attrimator.attribute );\n        var calc = attribute.calculator;\n        var targetValue = anim8.isComputed( target ) ? target( attrimator, animator ) : target;\n        var temp = calc.create();\n\n        return function()\n        {\n          var position   = attrimator.position;\n          var current    = calc.copy( temp, anim8.resolve( targetValue ) );\n          var difference = calc.sub( current, position );\n          var distance   = calc.distance( difference, calc.ZERO );\n\n          if ( distance < epsilon )\n          {\n            attrimator.stopIn( 0 );\n          }\n          else\n          {\n            difference = calc.scale( difference, amount / distance );\n          }\n          \n          if ( subtractVelocity )\n          {\n            difference = calc.sub( difference, attrimator.resolveVelocity() );\n          }\n\n          return difference;\n        };\n      };\n\n      pointingFunction.computed = true;\n\n      return pointingFunction;\n    };\n\n    for (var attr in travel)\n    {\n      var traveling     = travel[ attr ];\n      var attribute     = factory.attribute( attr );\n      var from          = attribute.parse( anim8.coalesce( traveling.from, true ) );\n      var to            = attribute.parse( anim8.coalesce( traveling.to, true ) );\n      var velocity      = anim8.number( traveling.velocity, 0 );\n      var acceleration  = anim8.number( traveling.acceleration, 0 );\n      var terminal      = anim8.number( anim8.coalesce( traveling.terminal, traveling.velocity ), Number.POSITIVE_INFINITY );\n      var epsilon       = anim8.number( traveling.epsilon, 0.001 );\n\n      if ( acceleration !== 0 )\n      {\n        acceleration = pointing( acceleration, to, epsilon, true );\n      }\n\n      if ( velocity !== 0 )\n      {\n        velocity = pointing( velocity, to, epsilon, false );\n      }\n\n      var traveler = new anim8.Physics(\n        attr,\n        this,\n        attribute.calculator,\n        from,\n        velocity,\n        acceleration,\n        terminal\n      );\n      \n      attrimatorMap.put( attr, traveler );\n    }\n  },\n  merge: false\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['travel'] = new anim8.ParserTravel();\n","\n\n/**\n * Returns a factory for the given subject and optionally throws an error if no\n * factory exists.\n *\n * @method anim8.factoryFor\n * @for Core\n * @param {Any} subject\n * @param {Boolean} [optional]\n * @return {Factory}\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n *\n * @method anim8.factory\n * @for Core\n * @param {String|Factory} [factory]\n * @return {Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory['default'];\n};\n\n/**\n * A factory creates Animator instances for subjects.\n *\n * @class Factory\n * @constructor\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   *\n   * @method is\n   * @param  {Any} subject\n   * @return {Boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   *\n   * @method animatorFor\n   * @param  {Any} subject\n   * @return {Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   *\n   * @method animatorsFor\n   * @param {Any} subject\n   * @param {Array} animators\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   *\n   * @method destroy\n   * @param {Animator} animator\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute. An attribute\n   * descriptor is an object with at least the following properties:\n   *\n   * - `name` = the name of the attribute (same as `attr`)\n   * - `calculatorName` = the name of the calculator for the attribute\n   * - `calculator` = the calculator for the attribute\n   * - `defaultValue` = the default value for the attribute\n   * - `parse` = a method to pass a value and have the calculator parse it and\n   *             return the defaultValue if it was invalid\n   * - `cloneDefault` = a method which returns a clone of the default value\n   *\n   * @method attribute\n   * @param {String} attr\n   * @return {Object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n *\n * @class FactoryObject\n * @constructor\n * @extends Factory\n */\nanim8.FactoryObject = function()\n{\n  this.priority = 0;\n  this.attributes = {};\n};\n\nanim8.override( anim8.FactoryObject.prototype = new anim8.Factory(),\n{\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;      \n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory['default'] = anim8.factory['object'] = new anim8.FactoryObject();\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {Object|String} attr\n * @return {Object}\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.object.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute['default'];\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute['default']                 = {defaultValue: 0};\n","\n/**\n * A factory for HTML Elements\n */\nanim8.FactoryDom = function()\n{\n  this.cached = {};\n  this.ids = 0;\n  this.elementAttribute = 'anim8';\n  this.priority = 5;\n  this.attributes = {};\n};\n\nanim8.override( anim8.FactoryDom.prototype = new anim8.Factory(),\n{\n  \n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {Boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isElement( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {HTMLElement} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animatorId = subject.getAttribute( this.elementAttribute );\n    \n    if (!(animatorId in this.cached)) \n    {\n      var animator = new anim8.AnimatorDom( subject );\n      \n      subject.setAttribute( this.elementAttribute, animatorId = animator.id = ++this.ids );\n      \n      animator.factory = this;\n      \n      this.cached[animatorId] = animator;\n    }\n\n    return this.cached[ animatorId ];\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   */\n  destroy: function(animator)\n  {\n    delete this.cached[ animator.id ];\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {String} attr\n   * @return {Object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.dom.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n      var propertyName = anim8.coalesce( attribute.property, attr );\n      var property = anim8.dom.property( propertyName );\n      var defaultUnit = attribute.defaultUnit || '';\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.propertyName = propertyName;\n      attribute.property = property;\n      attribute.defaultUnit = defaultUnit;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the DOM factory.\n */\nanim8.factory['default'] = anim8.factory['dom'] = new anim8.FactoryDom();\n\n/* TODO don't apply styles if they're impercivable (convert value to pixels of applicable) */\n\n/**\n * All DOM related functions.\n */\nanim8.dom = {};\n\n/**\n * Returns a property for the given name.\n * \n * @param  {String|Object}\n * @return {Object}\n */\nanim8.dom.property = function(prop) \n{\n  if ( anim8.isObject( prop ) && anim8.isFunction( prop.get ) && anim8.isFunction( prop.set ) ) \n  {\n    return prop;\n  }\n  if ( anim8.isString( prop ) && prop in anim8.dom.property )\n  {\n    return anim8.dom.property[ prop ];\n  }\n  \n  throw prop + ' is not a valid property';\n}\n\n/**\n * Computes the desired style of the given element and returns it as a string. \n * The style given must be in hyphenated format like so: \n * anim8.dom.style( element, 'font-size' ) = '12px'\n *\n * @param {HTMLElement} e\n * @param {String} style\n * @return {String}\n */\nanim8.dom.style = (function()\n{\n  var hyphenated = {};\n\n  var hyphenize = function(str) \n  {\n    if ( str in hyphenated )\n    {\n      return hyphenated[ str ];\n    }\n\n    var key = str;\n\n    str = str.replace(/[a-z][A-Z]/g, function(str, letter)\n    {\n     return str[0] + '-' + str[1].toLowerCase();\n    });\n    \n    str = str.replace(/^Webkit/, '-webkit');\n    str = str.replace(/^Moz/, '-moz');\n    str = str.replace(/^Ms/, '-ms');\n    str = str.replace(/^O/, '-o');\n    str = str.replace(/^Khtml/, '-khtml');\n    \n    return hyphenated[ key ] = str;\n  };\n  \n  return function(e, style) \n  {\n    if (e.currentStyle)\n    {\n      return e.currentStyle[ style ];\n    } \n    else if (document.defaultView && document.defaultView.getComputedStyle) \n    {\n      return document.defaultView.getComputedStyle( e, null ).getPropertyValue( hyphenize( style ) );\n    } \n    else \n    {\n      return e.style[ style ]; \n    }\n  };\n  \n})();\n\n/**\n * Given an array of styles this will return the first one that is present on elements in the current browser.\n *\n * @param {Array} prefixes\n * @return {String|false}\n */\nanim8.dom.prefix = (function() \n{\n  var a = document.createElement('a');\n  \n  return function(prefixes) \n  {\n    for (var i = 0; i < prefixes.length; i++) \n    {\n      if ( anim8.isDefined( a.style[ prefixes[ i ] ] ) ) \n      {\n        return prefixes[i];\n      }\n    }\n    return false;\n  };\n  \n})();\n\n/**\n * Parses the string for a value and a unit.\n *\n * @param {String} value\n * @return {Object|false}\n */\nanim8.dom.parseValue = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(px|em|%|vw|ex|cm|mm|in|pt|pc|deg|rad)?/;\n  \n  return function(x)\n  {\n    var parsed = regex.exec( x );\n    \n    if (parsed) \n    {      \n      return {\n        value: parseFloat( parsed[1] ),\n        unit: parsed[3]\n      }\n    }\n    \n    return false;\n  };\n})();\n\n\n/**\n * Converts one unit to another for a given element.\n *\n * For Example: anim8.dom.convert( element, '100px', '%', 'parentWidth' )\n *    returns how much percent 100px relativeTo parentWidth of the given element\n *\n * @param {HTMLElement} e\n * @param {String} from\n * @param {String} toUnit\n * @param {String|Number} relativeTo\n * @return {Number|false}\n */\nanim8.dom.convert = (function()\n{\n  /**\n   * Calculators how many pixels a given value & unit is.\n   * \n   * For Example: anim8.toPixels( 100, 'in' ) \n   *    returns how many pixels are in 1 inch, with up to 2 decimal points of accuracy.\n   */\n  var toPixels = function(baseValue, baseUnit, defaultRate)\n  {\n    if ( document.body )\n    {\n      try\n      {\n        var div = document.createElement('div');\n        document.body.appendChild( div );\n        div.style.width = baseValue + baseUnit;\n        var pixels = (div.offsetWidth / baseValue);\n        document.body.removeChild( div );\n\n        return pixels || defaultRate; \n      }\n      catch (e)\n      {\n        // Do nothing\n      }\n    }\n    \n    return defaultRate;\n  };\n\n  var getFontSize = function(e, notUnit)\n  {\n    var fontSize = anim8.dom.style( e, 'fontSize' );\n    var parsed = anim8.dom.parseValue( fontSize );\n    \n    if ( !parsed || parsed.unit === notUnit )\n    {\n      return 12;\n    }\n    \n    if ( parsed.unit === 'px' ) \n    {\n      return parsed.value;\n    }\n    \n    return getConverterScale( e, conversions[ parsed.unit ].px, relativeTo );\n  };\n\n  var variables = {};\n  \n  variables.parentWidth = function(e)\n  {\n    return e.parentNode.scrollWidth;\n  };\n  variables.parentHeight = function(e)\n  {\n    return e.parentNode.scrollHeight;\n  };\n  variables.width = function(e)\n  {\n    return e.offsetWidth;\n  };\n  variables.height = function(e)\n  {\n    return e.offsetHeight;\n  };\n  variables.fontSize = function(e)\n  {\n    return getFontSize( e, '%' );\n  };\n  variables.parentFontSize = function(e)\n  {\n    return getFontSize( e.parentNode, '%' );\n  };\n  variables.htmlFontSize = function(e)\n  {\n    var htmlElement = document.getElementsByTagName(\"html\")[0];\n    \n    return getFontSize( htmlElement, '%' );\n  };\n  \n  var conversions = {};\n  \n  conversions['pt']  = { px: toPixels( 100, 'pt', 1 ) };\n  conversions['in']  = { px: toPixels( 100, 'in', 72 ) };\n  conversions['cm']  = { px: toPixels( 1000, 'cm', 72 / 2.54 ) };\n  conversions['mm']  = { px: toPixels( 100000, 'mm', 72 / 25.4 ) };\n  conversions['vw']  = { px: toPixels( 1000, 'vw', 1024 * 0.01 ) };\n  conversions['deg'] = { rad: Math.PI / 180.0 };\n\n  conversions['em'] = \n  {\n    px: function(e, relativeTo) \n    {\n      return getFontSize( e, 'em' );\n    }\n  };\n  \n  conversions['rem'] = \n  {\n    px: function(e, relativeTo) \n    {\n      var htmlElement = document.getElementsByTagName(\"html\")[0];\n      \n      return getFontSize( htmlElement, 'rem' );\n    }\n  };\n  \n  conversions['%'] = \n  {\n    px: function(e, relativeTo) \n    {\n      if ( anim8.isNumber( relativeTo ) )\n      {\n        return relativeTo;\n      }\n      if ( relativeTo in variables )\n      {\n        return variables[ relativeTo ]( e ) * 0.01;\n      }\n      \n      return 1.0;\n    }\n  };\n  \n  // Populate conversions going other way.\n  for (var unit in conversions)\n  {\n    for (var to in conversions[ unit ])\n    {\n      if ( !(to in conversions) )\n      {\n        conversions[ to ] = {};\n      }\n      \n      if ( !(unit in conversions[ to ]) )\n      {\n        var given = conversions[ unit ][ to ];\n        \n        if ( anim8.isNumber( given ) )\n        {\n          conversions[ to ][ unit ] = 1.0 / given;  \n        }\n        if ( anim8.isFunction( given ) )\n        {\n          conversions[ to ][ unit ] = (function(converter) \n          {\n            return function(e, relativeTo) \n            {\n              return 1.0 / converter( e, relativeTo );\n            };\n          })( given );\n        }\n      }\n    }\n  }\n  \n  // Given an element, convert, and relativeTo - return the number we need to multiply by.\n  var getConverterScale = function(e, converter, relativeTo)\n  {\n    if ( anim8.isNumber( converter ) )\n    {\n      return converter;\n    }\n    else if ( anim8.isFunction( converter ) )\n    {\n      return converter( e, relativeTo );\n    }\n    \n    return 1.0;\n  };\n  \n  return function(e, from, toUnit, relativeTo)\n  {\n    if ( anim8.isNumber( from ) )\n    {\n      return from;\n    }\n    \n    var parsed = anim8.dom.parseValue( from );\n    \n    if ( !parsed )\n    {\n      return false;\n    }\n    \n    var value = parsed.value;\n    var fromUnit = parsed.unit;\n    \n    if ( !fromUnit || fromUnit === toUnit )\n    {\n      return value;\n    }\n    \n    // First see if we have a direct conversion available...\n    if ( fromUnit in conversions && toUnit in conversions[ fromUnit ] )\n    {\n      var converter = conversions[ fromUnit ][ toUnit ];\n      \n      value *= getConverterScale( e, converter, relativeTo );\n    }\n    // Otherwise convert it to px, then to the desired unit\n    else if ( fromUnit in conversions && conversions[ fromUnit ].px && toUnit in conversions.px )\n    {\n      var converter1 = conversions[ fromUnit ].px;\n      var converter2 = conversions.px[ toUnit ];\n\n      var combined = getConverterScale( e, converter1, relativeTo ) *\n                     getConverterScale( e, converter2, relativeTo );\n      \n      value *= combined;\n    }\n    \n    return value;\n  };\n  \n})();\n\n\n","\n/**\n * Properties for the DOM animator.\n */\n\nanim8.dom.property.factory = function(nm, relativeTo) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryDerivable = function(nm, relativeTo, deriver) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var converted = anim8.dom.convert( e, style, anim.units[ nm ], relativeTo );\n        \n        if ( converted !== false ) \n        {\n          anim.frame[nm] = converted;\n          anim.animating[nm] = true;\n        }\n        else if ( anim8.isFunction( deriver ) )\n        {\n          converted = anim8.dom.convert( e, deriver( e ), anim.units[ nm ], relativeTo );\n          \n          if ( converted !== false )\n          {\n            anim.frame[nm] = converted;\n            anim.animating[nm] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    { \n      anim.styles[nm] = anim.value( nm );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.factoryColor = function(nm) \n{\n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating[nm] === false) \n      {\n        var style = anim8.dom.style( e, nm );\n        var parsed = anim8.color.parse( style );\n        \n        if (parsed !== false) \n        {\n          anim.frame[nm] = parsed;\n          anim.animating[nm] = true;\n        }              \n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[nm] = anim8.color.format( anim.frame[nm] );\n    },\n    unset: function(e, anim)\n    {\n      e.style[nm] = null;\n    }\n  };\n};\n\nanim8.dom.property.noop = \n{\n  get: function(e, anim)\n  {\n  },\n  set: function(e, anim)\n  {\n  },\n  unset: function(e, anim)\n  {\n  }\n};\n\nanim8.dom.property.padding                  = anim8.dom.property.factory( 'padding', 'parentWidth' );\nanim8.dom.property.paddingTop               = anim8.dom.property.factory( 'paddingTop', 'parentWidth' );\nanim8.dom.property.paddingRight             = anim8.dom.property.factory( 'paddingRight', 'parentWidth' );\nanim8.dom.property.paddingBottom            = anim8.dom.property.factory( 'paddingBottom', 'parentWidth' );\nanim8.dom.property.paddingLeft              = anim8.dom.property.factory( 'paddingLeft', 'parentWidth' );\n\nanim8.dom.property.margin                   = anim8.dom.property.factory( 'margin', 'parentWidth' );\nanim8.dom.property.marginTop                = anim8.dom.property.factory( 'marginTop', 'parentWidth' );\nanim8.dom.property.marginRight              = anim8.dom.property.factory( 'marginRight', 'parentWidth' );\nanim8.dom.property.marginBottom             = anim8.dom.property.factory( 'marginBottom', 'parentWidth' );\nanim8.dom.property.marginLeft               = anim8.dom.property.factory( 'marginLeft', 'parentWidth' );\n\nanim8.dom.property.borderRadius             = anim8.dom.property.factory( 'borderRadius', 'width' );\nanim8.dom.property.borderTopLeftRadius      = anim8.dom.property.factory( 'borderTopLeftRadius', 'width' );\nanim8.dom.property.borderTopRightRadius     = anim8.dom.property.factory( 'borderTopRightRadius', 'width' );\nanim8.dom.property.borderBottomLeftRadius   = anim8.dom.property.factory( 'borderBottomLeftRadius', 'width' );\nanim8.dom.property.borderBottomRightRadius  = anim8.dom.property.factory( 'borderBottomRightRadius', 'width' );\n\nanim8.dom.property.borderWidth              = anim8.dom.property.factory( 'borderWidth' );\nanim8.dom.property.borderTopWidth           = anim8.dom.property.factory( 'borderTopWidth' );\nanim8.dom.property.borderRightWidth         = anim8.dom.property.factory( 'borderRightWidth' );\nanim8.dom.property.borderBottomWidth        = anim8.dom.property.factory( 'borderBottomWidth' );\nanim8.dom.property.borderLeftWidth          = anim8.dom.property.factory( 'borderLeftWidth' );\n\nanim8.dom.property.outlineWidth             = anim8.dom.property.factory( 'outlineWidth' );\nanim8.dom.property.textIndent               = anim8.dom.property.factory( 'textIndent', 'parentWidth' );\nanim8.dom.property.borderSpacing            = anim8.dom.property.factory( 'borderSpacing' );\nanim8.dom.property.fontSize                 = anim8.dom.property.factory( 'fontSize', 'parentFontSize' );\nanim8.dom.property.lineHeight               = anim8.dom.property.factory( 'lineHeight', 'fontSize' );\nanim8.dom.property.letterSpacing            = anim8.dom.property.factory( 'letterSpacing' );\n\nanim8.dom.property.zIndex                   = anim8.dom.property.factory( 'zIndex' );\n\nanim8.dom.property.color                    = anim8.dom.property.factoryColor( 'color' );\nanim8.dom.property.backgroundColor          = anim8.dom.property.factoryColor( 'backgroundColor' );\nanim8.dom.property.borderTopColor           = anim8.dom.property.factoryColor( 'borderTopColor' );\nanim8.dom.property.borderRightColor         = anim8.dom.property.factoryColor( 'borderRightColor' );\nanim8.dom.property.borderBottomColor        = anim8.dom.property.factoryColor( 'borderBottomColor' );\nanim8.dom.property.borderLeftColor          = anim8.dom.property.factoryColor( 'borderLeftColor' );\nanim8.dom.property.borderColor              = anim8.dom.property.factoryColor( 'borderColor' );\nanim8.dom.property.outlineColor             = anim8.dom.property.factoryColor( 'outlineColor' );\n\nanim8.dom.property.minWidth                 = anim8.dom.property.factory( 'minWidth', 'parentWidth' );\nanim8.dom.property.maxWidth                 = anim8.dom.property.factory( 'maxWidth', 'parentWidth' );\nanim8.dom.property.minHeight                = anim8.dom.property.factory( 'minHeight', 'parentHeight' );\nanim8.dom.property.maxHeight                = anim8.dom.property.factory( 'maxHeight', 'parentHeight' );\n\nanim8.dom.property.width                    = anim8.dom.property.factoryDerivable('width', 'parentWidth', function(e) { return e.offsetWidth + 'px'; });\nanim8.dom.property.height                   = anim8.dom.property.factoryDerivable('height', 'parentHeight', function(e) { return e.offsetHeight + 'px'; });\n\nanim8.dom.property.top                      = anim8.dom.property.factoryDerivable('top', 'parentHeight', function(e) { return e.offsetTop + 'px'; });\nanim8.dom.property.right                    = anim8.dom.property.factoryDerivable('right', 'parentWidth', function(e) { return (e.parentNode.scrollWidth - (e.offsetLeft + e.offsetWidth)) + 'px'; });\nanim8.dom.property.bottom                   = anim8.dom.property.factoryDerivable('bottom', 'parentHeight', function(e) { return (e.parentNode.scrollHeight - (e.offsetTop + e.offsetHeight)) + 'px'; });\nanim8.dom.property.left                     = anim8.dom.property.factoryDerivable('left', 'parentWidth', function(e) { return e.offsetLeft + 'px'; });\n\nanim8.dom.property.zIndex.set = function(e, anim)\n{\n  anim.styles.zIndex = Math.floor( anim.frame.zIndex );\n};\n\nanim8.dom.property.visibility = \n{\n  get: function(e, anim) \n  {\n    if (anim.animating.visibility === false) \n    {\n      var style = anim8.dom.style( e, 'visibility' );\n      anim.frame.visibility = style === 'hidden' ? 0.0 : 1.0;\n      anim.animating = true;\n    }\n  },\n  set: function(e, anim) \n  {\n    anim.styles.visibility = anim.frame.visibility < 0.5 ? 'hidden' : 'visible'\n  },\n  unset: function(e, anim)\n  {\n    e.style.visibility = null;\n  }\n}\n\nanim8.dom.property.backface = (function()\n{\n  var css = anim8.dom.prefix(['WebkitBackfaceVisibility', 'MozBackfaceVisibility', 'msBackfaceVisibility', 'BackfaceVisibility']);\n  \n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n  \n  return {\n    \n    get: function(e, anim)\n    {\n      if ( anim.animating.backface === false )\n      {\n        var style = anim8.dom.style( e, css ); \n        \n        anim.frame.backface = (style === 'visible') ? 1.0 : 0.0;\n        anim.animating.backface = true;\n      }\n    },\n    set: function(e, anim)\n    {\n      anim.styles[css] = anim.frame.backface < 0.5 ? 'none' : 'visible';\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n    \n  };\n  \n})();\n\nanim8.dom.property.transformOrigin = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransformOrigin', 'MozTransformOrigin', 'OTransformOrigin', 'msTransformOrigin', 'transformOrigin']);\n  \n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n  \n  var keywords = \n  {\n    'left':   '0%',\n    'center': '50%',\n    'right':  '100%',\n    'top':    '0%',\n    'bottom': '100%'\n  };\n  \n  var setOriginAttribute = function(e, value, anim, attr, relativeTo ) \n  {\n    if (anim.animating[attr] === false) \n    {\n      if ( value in keywords )\n      {        \n        value = keywords[ value ];\n      }\n\n      var converted = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n      \n      if ( converted !== false )\n      {\n        anim.frame[ attr ] = converted;\n        anim.animating[ attr ] = true;\n      }\n    }\n  };\n  \n  var setOrigin = function(e, split, anim) \n  {\n    if (anim.animating.origin === false) \n    {\n      if ((split.length === 1) || \n          (split.length === 2 && split[0] === split[1]) || \n          (split.length === 3 && split[0] === split[1] && split[1] === split[2])) \n      {     \n        setOriginAttribute( e, split[0], anim, 'origin', 'width' );\n      }            \n    }\n  };\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      if (style) \n      {\n        var origin = style.toLowerCase();\n        var split = origin.split(' ');\n        \n        switch (split.length) \n        {\n        case 3:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOriginAttribute( e, split[2], anim, 'originZ' );\n          setOrigin( e, split, anim );\n          break;\n        case 2:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[1], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        case 1:\n          setOriginAttribute( e, split[0], anim, 'originX', 'width' );\n          setOriginAttribute( e, split[0], anim, 'originY', 'height' );\n          setOrigin( e, split, anim );\n          break;\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var style = null;\n      \n      if ( anim8.isDefined( anim.frame.originZ ) )\n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' ) + ' ' + anim.valueOr( 'originZ', 'origin', 'z' );\n      } \n      else \n      {\n        style = anim.valueOr( 'originX', 'origin', 'x' ) + ' ' + anim.valueOr( 'originY', 'origin', 'y' );\n      }\n      \n      anim.styles[css] = style;\n    },\n    unset: function(e, anim)\n    {\n      e.style[css] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.transform = (function() \n{\n  var css = anim8.dom.prefix(['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);\n   \n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n  \n  var parse = function( e, value, anim, attr, relativeTo )\n  {\n    var desiredUnit = anim.units[ attr ];\n    var converted = anim8.dom.convert( e, value, desiredUnit, relativeTo );\n    \n    if ( converted !== false )\n    {\n      return converted;\n    }\n    \n    // TODO show convert this to desiredUnit, however defaultValue may be non-scalar.\n    return anim.getAttribute( attr ).defaultValue;    \n  };\n\n  var getter1d = function(e, anim, parsed, attr)\n  {\n    return parse( e, parsed[1], anim, attr, 'width' )\n  };\n  var getter2d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' )\n    };\n  };\n  var getter3d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' ),\n      z: parse( e, parsed[3], anim, attr )\n    };\n  };\n  var getter4d = function(e, anim, parsed, attr)\n  {\n    return {\n      x: parse( e, parsed[1], anim, attr, 'width' ),\n      y: parse( e, parsed[2], anim, attr, 'height' ),\n      z: parse( e, parsed[3], anim, attr ),\n      angle: parse( e, parsed[4], anim, attr )\n    };\n  };\n\n  var setter1d = function(attr, value, unit)\n  {\n    return attr + '(' + value + unit + ')';\n  };\n  var setter2d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + unit + ',' + value.y + unit + ')';\n  };\n  var setter3d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + unit + ',' + value.y + unit + ',' + value.z + unit + ')';\n  };\n  var setter4d = function(attr, value, unit)\n  {\n    return attr + '(' + value.x + ',' + value.y + ',' + value.z + ',' + value.angle + unit + ')';\n  };\n  var combine = function(ax, ay, bx, by, ascl, bscl)\n  {\n    return {\n      x: (ascl * ax) + (bscl * bx),\n      y: (ascl * ay) + (bscl * by)\n    };\n  };\n  var place1d = function(anim, e, attr, value, relativeTo)\n  {\n    if ( anim.animating[ attr ] === false )\n    {\n      anim.frame[ attr ] = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n      anim.animating[ attr ] = true;\n    }\n  };\n  var place2d = function(anim, e, attr, valueX, valueY, relativeToX, relativeToY)\n  {\n    if ( anim.animating[ attr ] === false )\n    {\n      anim.frame[ attr ] = {\n        x: anim8.dom.convert( e, valueX, anim.units[ attr ], relativeToX ),\n        y: anim8.dom.convert( e, valueY, anim.units[ attr ], relativeToY )\n      };\n      anim.animating[ attr ] = true;\n    }\n  };\n  var place3d = function(anim, e, attr, valueX, valueY, valueZ, relativeToX, relativeToY, relativeToZ)\n  {\n    if ( anim.animating[ attr ] === false )\n    {\n      anim.frame[ attr ] = {\n        x: anim8.dom.convert( e, valueX, anim.units[ attr ], relativeToX ),\n        y: anim8.dom.convert( e, valueY, anim.units[ attr ], relativeToY ),\n        z: anim8.dom.convert( e, valueZ, anim.units[ attr ], relativeToZ )\n      };\n      anim.animating[ attr ] = true;\n    }\n  };\n  var place4d = function(anim, e, attr, valueX, valueY, valueZ, valueRotate, relativeToX, relativeToY, relativeToZ, relativeToRotate)\n  {\n    if ( anim.animating[ attr ] === false )\n    {\n      anim.frame[ attr ] = {\n        x: anim8.dom.convert( e, valueX, anim.units[ attr ], relativeToX ),\n        y: anim8.dom.convert( e, valueY, anim.units[ attr ], relativeToY ),\n        z: anim8.dom.convert( e, valueZ, anim.units[ attr ], relativeToZ ),\n        angle: anim8.dom.convert( e, valueRotate, anim.units[ attr ], relativeToRotate )\n      };\n      anim.animating[ attr ] = true;\n    }\n  };\n    \n  var regexes = \n  {\n    translate:    /translate\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translate3d:  /translate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    translateX:   /translateX\\(([^\\)]+)\\)/i,\n    translateY:   /translateY\\(([^\\)]+)\\)/i,\n    translateZ:   /translateZ\\(([^\\)]+)\\)/i,\n    scale:        /scale\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scale3d:      /scale3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    scaleX:       /scaleX\\(([^\\)]+)\\)/i,\n    scaleY:       /scaleY\\(([^\\)]+)\\)/i,\n    scaleZ:       /scaleZ\\(([^\\)]+)\\)/i,\n    rotate:       /rotate\\(([^\\)]+)\\)/i,\n    skew:         /skew\\(([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    skewX:        /skewX\\(([^\\)]+)\\)/i,\n    skewY:        /skewY\\(([^\\)]+)\\)/i,\n    rotate3d:     /rotate3d\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^\\)]+)\\)/i,\n    rotateX:      /rotateX\\(([^\\)]+)\\)/i,\n    rotateY:      /rotateY\\(([^\\)]+)\\)/i,\n    rotateZ:      /rotateZ\\(([^\\)]+)\\)/i\n  };\n\n  var matrix = /matrix\\(([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\s*,\\s*([^,]+)\\)/i;\n\n  var getters = \n  {\n    translate:    getter2d,\n    translate3d:  getter3d,\n    translateX:   getter1d,\n    translateY:   getter1d,\n    translateZ:   getter1d,\n    scale:        getter2d,\n    scale3d:      getter3d,\n    scaleX:       getter1d,\n    scaleY:       getter1d,\n    scaleZ:       getter1d,\n    rotate:       getter1d,\n    rotate3d:     getter4d,\n    rotateX:      getter1d,\n    rotateY:      getter1d,\n    rotateZ:      getter1d,\n    skew:         getter2d,\n    skewX:        getter1d,\n    skewY:        getter1d\n  };\n\n  var setters =\n  {\n    translate:    setter2d,\n    translate3d:  setter3d,\n    translateX:   setter1d,\n    translateY:   setter1d,\n    translateZ:   setter1d,\n    scale:        setter2d,\n    scale3d:      setter3d,\n    scaleX:       setter1d,\n    scaleY:       setter1d,\n    scaleZ:       setter1d,\n    rotate:       setter1d,\n    rotate3d:     setter4d,\n    rotateX:      setter1d,\n    rotateY:      setter1d,\n    rotateZ:      setter1d,\n    skew:         setter2d,\n    skewX:        setter1d,\n    skewY:        setter1d\n  };\n\n  var props = new anim8.FastMap( regexes );\n  var regex = props.values;\n  var attrs = props.keys;\n  props.setters = [];\n  props.getters = [];\n\n  for (var prop in getters)\n  {\n    var i = props.indexOf( prop );\n\n    props.getters[ i ] = getters[ prop ];\n    props.setters[ i ] = setters[ prop ];\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n\n      var matrixParsed = matrix.exec( style );\n\n      if ( matrixParsed )\n      {\n        var a = parseFloat( matrixParsed[ 1 ] );\n        var b = parseFloat( matrixParsed[ 2 ] );\n        var c = parseFloat( matrixParsed[ 3 ] );\n        var d = parseFloat( matrixParsed[ 4 ] );\n        var tx = parseFloat( matrixParsed[ 5 ] );\n        var ty = parseFloat( matrixParsed[ 6 ] );\n\n        // Make sure the matrix is invertible\n        if ((a * d - b * c) !== 0)\n        {\n          // Take care of translation\n          var translateX = tx + 'px';\n          var translateY = ty + 'px';\n\n          // Compute X scale factor and normalize first row.\n          var scaleX = Math.sqrt( a * a + b * b );\n          if ( scaleX !== 0 )\n          {\n            a /= scaleX;\n            b /= scaleX;\n          }\n\n          // Compute shear factor and make 2nd row orthogonal to 1st.\n          var skew = a * c + b * d;\n          var combined = combine( c, d, a, b, 1.0, -skew );\n          c = combined.x;\n          d = combined.y;\n\n          // Now, compute Y scale and normalize 2nd row.\n          var scaleY = Math.sqrt( c * c + d * d );\n          if ( scaleY !== 0 )\n          {\n            c /= scaleY;\n            d /= scaleY;\n            skew /= scaleY; \n          }\n\n          // Now, get the rotation out\n          var rotate = Math.atan2( b, a ) + 'rad';\n\n          // Place values in animator.\n          place2d( anim, e, 'translate', translateX, translateY, 'width', 'height' );\n          place3d( anim, e, 'translate3d', translateX, translateY, 0, 'width', 'height' );\n          place1d( anim, e, 'translateX', translateX, 'width' );\n          place1d( anim, e, 'translateY', translateY, 'height' );\n          place2d( anim, e, 'scale', scaleX, scaleY );\n          place1d( anim, e, 'scaleX', scaleX );\n          place1d( anim, e, 'scaleY', scaleY );\n          place3d( anim, e, 'scale3d', scaleX, scaleY, 1 );\n          place1d( anim, e, 'rotate', rotate );\n          place4d( anim, e, 'rotate3d', 0, 0, 1, rotate );\n          place1d( anim, e, 'rotateZ', rotate );\n          place2d( anim, e, 'skew', skew, skew );\n          place1d( anim, e, 'skewX', skew );\n          place1d( anim, e, 'skewY', skew );\n\n          return;\n        }\n      }\n      \n      for (var attr in anim.animating) \n      {\n        var i = props.indexOf( attr );\n\n        if ( i !== -1 && anim.animating[ attr ] === false ) \n        {\n          var parsed = regex[ i ].exec( style );\n\n          if ( parsed ) \n          {\n            anim.frame[ attr ] = props.getters[ i ]( e, anim, parsed, attr );\n            anim.animating[ attr ] = true;\n          }\n        }\n      }\n    },\n    set: function(e, anim) \n    {      \n      var transforms = [];\n      \n      for (var i = 0; i < attrs.length; i++) \n      {\n        var attr = attrs[ i ];\n\n        if ( attr in anim.frame ) \n        {\n          transforms.push( props.setters[ i ]( attr, anim.frame[ attr ], anim.units[ attr ] ) );\n        }\n      }\n      \n      if (transforms.length) \n      {\n        anim.styles[ css ] = transforms.join( ' ' );\n      }\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = '';\n    }\n  };\n  \n})();\n\nanim8.dom.property.opacity = (function() \n{\n  var css = anim8.dom.prefix(['WebkitOpacity', 'MozOpacity', 'KhtmlOpacity', 'opacity']);\n  \n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      if (anim.animating.opacity === false) \n      {\n        var style = anim8.dom.style( e, css );\n        var opacity = parseFloat( style );\n        \n        if ( !isNaN(opacity) ) \n        {\n          anim.frame.opacity = opacity\n          anim.animating.opacity = true;\n        }\n      }\n    },\n    set: function(e, anim) \n    {\n      anim.styles[ css ] = anim8.clamp( anim.frame.opacity, 0, 1 );\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.shadow = (function()\n{\n  var css = anim8.dom.prefix(['WebkitBoxShadow', 'MozBoxShadow', 'boxShadow']);\n\n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n\n  var parsePart = function( e, anim, attr, value, relativeTo )\n  {\n    if ( anim.updating[ attr ] === false && value )\n    {\n      var parsed = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n\n      if ( parsed !== false )\n      {\n        anim.frame[ attr ] = parsed;\n        anim.updating[ attr ] = true;\n      }\n    }\n  };\n\n  return {\n\n    get: function(e, anim)\n    {\n      var style = anim8.dom.style( e, css );\n      var parts = style.split( ' ' );\n\n      if ( parts.length < 3 )\n      {\n        return;\n      }\n\n      var inset = 0;\n\n      if ( parts[ 0 ] === 'inset' )\n      {\n        inset = 1;\n        parts.shift();\n      }\n\n      var x = parts[ 0 ];\n      var y = parts[ 1 ];\n      var blur = false, spread = false, color = false;\n\n      switch ( parts.length ) {\n        case 3:\n          color = parts[ 2 ];\n          break;\n        case 4:\n          blur = parts[ 2 ];\n          color = parts[ 3 ];\n          break;\n        case 5:\n          blur = parts[ 2 ];\n          spread = parts[ 3 ];\n          color = parts[ 4 ];\n          break;\n      }\n\n      parsePart( e, anim, 'shadowX', x, 'width' );\n      parsePart( e, anim, 'shadowY', y, 'height' );\n      parsePart( e, anim, 'shadowBlur', blur, 'width' );\n      parsePart( e, anim, 'shadowSpread', spread, 'width' );\n\n      if ( anim.updating.shadowPosition === false )\n      {\n        var parsedX = anim8.dom.convert( e, x, anim.units.shadowPosition, 'width' );\n        var parsedY = anim8.dom.convert( e, y, anim.units.shadowPosition, 'height' );\n\n        if ( parsedX !== false && parsedY !== false )\n        {\n          anim.frame.shadowPosition = {\n            x: parsedX,\n            y: parsedY\n          };\n          anim.updating.shadowPosition = true;\n        }\n      }\n\n      if ( anim.updating.shadowInset === false )\n      {\n        anim.frame.shadowInset = inset;\n        anim.updating.shadowInset = true;\n      }\n\n      if ( anim.updating.shadowColor === false )\n      {\n        var parsed = anim8.color.parse( color );\n\n        if ( parsed !== false )\n        {\n          anim.frame.shadowColor = parsed;\n          anim.updating.shadowColor = true;\n        }\n      }\n\n    },\n\n    set: function(e, anim)\n    {\n      var style = '';\n\n      if ( anim.frame.inset )\n      {\n        style += inset + ' ';\n      }\n\n      style += anim.valueOr( 'shadowX', 'shadowPosition', 'x' ) + ' ';\n      style += anim.valueOr( 'shadowY', 'shadowPosition', 'y' ) + ' ';\n\n      if ( anim8.isNumber( anim.frame.shadowBlur ) )\n      {\n        style += anim.value( 'shadowBlur' ) + ' ';\n      }\n\n      if ( anim8.isNumber( anim.frame.shadowSpread ) )\n      {\n        style += anim.value( 'shadowSpread' ) + ' ';\n      }\n\n      style += anim8.color.format( anim.frame.shadowColor );\n\n      anim.styles[ css ] = style;\n    },\n\n    unset: function(e)\n    {\n      e.style[ css ] = null;\n    }\n\n  };\n\n})();\n\n\nanim8.dom.property.textShadow = (function()\n{\n  var css = anim8.dom.prefix(['WebkitTextShadow', 'MozTextShadow', 'textShadow']);\n\n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n\n  var parsePart = function( e, anim, attr, value, relativeTo )\n  {\n    if ( anim.updating[ attr ] === false && value )\n    {\n      var parsed = anim8.dom.convert( e, value, anim.units[ attr ], relativeTo );\n\n      if ( parsed !== false )\n      {\n        anim.frame[ attr ] = parsed;\n        anim.updating[ attr ] = true;\n      }\n    }\n  };\n\n  return {\n\n    get: function(e, anim)\n    {\n      var style = anim8.dom.style( e, css );\n      var parts = style.split( ' ' );\n\n      if ( parts.length < 3 )\n      {\n        return;\n      }\n\n      var x = parts[ 0 ];\n      var y = parts[ 1 ];\n      var blur = false, color = false;\n\n      switch ( parts.length ) {\n        case 3:\n          color = parts[ 2 ];\n          break;\n        case 4:\n          blur = parts[ 2 ];\n          color = parts[ 3 ];\n          break;\n      }\n\n      parsePart( e, anim, 'textShadowX', x, 'width' );\n      parsePart( e, anim, 'textShadowY', y, 'height' );\n      parsePart( e, anim, 'textShadowBlur', blur, 'width' );\n\n      if ( anim.updating.textShadowPosition === false )\n      {\n        var parsedX = anim8.dom.convert( e, x, anim.units.textShadowPosition, 'width' );\n        var parsedY = anim8.dom.convert( e, y, anim.units.textShadowPosition, 'height' );\n\n        if ( parsedX !== false && parsedY !== false )\n        {\n          anim.frame.textShadowPosition = {\n            x: parsedX,\n            y: parsedY\n          };\n          anim.updating.textShadowPosition = true;\n        }\n      }\n\n      if ( anim.updating.textShadowColor === false )\n      {\n        var parsed = anim8.color.parse( color );\n\n        if ( parsed !== false )\n        {\n          anim.frame.textShadowColor = parsed;\n          anim.updating.textShadowColor = true;\n        }\n      }\n    },\n\n    set: function(e, anim)\n    {\n      var style = '';\n\n      if ( anim.frame.inset )\n      {\n        style += inset + ' ';\n      }\n\n      style += anim.valueOr( 'textShadowX', 'textShadowPosition', 'x' ) + ' ';\n      style += anim.valueOr( 'textShadowY', 'textShadowPosition', 'y' ) + ' ';\n\n      if ( anim8.isNumber( anim.frame.textShadowBlur ) )\n      {\n        style += anim.value( 'textShadowBlur' ) + ' ';\n      }\n\n      if ( anim8.isNumber( anim.frame.textShadowSpread ) )\n      {\n        style += anim.value( 'textShadowSpread' ) + ' ';\n      }\n\n      style += anim8.color.format( anim.frame.textShadowColor );\n\n      anim.styles[ css ] = style;\n    },\n\n    unset: function(e)\n    {\n      e.style[ css ] = null;\n    }\n\n  };\n\n})();\n\nanim8.dom.property.filter = (function() \n{\n  var css = anim8.dom.prefix(['WebkitFilter', 'MozFilter', 'OFilter', 'msFilter', 'filter']);\n  \n  if ( !css )\n  {\n    return anim8.dom.property.noop;\n  }\n  \n  var methods = \n  {\n    grayscale:  'grayscale',\n    sepia:      'sepia',\n    saturate:   'saturate',\n    hueRotate:  'hue-rotate',\n    invert:     'invert',\n    brightness: 'brightness',\n    contrast:   'contrast',\n    blur:       'blur'\n  };\n  \n  var patterns = {};\n  \n  for (var attr in methods) \n  {\n    patterns[attr] = new RegExp( methods[attr] + '\\(([^\\)]+)\\)', 'i');\n  }\n  \n  return {\n    \n    get: function(e, anim) \n    {\n      var style = anim8.dom.style( e, css );\n      \n      for (var attr in patterns) \n      {\n        if ( anim.animating[attr] === false ) \n        {\n          var parsed = patterns[attr].exec( style );\n          \n          if ( parsed ) \n          {\n            var converted = anim8.dom.convert( e, parsed[1], anim.units[ attr ] );\n            \n            if ( converted !== false )\n            {\n              anim.frame[ attr ] = converted;\n              anim.animating[ attr ] = true;\n            }\n          }\n        }\n      }\n    }, \n    set: function(e, anim) \n    {\n      // we don't check anim.updated[attr] here since the current value of a transform property is important\n      \n      var filters = [];\n      \n      for (var attr in methods) \n      {\n        if ( attr in anim.frame ) \n        {\n          filters.push( methods[attr] + '(' + anim.value( attr ) + ')' );\n        }\n      }\n      \n      if (filters.length) \n      {\n        anim.styles[ css ] = filters.join(' ');\n      }\n    },\n    unset: function(e, anim)\n    {\n      e.style[ css ] = null;\n    }\n  };\n  \n})();\n\nanim8.dom.property.center = \n{\n  get: function(e, anim)\n  {\n    var cx = (e.offsetLeft + e.offsetWidth * 0.5) + 'px';\n    var cy = (e.offsetTop + e.offsetHeight * 0.5) + 'px';\n    \n    if ( anim.animating.center === false )\n    {\n      var desiredUnit = anim.units.center;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n    \n      if ( ccx !== false && ccy !== false )\n      {\n        anim.frame.center = {\n          x: ccx,\n          y: ccy\n        };\n        anim.animating.center = true;\n      }\n    }\n    if ( anim.animating.centerX === false )\n    {\n      var desiredUnit = anim.units.centerX;\n      var ccx = anim8.dom.convert( e, cx, desiredUnit, 'parentWidth' );\n      \n      if ( ccx !== false )\n      {\n        anim.frame.centerX = ccx;\n        anim.animating.centerX = true;\n      }\n    }\n    if ( anim.animating.centerY === false )\n    {\n      var desiredUnit = anim.units.centerY;\n      var ccy = anim8.dom.convert( e, cy, desiredUnit, 'parentHeight' );\n      \n      if ( ccy !== false )\n      {\n        anim.frame.centerY = ccy;\n        anim.animating.centerY = true;\n      }\n    }\n  },\n  preset: function(e, anim)\n  {\n    anim.cached.width  = anim8.dom.convert( e, e.offsetWidth + 'px', anim.units.centerX || anim.units.center, 'parentWidth' );\n    anim.cached.height = anim8.dom.convert( e, e.offsetHeight + 'px', anim.units.centerY || anim.units.center, 'parentHeight' );\n  },\n  set: function(e, anim)\n  {\n    var rw = anim.cached.width * 0.5;\n    var rh = anim.cached.height * 0.5;\n    \n    if ( anim.updated.center )\n    {\n      anim.styles.left = (anim.frame.center.x - rw) + anim.units.center;\n      anim.styles.top = (anim.frame.center.y - rh) + anim.units.center;\n    }\n    if ( anim.updated.centerX )\n    {\n      anim.styles.left = (anim.frame.centerX - rw) + anim.units.centerX;\n    }\n    if ( anim.updated.centerY )\n    {\n      anim.styles.top = (anim.frame.centerY - rh) + anim.units.centerY;\n    }\n  }\n};\n\nanim8.dom.property.orbit = \n{\n  DEGREE_TO_RADIAN: Math.PI / 180.0,\n  \n  RADIAN_TO_DEGREE: 180.0 / Math.PI,\n  \n  get: function(e, anim)\n  {\n    var ox = (e.parentNode.scrollWidth * 0.5);\n    var oy = (e.parentNode.scrollHeight * 0.5); \n    var cx = (e.offsetLeft + e.offsetWidth * 0.5);\n    var cy = (e.offsetTop + e.offsetHeight * 0.5);\n    var dx = cx - ox;\n    var dy = cy - oy;\n  \n    if ( anim.animating.orbitOffset === false )\n    {\n      var cunit = anim.units.orbitOffset;\n      var cox = anim8.dom.convert( e, ox + 'px', cunit, 'parentWidth' );\n      var coy = anim8.dom.convert( e, oy + 'px', cunit, 'parentHeight' );\n      \n      if ( cox !== false && coy !== false )\n      {\n        anim.frame.orbitOffset = {\n          x: cox,\n          y: coy\n        };\n        anim.animating.orbitOffset = false;\n      }\n    }\n    \n    if ( anim.animating.distance === false )\n    {\n      anim.frame.distance = Math.sqrt( dx * dx + dy * dy );\n      anim.animating.distance = true;\n    }\n    \n    if ( anim.animating.angle === false )\n    {\n      anim.frame.angle = Math.atan2( dy, dx ) * this.RADIAN_TO_DEGREE;\n      anim.animating.angle = true;\n    }\n  },\n  \n  preset: function(e, anim)\n  {  \n    anim.cached.parentWidth = e.parentNode.scrollWidth;\n    anim.cached.parentHeight = e.parentNode.scrollHeight;\n    anim.cached.width = e.offsetWidth;\n    anim.cached.height = e.offsetHeight;\n  },\n  \n  set: function(e, anim)\n  {\n    // TODO calculator this correctly\n    var cunit = anim.units.orbitOffset || '%';\n    var orbitX = anim.frame.orbitOffset ? anim.frame.orbitOffset.x : 50;\n    var orbitY = anim.frame.orbitOffset ? anim.frame.orbitOffset.y : 50;\n    \n    var originUnit = anim.units.origin || '%';\n    var originX = anim.frame.origin ? anim.frame.origin.x : 50;\n    var originY = anim.frame.origin ? anim.frame.origin.y : 50;\n    \n    var cox = anim8.dom.convert( e, orbitX + cunit, 'px', anim.cached.parentWidth / 100.0 );\n    var coy = anim8.dom.convert( e, orbitY + cunit, 'px', anim.cached.parentHeight / 100.0 );\n    \n    var ox = anim8.dom.convert( e, originX + originUnit, 'px', anim.cached.width / 100.0 );\n    var oy = anim8.dom.convert( e, originY + originUnit, 'px', anim.cached.height / 100.0 );\n    \n    var angle = (anim.frame.angle || 0.0) * this.DEGREE_TO_RADIAN;\n    var distance = anim.frame.distance || 0.0;\n        \n    var cos = Math.cos( angle ) * distance;\n    var sin = Math.sin( angle ) * distance;\n    \n    anim.styles.left = (cox + cos - ox) + 'px';\n    anim.styles.top = (coy + sin - oy) + 'px';\n  }\n};","\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {Object|String} attr\n */\nanim8.dom.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.dom.attribute[ attr ];\n  }\n  \n  return anim8.dom.attribute['default'];\n};\n\n/**\n * The default attribute.\n */\nanim8.dom.attribute['default']              = {defaultValue: 0};\n\n/**\n * All animatable attributes for AnimatorDoms & HTMLElements.\n */\n\nanim8.dom.attribute.padding                 = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingTop              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingRight            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingBottom           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.paddingLeft             = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.margin                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginTop               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginRight             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginBottom            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.marginLeft              = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderRadius            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopLeftRadius     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopRightRadius    = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomLeftRadius  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomRightRadius = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.borderWidth             = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderTopWidth          = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderRightWidth        = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderBottomWidth       = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderLeftWidth         = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.outlineWidth            = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.outlineOffset           = {defaultValue: 0};\nanim8.dom.attribute.textIndent              = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.borderSpacing           = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.fontSize                = {defaultValue: 1, defaultUnit: 'em'};\nanim8.dom.attribute.lineHeight              = {defaultValue: 1, defaultUnit: 'em'};\nanim8.dom.attribute.letterSpacing           = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.origin                  = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'transformOrigin', calculator: '2d'};\nanim8.dom.attribute.originX                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\nanim8.dom.attribute.originY                 = {defaultValue: 50, defaultUnit: '%', property: 'transformOrigin'};\n\nanim8.dom.attribute.opacity                 = {defaultValue: 1};\nanim8.dom.attribute.zIndex                  = {defaultValue: 1};\n\nanim8.dom.attribute.width                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minWidth                = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxWidth                = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.height                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.minHeight               = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.maxHeight               = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.angle                   = {defaultValue: 0, property: 'orbit', defaultUnit: 'deg'};\nanim8.dom.attribute.distance                = {defaultValue: 0, property: 'orbit', defaultUnit: 'px'};\nanim8.dom.attribute.orbitOffset             = {defaultValue: {x:50, y:50}, defaultUnit: '%', property: 'orbitOffset', calculator: '2d'};\n\nanim8.dom.attribute.top                     = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.right                   = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.bottom                  = {defaultValue: 0, defaultUnit: 'px'};\nanim8.dom.attribute.left                    = {defaultValue: 0, defaultUnit: 'px'};\n\nanim8.dom.attribute.center                  = {defaultValue: {x:0, y:0}, defaultUnit: 'px', property: 'center', calculator: '2d'};\nanim8.dom.attribute.centerX                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\nanim8.dom.attribute.centerY                 = {defaultValue: 0, defaultUnit: 'px', property: 'center'};\n\nanim8.dom.attribute.blur                    = {defaultValue: 0, property: 'filter', defaultUnit: 'px'};\nanim8.dom.attribute.sepia                   = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.brightness              = {defaultValue: 100, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.grayscale               = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.contrast                = {defaultValue: 100, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.invert                  = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.saturation              = {defaultValue: 0, property: 'filter', defaultUnit: '%'};\nanim8.dom.attribute.hueRotate               = {defaultValue: 0, property: 'filter', defaultUnit: 'deg'};\n\nanim8.dom.attribute.rotate                  = {defaultValue: 0, property: 'transform', defaultUnit: 'deg'};\nanim8.dom.attribute.rotate3d                = {defaultValue: {x:0, y:0, z:1, angle:0}, property: 'transform', calculator: 'quaternion', defaultUnit: 'deg'};\n\nanim8.dom.attribute.translate               = {defaultValue: {x:0, y:0}, property: 'transform', calculator: '2d', defaultUnit: 'px'};\nanim8.dom.attribute.translateX              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateY              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translateZ              = {defaultValue: 0, property: 'transform', defaultUnit: 'px'};\nanim8.dom.attribute.translate3d             = {defaultValue: {x:0, y:0, z:0}, property: 'transform', calculator: '3d', defaultUnit: 'px'};\n\nanim8.dom.attribute.scale                   = {defaultValue: {x:1, y:1}, property: 'transform', calculator: '2d'};\nanim8.dom.attribute.scaleX                  = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleY                  = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scaleZ                  = {defaultValue: 1, property: 'transform'};\nanim8.dom.attribute.scale3d                 = {defaultValue: {x:1, y:1, z:1}, property: 'transform', calculator: '3d'};\n\nanim8.dom.attribute.skew                    = {defaultValue: {x:0, y:0}, defaultUnit: 'deg', property: 'transform', calculator: '2d'};\nanim8.dom.attribute.skewX                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\nanim8.dom.attribute.skewY                   = {defaultValue: 0, defaultUnit: 'deg', property: 'transform'};\n\nanim8.dom.attribute.backface                = {defaultValue: 0};\nanim8.dom.attribute.visibility              = {defaultValue: 1};\n\nanim8.dom.attribute.backgroundColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.color                   = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderTopColor          = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderRightColor        = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderBottomColor       = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderLeftColor         = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.borderColor             = {defaultValue: anim8.color(), calculator: 'rgba'};\nanim8.dom.attribute.outlineColor            = {defaultValue: anim8.color(), calculator: 'rgba'};\n\nanim8.dom.attribute.textShadowX             = {defaultValue: 0, defaultUnit: 'px', property: 'textShadow'};\nanim8.dom.attribute.textShadowY             = {defaultValue: 0, defaultUnit: 'px', property: 'textShadow'};\nanim8.dom.attribute.textShadowPosition      = {defaultValue: {x: 0, y: 0}, defaultUnit: 'px', calculator: '2d', property: 'textShadow'};\nanim8.dom.attribute.textShadowBlur          = {defaultValue: 0, defaultUnit: 'px', property: 'textShadow'};\nanim8.dom.attribute.textShadowColor         = {defaultValue: anim8.color(), calculator: 'rgba', property: 'textShadow'};\n\nanim8.dom.attribute.shadowX                 = {defaultValue: 0, defaultUnit: 'px', property: 'shadow'};\nanim8.dom.attribute.shadowY                 = {defaultValue: 0, defaultUnit: 'px', property: 'shadow'};\nanim8.dom.attribute.shadowPosition          = {defaultValue: {x: 0, y: 0}, defaultUnit: 'px', calculator: '2d', property: 'shadow'};\nanim8.dom.attribute.shadowBlur              = {defaultValue: 0, defaultUnit: 'px', property: 'shadow'};\nanim8.dom.attribute.shadowSpread            = {defaultValue: 0, defaultUnit: 'px', property: 'shadow'};\nanim8.dom.attribute.shadowColor             = {defaultValue: anim8.color(), calculator: 'rgba', property: 'shadow'};\nanim8.dom.attribute.shadowInset             = {defaultValue: 0, property: 'shadow'};\n","\n/**\n * Instantiates a new AnimatorDom given a subject.\n * \n * @param {HTMLElement} e\n * @class AnimatorDom\n * @constructor\n * @extends Animator\n */\nanim8.AnimatorDom = function(subject)\n{\n  this.reset( subject );\n  this.properties = new anim8.FastMap();\n  this.propertiesPreset = new anim8.FastMap();\n  this.attributeToProperty = {};\n  this.animating = {};\n  this.cached = {};\n  this.units = {};\n  this.styles = {};\n  this.styled = false;\n  this.stylesUpdated = false;\n};\n\n/**\n * Extends anim8.Animator\n */\nanim8.override( anim8.AnimatorDom.prototype = new anim8.Animator(),\n{\n  preupdate: function(now)\n  {\n    // If there are events with paths that contain computed values we should\n    // populate the frame directly from the HTML element.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      var properties = {};\n    \n      for (var i = aa.length - 1; i >= 0; i--)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        if ( !(attr in this.frame) && attrimator.hasComputed() )\n        {\n          properties[ this.attributeToProperty[ attr ] ] = true;\n      \n          this.animating[ attr ] = false; \n        }\n      }\n      \n      for (var prop in properties)\n      {\n        this.properties.get( prop ).get( this.subject, this );\n      }\n\n      for (var i = aa.length - 1; i >= 0; i--)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        this.setDefault( attr );       \n\n        attrimator.start( now, this );     \n      }\n\n      aa.length = 0;\n    }\n\n    // If a property currently being animated requires some heads up before it\n    // gets or sets a value, notify it. TODO removed dead properties.\n    var presets = this.propertiesPreset.values;\n    for (var i = presets.length - 1; i >= 0; i--)\n    {\n      presets[ i ].preset( this.subject, this );\n    }\n\n    this.trigger('preupdate');\n\n    return this;\n  },\n  update: function(now)\n  {\n    anim8.fn.update.apply( this, arguments );\n      \n    this.getStyles();\n    this.stylesUpdated = true;\n\n    return this;\n  },\n  apply: function()\n  {\n    if ( !this.styled && !this.stylesUpdated )\n    {\n      this.getStyles();\n    }\n    \n    if ( this.styled )\n    {    \n      for (var prop in this.styles)\n      {\n         this.subject.style[ prop ] = this.styles[ prop ];\n      }\n      \n      for (var attr in this.frame)\n      {\n        this.updated[ attr ] = false;\n      }\n    \n      this.styled = false;\n    }\n    \n    this.stylesUpdated = false;\n    \n    this.trigger('apply');\n    \n    this.trimAttrimators();\n\n    return this;\n  },\n  placeAttrimator: function( attrimator )\n  {\n    anim8.fn.placeAttrimator.apply( this, arguments );\n    \n    var attr = attrimator.attribute;\n    var attribute = this.getAttribute( attr );\n    var propertyName = attribute.propertyName;\n    var property = attribute.property;\n\n    this.properties.put( propertyName, property );\n\n    this.attributeToProperty[ attr ] = propertyName;\n    this.units[ attr ] = attribute.defaultUnit;\n\n    if ( attrimator.input && attrimator.input.units && attr in attrimator.input.units )\n    {\n      this.units[ attr ] = attrimator.input.units[ attr ];\n    }\n\n    if ( anim8.isFunction( property.preset ) )\n    {\n      this.propertiesPreset.put( propertyName, property );\n    }\n\n    return this;\n  },\n  restore: function()\n  {\n    var props = this.properties.values;\n    for (var i = props.length - 1; i >= 0; i--)\n    {\n      props[ i ].unset( this.subject, this );\n    }\n    \n    this.frame = {};\n\n    return this;\n  },\n  set: function(attributes)\n  {\n    var props = {};\n    var updated = {};\n    var units = {};\n    var styles = {};\n    \n    for (var attr in attributes)\n    {\n      var attribute = this.getAttribute( attr );\n      var value     = attributes[ attr ];\n      \n      units[ attr ] = attribute.defaultUnit;\n      \n      if ( anim8.isString( value ) )\n      {\n        var parsed = anim8.dom.parseValue( value, attribute.defaultUnit );\n        \n        if ( parsed !== false )\n        {\n          units[ attr ] = parsed.unit || attribute.defaultUnit;\n          value = parsed.value;\n        }  \n      }\n      \n      var parsed = attribute.parse( value );\n      \n      if ( parsed !== false )\n      {\n        props[ attribute.propertyName ] = attribute.property;\n        attributes[ attr ] = parsed;\n        updated[ attr ] = true;\n      }\n    }\n      \n    var flash = \n    {\n      source: this,\n\n      units: units,\n       \n      frame: attributes,\n      \n      updated: updated,\n      \n      styles: styles,\n      \n      cached: {},\n\n      get: function(attributes)\n      {\n        return this.source.get( attributes );\n      },\n      \n      value: function(attr)\n      {\n        return attributes[ attr ] + units[ attr ];\n      },\n      \n      valueOr: function(attr, other, subproperty)\n      {\n        var value = attributes[ attr ];\n        \n        if ( !anim8.isDefined( value ) )\n        {\n          value = attributes[ attr = other ];\n        \n          if ( anim8.isDefined( subproperty ) )\n          {\n            value = value[ subproperty ];\n          }\n        }\n    \n        return value + units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      var property = props[ prop ];\n      \n      if ( anim8.isFunction( property.preset ) )\n      {\n        props[ prop ].preset( this.subject, flash );\n      }\n    }\n    \n    for (var prop in props)\n    {\n      props[ prop ].set( this.subject, flash );\n    }\n    \n    for (var prop in styles)\n    {\n      this.subject.style[ prop ] = styles[ prop ];\n    }\n\n    return this;\n  },\n  \n  /**\n   * Builds the styles map in preparation to be applied.\n   *\n   * @method getStyles\n   */\n  getStyles: function()\n  {\n    this.styles = {};\n    \n    var applyProperties = {};\n    \n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        var prop = this.attributeToProperty[ attr ];\n        \n        if ( this.properties.has( prop ) )\n        {\n          applyProperties[ prop ] = true; \n        }\n      }\n    }\n    \n    for (var prop in applyProperties)\n    {\n      this.properties.get( prop ).set( this.subject, this );  \n      \n      this.styled = true;\n    }\n  },\n\n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute and the value is the desired unit.\n   *\n   * @method get\n   * @param {Object} attributes\n   * @return {Object}\n   */\n  get: function(attributes)\n  {\n    var props = {};\n    var animating = {};\n    var units = {};\n    var out = {};\n    \n    for (var attr in attributes)\n    {    \n      var attribute = this.getAttribute( attr );\n      \n      animating[ attr ] = false;    \n      units[ attr ] = attributes[ attr ] || attribute.defaultUnit;\n      props[ attribute.propertyName ] = attribute.property;\n      out[ attr ] = attribute.cloneDefault();\n    }\n    \n    var flash = \n    {    \n      source: this,\n\n      units: units,\n      \n      frame: out,\n      \n      animating: animating,\n      \n      unit: function(attr)\n      {\n        return units[ attr ];\n      }\n    };\n    \n    for (var prop in props)\n    {\n      props[ prop ].get( this.subject, flash );\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {String} attribute\n   * @param {String} desiredUnit\n   * @param {String} relativeTo\n   * @return {Function}\n   */\n  ref: function(attribute, desiredUnit, relativeTo)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame && anim8.isNumber( animator.frame[ attribute ] ) )\n      {\n        return anim8.dom.convert( animator.e, animator.value( attribute ), desiredUnit, relativeTo );\n      }\n      \n      request[ attribute ] = desiredUnit;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return animator.getAttribute( attribute ).defaultValue;\n    };\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   *\n   * @method value\n   * @param {String} attr\n   * @return {String}\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ] + this.units[ attr ];\n  },\n\n  /**\n   * Returns the value for the given attribute as a string with the current units.\n   * if the attribute doesn't exist a secondary one is looked up. If that value\n   * is an object and contains the given subproperty the value is resolved once again.\n   *\n   * @method valueOr\n   * @param {String} attr\n   * @param {String} other\n   * @param [String] subproperty\n   * @return {String}\n   */\n  valueOr: function(attr, other, subproperty)\n  {\n    var value = this.frame[ attr ];\n      \n    if ( !anim8.isDefined( value ) )\n    {\n      value = this.frame[ attr = other ];\n      \n      if ( anim8.isDefined( subproperty ) )\n      {\n        value = value[ subproperty ];\n      }\n    }\n    \n    return value + this.units[ attr ];\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenTo\n   * @param {String} attr\n   * @param {T} target\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {String} [unit]\n   * @chainable\n   */\n  tweenTo: function(attr, target, options, cache, unit)\n  {\n    this.convertExisting( attr, unit );\n    anim8.fn.tweenTo.apply( this, arguments );\n    this.units[ attr ] = unit || this.units[ attr ];\n    return this;\n  },\n\n  /**\n   * Tweens multiple attributes to target values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenManyTo\n   * @param {Object} targets\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {Object} [units]\n   * @chainable\n   */\n  tweenManyTo: function(targets, options, cache, units)\n  {\n    this.convertExistingMany( units );\n    anim8.fn.tweenManyTo.apply( this, arguments );\n    anim8.override( this.units, units );\n    return this;\n  },\n\n  /**\n   * Tweens a single attribute from a starting value to the current value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenFrom\n   * @param {String} attr\n   * @param {T} starting\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {String} [unit]\n   * @chainable\n   */\n  tweenFrom: function(attr, starting, options, cache, unit)\n  {\n    this.convertExisting( attr, unit );\n    anim8.fn.tweenFrom.apply( this, arguments );\n    this.units[ attr ] = unit || this.units[ attr ];\n    return this;\n  },\n\n  /**\n   * Tweens multiple attributes from starting values to the current values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenManyFrom\n   * @param {Object} startings\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {Object} [units]\n   * @chainable\n   */\n  tweenManyFrom: function(startings, options, cache, units)\n  {\n    this.convertExistingMany( units );\n    anim8.fn.tweenManyFrom.apply( this, arguments );\n    anim8.override( this.units, units );\n    return this;\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tween\n   * @param {String} attr\n   * @param {T} starts\n   * @param {T} ends\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {String} [unit]\n   * @chainable\n   */\n  tween: function(attr, starts, ends, options, cache, unit)\n  {\n    this.convertExisting( attr, unit );\n    anim8.fn.tween.apply( this, arguments );\n    this.units[ attr ] = unit || this.units[ attr ];\n    return this;\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method tweenMany\n   * @param {Object} starts\n   * @param {Object} ends\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {Object} [units]\n   * @chainable\n   */\n  tweenMany: function(starts, ends, options, cache, units)\n  {\n    this.convertExistingMany( units );\n    anim8.fn.tweenMany.apply( this, arguments );\n    anim8.override( this.units, units );\n    return this;\n  },\n\n  /**\n   * Moves an attribute relative to its current value.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method move\n   * @param {String} attr\n   * @param {T} amount\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {String} [unit]\n   * @chainable\n   */\n  move: function(attr, amount, options, cache, unit)\n  {\n    this.convertExisting( attr, unit );\n    anim8.fn.move.apply( this, arguments );\n    this.units[ attr ] = unit || this.units[ attr ];\n    return this;\n  },\n\n  /**\n   * Moves multiple attribute relative to their current value.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method moveMany\n   * @param {Object} amounts\n   * @param {String|Array|Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {Object} [units]\n   * @chainable\n   */\n  moveMany: function(amounts, options, cache, units)\n  {\n    this.convertExistingMany( units );\n    anim8.fn.moveMany.apply( this, arguments );\n    anim8.override( this.units, units );\n    return this;\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * **See:** {{#crossLink \"Core/anim8.options:method\"}}{{/crossLink}}\n   * \n   * @method follow\n   * @param {String} attr\n   * @param {Path|Object|String} path\n   * @param {Object} [options]\n   * @param {Boolean} [cache=false]\n   * @param {String} [unit]\n   * @chainable\n   */\n  follow: function(attr, path, options, cache, unit)\n  {\n    this.convertExisting( attr, unit );\n    anim8.fn.follow.apply( this, arguments );\n    this.units[ attr ] = unit || this.units[ attr ];\n    return this;\n  },\n\n  /**\n   * Converts any existing attributes to the desired units.\n   *\n   * @method convertExistingMany\n   * @param  {Object} units\n   */\n  convertExistingMany: function(units)\n  {\n    if ( units && anim8.isObject( units ) )\n    {\n      var current = this.get( units );\n\n      for (var attr in current)\n      {\n        this.frame[ attr ] = current[ attr ];\n      }\n    }\n  },\n\n  /**\n   * Converts any existing attribute to the desired unit.\n   *\n   * @method convertExisting\n   * @param  {String} attr\n   * @param  {String} toUnit\n   */\n  convertExisting: function(attr, toUnit)\n  {\n    if ( toUnit && attr in this.frame && attr in this.units && this.units[ attr ] !== toUnit )\n    {\n      var request = {};\n      request[ attr ] = toUnit;\n\n      this.convertExistingMany( request );\n    }\n  }\n\n});\n","/**\n * A factory for jQuery objects.\n */\nanim8.jQueryFactory = function()\n{\n  this.priority = 10;\n};\n\n// It extends anim8.Factory\nanim8.override( anim8.jQueryFactory.prototype = new anim8.Factory(),\n{\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return typeof jQuery !== 'undefined' && subject instanceof jQuery;\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    return anim8.factory.dom.animatorFor( subject[0] );\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    subject.each(function() \n    {\n      var animator = anim8.factory.dom.animatorFor( this );\n\n      if (animator) \n      {\n        animators.push( animator );\n      }\n    });\n  }\n  \n});\n\n/**\n * Registers the jQuery factory.\n */\nanim8.factory['jquery'] = new anim8.jQueryFactory();\n\n/**\n * Adds useful anim8js functions to jQuery.\n * \n * @param  {jQuery}\n * @param  {anim8}\n * @param  {anim8s}\n * @return {function}\n */\n(function($, m8, m8s)\n{\n\n  /**\n   * Extend the clone function to remove the attribute which stores the animator ID so clones get new animators.\n   * \n   * @return {jQuery}\n   */\n  var cloner = $.fn.clone;\n  \n  $.fn.clone = function()\n  {\n    var clone = cloner.apply( this, arguments );\n    \n    clone.removeAttr( anim8.factory.dom.elementAttribute );\n\n    return clone;\n  };\n\n  /**\n   * Adds the m8, anim8, and animator functions to jQuery. An instance of anim8.Animator will be returned.\n   * \n   * @return {anim8.Animator}\n   */\n  $.fn.m8 = $.fn.anim8 = $.fn.animator = function()\n  {\n    return m8( this[0] );\n  };\n\n  /**\n   * Adds the m8s, anim8s, animators functions to jQuery. An instance of anim8.Animators will be returned.\n   * \n   * @return {anim8.Animators}\n   */\n  $.fn.m8s = $.fn.anim8s = $.fn.animators = function()\n  {\n    return m8s( this.get() );\n  };\n  \n  /**\n   * Plays the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  [boolean] all\n   * @param  [boolean] cache\n   * @return {this}\n   * @see anim8.Animator.play\n   */\n  $.fn.dataPlay = function( animationAttribute, all, cache )\n  {\n    var options = {};\n\n\t\treturn this.filter(function()\n\t  {\n\t\t\tvar animationText = $(this).data( animationAttribute );\n\t\t\n\t\t\tif ( animationText )\n\t\t\t{\n        var animation = anim8.animation( animationText, options, cache );\n\n        if ( animation !== false )\n        {\n          m8( this ).play( animation, options, all ); \n\n          return true;\n        }\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n  \t});\n  };\n  \n  /**\n   * Queues the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  [boolean] cache\n   * @return {this}\n   * @see anim8.Animator.queue\n   */\n  $.fn.dataQueue = function( animationAttribute, cache )\n  {\t\n    var options = {};\n\n  \treturn this.filter(function()\n    {\n  \t\tvar animationText = $(this).data( animationAttribute );\n\t\t\n  \t\tif ( animationText )\n  \t\t{\n        var animation = anim8.animation( animationText, options, cache );\n\n        if ( animation !== false )\n        {\n          m8( this ).queue( animation );\n\n          return true;\n        }\n  \t\t}\n\t\t\t\n\t\t\treturn false;\n    });\n  };\n\n  /**\n   * Transitions into the animation specified in the given data attribute.\n   *\n   * The returned jQuery object is reduced to the elements that had a valid animation attribute.\n   * \n   * @param  {string} animationAttribute\n   * @param  {number} transitionTime\n   * @param  {number} transitionDelta\n   * @param  {string|function} transitionEasing\n   * @param  {boolean} cache\n   * @return {this}\n   */\n  $.fn.dataTransition = function( animationAttribute, transition, all, cache )\n  { \n    var options = {};\n\n    return this.filter(function()\n    {\n      var animationText = $(this).data( animationAttribute );\n    \n      if ( animationText )\n      {\n        var animation = anim8.animation( animationText, options, cache );\n \n        if ( animation !== false )\n        {\n          m8( this ).transition( transition, animation, options, all );\n          \n          return true;\n        }\n      }\n      \n      return false;\n    });\n  };\n\n  /**\n   * Wraps every character with a span and the class sequenced and returns a jquery\n   * element containing all wrapped characters.\n   * \n   * @return {jQuery}\n   */\n  $.fn.sequence = function()\n  {\n    this.each(function()\n    {\n      $(this).html( $(this).wrapCharacters('div', 'class=\"sequenced\"') );\n    });\n\n    return this.find('.sequenced');\n  };\n\n  /**\n   * Wraps every character in ever element in the jQuery object with a tag.\n   * If an element already only has one character it remains untouched.\n   * \n   * @param  {string} tagName\n   * @param  {string} attributes\n   * @return {string} attributes\n   */\n  $.fn.wrapCharacters = function(tagName, attributes)\n  {\n    var tagBegin = '<' + tagName + (typeof attributes === 'string' ? ' ' + attributes : '') + '>';\n    var tagEnd = '</' + tagName + '>';\n    var html = '';\n\n    $(this).contents().each(function()\n    {\n      // Is this a text node?\n      if (this.nodeType === 3)\n      {\n        // Break up node wrapping each character\n        var text = this.data;\n\n        if (text.length > 1)\n        {\n          // Collapse whitespaces\n          var previousSpace = false;\n          for (var i = 0; i < text.length; i++)\n          {\n            var space = text[i] <= ' ';\n            if (!space || !previousSpace)\n            {\n              html += tagBegin + text[i] + tagEnd;\n            }\n            previousSpace = space;\n          }\n        }\n        else\n        {\n          html += text;\n        }\n      }\n      else\n      {\n        // Not a text node!\n        var outer = this.outerHTML;\n        // If there are children, we need to recursively break them down\n        if (this.firstChild)\n        {\n          // Grab the element tag and attributes manually.\n          var start = 0;\n          var quotes = false;\n          while (start < outer.length)\n          {\n            var c = outer[start++];\n            if (c === '\"' || c === \"'\")\n            {\n              quotes = !quotes;\n            }\n            else if (c === '\\\\')\n            {\n              start++;\n            }\n            else if (c === '>' && !quotes)\n            {\n              break;\n            }\n          }\n          html += outer.substring(0, start) + $(this).wrapCharacters(tagName) + '</' + this.tagName.toLowerCase() + '>';\n        }\n        // No child nodes, just append outer HTML.\n        else\n        {\n          html += outer;\n        }\n      }\n    });\n\n    return html;\n  };\n  \n})(jQuery, anim8, anim8s);\n"],"sourceRoot":"/source/"}