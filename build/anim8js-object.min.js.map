{"version":3,"sources":["anim8js-core.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-point.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-event.js","anim8js-event-instance.js","anim8js-animation.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tween.js","anim8js-factory.js","anim8js-object.js"],"names":["m8","anim8","subject","Animator","factory","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","log","size","prop","isEmpty","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","delay","defaults","sleep","duration","repeat","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","scale","constant","variable","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","attribute","attr","defaultValue","easing","teasing","transitionTime","transitionDelta","transitionIntoDelta","transitionEasing","cache","Defer","methods","$factory","$push","prototype","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","indexOf","pair","e","t","easingType","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","pong","yoyo","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attributes","calc","calculator","clone","frame","relative","relativeAmount","relativeFunction","add","Calculator","create","adds","amount","sub","mul","interpolate","start","end","delta","zero","distance","distanceSq","isValid","isZero","isEqual","isRelative","getRelativeAmount","z","NumberCalculator","amountScale","ab","epsilon","Point2dCalculator","y","cx","cy","rx","ry","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Point3dCalculator","cz","rz","dz","QuaternionCalculator","angle","ra","da","RGBCalculator","rr","rg","rb","dr","dg","db","RGBACalculator","path","Path","spring","type","reset","name","points","hasComputed","compute","ps","isComputedValue","reference","trues","last","first","point","replaceComputed","resolvePoint","Tween","tween","CubicPath","p0","p1","p2","p3","d1","d2","d3","i1","i3","QuadraticPath","quadratic","DeltaPath","deltas","ds","d0","pd","JumpPath","index","jump","CompiledPath","pointCount","compiled","KeyframePath","easings","ea","keyframe","defaultEasing","PointPath","Spring","rest","position","gravity","velocity","update","dt","MAX_DT","starting","updateVelocity","updated","EPSILON","resolveRest","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","temp","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","scaleBase","hasInitialState","parser","newInstance","EventInstance","isInstance","getParser","totalTime","isInfinite","timeRemaining","timeRemainingInChain","finiteTimeRemaining","finiteTimeRemainingInChain","queue","state","pauseTime","pauseState","elapsed","catchup","isAnimating","finish","progress","applyValue","isPaused","isDelayed","isSleeping","cycle","cycleCount","maxCycles","computeValue","baseValue","value","newState","getDelta","getPoint","getFuture","fdelta","getStart","getEnd","pause","resume","hasStarted","isFinished","hasStates","states","stateText","animation","options","Animation","key","animationStrings","anim","parsedAnimation","parsedOptions","parserName","save","part","charAt","substring","isSaved","newEvents","instances","cloneEvents","merge","force","fn","springs","finished","active","computedUpdated","restore","preupdate","wasFinished","placeSpring","placeEvent","trimEvents","activate","deactivate","destroy","createEvents","onAnimation","eventMap","queueEvents","maxRemaining","existing","unspring","springsFor","play","all","playEvents","attrs","transition","transitionEvents","e1","e2","transitionPath","transitionEvent","transitionInto","transitionFromDelta","transitionIntoEvents","tweenTo","target","tweenManyTo","targets","starts","ends","tweenMany","applyInitialState","eventCount","eventsFor","remaining","ref","request","get","follow","objectsFor","objects","resulting","stop","set","hasEvents","hasSprings","getSubject","wrapper","invoke","func","DeferAnimator","fill","each","iterator","filter","filterer","alive","remove","getSubjects","reverse","mid","e0","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","Parser","newOptions","oldOptions","durations","delays","sleeps","repeats","scales","scaleBases","ParserDeltas","values","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","sort","from","half","to","times","maxTime","order","calculators","pathEasings","ParserTween","highestPriorityFactory","factoryName","is","priority","Factory","ObjectFactory","$animator"],"mappings":"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","file":"anim8js-object.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factory( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {array} subject\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factory( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * If the user is interested in seeing warnings they can override this by specifying\n * a function which accepts a text argument providing a generc message, a second argument\n * which has the input that caused the warning, and a third agument with the object\n * throwing the warning. Most warnings that are thrown occur when an animation is\n * trying to be parsed an the user provided an invalid animation, time, easing, etc.\n *\n * @param {string} message\n * @param {any} source\n */\nanim8.log = false;\n\n/**\n * Returns the size of the variable. The size of a variable is dependent on the variable\n * type. For arrays and strings their length is returned. If it's an object the number of\n * enumerable properties is returned. If it's a number, the number is returned. Otherwise\n * zero is returned.\n *\n * @param {any} x\n */\n anim8.size = function(x)\n {\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length;\n  }\n  else if ( x === null )\n  {\n    return 0;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var size = 0;\n\n    for (var prop in x)\n    {\n      size++;\n    }\n\n    return size;\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n};\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding overriding any existing properties.\n * \n * @param  {object} out\n * @return {object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding existing properties where necessary.\n * \n * @param  {object}\n * @return {object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses scale from a string or number.\n * \n * @param  {string|number}\n * @return {number}\n */\nanim8.scale = function(scale, returnOnInvalid)\n{\n  if ( anim8.isNumber( scale ) )\n  {\n    return scale;\n  }\n\n  return anim8.coalesce( returnOnInvalid, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n * \n * @param  {number} v\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n      \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t        eventListeners.length = 0;\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n\n/*****************************************************************\n  REGISTRIES\n******************************************************************/\n\n/* Attributes are the animatable properties of a subject\n\n  anim8.attribute[name] = {\n    // the default value for an attribute if none exists on the subject\n    defaultValue: 0,\n    // the name of the calculator this attribute requires for mathematical operations. default value: anim8.calculator.default\n    calculator: calculatorName,\n    // other values can be specified here that the respective factory might use\n    \"factory specific attributes\"\n  }\n*/\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.attribute = function(attr) \n{\n  if ( anim8.isObject(attr) && anim8.isDefined(attr.defaultValue) ) \n\t{\n    return attr;\n  }\n  if ( anim8.isString(attr) && attr in anim8.attribute ) \n\t{\n    return anim8.attribute[ attr ];\n  }\n\t\n  return anim8.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.attribute.default = {defaultValue: 0};\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   * \n   * @type {number}\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @type {string|function}\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @type {string|function}\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @type {number}\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @type {number}\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @type {number}\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @type {number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @type {number}\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition delta.\n   * \n   * @type {number}\n   */\n  transitionDelta: 0.2,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {number}\n   */\n  transitionIntoDelta: 0.2,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {string|function}\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * @type {boolean}\n   */\n  cache: false\n\n};\n","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n    \n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * [bezier description]\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\n/**\n * [default description]\n * @type {[type]}\n */\nanim8.easing.default      = anim8.easing.ease;\n","\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) {\n\t\treturn easing( x );\n\t};\n};\n\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) {\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } else {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\nanim8.easingType.pong = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x );\n\t  } else {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n// yoyo is an alias for pong\nanim8.easingType.yoyo = anim8.easingType.pong;\n","\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * [computed description]\n * @type {Object}\n */\nanim8.computed = {};\n\n/**\n * Calculates the current value for an animator.\n * \n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.current = function(event, animator)\n{\n  var attr = event.attribute;\n  var attribute = animator.attributes[ attr ];\n  var calc = anim8.calculator( attribute.calculator );\n\n  if ( attr in animator.frame )\n  {\n    return calc.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return calc.clone( attribute.defaultValue );\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currenrtly in the animator.\n * \n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.relative = function(relativeAmount)\n{\n  var relativeFunction = function(event, animator)\n  { \n    var attr = event.attribute;\n    var attribute = animator.attributes[ attr ];\n    var calc = anim8.calculator( attribute.calculator );\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = calc.clone( attribute.defaultValue );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  return relativeFunction;\n};","/**\n * Calculators perform math and basic operations for a specific data structure.\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Instantiates a new Calculator instance.\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * [copy description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * [clone description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clone: function(out) \n  {\n    return this.copy( this.create(), out );\n  },\n\n  /**\n   * [create description]\n   * @return {[type]}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * [scale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * [add description]\n   * @param {[type]}\n   * @param {[type]}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * [adds description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * [sub description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * [mul description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * [interpolate description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * [distance description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * [distanceSq description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * [isValid description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * [isNaN description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * [isZero description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * [isEqual description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * [isRelative description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * [relativeAmount description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n */\nanim8.NumberCalculator = function()\n{\n\n};\n\nanim8.override( anim8.NumberCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  }\n});\n\n/**\n * Register the calculators.\n */\nanim8.calculator['number']      = new anim8.NumberCalculator();\nanim8.calculator['default']     = anim8.calculator['number'];\n","\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.Point2dCalculator = function()\n{\n\n};\n\nanim8.override( anim8.Point2dCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n\n        if ( this.isRelative( cx ) || this.isRelative( cy ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  }\n});\n\n/**\n * Register all calculators.\n */\nanim8.calculator['2d']          = new anim8.Point2dCalculator();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.Point3dCalculator = function()\n{\n\n};\n\nanim8.override( anim8.Point3dCalculator.prototype = new anim8.Calculator(), \n{\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n\n        if ( this.isRelative( cx ) || this.isRelative( cy ) || this.isRelative( cz ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['3d']          = new anim8.Point3dCalculator();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.QuaternionCalculator = function()\n{\n\n};\n\nanim8.override( anim8.QuaternionCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n\n        if ( this.isRelative( cx ) || this.isRelative( cy ) || this.isRelative( cz ) || this.isRelative( ca ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  }\n});\n\n\n/**\n * Register the calculator.\n */\nanim8.calculator['quaternion']  = new anim8.QuaternionCalculator();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.RGBCalculator = function()\n{\n\n};\n\nanim8.override( anim8.RGBCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n\n        if ( this.isRelative( cr ) || this.isRelative( cg ) || this.isRelative( cb ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n\t\t\n    // Try to parse the color.\n\t\tvar parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgb']         = new anim8.RGBCalculator();\n","\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.RGBACalculator = function()\n{\n\n};\n\nanim8.override( anim8.RGBACalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n\n        if ( this.isRelative( cr ) || this.isRelative( cg ) || this.isRelative( cb ) || this.isRelative( ca ) )\n        {\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgba']        = new anim8.RGBACalculator();\n","\n/**\n * [path description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n/**\n * [Path description]\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * [reset description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n\t{\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( this.isComputedValue( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * [isComputedValue description]\n   * @return {Boolean}\n   */\n  isComputedValue: function(x)\n  {\n    return anim8.isFunction( x ) && x.computed;\n  },\n\n  /**\n   * [reference description]\n   * @return {[type]}\n   */\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n\n  /**\n   * [last description]\n   * @return {[type]}\n   */\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n\n  /**\n   * [first description]\n   * @return {[type]}\n   */\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n\n  /**\n   * [point description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n\n  /**\n   * [replaceComputed description]\n   * @return {[type]}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( this.isComputedValue( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * [resolvePoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  }\n\n};\n","\n/**\n * [Tween description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n\n});\n\n/**\n * [tween description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.tween = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  var defaultValue = calc.create();\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, defaultValue ),\n    calc.parse( path.end, defaultValue )\n  );\n};\n","\n/**\n * [CubicPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.CubicPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  }\n\n});\n\n/**\n * [cubic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.cubic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * [QuadraticPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.QuadraticPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  }\n\n});\n\n/**\n * [quadratic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.quadratic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * [DeltaPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.DeltaPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n      return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n\n});\n\n/**\n * [delta description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.delta = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * [JumpPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.JumpPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n  }\n\n});\n\n/**\n * [jump description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.jump = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * [CompiledPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.CompiledPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CompiledPath( this.name, this, this.points.length );\n  }\n\n});\n\n/**\n * [compiled description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.compiled = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * [KeyframePath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.KeyframePath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n\n});\n\n/**\n * [keyframe description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.keyframe = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * [PointPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.override( anim8.PointPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.copy( out, this.resolvePoint( 0 ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n  }\n\n});\n\n/**\n * [point description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path.point = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.Spring.prototype = \n{\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  reset: function(attribute, calculator, rest, position, gravity)\n  {\n    var calc = anim8.calculator( calculator );\n    var a = anim8.attribute( attribute );\n    \n    this.attribute    = attribute;\n    this.calculator   = calc;\n    this.rest         = calc.parse( rest, a.defaultValue );\n    this.position     = calc.parse( position, a.defaultValue );\n    this.gravity      = calc.parse( gravity, calc.create() );\n    this.velocity     = calc.create();\n    this.time         = 0;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} now\n   * @param {object} frame\n   */\n  update: function(now, frame)\n  {\n    if (this.time === 0)\n    {\n      this.time = now;\n    }\n    \n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (now - this.time) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.copy( {}, this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    this.time = now;\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  }\n};\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * [LinearSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, gravity)\n{\n  var a = anim8.attribute( attribute );\n  \n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.damping      = this.calculator.parse( damping, a.defaultValue );\n  this.stiffness    = this.calculator.parse( stiffness, a.defaultValue );\n  this.temp0        = this.calculator.create();\n  this.temp1        = this.calculator.create();\n};\n\nanim8.override( anim8.LinearSpring.prototype = new anim8.Spring(), \n{\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring.linear = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\n/**\n * [DistanceSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = this.calculator.create();\n};\n\nanim8.override( anim8.DistanceSpring.prototype = new anim8.Spring(), \n{\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring.distance = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\n/**\n * [EventState description]\n * @type {[type]}\n */\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\n/**\n * [Event description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {Boolean}\n * @param {[type]}\n * @param {Function}\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  if ( attribute )\n  {\n    this.attribute        = attribute;\n    this.path             = path;\n    this.easing           = anim8.easing( easing );\n    this.delay            = anim8.delay( delay );\n    this.duration         = anim8.duration( duration );\n    this.sleep            = anim8.sleep( sleep );\n    this.repeat           = anim8.repeat( repeat );\n    this.scale            = anim8.scale( scale );\n    this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.create() );\n    this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n    this.parser           = parser;\n    this.next             = next; \n  }\n};\n\nanim8.Event.prototype = \n{\n  /**\n   * [newInstance description]\n   * @return {[type]}\n   */\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this );\n  },\n\n  /**\n   * [isInstance description]\n   * @return {Boolean}\n   */\n  isInstance: function()\n  {\n    return false\n  },\n\n  /**\n   * [getParser description]\n   * @return {[type]}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * [totalTime description]\n   * @return {[type]}\n   */\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n\n  /**\n   * [isInfinite description]\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime();\n  },\n\n  /**\n   * [timeRemainingInChain description]\n   * @return {[type]}\n   */\n  timeRemainingInChain: function()\n  {\n    return this.timeRemaining() + (this.next ? this.next.timeRemainingInChain() : 0);\n  },\n\n  /**\n   * [finiteTimeRemaining description]\n   * @return {[type]}\n   */\n  finiteTimeRemaining: function()\n  {\n    return this.isInfinite() ? 0 : this.timeRemaining();\n  },\n\n  /**\n   * [finiteTimeRemainingInChain description]\n   * @return {[type]}\n   */\n  finiteTimeRemainingInChain: function()\n  {\n    return this.isInfinite() ? 0 : this.timeRemaining() + (this.next ? this.next.finiteTimeRemainingInChain() : 0);\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n\n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(e)\n  {\n    if ( this.next )\n    {\n      this.next.queue( e );\n    }\n    else\n    {\n      this.next = e;\n    }\n  }\n\n};\n","\n/**\n * [EventInstance description]\n * @param {[type]}\n */\nanim8.EventInstance = function(event)\n{\n\tthis.event \t\t\t      = event;\n\tthis.attribute \t      = event.attribute;\n\tthis.path \t\t\t      = event.path;\n\tthis.duration \t      = event.duration;\n\tthis.easing \t\t      = event.easing;\n\tthis.delay \t\t\t      = event.delay;\n\tthis.sleep \t\t\t      = event.sleep;\n\tthis.repeat \t\t      = event.repeat;\n  this.scale            = event.scale;\n  this.scaleBase        = event.scaleBase;\n  this.hasInitialState  = event.hasInitialState;\n  this.next             = null;\n  this.state \t\t\t      = anim8.EventState.CREATED;\n  this.time \t\t\t      = 0;\n  this.pauseTime \t      = 0;\n  this.pauseState       = 0;\n\tthis.elapsed\t\t      = 0;\n};\n\nanim8.override( anim8.EventInstance.prototype = new anim8.Event(),\n{\n  /**\n   * [newInstance description]\n   * @return {[type]}\n   */\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this.event );\n  },\n\n  /**\n   * [isInstance description]\n   * @return {Boolean}\n   */\n  isInstance: function()\n  {\n    return true\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.EventInstance( this.event );\n  },\n\n  /**\n   * [getParser description]\n   * @return {[type]}\n   */\n  getParser: function()\n  {\n    return this.event.parser;\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed;\n  },\n\n  /**\n   * [update description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(now, frame) \n\t{\n    var updated = false;\n    var elapsed = this.catchup( now );\n    \n    if ( this.isAnimating() ) \n\t\t{\t\t\t\n      var delta = elapsed / this.duration;\n      \n      if (delta >= 1 || this.duration === 0)\n\t\t\t{\n        if (!this.isInfinite() && --this.repeat === 0) \n\t\t\t\t{\n          this.finish(frame);\n\t\t\t\t\t\n          return true;\n        } \n\t\t\t\telse \n\t\t\t\t{\n          if (this.sleep)\n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING ); \n            delta = 1;\n            \n            this.trigger('sleeping', this);\n          } \n\t\t\t\t\telse \n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.ANIMATING );\n            delta -= 1;\n          }\n        }\n      }\n      \n      this.applyValue( frame, frame[this.attribute], delta );\n      updated = true;\n    }\n    \n    return updated;\n  },\n\n  /**\n   * [catchup description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  catchup: function(now)\n  {\n    if ( this.isPaused() )\n    {\n      return;\n    }\n    \n    if ( this.state === anim8.EventState.CREATED )\n    {\n      this.time = now;\n      \n      if ( this.delay )\n      {\n        this.state = anim8.EventState.DELAYED;\n        \n        this.trigger('delaying', this);\n      } \n      else\n      {\n        this.state = anim8.EventState.ANIMATING;\n      }\n    }\n    \n    var elapsed = now - this.time;\n    \n    if ( this.isDelayed() )\n    {\n      if ( elapsed > this.delay ) \n      {\n        this.trigger('delayed', this);\n        \n        elapsed = this.progress( elapsed, this.delay, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isSleeping() )\n    {\n      if ( elapsed > this.sleep )\n      {\n        this.trigger('slept', this);\n        \n        elapsed = this.progress( elapsed, this.sleep, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isAnimating() && this.duration )\n    {\n      var cycle = this.duration + this.sleep;\n      var cycleCount = Math.floor( ( elapsed + this.sleep ) / cycle );\n      var maxCycles = Math.min( this.repeat, cycleCount );\n            \n      elapsed = this.progress( elapsed, maxCycles * cycle, anim8.EventState.ANIMATING );\n      \n      if ( !this.isInfinite() )\n      { \n        if (maxCycles === this.repeat)\n        {\n          elapsed = this.duration;\n          this.repeat = 1;\n        }\n        else\n        {\n          this.repeat -= cycleCount;\n        }\n      }\n      \n      if ( elapsed > this.duration )\n      {\n        elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING );\n        \n        this.trigger('sleeping', this);\n      }\n    }\n    \n    return elapsed;\n  },\n\n  /**\n   * [computeValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * [progress description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  progress: function(elapsed, time, newState) \n  {\n    this.time += time;\n    this.elapsed += time;\n    this.state = newState;\n    \n    return elapsed - time;\n  },\n\n  /**\n   * [finish description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n    \n    this.trigger('finish', this);\n  },\n\n  /**\n   * [applyValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[this.attribute] = value;\n    }\n  },\n\n  /**\n   * [getDelta description]\n   * @return {[type]}\n   */\n  getDelta: function()\n  {\n    return this.isAnimating() ? Math.min( 1.0, (anim8.now() - this.time) / this.duration ) : 0.0;\n  },\n\n  /**\n   * [getPoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getPoint: function(delta)\n  {\n    return this.computeValue( this.path.calculator.create(), delta );\n  },\n\n  /**\n   * [getFuture description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getFuture: function(fdelta)\n  {\n    return this.getPoint( Math.min( 1.0, this.getDelta() + fdelta ) );\n  },\n\n  /**\n   * [getStart description]\n   * @return {[type]}\n   */\n  getStart: function()\n  {\n    return this.getPoint( 0 );\n  },\n\n  /**\n   * [getEnd description]\n   * @return {[type]}\n   */\n  getEnd: function() \n\t{\n    return this.getPoint( 1 );\n  },\n\n  /**\n   * [pause description]\n   * @return {[type]}\n   */\n  pause: function() \n  {\n    if (this.state !== anim8.EventState.PAUSED) \n    {\n      this.pauseTime = anim8.now();\n      this.pauseState = this.state;\n      this.state = anim8.EventState.PAUSED; \n    }\n  },\n\n  /**\n   * [resume description]\n   * @return {[type]}\n   */\n  resume: function() \n  {\n    if (this.state === anim8.EventState.PAUSED) \n    {\n      this.time += anim8.now() - this.pauseTime;\n      this.state = this.pauseState; \n    }\n  },\n\n  /**\n   * [hasStarted description]\n   * @return {Boolean}\n   */\n  hasStarted: function()\n  {\n    return (this.state !== anim8.EventState.CREATED && this.state !== anim8.EventState.DELAYED);\n  },\n\n  /**\n   * [isAnimating description]\n   * @return {Boolean}\n   */\n  isAnimating: function() \n  {\n    return (this.state === anim8.EventState.ANIMATING);\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function() \n  {\n    return (this.state === anim8.EventState.FINISHED);\n  },\n\n  /**\n   * [isDelayed description]\n   * @return {Boolean}\n   */\n  isDelayed: function() \n  {\n    return (this.state === anim8.EventState.DELAYED);\n  },\n\n  /**\n   * [isPaused description]\n   * @return {Boolean}\n   */\n  isPaused: function() \n  {\n    return (this.state === anim8.EventState.PAUSED);\n  },\n\n  /**\n   * [isSleeping description]\n   * @return {Boolean}\n   */\n  isSleeping: function() \n  {\n    return (this.state === anim8.EventState.SLEEPING);\n  },\n\n  /**\n   * [hasStates description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  hasStates: function(states) \n  {\n    return (this.state & states) !== 0;\n  },\n\n  /**\n   * [stateText description]\n   * @return {[type]}\n   */\n  stateText: function() \n  {\n    switch(this.state) \n    {\n      case anim8.EventState.CREATED:            return \"created\";\n      case anim8.EventState.DELAYED:            return \"delayed\";\n      case anim8.EventState.ANIMATING:          return \"animating\";\n      case anim8.EventState.SLEEPING:           return \"sleeping\";\n      case anim8.EventState.FINISHED:           return \"finished\";\n    }\n  }\n\n});\n\n/**\n * Adds the following event methods to EventInstances: on, once, off, trigger.\n */\nanim8.eventize( anim8.EventInstance.prototype );","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n * @param [boolean] cache\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) )\n\t{\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationStrings = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationStrings.length; k++)\n    {\n      var split = animationStrings[ k ].toLowerCase().split(' ');\n      var parsedAnimation = anim8.animation[ split[ 0 ] ];\n      var parsedOptions = anim8.options( split.slice( 1 ) );\n\n      if ( parsedAnimation )\n      {\n        if ( anim === false )\n        {\n          last = anim = parsedAnimation.extend( parsedOptions, true );\n        }\n        else\n        {\n          last = last.next = parsedAnimation.extend( parsedOptions, true );\n        }\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n\t\tvar events = [];\n\t\tvar options = options || {};\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, events );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (events.length)\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, events );\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n *\n * [duration] x[repeat] z[sleep] ~[delay] ![scale] [easing[-easingType]]\n * \n * @param  {object|string} options\n * @return {object}\n */\nanim8.options = function(options)\n{\n  if ( anim8.isString( options ) )\n  {\n    options = options.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( options ) )\n  {\n    var parsed = {};\n\n    for (var i = 0; i < options.length; i++)\n    {\n      var part = options[i];\n      var first = part.charAt( 0 );\n\n      // Repeats\n      if ( first === 'x' )\n      {\n        var repeat = anim8.repeat( part.substring(1), false );\n\n        if ( repeat !== false )\n        {\n          parsed.repeat = repeat;\n        }\n      }\n      // Sleeping\n      if ( first === 'z' )\n      {\n        var sleep = anim8.time( part.substring(1), false );\n\n        if ( sleep !== false )\n        {\n          parsed.sleep = sleep;\n        }\n      }\n      // Delay\n      if ( first === '~' )\n      {\n        var delay = anim8.time( part.substring(1), false );\n\n        if ( delay !== false )\n        {\n          parsed.delay = delay;\n        }\n      }\n      // Scaling\n      if ( first === '!' )\n      {\n        var scale = parseFloat( part.substring(1) );\n\n        if ( !isNaN(scale) )\n        {\n          parsed.scale = scale;\n        }\n      }\n      // Easing?\n      var easing = anim8.easing( part, false );\n\n      if ( easing !== false )\n      {\n        parsed.easing = easing;\n      }\n\n      // Duration?\n      var duration = anim8.time( part, false );\n\n      if ( duration !== false )\n      {\n        parsed.duration = duration;\n      }\n      else\n      {\n        // If not a duration, might be an alternative repeat? (doesn't start with x)\n        var repeat = anim8.repeat( part, false );\n\n        if ( repeat !== false )\n        {\n          parsed.repeat = repeat;\n        }\n      }\n    }\n\n    return parsed; \n  }\n\n  if ( anim8.isObject( options ) )\n  {\n    return options;\n  }\n\n  return {};\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the events that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate events, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} events\n */\nanim8.Animation = function(name, input, options, events)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.events = events;\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an array of event instances from the events in this animation.\n   */\n  newEvents: function()\n  {\n    var instances = [];\n    \n    for (var i = 0; i < this.events.length; i++)\n    {\n      instances.push( this.events[i].newInstance() );\n    }\n    \n    return instances;\n  },\n\n  /**\n   * Generates an array of event clones from the events in this animation.\n   * \n   * @return {array}\n   */\n  cloneEvents: function()\n  {\n    var events = [];\n\n    for (var i = 0; i < this.events.length; i++)\n    {\n      events.push( this.events[i].clone() );\n    }\n\n    return events;\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {object} options\n   * @param  {array} events\n   * @return {[type]}\n   */\n  merge: function(options, events)\n  {\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, events );\n      }\n    }\n\n    return events;\n  },\n\n  /**\n   * Extends this animation and returns an animation modified with the given options. \n   *\n   * @param {object} options\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var events = this.cloneEvents();\n\n    this.merge( options, events );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, events );\n  }\n\n};","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(subject)\n\t{\n\t  this.subject = subject;\n\t  this.events = {};\n    this.springs = {};\n\t  this.attributes = {};\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    this.computed = {};\n    this.computedUpdated = false;\n    \n    return this;\n\t},\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  { \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function()\n  {\n    // If there are events placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the even'ts path.\n    if ( this.computedUpdated )\n    {\n      for (var attr in this.computed)\n      {\n        var e = this.computed[ attr ];\n\n        e.path = e.path.replaceComputed( e, this );\n        \n        delete this.computed[ attr ];\n      }\n      \n      this.computedUpdated = false;\n    }\n    \n    // If there isn't a value in frame for any of the events on the animator,\n    // place the default value.\n    for (var attr in this.events)\n    {\n      if ( !(attr in this.frame) )\n      {\n        var attribute = this.attributes[ attr ];\n        var calc = anim8.calculator( attribute.calculator );\n\n        this.frame[ attr ] = calc.clone( attribute.defaultValue );\n      }\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    \n    this.finished = true;\n\t\t\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      this.updated[ attr ] = e.update( now, this.frame );\n      \n      this.finished = this.finished && e.isFinished();\n    }\n    \n    for (var attr in this.springs)\n    {\n      var s = this.springs[ attr ];\n      \n      this.updated[ attr ] = s.update( now, this.frame );\n      \n      this.finished = false;\n    }\n\t\n\t\tthis.trigger('update');\n    \n    return this;\n  },\n  \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function(s)\n  {\n    var attr = s.attribute;\n    \n    this.springs[ attr ] = s;\n    \n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = anim8.attribute( attr ).defaultValue;\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function(e)\n  {\n    var attr = e.attribute;\n\n    if ( !(attr in this.attributes) )\n    {\n      this.attributes[ attr ] = anim8.attribute( attr ); \n    }\n\n    this.events[ attr ] = e;\n    \n    if ( e.hasComputed() )\n    {\n       this.computed[ attr ] = e;\n       this.computedUpdated = true;\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimEvents();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      var e = this.events[attr];\n      \n      if ( e.isFinished() )\n      {\n        if ( e.next )\n        {                    \n          this.placeEvent( e.next );\n          this.finished = false;\n        }\n        else\n        {\n          delete this.events[attr];\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there already.\n   * \n   * @return {[type]}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createEvents: function(animation, options, cache)\n  {\n    var options = anim8.options( options );    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var events = animation.newEvents();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, events );\n    }\n    \n    this.onAnimation( animation, options, events );\n\n    if ( animation.next !== null )\n    {\n      var eventMap = {};\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[i];\n\n        eventMap[ e.attribute ] = e;\n      }\n\n      while ( animation.next !== null )\n      {\n        animation = animation.next;\n\n        var queueEvents = animation.newEvents();\n        var maxRemaining = 0;\n\n        for (var i = 0; i < events.length; i++)\n        {\n          var e = events[i];\n\n          if ( !e.isInfinite() )\n          {\n            maxRemaining = Math.max( maxRemaining, e.finiteTimeRemainingInChain() );  \n          }\n        }\n\n        for (var i = 0; i < queueEvents.length; i++)\n        {\n          var e = queueEvents[ i ];\n          var existing = eventMap[ e.attribute ];\n\n          if ( existing && !existing.isInfinite() )\n          {\n            e.delay += (maxRemaining - existing.finiteTimeRemainingInChain());\n            eventMap[ e.attribute ].queue( e );\n          }\n          else\n          {\n            e.delay += maxRemaining;\n            eventMap[ e.attribute ] = e;\n            events.push( e );\n          }\n        }\n\n        this.onAnimation( animation, options, queueEvents );\n      }      \n    }\n\n    return events;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeSpring( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Removes springs for the specified attributes. If no attributes are specified then all springs\n   * are removed. Attributes can be specified as an array of attribute names or a string with attribute\n   * names separated by a space.\n   *\n   * @param {string|Array} attributes\n   */\n  unspring: function(attributes)\n  {\n    return this.springsFor( attributes, function(s)\n    {\n      delete this.springs[ s.attribute ];\n    });\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Existing events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   * @param [boolean] cache\n   */\n\tplay: function(animation, options, all, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.playEvents( events, all );\n\n    return this.activate();\n\t},\n\n  /**\n   * Adds events to this Animator to be played (optionally finishing events for attributes not specified in the given \n   * attribute). Existing events will be replaced immediately. This method will not activate the Animator, that has\n   * to be done manually.\n   * \n   * @param  {array} events\n   * @param  [boolean] all\n   * @return {this}\n   */\n  playEvents: function(events, all)\n  {\n    var attrs = {};\n    \n    for (var i = 0; i < events.length; i++)\n    { \n      this.placeEvent( events[i] );\n      \n      attrs[ events[i].attribute ] = true;\n    }\n    \n    if ( all )\n    {\n      for (var attr in this.events)\n      {\n        if ( !(attr in attrs) )\n        {\n          this.events[ attr ].finish( this.frame );\n        }\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n        \n    this.queueEvents( events );\n\n    return this;\n\t},\n\n  /**\n   * Queues an array of events on this Animator. The given events will be delayed to start at the same time - at the\n   * end of the events currently on the Animator. This method will not activate the Animator, that has to be done \n   * manually.\n   * \n   * @param  {array} events\n   * @return {this}\n   */\n  queueEvents: function(events)\n  {\n    var maxRemaining = this.finiteTimeRemaining();\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var existing = this.events[ attr ];\n      \n      if ( attr in this.events  && !existing.isInfinite() )\n      {    \n        e.delay += (maxRemaining - existing.timeRemainingInChain());\n        \n        existing.queue( e );\n      }\n      else\n      {\n        e.delay += maxRemaining;\n        \n        this.placeEvent( e );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all, cache)\n  {\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n\n    this.transitionEvents( transitionTime, transitionDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation. This method will not activate the \n   * Animator, that has to be done manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param [array] events\n   * @param [boolean] all\n   */\n  transitionEvents: function(transitionTime, transitionDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n\n    // Parse given variables\n    var transitionTime = anim8.time( transitionTime, anim8.defaults.transitionTime );\n    var transitionDelta = anim8.coalesce( transitionDelta, anim8.defaults.transitionDelta );\n    var transitionEasing = anim8.easing( transitionEasing, anim8.defaults.transitionEasing );\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionDelta );\n          var p2 = e1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, calc, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transitionInto: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation, options, all, cache)\n  {\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.transitionIntoEvents( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation. This method will not activate the Animator, that has to be done \n   * manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {array} events\n   * @param [boolean] all\n   */\n  transitionIntoEvents: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n\n    // Parse given variables\n    var transitionTime = anim8.time( transitionTime, anim8.defaults.transitionTime );\n    var transitionFromDelta = anim8.coalesce( transitionFromDelta, anim8.defaults.transitionDelta );\n    var transitionIntoDelta = anim8.coalesce( transitionIntoDelta, anim8.defaults.transitionIntoDelta );\n    var transitionEasing = anim8.easing( transitionEasing, anim8.defaults.transitionEasing );\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionFromDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transitionIntoDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n      \n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {string} attribute\n   * @param {any} target\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenTo: function(attribute, target, options)\n  {\n    var options = anim8.options( options );\n    var attr = anim8.attribute( attribute );\n    var calc = anim8.calculator( attr.calculator );\n    var start = calc.parse( true );\n    var end = calc.parse( target, attr.defaultValue );\n\n    var path = new anim8.Tween( attribute, calc, start, end );\n    var event = new anim8.Event( attribute, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attribute to target values.\n   *\n   * @param {object} targets\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenManyTo: function(targets, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attribute in targets )\n    {\n      var attr = anim8.attribute( attribute );\n      var calc = anim8.calculator( attr.calculator );\n      var start = calc.parse( true );\n      var end = calc.parse( targets[ attribute ], attr.defaultValue );      \n      \n      var path = new anim8.Tween( attribute, calc, start, end );\n      var event = new anim8.Event( attribute, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {string} attribute\n   * @param {any} starts\n   * @param {any} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tween: function(attribute, starts, ends, options)\n  {\n    var options = anim8.options( options );\n    var attr = anim8.attribute( attribute );\n    var calc = anim8.calculator( attr.calculator );\n    var start = calc.parse( starts, attr.defaultValue );\n    var end = calc.parse( ends, attr.defaultValue );\n\n    var path = new anim8.Tween( attribute, calc, start, end );\n    var event = new anim8.Event( attribute, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {object} starts\n   * @param {object} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenMany: function(starts, ends, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attribute in starts )\n    {\n      var attr = anim8.attribute( input );\n      var calc = anim8.calculator( attr.calculator );\n      var start = calc.parse( starts[ attribute ], attr.defaultValue );\n      var end = calc.parse( ends[ attribute ], attr.defaultValue );\n      \n      var path = new anim8.Tween( attribute, calc, start, end );\n      var event = new anim8.Event( attribute, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n\t\n\t/**\n\t * Applies the initial state of all unstarted current events for the specified attributes immediately. \n\t * Attribute names can be given as an array or a space separated string. If no attributes are given all \n\t * attributes are assumed.\n\t *\n   * @param {string|array} attributes\n\t */\n\tapplyInitialState: function(attributes)\n\t{\n\t\tvar eventCount = this.eventsFor( attributes, function(event, attr)\n\t\t{\n\t\t\tif ( !event.hasStarted() && event.hasInitialState )\n\t\t\t{\n\t\t\t\tevent.applyValue( this.frame, this.frame[ attr ], 0.0 );\n\t\t\t\t\n\t\t\t\tthis.updated[ attr ] = true;\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.apply();\n\t\t\n\t\treturn eventCount;\n\t},\n\n  /**\n   * Returns the amount of time remaining for all finite events in this Animator.\n   * \n   * @return {number} milliseconds\n   */\n  finiteTimeRemaining: function()\n  {\n    var remaining = 0;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      if ( !e.isInfinite() )\n      {\n        remaining = Math.max( remaining, this.events[attr].finiteTimeRemainingInChain() );  \n      }\n    }\n\n    return remaining;\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame )\n      {\n        return animator.frame[ attribute ];\n      }\n      \n      request[ attribute ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return anim8.attribute( attribute ).defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number|string] duration\n   * @param [number|string] delay\n   * @param [function|string] easing\n   * @param [number|string] repeat\n   * @param [number|string] sleep  \n   * @param [number] scale\n   */\n  follow: function(attribute, path, options)\n  {\n    var options = anim8.options( options );\n    var path = anim8.path( path );\n    \n    var event = new anim8.Event( \n      attribute, \n      path, \n      options.duration,\n      options.easing,\n      options.delay, \n      options.sleep,\n      options.repeat,\n      options.scale,\n      options.scaleBase\n    );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  objectsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n    \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        \n        if ( attr in objects )\n        {\n          if ( resulting )\n          {\n            results.push( objects[attr] );\n          }\n          else\n          {\n            callback.call( this, objects[attr], attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      for (var attr in objects)\n      {\n        if ( resulting )\n        {\n          results.push( objects[attr] );\n        }\n        else\n        {\n          callback.call( this, objects[attr], attr );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n  \n  /**\n   * Invokes the callback for each event for the given attributes.\n   * \n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\teventsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.events );\n\t},\n  \n  /**\n   * Invokes the callback for each spring for the given attributes.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\tspringsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.springs );\n\t},\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event, attr) \n\t\t{\n\t\t\tdelete this.events[ attr ];\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event) \n\t\t{\n\t\t\twhile (event.next)\n\t\t\t{\n\t\t\t\tevent = event.next;\n\t\t\t}\n\t\t\t\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator.\n   */\n  hasSprings: function()\n  {\n    for (var attr in this.springs)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator or animating events.\n   */\n  isAnimating: function()\n  {\n    if ( this.hasSprings() )\n    {\n      return true;\n    }\n    \n    for (var attr in this.events)\n    {\n      if ( this.events[attr].isAnimating() )\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  },\n\n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator if none is given. This is particularly\n   * useful for having a function be called on deferred statements.\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  invoke: function(func, context, arguments)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, arguments || [] );\n    }\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n   * @param [function] callback\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t}\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'play', 'queue', 'transition', 'transitionInto', 'restore', 'set', 'resume', 'pause', \n  'finish', 'end', 'stop', 'follow', 'applyInitialState', 'tweenTo', \n  'tween', 'tweenMany', 'tweenManyTo', 'spring', 'unspring', 'apply', \n  'placeSpring', 'placeEvent', 'invoke'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.override( anim8s.fn = anim8.Animators.prototype = new Array(),\n{\n  /**\n   * Invokes a callback for each element in the array.\n   * \n   * @param {function} iterator\n   */\n  each: function(iterator, context) \n  {\n    for (var i = 0; i < this.length; i++) \n    {\n      if ( iterator.call( context || this[i], this[i], i ) === false ) \n      {\n        break;\n      }\n    }\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @param {array} animators\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n   *\n   * @param {function} filterer\n   */\n  filter: function(filterer)\n  {\t\n  \tvar alive = 0;\n  \t\n  \tfor (var i = 0; i < this.length; i++)\n  \t{\n  \t\tvar remove = filterer( this[i] );\n  \t\t\n  \t\tif ( !remove )\n  \t\t{\n  \t\t\tthis[alive++] = this[i];\n  \t\t}\n  \t}\n  \t\n  \tthis.length = alive;\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubjects: function(wrapper)\n  {\n    var subjects = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      subjects.push( this[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   */\n  first: function()\n  {\n    return this[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   */\n   reverse: function()\n   {\n    var last = this.length - 1;\n    var mid = Math.floor( this.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = this[ i ];\n      var e1 = this[ last - i ];\n\n      this[ i ] = e1;\n      this[ last - i ] = e0;\n    }\n\n    return this;\n   },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   * \n   * @return {this}\n   */\n  activate: function()\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var animator = this[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Returns an array of the subjects optionally\n   */\n\n  /**\n   * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * Adds the following methods to make an array of Animators appear like a single Animator.\n   */\n  restore              : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n  placeSpring          : anim8.delegate( 'placeSpring', anim8.delegate.RETURN_THIS ),\n  placeEvent           : anim8.delegate( 'placeEvent', anim8.delegate.RETURN_THIS ),\n  preupdate            : anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS ),\n  update               : anim8.delegate( 'update', anim8.delegate.RETURN_THIS ),\n  apply                : anim8.delegate( 'apply', anim8.delegate.RETURN_THIS ),\n  trimEvents           : anim8.delegate( 'trimEvents', anim8.delegate.RETURN_THIS ),\n  deactivate           : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n  destroy              : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n  spring               : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n  unspring             : anim8.delegate( 'unspring', anim8.delegate.RETURN_THIS ),\n  play                 : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n  playEvents           : anim8.delegate( 'playEvents', anim8.delegate.RETURN_THIS ),\n  queue                : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n  queueEvents          : anim8.delegate( 'queueEvents', anim8.delegate.RETURN_THIS ),\n  transition           : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n  transitionEvents     : anim8.delegate( 'transitionEvents', anim8.delegate.RETURN_THIS ),\n  transitionInto       : anim8.delegate( 'transitionInto', anim8.delegate.RETURN_THIS ),\n  transitionIntoEvents : anim8.delegate( 'transitionIntoEvents', anim8.delegate.RETURN_THIS ),\n  tween                : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n  tweenTo              : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n  tweenMany            : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n  tweenManyTo          : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n  applyInitialState    : anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS ),\n  follow               : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n  eventsFor            : anim8.delegate( 'eventsFor', anim8.delegate.RETURN_RESULTS ),\n  springsFor           : anim8.delegate( 'springsFor', anim8.delegate.RETURN_RESULTS ),\n  stop                 : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n  end                  : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n  finish               : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n  pause \t\t\t         : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n  resume \t\t\t         : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n  set                  : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n  get                  : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n  isAnimating          : anim8.delegate( 'isAnimating', anim8.delegate.RETURN_TRUE ),\n  hasEvents            : anim8.delegate( 'hasEvents', anim8.delegate.RETURN_TRUE ),\n  hasSprings           : anim8.delegate( 'hasSprings', anim8.delegate.RETURN_TRUE ),\n  on\t\t\t             : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n  once\t\t             : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n  off\t\t\t             : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n  trigger              : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n});\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate();\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * [Sequence description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * [maxDelay description]\n   * @return {[type]}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  /**\n   * [createEvents description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  createEvents: function(animation, options, i)\n  {\n    var events = animation.newEvents();\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = 0; k < events.length; k++)\n    {\n      events[k].delay += delayOffset;\n    }\n\n    animation.merge( options, events );\n    \n    return events;\n  },\n\n  /**\n   * [reverse description]\n   * @return {[type]}\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * [play description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  play: function(animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.playEvents( sequence.createEvents( anim, options, i ), all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(animation, options, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.finiteTimeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var events = sequence.createEvents( anim, options, i );\n      \n      for (var i = 0; i < events.length; i++)\n      {\n        events[ i ].delay += delayOffset;\n      }\n      \n      animator.queueEvents( events );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transition description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionEvents( transitionTime, transitionDelta, transitionEasing, sequence.createEvents( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transitionInto description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transitionInto: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionIntoEvents( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, sequence.createEvents( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [add description]\n   */\n  add: function()\n  {\n    this.animators.activate();\n    this.animators.applyInitialState();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var easings   = animation.easings || {};\n    var delays    = animation.delays || {};\n    var sleeps    = animation.sleeps || {};\n    var repeats   = animation.repeats || {};\n    var scales    = animation.scales || {};\n    var scaleBases= animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = anim8.easing( anim8.coalesce( easings[attr],   newOptions.easing,   oldOptions.easing   ), e.easing );\n      e.repeat    = anim8.repeat( anim8.coalesce( repeats[attr],   newOptions.repeat,   oldOptions.repeat   ), e.repeat );\n      e.delay     = anim8.time(   anim8.coalesce( delays[attr],    newOptions.delay,    oldOptions.delay    ), e.delay );\n      e.sleep     = anim8.time(   anim8.coalesce( sleeps[attr],    newOptions.sleep,    oldOptions.sleep    ), e.sleep );\n      e.duration  = anim8.time(   anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration ), e.duration );\n      e.scale     =               anim8.coalesce( scales[attr],    newOptions.scale,    oldOptions.scale     , e.scale );\n      e.scaleBase = calc.parse(   anim8.coalesce( scaleBases[attr],newOptions.scaleBase,oldOptions.scaleBase), e.scaleBase );\n    }\n  }\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the events\n    \n  \tvar deltas = animation.deltas;\n  \tvar values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      var valueCount = 0;\n      \n  \t\tfor (var attr in values)\n  \t\t{\n        valueCount++; \n      }\n      \n      deltas = [];\n      \n      for (var i = 0; i < valueCount; i++)\n      {\n        deltas[i] = i / (valueCount - 1);\n      }\n    }\n  \tif ( anim8.isArray( deltas ) )\n  \t{\n  \t\tvar deltaObject = {};\n  \t\t\n  \t\tfor (var attr in values)\n  \t\t{\n  \t\t\tdeltaObject[attr] = deltas;\t\n  \t\t}\n  \t\t\n  \t\tdeltas = deltaObject;\n  \t}\n  \t\n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[attr];\n      var calculator = false;\n  \t\tvar defaultValue = false;\n  \t\t\n      if ( attr in anim8.attribute )\n      {\n        calculator = anim8.calculator( anim8.attribute[attr].calculator );\n  \t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n      }\n      else\n      {\n        calculator = anim8.calculator.default;\n  \t\t\tdefaultValue = calculator.create();\n      }\n  \t\t\n  \t\tfor (var k = 0; k < value.length; k++)\n  \t\t{\n  \t\t\tvalue[k] = calculator.parse( value[k], defaultValue );\n  \t\t}\n  \t\t\n      var duration = anim8.coalesce( durations[attr], options.duration );\n      var easing   = anim8.coalesce( easings[attr], options.easing );\n      var delay    = anim8.coalesce( delays[attr], options.delay );\n      var sleep    = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat   = anim8.coalesce( repeats[attr], options.repeat );\n      var scale    = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n\n      var path     = new anim8.DeltaPath( attr, calculator, values[attr], deltas[attr] );\n      var event    = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.values = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Generate the events, only caring about the delays and durations\n    \n  \tvar values = animation.final;\n  \t\n    var delays = animation.delays || {};\n    var durations = animation.durations || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    var calculators = {};\n  \tvar defaults = {};\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[attr];\n      var calculator = false;\n  \t\tvar defaultValue = false;\n  \t\t\n      if ( attr in anim8.attribute )\n      {\n        calculator = anim8.calculator( anim8.attribute[attr].calculator );\n  \t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n      }\n      else\n      {\n        calculator = anim8.calculator.default;\n  \t\t\tdefaultValue = calculator.create();\n      }\n\n      value = calculator.parse( value, defaultValue ); \n  \t\t\n      var delay    = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var duration = anim8.duration( anim8.coalesce( durations[attr], options.duration ) );\n      var scale    = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n\n      var path     = new anim8.PointPath( attr, calculator, value );\n      var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, scale, scaleBase, false, this );\n      \n      events.push( event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales    = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      var delay = anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay );\n      var duration = anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration );\n\n      e.delay = anim8.delay( delay ) + anim8.duration( duration );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.final = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Generate the events, only caring about the delays\n    \n  \tvar values = animation.initial;\n  \t\n    var delays = animation.delays || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    var calculators = {};\n  \tvar defaults = {};\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[attr];\n      var calculator = false;\n  \t\tvar defaultValue = false;\n  \t\t\n      if ( attr in anim8.attribute )\n      {\n        calculator = anim8.calculator( anim8.attribute[attr].calculator );\n  \t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n      }\n      else\n      {\n        calculator = anim8.calculator.default;\n  \t\t\tdefaultValue = calculator.create();\n      }\n      \n      value = calculator.parse( value, defaultValue ); \n  \t\t\n      var delay    = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var scale    = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n      \n      var path     = new anim8.PointPath( attr, calculator, value );\n      var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      e.delay = anim8.time( anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay ), e.delay );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.initial = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the events\n    \n    var kframes = animation.keyframe;\n    \n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var calculators = {};\n  \tvar defaults = {};\n    var pathEasings = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          \n          if (attr in anim8.attribute)\n          {\n            calculators[attr] = anim8.calculator( anim8.attribute[attr].calculator );\n  \t\t\t\t\tdefaults[attr] = anim8.attribute[attr].defaultValue;\n          }\n          else\n          {\n            calculators[attr] = anim8.calculator.default;\n  \t\t\t\t\tdefaults[attr] = calculators[attr].create();\n          }\n        }\n  \t\t\t\n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( calculators[attr].parse( frame.value[attr], defaults[attr] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[attr], easing ) ) );\n      }\n    }\n  \t\n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration = anim8.coalesce( durations[attr], options.duration );\n      var delay    = anim8.coalesce( delays[attr], options.delay );\n      var sleep    = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat   = anim8.coalesce( repeats[attr], options.repeat );\n      var scale    = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n      \n      var path     = new anim8.KeyframePath( attr, calculators[attr], values[attr], deltas[attr], pathEasings[attr] );\n      var event    = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser.keyframe = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTween = function()\n{\n  \n};\n\n// ParserTween extends anim8.Parser()\nanim8.override( anim8.ParserTween.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var tweenTo = animation.tweenTo;\n\n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBase || {};\n\n  \tfor (var attr in tweenTo)\n  \t{\n      var calculator = null;\n  \t\tvar defaultValue = false;\n  \t\t\n      if ( attr in anim8.attribute )\n      {\n        calculator = anim8.calculator( anim8.attribute[attr].calculator );\n  \t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n      }\n      else\n      {\n        calculator = anim8.calculator.default;\n  \t\t\tdefaultValue= calculator.create();\n      }\n  \t\t\n      var value    = calculator.parse( tweenTo[attr], defaultValue );\n      var duration = anim8.coalesce( durations[attr], options.duration );\n      var easing   = anim8.coalesce( easings[attr], options.easing );\n      var delay    = anim8.coalesce( delays[attr], options.delay );\n      var sleep    = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat   = anim8.coalesce( repeats[attr], options.repeat );\n      var scale    = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase= anim8.coalesce( scaleBases[attr], options.scaleBase );\n      \n      var path     = new anim8.Tween( attr, calculator, calculator.parse( true ), value );\n      var event    = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser.tweenTo = new anim8.ParserTween();\n","\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factory = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return false;\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    return false;\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n  this.priority = 0;\n};\n\nanim8.override( anim8.ObjectFactory.prototype = new anim8.Factory(),\n{\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;\n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  }\n\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory.object = new anim8.ObjectFactory();\n"],"sourceRoot":"/source/"}