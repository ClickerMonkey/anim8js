{"version":3,"sources":["anim8js-core.js","anim8js-fast-map.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-point.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-event.js","anim8js-event-instance.js","anim8js-animation.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tween.js","anim8js-parser-move.js","anim8js-factory.js","anim8js-object.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","defaults","duration","easing","teasing","delay","sleep","repeat","scale","transitionTime","transitionDelta","transitionIntoDelta","transitionEasing","cache","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","log","size","prop","isEmpty","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","constant","variable","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","FastMap","values","keys","indices","prototype","put","key","value","putMap","map","get","remove","index","lastValue","pop","lastKey","indexOf","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","pair","e","t","easingType","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","yoyo","mirror","reverse","flip","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attr","attribute","getAttribute","frame","calculator","clone","cloneDefault","relative","relativeAmount","mask","isComputed","relativeFunction","calc","mul","add","Calculator","create","adds","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","isValid","isZero","isEqual","isRelative","getRelativeAmount","z","NumberCalculator","defaultValue","amountScale","ab","epsilon","Point2dCalculator","y","cx","cy","rx","ry","ix","iy","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Point3dCalculator","cz","rz","iz","dz","QuaternionCalculator","angle","ra","ia","da","RGBCalculator","rr","rg","rb","ir","ig","ib","dr","dg","db","RGBACalculator","path","Path","spring","type","reset","name","points","hasComputed","compute","ps","reference","trues","last","first","point","replaceComputed","resolvePoint","isLinear","granularity","prev","temp","Tween","CubicPath","p0","p1","p2","p3","d1","d2","d3","i1","i3","QuadraticPath","DeltaPath","deltas","ds","d0","pd","JumpPath","CompiledPath","pointCount","KeyframePath","easings","ea","defaultEasing","PointPath","Spring","rest","position","gravity","velocity","preupdate","parseValue","update","dt","MAX_DT","starting","updateVelocity","updated","EPSILON","resolveRest","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","scaleBase","hasInitialState","parser","newInstance","EventInstance","isInstance","getParser","totalTime","isInfinite","timeRemaining","queue","state","pauseTime","pauseState","elapsed","cycle","catchup","isAnimating","finish","progress","applyValue","isPaused","isDelayed","isSleeping","cycleCount","maxCycles","computeValue","baseValue","newState","getDelta","getPoint","getFuture","fdelta","getStart","getEnd","pause","resume","hasStarted","isFinished","hasStates","states","stateText","animation","options","Animation","animationStrings","anim","parsedAnimation","parsedOptions","parserName","save","part","charAt","substring","isSaved","newEvents","instances","cloneEvents","merge","force","fn","eventsAdded","eventsComputed","springs","springsAdded","finished","active","cycleCurrent","cycleNext","newCycle","applyCurrentCycle","restore","ce","setDefault","sa","wasFinished","placeSpring","placeEvent","trimEvents","activate","deactivate","destroy","createEvents","onAnimation","eventMap","queueEvents","maxRemaining","existing","unspring","attributes","springsFor","play","all","playEvents","attrs","transition","transitionEvents","e1","e2","transitionPath","transitionEvent","transitionInto","transitionFromDelta","transitionIntoEvents","tweenTo","target","tweenManyTo","targets","tween","starts","ends","tweenMany","applyInitialState","eventCount","eventsFor","remaining","ref","request","follow","objectsFor","objects","resulting","stop","set","unset","hasEvents","hasSprings","getSubject","wrapper","invoke","func","DeferAnimator","fill","each","iterator","filter","filterer","alive","getSubjects","mid","e0","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","Parser","newOptions","oldOptions","durations","delays","sleeps","repeats","scales","scaleBases","ParserDeltas","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","keyframe","sort","from","half","to","times","maxTime","order","pathEasings","ParserTween","ParserMove","move","highestPriorityFactory","factoryName","is","priority","Factory","ObjectFactory","$animator","calculatorName","dom"],"mappings":"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","file":"anim8js-object.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {array} subject\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   * \n   * @type {number}\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @type {string|function}\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @type {string|function}\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @type {number}\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @type {number}\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @type {number}\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @type {number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @type {number}\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition delta.\n   * \n   * @type {number}\n   */\n  transitionDelta: 0.2,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {number}\n   */\n  transitionIntoDelta: 0.2,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {string|function}\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * @type {boolean}\n   */\n  cache: false\n\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * If the user is interested in seeing warnings they can override this by specifying\n * a function which accepts a text argument providing a generc message, a second argument\n * which has the input that caused the warning, and a third agument with the object\n * throwing the warning. Most warnings that are thrown occur when an animation is\n * trying to be parsed an the user provided an invalid animation, time, easing, etc.\n *\n * @param {string} message\n * @param {any} source\n */\nanim8.log = false;\n\n/**\n * Returns the size of the variable. The size of a variable is dependent on the variable\n * type. For arrays and strings their length is returned. If it's an object the number of\n * enumerable properties is returned. If it's a number, the number is returned. Otherwise\n * zero is returned.\n *\n * @param {any} x\n */\n anim8.size = function(x)\n {\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length;\n  }\n  else if ( x === null )\n  {\n    return 0;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var size = 0;\n\n    for (var prop in x)\n    {\n      size++;\n    }\n\n    return size;\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n};\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding overriding any existing properties.\n * \n * @param  {object} out\n * @return {object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding existing properties where necessary.\n * \n * @param  {object}\n * @return {object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses scale from a string or number.\n * \n * @param  {string|number}\n * @return {number}\n */\nanim8.scale = function(scale, returnOnInvalid)\n{\n  if ( anim8.isNumber( scale ) )\n  {\n    return scale;\n  }\n\n  return anim8.coalesce( returnOnInvalid, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n * \n * @param  {number} v\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n      \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t        eventListeners.length = 0;\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an array.\n * This is especially beneficial when most of the time the contents of the structure need to be iterated and order\n * doesn't matter (since removal performs a swap which breaks insertion order).\n */\nanim8.FastMap = function()\n{\n  this.values = [];\n  this.keys = [];\n  this.indices = {};\n};\n\nanim8.FastMap.prototype =\n{\n  /**\n   * Puts the value in the map by the given key.\n   * \n   * @param  {string} key\n   * @param  {any} value\n   * @return {this}\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   * \n   * @param  {anim8.FastMap}\n   * @return {this}\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   * \n   * @param  {string} key\n   * @return {any}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   * \n   * @param  {string} key\n   * @return {this}\n   */\n  remove: function(key)\n  {\n    if ( key in this.indices )\n    {\n      var index = this.indices[ key ];\n      var lastValue = this.values.pop();\n      var lastKey = this.keys.pop();\n\n      if ( index < this.values.length )\n      {\n        this.values[ index ] = lastValue;\n        this.keys[ index ] = lastKey;\n        this.indices[ lastKey ] = index;\n      }\n\n      delete this.indices[ key ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   * \n   * @param  {string} key\n   * @return {number}\n   */\n  indexOf: function(key)\n  {\n    return this.indices[ key ];\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   * \n   * @return {number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  }\n\n};","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n    \n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * [bezier description]\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\n/**\n * [default description]\n * @type {[type]}\n */\nanim8.easing.default      = anim8.easing.ease;\n","\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\n/**\n * Plays the animation forward normally.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn easing( x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum halfway.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } \n\t  else \n\t  {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\n/**\n * Plays the aninmation forwards with the given easing, and backwards with the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.yoyo = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x );\n\t  } \n\t  else \n\t  {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n/**\n * Plays the animation forwards with the given easing, and backwards reflecting the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.mirror = function(easing)\n{\n\treturn function(x)\n\t{\n\t\tif ( x < 0.5 )\n\t\t{\n\t\t\treturn easing( 2.0 * x );\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1.0 - easing( 2.0 - 2.0 * x );\n\t\t}\n\t};\n};\n\n/**\n * Plays the animation backwards with using the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.reverse = function(easing)\n{\n\treturn easing( 1.0 - x );\n};\n\n/**\n * Plays the animation backwards by flipping the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.flip = function(easing)\n{\n\treturn 1.0 - easing( x );\n};\n","\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * [computed description]\n * @type {Object}\n */\nanim8.computed = {};\n\n/**\n * Calculates the current value for an animator.\n * \n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.current = function(event, animator)\n{\n  var attr = event.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currenrtly in the animator.\n * \n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.relative = function(relativeAmount, mask)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( anim8.isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(event, animator)\n  { \n    var attr = event.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = attribute.cloneDefault();\n    }\n\n    if ( mask )\n    {\n      current = calc.mul( current, mask );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  relativeFunction.relativeAmount = relativeAmount;\n  relativeFunction.mask = mask;\n\n  return relativeFunction;\n};\n\n/**\n * [isComputed description]\n * @param  {[type]}\n * @return {Boolean}\n */\nanim8.isComputed = function(x)\n{\n  return anim8.isFunction( x ) && x.computed;\n};","/**\n * Calculators perform math and basic operations for a specific data structure.\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Instantiates a new Calculator instance.\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * [copy description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * [clone description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clone: function(out) \n  {\n    return this.copy( this.create(), out );\n  },\n\n  /**\n   * [create description]\n   * @return {[type]}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * [scale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * [add description]\n   * @param {[type]}\n   * @param {[type]}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * [adds description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * [sub description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * [mul description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * [interpolate description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * [distance description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * [distanceSq description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * [isValid description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * [isNaN description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * [isZero description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * [isEqual description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * [isRelative description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * [relativeAmount description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n */\nanim8.NumberCalculator = function()\n{\n\n};\n\nanim8.override( anim8.NumberCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  }\n});\n\n/**\n * Register the calculators.\n */\nanim8.calculator['default'] = anim8.calculator['number'] = new anim8.NumberCalculator();\n","\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.Point2dCalculator = function()\n{\n\n};\n\nanim8.override( anim8.Point2dCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n\n        if ( ix || iy )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  }\n});\n\n/**\n * Register all calculators.\n */\nanim8.calculator['2d'] = new anim8.Point2dCalculator();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.Point3dCalculator = function()\n{\n\n};\n\nanim8.override( anim8.Point3dCalculator.prototype = new anim8.Calculator(), \n{\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n\n        if ( ix || iy || iz )\n        { \n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['3d'] = new anim8.Point3dCalculator();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.QuaternionCalculator = function()\n{\n\n};\n\nanim8.override( anim8.QuaternionCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n        var ia = this.isRelative( ca );\n\n        if ( ix || iy || iz || ia )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0,\n            angle: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx }, { x:0, y:0, z:0, angle:1 } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  }\n});\n\n\n/**\n * Register the calculator.\n */\nanim8.calculator['quaternion'] = new anim8.QuaternionCalculator();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.RGBCalculator = function()\n{\n\n};\n\nanim8.override( anim8.RGBCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n\n        if ( ir || ig || ib )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n\t\t\n    // Try to parse the color.\n\t\tvar parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgb'] = new anim8.RGBCalculator();\n","\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.RGBACalculator = function()\n{\n\n};\n\nanim8.override( anim8.RGBACalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n        var ia = this.isRelative( ca );\n\n        if ( ir || ig || ib || ia )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0,\n            a: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgba'] = new anim8.RGBACalculator();\n","\n/**\n * [path description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n/**\n * [Path description]\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * [reset description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n\t{\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * [reference description]\n   * @return {[type]}\n   */\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n\n  /**\n   * [last description]\n   * @return {[type]}\n   */\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n\n  /**\n   * [first description]\n   * @return {[type]}\n   */\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n\n  /**\n   * [point description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n\n  /**\n   * [replaceComputed description]\n   * @return {[type]}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * [resolvePoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  },\n\n  /**\n   * Returns whether the path is linear. Linear paths go directly from point to\n   * point where curved paths do not. Linear paths can have their length calculated\n   * fairly easily however curves you must compute length with a given granularity.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return true;\n  },\n\n  /**\n   * Computes the length of the Path with a given granularity. Granularity\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  length: function(granularity)\n  {\n    var distance = 0;\n    var calc = this.calculator;\n\n    if ( this.isLinear() )\n    {\n      var prev = this.resolvePoint( 0 );\n\n      for (var i = 1; i < this.points.length; i++)\n      {\n        var next = this.resolvePoint( i );\n\n        distance += calc.distance( prev, next );\n\n        prev = next;\n      }\n    }\n    else\n    {\n      var deltadelta = 1.0 / granularity;\n      var delta = delta;\n      var prev = calc.clone( this.resolvePoint( 0 ) );\n      var temp = calc.create();\n\n      for (var i = 1; i <= granularity; i++)\n      {\n        var next = this.compute( temp, delta );\n\n        distance += calc.distance( prev, next );\n\n        temp = prev;\n        prev = next;\n      }\n    }\n\n    return distance;\n  }\n\n};\n","\n/**\n * [Tween description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n\n});\n\n/**\n * [tween description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['tween'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  var defaultValue = calc.create();\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, defaultValue ),\n    calc.parse( path.end, defaultValue )\n  );\n};\n","\n/**\n * [CubicPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.CubicPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  },\n\n  /**\n   * CubicPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [cubic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['cubic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * [QuadraticPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.QuadraticPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  },\n\n  /**\n   * QuadraticPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [quadratic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['quadratic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * [DeltaPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.DeltaPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n      return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n\n});\n\n/**\n * [delta description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['delta'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * [JumpPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.JumpPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n  }\n\n});\n\n/**\n * [jump description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['jump'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * [CompiledPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.CompiledPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CompiledPath( this.name, this, this.points.length );\n  }\n\n});\n\n/**\n * [compiled description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['compiled'] = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * [KeyframePath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.KeyframePath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n\n});\n\n/**\n * [keyframe description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['keyframe'] = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * [PointPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.override( anim8.PointPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.copy( out, this.resolvePoint( 0 ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n  }\n\n});\n\n/**\n * [point description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['point'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.Spring.prototype = \n{\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  reset: function(attribute, calculator, rest, position, gravity)\n  { \n    this.attribute    = attribute;\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = null;\n    this.time         = 0;\n  },\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  preupdate: function(animator)\n  {\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.create() );\n    this.velocity   = calc.create();\n  },\n\n  /**\n   * [parseValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isFunction( parsed ) )\n    {\n      if ( parsed.computed )\n      {\n        parsed = parsed( this, animator );\n      }\n    }\n\n    return parsed;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} now\n   * @param {object} frame\n   */\n  update: function(now, frame)\n  {\n    if (this.time === 0)\n    {\n      this.time = now;\n    }\n    \n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (now - this.time) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.copy( {}, this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    this.time = now;\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  }\n};\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * [LinearSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.LinearSpring.prototype = new anim8.Spring(), \n{\n  preupdate: function(animator)\n  {\n    anim8.Spring.prototype.preupdate.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['linear'] = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\n/**\n * [DistanceSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.DistanceSpring.prototype = new anim8.Spring(), \n{\n  preupdate: function(animator)\n  {\n    anim8.Spring.prototype.preupdate.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['distance'] = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\n/**\n * [EventState description]\n * @type {[type]}\n */\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\n/**\n * [Event description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {Boolean}\n * @param {[type]}\n * @param {Function}\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  if ( attribute )\n  {\n    this.attribute        = attribute;\n    this.path             = path;\n    this.easing           = anim8.easing( easing );\n    this.delay            = anim8.delay( delay );\n    this.duration         = anim8.duration( duration );\n    this.sleep            = anim8.sleep( sleep );\n    this.repeat           = anim8.repeat( repeat );\n    this.scale            = anim8.scale( scale );\n    this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.create() );\n    this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n    this.parser           = parser;\n    this.next             = next; \n  }\n};\n\nanim8.Event.prototype = \n{\n  /**\n   * [newInstance description]\n   * @return {[type]}\n   */\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this );\n  },\n\n  /**\n   * [isInstance description]\n   * @return {Boolean}\n   */\n  isInstance: function()\n  {\n    return false\n  },\n\n  /**\n   * [getParser description]\n   * @return {[type]}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * [totalTime description]\n   * @return {[type]}\n   */\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n\n  /**\n   * [isInfinite description]\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n\n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(e)\n  {\n    if ( this.next )\n    {\n      this.next.queue( e );\n    }\n    else\n    {\n      this.next = e;\n    }\n  }\n\n};\n","\n/**\n * [EventInstance description]\n * @param {[type]}\n */\nanim8.EventInstance = function(event)\n{\n\tthis.event \t\t\t      = event;\n\tthis.attribute \t      = event.attribute;\n\tthis.path \t\t\t      = event.path;\n\tthis.duration \t      = event.duration;\n\tthis.easing \t\t      = event.easing;\n\tthis.delay \t\t\t      = event.delay;\n\tthis.sleep \t\t\t      = event.sleep;\n\tthis.repeat \t\t      = event.repeat;\n  this.scale            = event.scale;\n  this.scaleBase        = event.scaleBase;\n  this.hasInitialState  = event.hasInitialState;\n  this.next             = null;\n  this.state \t\t\t      = anim8.EventState.CREATED;\n  this.time \t\t\t      = 0;\n  this.pauseTime \t      = 0;\n  this.pauseState       = 0;\n\tthis.elapsed\t\t      = 0;\n  this.cycle            = 0;\n};\n\nanim8.override( anim8.EventInstance.prototype = new anim8.Event(),\n{\n  /**\n   * [newInstance description]\n   * @return {[type]}\n   */\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this.event );\n  },\n\n  /**\n   * [isInstance description]\n   * @return {Boolean}\n   */\n  isInstance: function()\n  {\n    return true\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.EventInstance( this.event );\n  },\n\n  /**\n   * [getParser description]\n   * @return {[type]}\n   */\n  getParser: function()\n  {\n    return this.event.parser;\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * [update description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(now, frame) \n\t{\n    var updated = false;\n    var elapsed = this.catchup( now );\n    \n    if ( this.isAnimating() ) \n\t\t{\t\t\t\n      var delta = elapsed / this.duration;\n      \n      if (delta >= 1 || this.duration === 0)\n\t\t\t{\n        if (!this.isInfinite() && --this.repeat === 0) \n\t\t\t\t{\n          this.finish(frame);\n\t\t\t\t\t\n          return true;\n        } \n\t\t\t\telse \n\t\t\t\t{\n          if (this.sleep)\n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING ); \n            delta = 1;\n            \n            this.trigger('sleeping', this);\n          } \n\t\t\t\t\telse \n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.ANIMATING );\n            delta -= 1;\n          }\n        }\n      }\n      \n      this.applyValue( frame, frame[this.attribute], delta );\n      updated = true;\n    }\n    \n    return updated;\n  },\n\n  /**\n   * [catchup description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  catchup: function(now)\n  {\n    if ( this.isPaused() )\n    {\n      return;\n    }\n    \n    if ( this.state === anim8.EventState.CREATED )\n    {\n      this.time = now;\n      \n      if ( this.delay )\n      {\n        this.state = anim8.EventState.DELAYED;\n        \n        this.trigger('delaying', this);\n      } \n      else\n      {\n        this.state = anim8.EventState.ANIMATING;\n      }\n    }\n    \n    var elapsed = now - this.time;\n    \n    if ( this.isDelayed() )\n    {\n      if ( elapsed > this.delay ) \n      {\n        this.trigger('delayed', this);\n        \n        elapsed = this.progress( elapsed, this.delay, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isSleeping() )\n    {\n      if ( elapsed > this.sleep )\n      {\n        this.trigger('slept', this);\n        \n        elapsed = this.progress( elapsed, this.sleep, anim8.EventState.ANIMATING );\n      }\n    }\n    \n    if ( this.isAnimating() && this.duration )\n    {\n      var cycle = this.duration + this.sleep;\n      var cycleCount = Math.floor( ( elapsed + this.sleep ) / cycle );\n      var maxCycles = Math.min( this.repeat, cycleCount );\n            \n      elapsed = this.progress( elapsed, maxCycles * cycle, anim8.EventState.ANIMATING );\n      \n      if ( !this.isInfinite() )\n      { \n        if (maxCycles === this.repeat)\n        {\n          elapsed = this.duration;\n          this.repeat = 1;\n        }\n        else\n        {\n          this.repeat -= cycleCount;\n        }\n      }\n      \n      if ( elapsed > this.duration )\n      {\n        elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING );\n        \n        this.trigger('sleeping', this);\n      }\n    }\n    \n    return elapsed;\n  },\n\n  /**\n   * [computeValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * [progress description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  progress: function(elapsed, time, newState) \n  {\n    this.time += time;\n    this.elapsed += time;\n    this.state = newState;\n    \n    return elapsed - time;\n  },\n\n  /**\n   * [finish description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n    \n    this.trigger('finish', this);\n  },\n\n  /**\n   * [applyValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[this.attribute] = value;\n    }\n  },\n\n  /**\n   * [getDelta description]\n   * @return {[type]}\n   */\n  getDelta: function()\n  {\n    return this.isAnimating() ? Math.min( 1.0, (anim8.now() - this.time) / this.duration ) : 0.0;\n  },\n\n  /**\n   * [getPoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getPoint: function(delta)\n  {\n    return this.computeValue( this.path.calculator.create(), delta );\n  },\n\n  /**\n   * [getFuture description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getFuture: function(fdelta)\n  {\n    return this.getPoint( Math.min( 1.0, this.getDelta() + fdelta ) );\n  },\n\n  /**\n   * [getStart description]\n   * @return {[type]}\n   */\n  getStart: function()\n  {\n    return this.getPoint( 0 );\n  },\n\n  /**\n   * [getEnd description]\n   * @return {[type]}\n   */\n  getEnd: function() \n\t{\n    return this.getPoint( 1 );\n  },\n\n  /**\n   * [pause description]\n   * @return {[type]}\n   */\n  pause: function() \n  {\n    if (this.state !== anim8.EventState.PAUSED) \n    {\n      this.pauseTime = anim8.now();\n      this.pauseState = this.state;\n      this.state = anim8.EventState.PAUSED; \n    }\n  },\n\n  /**\n   * [resume description]\n   * @return {[type]}\n   */\n  resume: function() \n  {\n    if (this.state === anim8.EventState.PAUSED) \n    {\n      this.time += anim8.now() - this.pauseTime;\n      this.state = this.pauseState; \n    }\n  },\n\n  /**\n   * [hasStarted description]\n   * @return {Boolean}\n   */\n  hasStarted: function()\n  {\n    return (this.state !== anim8.EventState.CREATED && this.state !== anim8.EventState.DELAYED);\n  },\n\n  /**\n   * [isAnimating description]\n   * @return {Boolean}\n   */\n  isAnimating: function() \n  {\n    return (this.state === anim8.EventState.ANIMATING);\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function() \n  {\n    return (this.state === anim8.EventState.FINISHED);\n  },\n\n  /**\n   * [isDelayed description]\n   * @return {Boolean}\n   */\n  isDelayed: function() \n  {\n    return (this.state === anim8.EventState.DELAYED);\n  },\n\n  /**\n   * [isPaused description]\n   * @return {Boolean}\n   */\n  isPaused: function() \n  {\n    return (this.state === anim8.EventState.PAUSED);\n  },\n\n  /**\n   * [isSleeping description]\n   * @return {Boolean}\n   */\n  isSleeping: function() \n  {\n    return (this.state === anim8.EventState.SLEEPING);\n  },\n\n  /**\n   * [hasStates description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  hasStates: function(states) \n  {\n    return (this.state & states) !== 0;\n  },\n\n  /**\n   * [stateText description]\n   * @return {[type]}\n   */\n  stateText: function() \n  {\n    switch(this.state) \n    {\n      case anim8.EventState.CREATED:            return \"created\";\n      case anim8.EventState.DELAYED:            return \"delayed\";\n      case anim8.EventState.ANIMATING:          return \"animating\";\n      case anim8.EventState.SLEEPING:           return \"sleeping\";\n      case anim8.EventState.FINISHED:           return \"finished\";\n    }\n  }\n\n});\n\n/**\n * Adds the following event methods to EventInstances: on, once, off, trigger.\n */\nanim8.eventize( anim8.EventInstance.prototype );","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n * @param [boolean] cache\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) )\n\t{\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationStrings = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationStrings.length; k++)\n    {\n      var split = animationStrings[ k ].toLowerCase().split(' ');\n      var parsedAnimation = anim8.animation[ split[ 0 ] ];\n      var parsedOptions = anim8.options( split.slice( 1 ) );\n\n      if ( parsedAnimation )\n      {\n        if ( anim === false )\n        {\n          last = anim = parsedAnimation.extend( parsedOptions, true );\n        }\n        else\n        {\n          last = last.next = parsedAnimation.extend( parsedOptions, true );\n        }\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n\t\tvar events = [];\n\t\tvar options = options || {};\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, events );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (events.length)\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, events );\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n *\n * [duration] x[repeat] z[sleep] ~[delay] ![scale] [easing[-easingType]]\n * \n * @param  {object|string} options\n * @return {object}\n */\nanim8.options = function(options)\n{\n  if ( anim8.isString( options ) )\n  {\n    options = options.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( options ) )\n  {\n    var parsed = {};\n\n    for (var i = 0; i < options.length; i++)\n    {\n      var part = options[i];\n      var first = part.charAt( 0 );\n\n      // Repeats\n      if ( first === 'x' )\n      {\n        var repeat = anim8.repeat( part.substring(1), false );\n\n        if ( repeat !== false )\n        {\n          parsed.repeat = repeat;\n        }\n      }\n      // Sleeping\n      if ( first === 'z' )\n      {\n        var sleep = anim8.time( part.substring(1), false );\n\n        if ( sleep !== false )\n        {\n          parsed.sleep = sleep;\n        }\n      }\n      // Delay\n      if ( first === '~' )\n      {\n        var delay = anim8.time( part.substring(1), false );\n\n        if ( delay !== false )\n        {\n          parsed.delay = delay;\n        }\n      }\n      // Scaling\n      if ( first === '!' )\n      {\n        var scale = parseFloat( part.substring(1) );\n\n        if ( !isNaN(scale) )\n        {\n          parsed.scale = scale;\n        }\n      }\n      // Easing?\n      var easing = anim8.easing( part, false );\n\n      if ( easing !== false )\n      {\n        parsed.easing = easing;\n      }\n\n      // Duration?\n      var duration = anim8.time( part, false );\n\n      if ( duration !== false )\n      {\n        parsed.duration = duration;\n      }\n      else\n      {\n        // If not a duration, might be an alternative repeat? (doesn't start with x)\n        var repeat = anim8.repeat( part, false );\n\n        if ( repeat !== false )\n        {\n          parsed.repeat = repeat;\n        }\n      }\n    }\n\n    return parsed; \n  }\n\n  if ( anim8.isObject( options ) )\n  {\n    return options;\n  }\n\n  return {};\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the events that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate events, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} events\n */\nanim8.Animation = function(name, input, options, events)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.events = events;\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an array of event instances from the events in this animation.\n   */\n  newEvents: function()\n  {\n    var instances = [];\n    \n    for (var i = 0; i < this.events.length; i++)\n    {\n      instances.push( this.events[i].newInstance() );\n    }\n    \n    return instances;\n  },\n\n  /**\n   * Generates an array of event clones from the events in this animation.\n   * \n   * @return {array}\n   */\n  cloneEvents: function()\n  {\n    var events = [];\n\n    for (var i = 0; i < this.events.length; i++)\n    {\n      events.push( this.events[i].clone() );\n    }\n\n    return events;\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {object} options\n   * @param  {array} events\n   * @return {[type]}\n   */\n  merge: function(options, events)\n  {\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, events );\n      }\n    }\n\n    return events;\n  },\n\n  /**\n   * Extends this animation and returns an animation modified with the given options. \n   *\n   * @param {object} options\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var events = this.cloneEvents();\n\n    this.merge( options, events );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, events );\n  }\n\n};","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(subject)\n\t{\n\t  this.subject = subject;\n\t  this.events = {};\n    this.eventsAdded = [];\n    this.eventsComputed = [];\n    this.springs = {};\n    this.springsAdded = [];\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    this.cycleCurrent = 0;\n    this.cycleNext = 0;\n    \n    return this;\n\t},\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are placed\n   * to group them together so we know when to apply their initial value.\n   * \n   * @return {this}\n   */\n  newCycle: function()\n  {\n    this.cycleNext++;\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all events & springs with the same cycle\n   * identifier and applying their initial state.\n   * \n   * @return {this}\n   */\n  applyCurrentCycle: function()\n  {\n    /**\n     * Cycle is applied to event before its placed on the animator or queued\n     * When no events/springs exist for the current cycle, increment it and apply it\n     */\n\n    var cycle = this.cycleCurrent;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the attribute descriptor\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  { \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function()\n  {\n    // If there are events placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the even'ts path.\n    var ce = this.eventsComputed;\n    if ( ce.length )\n    {\n      for (var i = 0; i < ce.length; i++)\n      {\n        var e = ce[ i ];\n\n        e.path = e.path.replaceComputed( e, this );        \n      }\n\n      ce.length = 0;\n    }\n    \n    // If there isn't a value in frame for any of the events on the animator,\n    // place the default value.\n    var ea = this.eventsAdded;\n    if ( ea.length )\n    {\n      for (var i = 0; i < ea.length; i++)\n      {\n        this.setDefault( ea[ i].attribute );\n      }\n\n      ea.length = 0;\n    }\n\n    // Call pre update on any new springs.\n    var sa = this.springsAdded;\n    if ( sa.length )\n    {\n      for (var i = 0; i < sa.length; i++)\n      {\n        var s = sa[i];\n\n        this.setDefault( s.attribute );\n\n        s.preupdate( this );\n      }\n\n      sa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this Animator if there's no value there.\n   * \n   * @param {[type]}\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    \n    this.finished = true;\n\t\t\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      this.updated[ attr ] = e.update( now, this.frame );\n      \n      this.finished = this.finished && e.isFinished();\n    }\n    \n    for (var attr in this.springs)\n    {\n      var s = this.springs[ attr ];\n      \n      this.updated[ attr ] = s.update( now, this.frame );\n      \n      this.finished = false;\n    }\n\t\n\t\tthis.trigger('update');\n    \n    return this;\n  },\n  \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function(s)\n  {\n    var attr = s.attribute;\n    \n    this.springs[ attr ] = s;\n    this.springsAdded.push( s );\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function(e)\n  {\n    var attr = e.attribute;\n\n    this.events[ attr ] = e;\n    this.eventsAdded.push( e );\n    \n    if ( e.hasComputed() )\n    {\n       this.eventsComputed.push( e );\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimEvents();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      var e = this.events[attr];\n      \n      if ( e.isFinished() )\n      {\n        if ( e.next )\n        {                    \n          this.placeEvent( e.next );\n          this.finished = false;\n        }\n        else\n        {\n          delete this.events[attr];\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there already.\n   * \n   * @return {[type]}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createEvents: function(animation, options, cache)\n  {\n    var options = anim8.options( options );    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var events = animation.newEvents();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, events );\n    }\n    \n    this.onAnimation( animation, options, events );\n\n    if ( animation.next !== null )\n    {\n      var eventMap = {};\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[i];\n\n        eventMap[ e.attribute ] = e;\n      }\n\n      while ( animation.next !== null )\n      {\n        animation = animation.next;\n\n        var queueEvents = animation.newEvents();\n        var maxRemaining = 0;\n\n        for (var i = 0; i < events.length; i++)\n        {\n          var e = events[i];\n\n          if ( !e.isInfinite() )\n          {\n            maxRemaining = Math.max( maxRemaining, e.timeRemaining() );  \n          }\n        }\n\n        for (var i = 0; i < queueEvents.length; i++)\n        {\n          var e = queueEvents[ i ];\n          var existing = eventMap[ e.attribute ];\n\n          if ( existing && !existing.isInfinite() )\n          {\n            e.delay += (maxRemaining - existing.timeRemaining());\n            eventMap[ e.attribute ].queue( e );\n          }\n          else\n          {\n            e.delay += maxRemaining;\n            eventMap[ e.attribute ] = e;\n            events.push( e );\n          }\n        }\n\n        this.onAnimation( animation, options, queueEvents );\n      }      \n    }\n\n    return events;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeSpring( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Removes springs for the specified attributes. If no attributes are specified then all springs\n   * are removed. Attributes can be specified as an array of attribute names or a string with attribute\n   * names separated by a space.\n   *\n   * @param {string|Array} attributes\n   */\n  unspring: function(attributes)\n  {\n    return this.springsFor( attributes, function(s)\n    {\n      delete this.springs[ s.attribute ];\n    });\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Existing events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   * @param [boolean] cache\n   */\n\tplay: function(animation, options, all, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.playEvents( events, all );\n\n    return this.activate();\n\t},\n\n  /**\n   * Adds events to this Animator to be played (optionally finishing events for attributes not specified in the given \n   * attribute). Existing events will be replaced immediately. This method will not activate the Animator, that has\n   * to be done manually.\n   * \n   * @param  {array} events\n   * @param  [boolean] all\n   * @return {this}\n   */\n  playEvents: function(events, all)\n  {\n    var attrs = {};\n    \n    for (var i = 0; i < events.length; i++)\n    { \n      this.placeEvent( events[i] );\n      \n      attrs[ events[i].attribute ] = true;\n    }\n    \n    if ( all )\n    {\n      for (var attr in this.events)\n      {\n        if ( !(attr in attrs) )\n        {\n          this.events[ attr ].finish( this.frame );\n        }\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options, cache)\n\t{\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n        \n    this.queueEvents( events );\n\n    return this.activate();\n\t},\n\n  /**\n   * Queues an array of events on this Animator. The given events will be delayed to start at the same time - at the\n   * end of the events currently on the Animator. This method will not activate the Animator, that has to be done \n   * manually.\n   * \n   * @param  {array} events\n   * @return {this}\n   */\n  queueEvents: function(events)\n  {\n    var maxRemaining = this.timeRemaining();\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var existing = this.events[ attr ];\n      \n      if ( attr in this.events  && !existing.isInfinite() )\n      {    \n        e.delay += (maxRemaining - existing.timeRemaining());\n        \n        existing.queue( e );\n      }\n      else\n      {\n        e.delay += maxRemaining;\n        \n        this.placeEvent( e );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all, cache)\n  {\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n\n    this.transitionEvents( transitionTime, transitionDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation. This method will not activate the \n   * Animator, that has to be done manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param [array] events\n   * @param [boolean] all\n   */\n  transitionEvents: function(transitionTime, transitionDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n\n    // Parse given variables\n    var transitionTime = anim8.time( transitionTime, anim8.defaults.transitionTime );\n    var transitionDelta = anim8.coalesce( transitionDelta, anim8.defaults.transitionDelta );\n    var transitionEasing = anim8.easing( transitionEasing, anim8.defaults.transitionEasing );\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionDelta );\n          var p2 = e1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, calc, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transitionInto: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation, options, all, cache)\n  {\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.transitionIntoEvents( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation. This method will not activate the Animator, that has to be done \n   * manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {array} events\n   * @param [boolean] all\n   */\n  transitionIntoEvents: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n\n    // Parse given variables\n    var transitionTime = anim8.time( transitionTime, anim8.defaults.transitionTime );\n    var transitionFromDelta = anim8.coalesce( transitionFromDelta, anim8.defaults.transitionDelta );\n    var transitionIntoDelta = anim8.coalesce( transitionIntoDelta, anim8.defaults.transitionIntoDelta );\n    var transitionEasing = anim8.easing( transitionEasing, anim8.defaults.transitionEasing );\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionFromDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transitionIntoDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n      \n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {string} attr\n   * @param {any} target\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenTo: function(attr, target, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attribute to target values.\n   *\n   * @param {object} targets\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenManyTo: function(targets, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {string} attr\n   * @param {any} starts\n   * @param {any} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tween: function(attr, starts, ends, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeEvent( event.newInstance() );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {object} starts\n   * @param {object} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenMany: function(starts, ends, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n\t\n\t/**\n\t * Applies the initial state of all unstarted current events for the specified attributes immediately. \n\t * Attribute names can be given as an array or a space separated string. If no attributes are given all \n\t * attributes are assumed.\n\t *\n   * @param {string|array} attributes\n\t */\n\tapplyInitialState: function(attributes)\n\t{\n\t\tvar eventCount = this.eventsFor( attributes, function(event, attr)\n\t\t{\n\t\t\tif ( !event.hasStarted() && event.hasInitialState )\n\t\t\t{\n        this.setDefault( attr );\n\n\t\t\t\tevent.applyValue( this.frame, this.frame[ attr ], 0.0 );\n\t\t\t\t\n\t\t\t\tthis.updated[ attr ] = true;\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.apply();\n\t\t\n\t\treturn eventCount;\n\t},\n\n  /**\n   * Returns the amount of time remaining for all finite events in this Animator.\n   * \n   * @return {number} milliseconds\n   */\n  timeRemaining: function()\n  {\n    var remaining = 0;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      if ( !e.isInfinite() )\n      {\n        remaining = Math.max( remaining, e.timeRemaining() );  \n      }\n    }\n\n    return remaining;\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n    \n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n      \n      request[ attr ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n      \n      return attribute.defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number|string] duration\n   * @param [number|string] delay\n   * @param [function|string] easing\n   * @param [number|string] repeat\n   * @param [number|string] sleep  \n   * @param [number] scale\n   */\n  follow: function(attribute, path, options)\n  {\n    var options = anim8.options( options );\n    var path = anim8.path( path );\n    \n    var event = new anim8.Event( \n      attribute, \n      path, \n      options.duration,\n      options.easing,\n      options.delay, \n      options.sleep,\n      options.repeat,\n      options.scale,\n      options.scaleBase\n    );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  objectsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n    \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        \n        if ( attr in objects )\n        {\n          if ( resulting )\n          {\n            results.push( objects[attr] );\n          }\n          else\n          {\n            callback.call( this, objects[attr], attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      for (var attr in objects)\n      {\n        if ( resulting )\n        {\n          results.push( objects[attr] );\n        }\n        else\n        {\n          callback.call( this, objects[attr], attr );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n  \n  /**\n   * Invokes the callback for each event for the given attributes.\n   * \n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\teventsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.events );\n\t},\n  \n  /**\n   * Invokes the callback for each spring for the given attributes.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\tspringsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.springs );\n\t},\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event, attr) \n\t\t{\n\t\t\tdelete this.events[ attr ];\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event) \n\t\t{\n\t\t\twhile (event.next)\n\t\t\t{\n\t\t\t\tevent = event.next;\n\t\t\t}\n\t\t\t\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attribtues. Unsetting involves removing all events,\n   * springs, and the current value in the frame.\n   * \n   * @param  {string|array|object}\n   * @return {this}\n   */\n  unset: function(attributes)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      delete this.events[ attributes ];\n      delete this.springs[ attributes ];\n      delete this.frame[ attribute ];\n    }\n    else if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        this.unset( attributes[ i ] );\n      }\n    }\n    else if ( anim8.isObject( attributes ) )\n    {\n      for (var attr in attributes)\n      {\n        this.unset( attr );\n      }\n    }\n\n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator.\n   */\n  hasSprings: function()\n  {\n    for (var attr in this.springs)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator or animating events.\n   */\n  isAnimating: function()\n  {\n    if ( this.hasSprings() )\n    {\n      return true;\n    }\n    \n    for (var attr in this.events)\n    {\n      if ( this.events[attr].isAnimating() )\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  },\n\n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator if none is given. This is particularly\n   * useful for having a function be called on deferred statements.\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  invoke: function(func, context, arguments)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, arguments || [] );\n    }\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n   * @param [function] callback\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t}\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'play', 'queue', 'transition', 'transitionInto', 'restore', 'set', 'unset', 'resume', 'pause', \n  'finish', 'end', 'stop', 'follow', 'applyInitialState', 'tweenTo', \n  'tween', 'tweenMany', 'tweenManyTo', 'spring', 'unspring', 'apply', \n  'placeSpring', 'placeEvent', 'invoke'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.override( anim8s.fn = anim8.Animators.prototype = new Array(),\n{\n  /**\n   * Invokes a callback for each element in the array.\n   * \n   * @param {function} iterator\n   */\n  each: function(iterator, context) \n  {\n    for (var i = 0; i < this.length; i++) \n    {\n      if ( iterator.call( context || this[i], this[i], i ) === false ) \n      {\n        break;\n      }\n    }\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @param {array} animators\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n   *\n   * @param {function} filterer\n   */\n  filter: function(filterer)\n  {\t\n  \tvar alive = 0;\n  \t\n  \tfor (var i = 0; i < this.length; i++)\n  \t{\n  \t\tvar remove = filterer( this[i] );\n  \t\t\n  \t\tif ( !remove )\n  \t\t{\n  \t\t\tthis[alive++] = this[i];\n  \t\t}\n  \t}\n  \t\n  \tthis.length = alive;\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubjects: function(wrapper)\n  {\n    var subjects = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      subjects.push( this[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   */\n  first: function()\n  {\n    return this[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   */\n   reverse: function()\n   {\n    var last = this.length - 1;\n    var mid = Math.floor( this.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = this[ i ];\n      var e1 = this[ last - i ];\n\n      this[ i ] = e1;\n      this[ last - i ] = e0;\n    }\n\n    return this;\n   },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   * \n   * @return {this}\n   */\n  activate: function()\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var animator = this[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Returns an array of the subjects optionally\n   */\n\n  /**\n   * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * Adds the following methods to make an array of Animators appear like a single Animator.\n   */\n  restore              : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n  placeSpring          : anim8.delegate( 'placeSpring', anim8.delegate.RETURN_THIS ),\n  placeEvent           : anim8.delegate( 'placeEvent', anim8.delegate.RETURN_THIS ),\n  preupdate            : anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS ),\n  update               : anim8.delegate( 'update', anim8.delegate.RETURN_THIS ),\n  apply                : anim8.delegate( 'apply', anim8.delegate.RETURN_THIS ),\n  trimEvents           : anim8.delegate( 'trimEvents', anim8.delegate.RETURN_THIS ),\n  deactivate           : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n  destroy              : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n  spring               : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n  unspring             : anim8.delegate( 'unspring', anim8.delegate.RETURN_THIS ),\n  play                 : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n  playEvents           : anim8.delegate( 'playEvents', anim8.delegate.RETURN_THIS ),\n  queue                : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n  queueEvents          : anim8.delegate( 'queueEvents', anim8.delegate.RETURN_THIS ),\n  transition           : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n  transitionEvents     : anim8.delegate( 'transitionEvents', anim8.delegate.RETURN_THIS ),\n  transitionInto       : anim8.delegate( 'transitionInto', anim8.delegate.RETURN_THIS ),\n  transitionIntoEvents : anim8.delegate( 'transitionIntoEvents', anim8.delegate.RETURN_THIS ),\n  tween                : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n  tweenTo              : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n  tweenMany            : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n  tweenManyTo          : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n  applyInitialState    : anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS ),\n  follow               : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n  eventsFor            : anim8.delegate( 'eventsFor', anim8.delegate.RETURN_RESULTS ),\n  springsFor           : anim8.delegate( 'springsFor', anim8.delegate.RETURN_RESULTS ),\n  stop                 : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n  end                  : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n  finish               : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n  pause \t\t\t         : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n  resume \t\t\t         : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n  set                  : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n  get                  : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n  isAnimating          : anim8.delegate( 'isAnimating', anim8.delegate.RETURN_TRUE ),\n  hasEvents            : anim8.delegate( 'hasEvents', anim8.delegate.RETURN_TRUE ),\n  hasSprings           : anim8.delegate( 'hasSprings', anim8.delegate.RETURN_TRUE ),\n  on\t\t\t             : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n  once\t\t             : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n  off\t\t\t             : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n  trigger              : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n});\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate();\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * [Sequence description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * [maxDelay description]\n   * @return {[type]}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  /**\n   * [createEvents description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  createEvents: function(animation, options, i)\n  {\n    var events = animation.newEvents();\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = 0; k < events.length; k++)\n    {\n      events[k].delay += delayOffset;\n    }\n\n    animation.merge( options, events );\n    \n    return events;\n  },\n\n  /**\n   * [reverse description]\n   * @return {[type]}\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * [play description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  play: function(animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.playEvents( sequence.createEvents( anim, options, i ), all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(animation, options, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var events = sequence.createEvents( anim, options, i );\n      \n      for (var i = 0; i < events.length; i++)\n      {\n        events[ i ].delay += delayOffset;\n      }\n      \n      animator.queueEvents( events );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transition description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionEvents( transitionTime, transitionDelta, transitionEasing, sequence.createEvents( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transitionInto description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transitionInto: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionIntoEvents( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, sequence.createEvents( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [add description]\n   */\n  add: function()\n  {\n    this.animators.activate();\n    this.animators.applyInitialState();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var easings   = animation.easings || {};\n    var delays    = animation.delays || {};\n    var sleeps    = animation.sleeps || {};\n    var repeats   = animation.repeats || {};\n    var scales    = animation.scales || {};\n    var scaleBases= animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = anim8.easing( anim8.coalesce( easings[attr],   newOptions.easing,   oldOptions.easing   ), e.easing );\n      e.repeat    = anim8.repeat( anim8.coalesce( repeats[attr],   newOptions.repeat,   oldOptions.repeat   ), e.repeat );\n      e.delay     = anim8.time(   anim8.coalesce( delays[attr],    newOptions.delay,    oldOptions.delay    ), e.delay );\n      e.sleep     = anim8.time(   anim8.coalesce( sleeps[attr],    newOptions.sleep,    oldOptions.sleep    ), e.sleep );\n      e.duration  = anim8.time(   anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration ), e.duration );\n      e.scale     =               anim8.coalesce( scales[attr],    newOptions.scale,    oldOptions.scale     , e.scale );\n      e.scaleBase = calc.parse(   anim8.coalesce( scaleBases[attr],newOptions.scaleBase,oldOptions.scaleBase), e.scaleBase );\n    }\n  }\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the events\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar deltas = animation.deltas;\n  \tvar values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      var valueCount = 0;\n      \n  \t\tfor (var attr in values)\n  \t\t{\n        valueCount++; \n      }\n      \n      deltas = [];\n      \n      for (var i = 0; i < valueCount; i++)\n      {\n        deltas[i] = i / (valueCount - 1);\n      }\n    }\n  \tif ( anim8.isArray( deltas ) )\n  \t{\n  \t\tvar deltaObject = {};\n  \t\t\n  \t\tfor (var attr in values)\n  \t\t{\n  \t\t\tdeltaObject[attr] = deltas;\t\n  \t\t}\n  \t\t\n  \t\tdeltas = deltaObject;\n  \t}\n  \t\n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[ attr ];\n      var attribute = factory.attribute( attr );\n  \t\t\n  \t\tfor (var k = 0; k < value.length; k++)\n  \t\t{\n  \t\t\tvalue[k] = attribute.parse( value[k] );\n  \t\t}\n  \t\t\n      var duration  = anim8.coalesce( durations[attr], options.duration );\n      var easing    = anim8.coalesce( easings[attr], options.easing );\n      var delay     = anim8.coalesce( delays[attr], options.delay );\n      var sleep     = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat    = anim8.coalesce( repeats[attr], options.repeat );\n      var scale     = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path      = new anim8.DeltaPath( attr, attribute.calculator, values[attr], deltas[attr] );\n      var event     = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['values'] = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Generate the events, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar values = animation.final;\n    var delays = animation.delays || {};\n    var durations = animation.durations || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    var calculators = {};\n  \tvar defaults = {};\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var duration   = anim8.duration( anim8.coalesce( durations[attr], options.duration ) );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, scale, scaleBase, false, this );\n      \n      events.push( event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales    = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      var delay = anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay );\n      var duration = anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration );\n\n      e.delay = anim8.delay( delay ) + anim8.duration( duration );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['final'] = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Generate the events, only caring about the delays\n    \n    var factory    = anim8.factory( animation.factory );\n  \tvar values     = animation.initial;\n    var delays     = animation.delays || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var delays    = animation.delays || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      var calc = e.path.calculator;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      e.delay = anim8.time( anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay ), e.delay );\n      e.scale = anim8.coalesce( scales[attr], newOptions.scale, oldOptions.scale, e.scale );\n      e.scaleBase = calc.parse( anim8.coalesce( scaleBases[attr], newOptions.scaleBase, oldOptions.scaleBase ), e.scaleBase );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['initial'] = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the events\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    \n    var durations = animation.durations || {};\n    var easings = animation.easings || {};\n    var delays = animation.delays || {};\n    var sleeps = animation.sleeps || {};\n    var repeats = animation.repeats || {};\n    var scales = animation.scales || {};\n    var scaleBases = animation.scaleBases || {};\n    \n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n  \t\t\t\n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n  \t\n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = anim8.coalesce( durations[attr], options.duration );\n      var delay     = anim8.coalesce( delays[attr], options.delay );\n      var sleep     = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat    = anim8.coalesce( repeats[attr], options.repeat );\n      var scale     = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path      = new anim8.KeyframePath( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser['keyframe'] = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTween = function()\n{\n  \n};\n\n// ParserTween extends anim8.Parser()\nanim8.override( anim8.ParserTween.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n    var durations  = animation.durations || {};\n    var easings    = animation.easings || {};\n    var delays     = animation.delays || {};\n    var sleeps     = animation.sleeps || {};\n    var repeats    = animation.repeats || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBase || {};\n\n  \tfor (var attr in tweenTo)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[attr] );\n      var duration   = anim8.coalesce( durations[attr], options.duration );\n      var easing     = anim8.coalesce( easings[attr], options.easing );\n      var delay      = anim8.coalesce( delays[attr], options.delay );\n      var sleep      = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat     = anim8.coalesce( repeats[attr], options.repeat );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, value );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenTo'] = new anim8.ParserTween();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParserMove = function()\n{\n  \n};\n\n// ParserMove extends anim8.Parser()\nanim8.override( anim8.ParserMove.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var move       = animation.move;\n    var durations  = animation.durations || {};\n    var easings    = animation.easings || {};\n    var delays     = animation.delays || {};\n    var sleeps     = animation.sleeps || {};\n    var repeats    = animation.repeats || {};\n    var scales     = animation.scales || {};\n    var scaleBases = animation.scaleBase || {};\n\n  \tfor (var attr in move)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[attr] );\n      var duration   = anim8.coalesce( durations[attr], options.duration );\n      var easing     = anim8.coalesce( easings[attr], options.easing );\n      var delay      = anim8.coalesce( delays[attr], options.delay );\n      var sleep      = anim8.coalesce( sleeps[attr], options.sleep );\n      var repeat     = anim8.coalesce( repeats[attr], options.repeat );\n      var scale      = anim8.coalesce( scales[attr], options.scale );\n      var scaleBase  = anim8.coalesce( scaleBases[attr], options.scaleBase );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, anim8.computed.relative( value ) );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      events.push( event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['move'] = new anim8.ParserMove();\n","\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n * \n * @param  [string|anim8.Factory]\n * @return {anim8.Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory.default;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n  this.priority = 0;\n  this.attributes = {};\n};\n\nanim8.override( anim8.ObjectFactory.prototype = new anim8.Factory(),\n{\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;\n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.create() );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory['default'] = anim8.factory['object'] = new anim8.ObjectFactory();\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute['default']                 = {defaultValue: 0};\n"],"sourceRoot":"/source/"}