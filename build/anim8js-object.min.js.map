{"version":3,"sources":["anim8js-core.js","anim8js-fast-map.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-point.js","anim8js-attrimator.js","anim8js-attrimator-map.js","anim8js-event.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-physics.js","anim8js-animation.js","anim8js-transition.js","anim8js-options.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tweenTo.js","anim8js-parser-tweenFrom.js","anim8js-parser-move.js","anim8js-parser-springs.js","anim8js-parser-physics.js","anim8js-factory.js","anim8js-object.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","defaults","duration","easing","teasing","delay","sleep","repeat","scale","transitionTime","transitionOutroDelta","transitionIntroDelta","transitionEasing","transitionGranularity","cache","cacheOptions","cacheTransitions","noOptions","noTransition","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","log","size","prop","isEmpty","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","number","value","constant","variable","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","FastMap","map","reset","putMap","put","prototype","values","keys","indices","key","get","remove","removeAt","index","lastValue","pop","lastKey","indexOf","has","hasOverlap","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","pair","e","t","easingType","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","yoyo","mirror","reverse","flip","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attrimator","attr","attribute","getAttribute","frame","calculator","clone","cloneDefault","relative","relativeAmount","mask","isComputed","relativeFunction","calc","mul","add","Calculator","createConstants","ZERO","create","ONE","INFINITY","adds","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","isValid","isZero","isEqual","distSq","isRelative","getRelativeAmount","z","NumberCalculator","defaultValue","amountScale","ab","epsilon","Point2dCalculator","y","cx","cy","rx","ry","ix","iy","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Point3dCalculator","cz","rz","iz","dz","QuaternionCalculator","angle","ra","ia","da","RGBCalculator","rr","rg","rb","ir","ig","ib","dr","dg","db","RGBACalculator","path","Path","spring","type","name","points","hasComputed","compute","ps","reference","trues","last","first","point","replaceComputed","resolvePoint","isLinear","granularity","prev","temp","Tween","CubicPath","p0","p1","p2","p3","d1","d2","d3","i1","i3","QuadraticPath","DeltaPath","deltas","ds","d0","pd","JumpPath","CompiledPath","pointCount","KeyframePath","easings","ea","defaultEasing","PointPath","Attrimator","parser","startTime","pauseTime","elapsed","stopTime","paused","cycle","setTime","updated","finish","update","getElapsed","valueAt","totalTime","timeRemaining","isInfinite","pause","resume","isPaused","isFinished","getParser","queue","AttrimatorMap","queueMap","onNewAttribute","maxRemaining","attrimators","existing","unqueueAt","remaining","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","scaleBase","hasInitialState","state","applyValue","oldState","newState","iteration","computeValue","baseValue","Spring","set","rest","position","velocity","gravity","finishOnRest","finished","parseValue","dt","MAX_DT","starting","updateVelocity","EPSILON","resolveRest","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","Physics","acceleration","terminal","initalPosition","vel","resolveVelocity","acc","resolveAcceleration","pos","usePosition","animation","options","Animation","animationStrings","anim","parsedAnimation","parsedOptions","attrimatorMap","helper","ParserHelper","parserName","save","isSaved","newAttrimators","merge","force","transition","originalInput","transitionArray","part","charAt","introDelta","substring","outroDelta","parseProperty","propertyAdd","propertyScale","fn","attrimatorsAdded","active","cycleCurrent","cycleNext","newCycle","applyCurrentCycle","restore","preupdate","aa","setDefault","wasFinished","placeAttrimator","trimAttrimators","activate","deactivate","destroy","createAttrimators","onAnimation","queueAttrimators","play","all","playAttrimators","transitionAttrimators","a1","a2","getFuture","getPoint","transitionPath","transitionEvent","newInstance","tweenTo","target","tweenManyTo","targets","tween","starts","ends","tweenMany","ref","request","follow","attrimatorsFor","attributes","resulting","stop","unset","hasAttrimators","getSubject","wrapper","invoke","func","DeferAnimator","fill","each","iterator","filter","filterer","alive","getSubjects","mid","e0","e1","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","Parser","newOptions","oldOptions","mergeEasing","mergeRepeat","mergeDelay","mergeSleep","mergeDuration","mergeScale","mergeScaleBase","prepareSpecifics","specifics","parseEasing","parseFirst","parseRepeat","parseNumber","parseDelay","parseSleep","parseDuration","parseScale","parseScaleBase","option","parseOptionFunction","optionAdd","optionScale","baseRaw","base","mergeFirst","mergeNumber","ParserDeltas","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","keyframe","sort","from","half","to","times","maxTime","order","pathEasings","ParserTweenTo","ParserTweenFrom","tweenFrom","ParserMove","move","ParseSpring","springs","ParsePhysics","physics","physic","stopAt","highestPriorityFactory","factoryName","is","priority","Factory","ObjectFactory","$animator","calculatorName","dom"],"mappings":"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","file":"anim8js-object.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {array} subject\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   * \n   * @type {number}\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @type {string|function}\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @type {string|function}\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @type {number}\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @type {number}\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @type {number}\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @type {number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @type {number}\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition delta.\n   * \n   * @type {number}\n   */\n  transitionOutroDelta: 0.1,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {number}\n   */\n  transitionIntroDelta: 0.1,\n\n  /**\n   * The default transition into delta.\n   * \n   * @type {string|function}\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * The default transition granularity. This is used for smooth transitions to\n   * provide a smooth transition from the outro velocity to the intro velocity,\n   * the cubic or quadratic path between the two is a curve with unknown length\n   * so the length needs to be calculated using a maximum number of points to\n   * calculate along the path - summing the distances between the consecutive points.\n   * \n   * @type {Number}\n   */\n  transitionGranularity: 0,\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * @type {boolean}\n   * @see  anim8.animation\n   */\n  cache: false,\n\n  /**\n   * Whether parsed options are cached whenever possible. Options that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see  anim8.options\n   */\n  cacheOptions: false,\n\n  /**\n   * Whether parsed transitions are cached whenever possible. Transitions that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see  anim8.transition\n   */\n  cacheTransitions: false,\n\n  /**\n   * The value to return when options could not be parsed from input.\n   * \n   * @type {Object}\n   */\n  noOptions: {},\n\n  /**\n   * The value to return when a transition could not be parsed from input.\n   * @type {Object}\n   */\n  noTransition: {}\n\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * If the user is interested in seeing warnings they can override this by specifying\n * a function which accepts a text argument providing a generc message, a second argument\n * which has the input that caused the warning, and a third agument with the object\n * throwing the warning. Most warnings that are thrown occur when an animation is\n * trying to be parsed an the user provided an invalid animation, time, easing, etc.\n *\n * @param {string} message\n * @param {any} source\n */\nanim8.log = false;\n\n/**\n * Returns the size of the variable. The size of a variable is dependent on the variable\n * type. For arrays and strings their length is returned. If it's an object the number of\n * enumerable properties is returned. If it's a number, the number is returned. Otherwise\n * zero is returned.\n *\n * @param {any} x\n */\n anim8.size = function(x)\n {\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length;\n  }\n  else if ( x === null )\n  {\n    return 0;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var size = 0;\n\n    for (var prop in x)\n    {\n      size++;\n    }\n\n    return size;\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n};\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding overriding any existing properties.\n * \n * @param  {object} out\n * @return {object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding existing properties where necessary.\n * \n * @param  {object}\n * @return {object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {string|number}\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses a number from the given input and if the input isn't a valid number\n * then returnOnInvalid is returned.\n * \n * @param  {any} value\n * @param  {any} returnOnInvalid\n * @return {any}\n */\nanim8.number = function(value, returnOnInvalid)\n{\n  var parsed = parseFloat( value );\n\n  return isNaN( parsed ) ? returnOnInvalid : parsed;\n};\n\n/**\n * Parses scale from a string or number.\n * \n * @param  {string|number}\n * @return {number}\n */\nanim8.scale = function(scale, returnOnInvalid)\n{\n  return anim8.number( scale, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n * \n * @param  {number} v\n * @param  {number} min\n * @param  {number} max\n * @return {number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n      \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t        eventListeners.length = 0;\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an array.\n * This is especially beneficial when most of the time the contents of the structure need to be iterated and order\n * doesn't matter (since removal performs a swap which breaks insertion order).\n */\nanim8.FastMap = function(map)\n{\n  this.reset();\n\n  if ( map instanceof anim8.FastMap )\n  {\n    this.putMap( map );\n  }\n  else if ( anim8.isObject( map ) )\n  {\n    for (var prop in map)\n    {\n      this.put( prop, map[ prop ] );\n    }\n  }\n};\n\nanim8.FastMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {this}\n   */\n  reset: function()\n  {\n    this.values = [];\n    this.keys = [];\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   * \n   * @param  {string} key\n   * @param  {any} value\n   * @return {this}\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   * \n   * @param  {anim8.FastMap}\n   * @return {this}\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   * \n   * @param  {string} key\n   * @return {any}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   * \n   * @param  {string} key\n   * @return {this}\n   */\n  remove: function(key)\n  {\n    if ( key in this.indices )\n    {\n      this.removeAt( this.indices[ key ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   * \n   * @param  {Number}\n   * @return {this}\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   * \n   * @param  {string} key\n   * @return {number}\n   */\n  indexOf: function(key)\n  {\n    return anim8.coalesce( this.indices[ key ], -1 );\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   * \n   * @param  {string}\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns whether the given input has overlap with keys in this map.\n   * \n   * @param  {anim8.FastMap|object}\n   * @return {Boolean}\n   */\n  hasOverlap: function(map)\n  {\n    var keys = this.keys;\n    var indices = map.indices;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      if ( keys[i] in indices )\n      {\n        return true;\n      }\n    }\n   \n    return false;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   * \n   * @return {number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Clears all keys & values from the map.\n   * \n   * @return {this}\n   */\n  clear: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  }\n\n};","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n    \n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * [bezier description]\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\n/**\n * [default description]\n * @type {[type]}\n */\nanim8.easing.default      = anim8.easing.ease;\n","\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\n/**\n * Plays the animation forward normally.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn easing( x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) \n\t{\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum halfway.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } \n\t  else \n\t  {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\n/**\n * Plays the aninmation forwards with the given easing, and backwards with the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.yoyo = function(easing) \n{\n\treturn function(x) \n\t{\n\t  if ( x < 0.5 ) \n\t  {\n\t    return easing( 2.0 * x );\n\t  } \n\t  else \n\t  {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n/**\n * Plays the animation forwards with the given easing, and backwards reflecting the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.mirror = function(easing)\n{\n\treturn function(x)\n\t{\n\t\tif ( x < 0.5 )\n\t\t{\n\t\t\treturn easing( 2.0 * x );\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1.0 - easing( 2.0 - 2.0 * x );\n\t\t}\n\t};\n};\n\n/**\n * Plays the animation backwards with using the same easing momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.reverse = function(easing)\n{\n\treturn easing( 1.0 - x );\n};\n\n/**\n * Plays the animation backwards by flipping the easing's momentum.\n * \n * @param  {function} easing\n * @return {function}\n */\nanim8.easingType.flip = function(easing)\n{\n\treturn 1.0 - easing( x );\n};\n","\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * [computed description]\n * @type {Object}\n */\nanim8.computed = {};\n\n/**\n * Calculates the current value for an animator.\n * \n * @param  {[type]}\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.current = function(attrimator, animator)\n{\n  var attr = attrimator.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currenrtly in the animator.\n * \n * @param  {[type]}\n * @return {[type]}\n */\nanim8.computed.relative = function(relativeAmount, mask)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( anim8.isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(attrimator, animator)\n  { \n    var attr = attrimator.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = attribute.cloneDefault();\n    }\n\n    if ( mask )\n    {\n      current = calc.mul( current, mask );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  relativeFunction.relativeAmount = relativeAmount;\n  relativeFunction.mask = mask;\n\n  return relativeFunction;\n};\n\n/**\n * [isComputed description]\n * @param  {[type]}\n * @return {Boolean}\n */\nanim8.isComputed = function(x)\n{\n  return anim8.isFunction( x ) && x.computed;\n};","/**\n * Calculators perform math and basic operations for a specific data structure.\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Instantiates a new Calculator instance.\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n\n  /**\n   * [createConstants description]\n   * @return {[type]}\n   */\n  createConstants: function()\n  {\n    this.ZERO = this.create();\n    this.ONE = this.parse( 1.0, this.ZERO );\n    this.INFINITY = this.parse( Number.POSITIVE_INFINITY, this.ZERO );\n  },\n\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * [copy description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * [clone description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clone: function(out) \n  {\n    return this.copy( this.create(), out );\n  },\n\n  /**\n   * [create description]\n   * @return {[type]}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * [scale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * [add description]\n   * @param {[type]}\n   * @param {[type]}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * [adds description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * [sub description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * [mul description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * [interpolate description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * [distance description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * [distanceSq description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * [isValid description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * [isNaN description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * [isZero description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * [isEqual description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * [min description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  min: function(out, a, b)\n  {\n    throw 'Calculator.min not implemented';\n  },\n\n  /**\n   * [max description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  max: function(out, a, b)\n  {\n    throw 'Calculator.max not implemented';\n  },\n\n  /**\n   * [clamp description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  clamp: function(out, min, max)\n  {\n    var distSq = this.distanceSq( out, this.ZERO );\n\n    if ( distSq < min * min )\n    {\n      return this.scale( out, min / Math.sqrt( distSq ) );\n    }\n    else if ( distSq > max * max )\n    {\n      return this.scale( out, max / Math.sqrt( distSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * [isRelative description]\n   * @param  {[type]}\n   * @return {Boolean}\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * [relativeAmount description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n */\nanim8.NumberCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.NumberCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    return Math.min( a, b );\n  },\n  max: function(out, a, b)\n  {\n    return Math.max( a, b );\n  }\n});\n\n/**\n * Register the calculators.\n */\nanim8.calculator['default'] = anim8.calculator['number'] = new anim8.NumberCalculator();\n","\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.Point2dCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Point2dCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n\n        if ( ix || iy )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    return out;\n  }\n});\n\n/**\n * Register all calculators.\n */\nanim8.calculator['2d'] = new anim8.Point2dCalculator();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.Point3dCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Point3dCalculator.prototype = new anim8.Calculator(), \n{\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n\n        if ( ix || iy || iz )\n        { \n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['3d'] = new anim8.Point3dCalculator();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.QuaternionCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.QuaternionCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n        var ia = this.isRelative( ca );\n\n        if ( ix || iy || iz || ia )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0,\n            angle: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n\t\t}\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx }, { x:0, y:0, z:0, angle:1 } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    out.angle = Math.min(a.angle, b.angle);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    out.angle = Math.max(a.angle, b.angle);\n    return out;\n  }\n});\n\n\n/**\n * Register the calculator.\n */\nanim8.calculator['quaternion'] = new anim8.QuaternionCalculator();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.RGBCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.RGBCalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n\n        if ( ir || ig || ib )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n\t\t\n    // Try to parse the color.\n\t\tvar parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgb'] = new anim8.RGBCalculator();\n","\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.RGBACalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.RGBACalculator.prototype = new anim8.Calculator(), \n{\n  /**\n   * [parse description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n\tparse: function(x, defaultValue)\n\t{\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n        var ia = this.isRelative( ca );\n\n        if ( ir || ig || ib || ia )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0,\n            a: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    out.a = Math.min(a.a, b.a);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    out.a = Math.max(a.a, b.a);\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgba'] = new anim8.RGBACalculator();\n","\n/**\n * [path description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n/**\n * [Path description]\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * [reset description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n\t{\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * [hasTrue description]\n   * @return {Boolean}\n   */\n  hasComputed: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * [reference description]\n   * @return {[type]}\n   */\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n\n  /**\n   * [last description]\n   * @return {[type]}\n   */\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n\n  /**\n   * [first description]\n   * @return {[type]}\n   */\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n\n  /**\n   * [point description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n\n  /**\n   * [replaceComputed description]\n   * @return {[type]}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * [resolvePoint description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  },\n\n  /**\n   * Returns whether the path is linear. Linear paths go directly from point to\n   * point where curved paths do not. Linear paths can have their length calculated\n   * fairly easily however curves you must compute length with a given granularity.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return true;\n  },\n\n  /**\n   * Computes the length of the Path with a given granularity. Granularity\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  length: function(granularity)\n  {\n    var distance = 0;\n    var calc = this.calculator;\n\n    if ( this.isLinear() )\n    {\n      var prev = this.resolvePoint( 0 );\n\n      for (var i = 1; i < this.points.length; i++)\n      {\n        var next = this.resolvePoint( i );\n\n        distance += calc.distance( prev, next );\n\n        prev = next;\n      }\n    }\n    else\n    {\n      var deltadelta = 1.0 / granularity;\n      var delta = delta;\n      var prev = calc.clone( this.resolvePoint( 0 ) );\n      var temp = calc.create();\n\n      for (var i = 1; i <= granularity; i++)\n      {\n        var next = this.compute( temp, delta );\n\n        distance += calc.distance( prev, next );\n\n        temp = prev;\n        prev = next;\n      }\n    }\n\n    return distance;\n  }\n\n};\n","\n/**\n * [Tween description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n\n});\n\n/**\n * [tween description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['tween'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, calc.ZERO ),\n    calc.parse( path.end, calc.ZERO )\n  );\n};\n","\n/**\n * [CubicPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.CubicPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  },\n\n  /**\n   * CubicPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [cubic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['cubic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * [QuadraticPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.QuadraticPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  },\n\n  /**\n   * QuadraticPath is not a linear Path.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return false;\n  }\n\n});\n\n/**\n * [quadratic description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['quadratic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * [DeltaPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.DeltaPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n      return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n\n});\n\n/**\n * [delta description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['delta'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * [JumpPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.JumpPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n  }\n\n});\n\n/**\n * [jump description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['jump'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * [CompiledPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.CompiledPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n\n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.CompiledPath( this.name, this, this.points.length );\n  }\n\n});\n\n/**\n * [compiled description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['compiled'] = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * [KeyframePath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.KeyframePath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n\n});\n\n/**\n * [keyframe description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['keyframe'] = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * [PointPath description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.override( anim8.PointPath.prototype = new anim8.Path(),\n{\n  /**\n   * [compute description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  compute: function(out, delta)\n  {\n    return this.calculator.copy( out, this.resolvePoint( 0 ) );\n  },\n  \n  /**\n   * [copy description]\n   * @return {[type]}\n   */\n  copy: function() \n  {\n    return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n  }\n\n});\n\n/**\n * [point description]\n * @param  {[type]}\n * @return {[type]}\n */\nanim8.path['point'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n","\n/**\n * Animates a single attribute over any period of time.\n */\nanim8.Attrimator = function()\n{\n\n};\n\nanim8.Attrimator.prototype =\n{\n\n  /**\n   * Resets this animator for the given attribute created by the given parser.\n   * \n   * @param  {attribute} string\n   * @param  {anim8.Parser} parser\n   */\n  reset: function(attribute, parser, next)\n  {\n    this.attribute = attribute;\n    this.parser = parser;\n    this.next = next;\n\n    this.startTime = 0;\n    this.pauseTime = 0;\n    this.elapsed = 0;\n    this.stopTime = Number.POSITIVE_INFINITY;\n    this.paused = false;\n    this.cycle = 0;\n    this.delay = 0;\n  },\n\n  /**\n   * Prepares this attribute animator for animation on the given subject animator.\n   * This is called once in anim8.Animator.preupdate before the first time this\n   * animator is updated.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n  },\n\n  /**\n   * Updates this attribute animator given a time to animate to and the frame to\n   * provide with a new value. This method will return true if the attribute\n   * this is animating has been updated and needs to be applied to the subject.\n   * \n   * @param  {Number} now\n   * @param  {Object} frame\n   * @return {Boolean}\n   */\n  setTime: function(now, frame)\n  {\n    if ( this.paused )\n    {\n      return false;\n    }\n\n    var updated = false;\n    var elapsed = now - this.startTime;\n    var updated = false;\n\n    if ( elapsed > this.stopTime )\n    {\n      updated = this.finish( frame );\n    }\n    else if ( elapsed >= this.delay )\n    {\n      updated = this.update( elapsed, frame );\n    }\n\n    this.elapsed = elapsed;\n\n    return updated;\n  },\n\n  /**\n   * [update description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(elapsed, frame)\n  {\n    throw 'Attrimator.update not implemented';\n  },\n\n  /**\n   * Returns the amount of time that has elapsed in milliseconds.\n   * \n   * @return {Number}\n   */\n  getElapsed: function()\n  {\n    return this.elapsed;\n  },\n\n  /**\n   * Returns the value at the given time.\n   * \n   * @param  {Number} time\n   * @return {any}\n   */\n  valueAt: function(time)\n  {\n    return false;\n  },\n\n  /**\n   * The total amount of time this animator will take. This may be an infinite number.\n   * \n   * @return {Number}\n   */\n  totalTime: function()\n  {\n    return this.stopTime;\n  },\n\n  /**\n   * The time remaining before this animator and any following will be finished.\n   * \n   * @return {Number}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * Clones this animator.\n   * \n   * @return {anim8.AttributeAnimator}\n   */\n  clone: function()\n  {\n    throw 'AttributeAnimator.clone not implemented';\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return false;\n  },\n\n  /**\n   * Determines whether this animator will run infinitely.\n   * \n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [pause description]\n   * @return {[type]}\n   */\n  pause: function()\n  {\n    if ( !this.paused )\n    {\n      this.pauseTime = anim8.now();\n      this.paused = true;\n    }\n  },\n\n  /**\n   * [resume description]\n   * @return {[type]}\n   */\n  resume: function()\n  {\n    if ( this.paused )\n    {\n      this.startTime += anim8.now() - this.pauseTime;\n      this.paused = false;\n    }\n  },\n\n  /**\n   * [isPaused description]\n   * @return {Boolean}\n   */\n  isPaused: function()\n  {\n    return this.paused;\n  },\n\n  /**\n   * Sets the final state of the animator to the frame if one exists.\n   * \n   * @param  {Object}\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return false;\n  },\n\n  /**\n   * Returns the parser that created this animator (if any).\n   * \n   * @return {anim8.Parser}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * \n   * @param  {Function}\n   * @return {[type]}\n   */\n  queue: function(next)\n  {\n    if ( this.next )\n    {\n      this.next.queue( next );\n    }\n    else\n    {\n      this.next = next;\n    }\n  }\n\n};","\n/**\n * [AttributeMap description]\n */\nanim8.AttrimatorMap = function()\n{\n  this.reset();\n};\n\nanim8.override( anim8.AttrimatorMap.prototype = new anim8.FastMap(),\n{\n\n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n\n    if ( this.has( attr ) )\n    {\n      this.get( attr ).queue( attrimator );\n    }\n    else\n    {\n      this.put( attr, attrimator );\n    }\n  },\n\n  /**\n   * [queueMap description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queueMap: function(map, onNewAttribute, context)\n  {\n    var maxRemaining = this.timeRemaining();\n    var attrimators = map.values;\n    \n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n      var existing = this.get( attr );\n\n      if ( existing && !existing.isInfinite() )\n      {\n        attrimator.delay += (maxRemaining - existing.timeRemaining());\n\n        existing.queue( attrimator );\n      }\n      else\n      {\n        attrimator.delay += maxRemaining;\n        \n        this.put( attr, attrimator );\n\n        if ( anim8.isFunction( onNewAttribute ) )\n        {\n          onNewAttribute.call( context || this, attrimator );\n        }\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * [unqueue description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  unqueueAt: function(index)\n  {\n    var current = this.values[ index ];\n\n    if ( current.next )\n    {\n      this.values[ index ] = current.next;\n    }\n    else\n    {\n      this.removeAt( index );\n    }\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    var values = this.values;\n    var keys = this.keys;\n    var clone = new anim8.AttrimatorMap();\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      clone.values[i] = values[i].clone();\n      clone.keys[i] = keys[i];\n      clone.indices[ keys[i] ] = i;\n    }\n\n    return clone;\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function()\n  {\n    var remaining = 0;\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n\n      if ( !attrimator.isInfinite() )\n      {\n        remaining = Math.max( remaining, attrimator.timeRemaining() );\n      }\n    }\n\n    return remaining;\n  }\n\n});","\n/**\n * [EventState description]\n * @type {[type]}\n */\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\n/**\n * [Event description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {Boolean}\n * @param {[type]}\n * @param {Function}\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  this.reset( attribute, parser, next )\n\n  this.path             = path;\n  this.easing           = anim8.easing( easing );\n  this.delay            = anim8.delay( delay );\n  this.duration         = anim8.duration( duration );\n  this.sleep            = anim8.sleep( sleep );\n  this.repeat           = anim8.repeat( repeat );\n  this.scale            = anim8.scale( scale );\n  this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.ZERO );\n  this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n};\n\nanim8.override( anim8.Event.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Prepares this attribute animator for animation on the given subject animator.\n   * This is called once in anim8.Animator.preupdate before the first time this\n   * animator is updated.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n    this.state = this.delay ? anim8.EventState.DELAYED : anim8.EventState.ANIMATING;\n\n    if ( this.hasComputed() )\n    {\n      this.path = this.path.replaceComputed( this, animator );\n    }\n\n    if ( this.hasInitialState )\n    {\n      this.applyValue( animator.frame, animator.frame[ this.attribute ], 0 ); \n    }\n  },\n\n  /**\n   * [update description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(elapsed, frame)\n  {\n    var updated = false;\n    var delay = this.delay;\n    var duration = this.duration;\n    var sleep = this.sleep;\n    var repeat = this.repeat;\n    var oldState = this.state;\n    var newState = this.state;\n    var delta = 0;\n\n    elapsed -= delay;\n\n    var cycle = duration + sleep;\n    var iteration = Math.floor( ( elapsed + sleep ) / cycle );\n\n    if (iteration >= repeat)\n    {\n      newState = anim8.EventState.FINISHED;\n      delta = 1;\n    }\n    else\n    {\n      elapsed -= iteration * cycle;\n\n      if ( elapsed > duration )\n      {\n        newState = anim8.EventState.SLEEPING;\n        delta = 1;\n      }\n      else\n      {\n        newState = anim8.EventState.ANIMATING;\n        delta = elapsed / duration;\n      }\n    }\n    \n    if ( newState === anim8.EventState.ANIMATING || \n       ( newState !== anim8.EventState.ANIMATING && oldState === anim8.EventState.ANIMATING ) )\n    {\n      this.applyValue( frame, frame[ this.attribute ], delta );\n      updated = true;\n    }\n\n    this.state = newState;\n\n    return updated;\n  },\n\n  /**\n   * Computes the value at the given time. The only time when a value won't be\n   * returned is if the time is before the delay and the event doesn't have an\n   * initial state.\n   * \n   * @param  {Number} time\n   * @param  {any} out\n   * @return {any}\n   */\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay && !this.hasInitialState )\n    {\n      return false;\n    }\n\n    var delta = 0;\n\n    if ( time >= this.delay )\n    {\n      delta = Math.max( 1.0, ((time - this.delay) % (this.duration + this.sleep)) / this.duration );\n    }\n\n    return this.computeValue( out, delta );\n  },\n\n  /**\n   * [computeValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n\n  /**\n   * [finish description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n  },\n\n  /**\n   * [applyValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[ this.attribute ] = value;\n    }\n  },\n\n  /**\n   * The total amount of time this animator will take. This may be an infinite number.\n   * \n   * @return {Number}\n   */\n\ttotalTime: function()\n\t{\n\t\treturn Math.min( this.stopTime, this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep) );\n\t},\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n\n  /**\n   * [isInfinite description]\n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY) && (this.stopTime !== Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return (this.state === anim8.EventState.FINISHED);\n  }\n\n});\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.override( anim8.Spring.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  set: function(attribute, calculator, rest, position, velocity, gravity, finishOnRest)\n  { \n    this.reset( attribute, null, null );\n\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = velocity;\n    this.finishOnRest = finishOnRest;\n  },\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n    this.finished = false;\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.ZERO );\n    this.velocity   = this.parseValue( animator, this.velocity, calc.ZERO );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity );\n  },\n\n  /**\n   * [parseValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isFunction( parsed ) && parsed.computed )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} elapsed\n   * @param {object} frame\n   */\n  update: function(elapsed, frame)\n  {\n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.clone( this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    else if ( this.finishOnRest && calc.isZero( this.velocity ) )\n    {\n      this.finished = true;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  },\n\n  /**\n   * Sets the final state of the animator to the frame if one exists.\n   * \n   * @param  {Object}\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return this.finished;\n  }\n\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * [LinearSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.LinearSpring.prototype = new anim8.Spring(), \n{\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   * \n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.LinearSpring( this.attribute, this.calculator, this.position, this.rest, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.damping ) || \n           anim8.isComputed( this.stiffness );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['linear'] = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * [DistanceSpring description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.DistanceSpring.prototype = new anim8.Spring(), \n{\n\n  /**\n   * [start description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n\n  /**\n   * [clone description]\n   * @return {[type]}\n   */\n  clone: function()\n  {\n    return new anim8.DistanceSpring( this.attribute, this.calculator, this.position, this.rest, this.distance, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param  {object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['distance'] = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Animates a single attribute over any period of time.\n */\nanim8.Physics = function( attribute, parser, calculator, position, velocity, acceleration, terminal, stopTime )\n{\n  this.reset( attribute, parser, null );\n\n  this.calculator   = calculator;\n  this.position     = position;\n  this.velocity     = velocity;\n  this.acceleration = acceleration;\n  this.terminal     = anim8.number( terminal, Number.POSITIVE_INFINITY );\n  this.stopTime     = anim8.time( stopTime, Number.POSITIVE_INFINITY );\n  this.finished     = false;\n};\n\nanim8.override( anim8.Physics.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Prepares this attribute animator for animation on the given subject animator.\n   * This is called once in anim8.Animator.preupdate before the first time this\n   * animator is updated.\n   * \n   * @param  {[type]}\n   * @return {[type]}\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now;\n    this.elapsed = 0;\n    this.finished = false;\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator     = calc;\n    this.position       = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.initalPosition = calc.clone( this.position );\n    this.velocity       = this.parseValue( animator, this.velocity, calc.ZERO );\n    this.acceleration   = this.parseValue( animator, this.acceleration, calc.ZERO );\n    this.temp           = calc.create();\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.position ) || \n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.acceleration );\n  },\n\n  /**\n   * [parseValue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isFunction( parsed ) && parsed.computed )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n\n  /**\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  update: function(elapsed, frame)\n  {\n    var value = this.valueAt( elapsed, true );\n\n    if ( value !== false )\n    {\n      frame[ this.attribute ] = this.position = value;\n\n      return true;\n    }\n\n    var calc = this.calculator;\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Physics.MAX_DT );\n    var vel = calc.copy( this.temp, this.resolveVelocity() );\n    var acc = this.resolveAcceleration();\n    var pos = this.position;\n\n    vel = calc.adds( vel, acc, dt );\n\n    if ( this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      vel = calc.clamp( vel, 0, this.terminal );\n    }\n\n    pos = calc.adds( pos, vel, dt );\n    \n    this.position = pos;\n\n    if ( !anim8.isFunction( this.velocity ) )\n    {\n      this.velocity = calc.copy( this.velocity, vel );\n    }\n\n    frame[ this.attribute ] = pos;\n\n    return true;\n  },\n\n  /**\n   * [resolveVelocity description]\n   * @return {[type]}\n   */\n  resolveVelocity: function()\n  {\n    return anim8.isFunction( this.velocity ) ? this.velocity() : this.velocity;\n  },\n\n  /**\n   * [resolveAcceleration description]\n   * @return {[type]}\n   */\n  resolveAcceleration: function()\n  {\n    return anim8.isFunction( this.acceleration ) ? this.acceleration() : this.acceleration;\n  },\n\n  /**\n   * Returns the value at the given time.\n   * \n   * @param  {Number} time\n   * @return {any}\n   */\n  valueAt: function(time, usePosition)\n  {\n    if ( anim8.isFunction( this.velocity ) || anim8.isFunction( this.acceleration ) || this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      return false;\n    }\n\n    time -= this.delay;\n    time *= 0.001;\n\n    var calc = this.calculator;\n    var value = usePosition ? calc.copy( this.position, this.initalPosition ) : calc.clone( this.initalPosition );\n    value = calc.adds( value, this.velocity, time );\n    value = calc.adds( value, this.acceleration, time * time );\n\n    return value;\n  },\n\n  /**\n   * Clones this animator.\n   * \n   * @return {anim8.AttributeAnimator}\n   */\n  clone: function()\n  {\n    return new anim8.Physics( this.attribute, this.parser, this.calculator, this.position, this.velocity, this.acceleration, this.terminal, this.stopTime );\n  },\n\n  /**\n   * Sets the final state of the animator to the frame if one exists.\n   * \n   * @param  {Object}\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n\n  /**\n   * [isFinished description]\n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return this.finished;\n  }\n\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Physics.MAX_DT = 0.1;","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n * @param [boolean] cache\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) )\n\t{\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationStrings = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationStrings.length; k++)\n    {\n      var split = animationStrings[ k ].toLowerCase().split(' ');\n      var parsedAnimation = anim8.animation[ split[ 0 ] ];\n      var parsedOptions = anim8.options( split.slice( 1 ) );\n\n      if ( parsedAnimation )\n      {\n        if ( anim === false )\n        {\n          last = anim = parsedAnimation.extend( parsedOptions, true );\n        }\n        else\n        {\n          last = last.next = parsedAnimation.extend( parsedOptions, true );\n        }\n      }\n      else\n      {\n        throw parsedAnimation + ' is not a valid animation in \"' + animationStrings[ k ] + '\"';\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n    var attrimatorMap = new anim8.AttrimatorMap();\n\t\tvar options = anim8.options( options );\n    var helper = new anim8.ParserHelper( animation, options );\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, attrimatorMap, helper );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (attrimatorMap.size())\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, attrimatorMap );\n\t\t}\n    else\n    {\n      throw 'Failed to create any attrimators in anim8.animation';\n    }\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the attrimators that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate attrimators, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} attrimators\n */\nanim8.Animation = function(name, input, options, attrimators)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.attrimators = attrimators;\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an map of event instances from the attrimators in this animation.\n   *\n   * @return {anim8.AttrimatorMap}\n   */\n  newAttrimators: function()\n  {\n    return this.attrimators.clone();\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {object} options\n   * @param  {anim8.AttrimatorMap} attrimatorMap\n   * @return {[type]}\n   */\n  merge: function(options, attrimatorMap)\n  {\n    var helper = new anim8.ParserHelper( this.input, this.options, options );\n\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, attrimatorMap, helper );\n      }\n    }\n\n    return attrimatorMap;\n  },\n\n  /**\n   * Extends this animation and returns an animation modified with the given options. \n   *\n   * @param {object} options\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var attrimatorMap = this.newAttrimators();\n\n    this.merge( options, attrimatorMap );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, attrimatorMap );\n  }\n\n};","\n/**\n * Parses a value into a transition object. If the given input is a string it's\n * expected to be in a similar format to:\n *\n * [time] [outroDelta] +[introDelta] [easing[-easingType]] ^[granularity]\n *\n * This is also a registry of transitions, you can add your own transitions that\n * can be used later with syntax like:\n *\n * anim8.transition['myTransition'] = anim8.transition('50ms 0.05 linear');\n *\n * So you can use 'myTransition' as the transition input.\n * \n * @param {object|string|array} options\n * @param {boolean} cache\n * @return {object}\n */\nanim8.transition = function(transition, cache)\n{\n  // 1. If it's a string, convert it into an array.\n  // 2. If it's an array, parse it and convert it into an object.\n  // 3. If it's an object, fill in any missing values with the defaults.\n\n  var originalInput = transition;\n\n  if ( anim8.isString( transition ) )\n  {\n    if ( transition in anim8.transition )\n    {\n      return anim8.transition[ transition ];\n    }\n\n    transition = transition.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( transition ) )\n  {\n    var transitionArray = transition;\n\n    transition = {};\n\n    for (var i = 0; i < transitionArray.length; i++)\n    {\n      var part = transitionArray[i];\n      var first = part.charAt( 0 );\n\n      // Introduction Delta (into next event)\n      if ( first === '+' )\n      {\n        var introDelta = parseFloat( part.substring(1) );\n\n        if ( !isNaN( introDelta ) )\n        {\n          transition.introDelta = introDelta;\n        }\n      }\n      // Granularity (for smooth transitions)\n      else if ( first === '^' )\n      {\n        var granularity = parseInt( part.substring(1) );\n\n        if ( !isNaN( granularity ) && granularity > 0 )\n        {\n          transition.granularity = granularity;\n        }\n      }\n      else\n      {\n        // Easing\n        var easing = anim8.easing( part, false );\n\n        if ( easing !== false )\n        {\n          transition.easing = easing;\n        }\n\n        // Outroduction Delta\n        if ( anim8.isDefined( transition.time ) )\n        {\n          var outroDelta = parseFloat( part );\n\n          if ( !isNaN( outroDelta ) && outroDelta >= 0 && outroDelta <= 1 )\n          {\n            transition.outroDelta = outroDelta;\n          }\n        }\n        else\n        {\n          // Time\n          var time = anim8.time( part, false );\n\n          if ( time !== false )\n          {\n            transition.time = time;\n          }\n        }\n\n      }\n    }\n  }\n\n  if ( anim8.isObject( transition ) )\n  {\n    if ( !anim8.isNumber( transition.time ) )\n    {\n      transition.time = anim8.time( transition.time, anim8.defaults.transitionTime );\n    }\n    if ( !anim8.isNumber( transition.outroDelta ) )\n    {\n      transition.outroDelta = anim8.defaults.transitionOutroDelta;\n    }\n    if ( !anim8.isNumber( transition.introDelta ) )\n    {\n      transition.introDelta = anim8.defaults.transitionIntroDelta;\n    }\n    if ( !anim8.isDefined( transition.easing ) )\n    {\n      transition.easing = anim8.easing( anim8.defaults.transitionEasing );\n    }\n    if ( !anim8.isNumber( transition.granularity ) )\n    {\n      transition.granularity = anim8.defaults.transitionGranularity;\n    }\n\n    if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheTransitions ) )\n    {\n      anim8.transition[ originalInput ] = transition;\n    }\n\n    return transition;\n  }\n\n  return anim8.defaults.noTransition;\n};\n","\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n *\n * [duration] x[repeat] z[sleep] ~[delay] ![scale] [easing[-easingType]]\n *\n * This is also a registry of options, you can add your own options that\n * can be used later with syntax like:\n *\n * anim8.option['myOptions'] = anim8.option('1.5s x2 !2');\n *\n * So you can use 'myOptions' as the options input.\n * \n * @param {object|string|array} options\n * @param {boolean} cache\n * @return {object}\n */\nanim8.options = (function()\n{\n  function parseProperty(input, out, parseFunction, property, propertyAdd, propertyScale)\n  {\n    var first = input.charAt( 0 );\n\n    if ( first === '*' )\n    {\n      parsed = anim8.number( input.substring( 1 ), false );\n\n      if ( parsed !== false )\n      {\n        out[ propertyScale ] = parsed;\n      }\n    }\n    else\n    {\n      if ( first === '+' || first === '-' )\n      {\n        property = propertyAdd;\n        input = input.substring( 1 );\n      }\n\n      var parsed = parseFunction( input, false )\n\n      if ( parsed !== false )\n      {\n        out[ property ] = parsed;\n      }  \n    }\n\n    return parsed;\n  }\n\n  return function(options, cache)\n  {\n    var originalInput = options;\n\n    if ( anim8.isString( options ) )\n    {\n      if ( options in anim8.options )\n      {\n        return anim8.options[ options ];\n      }\n\n      options = options.toLowerCase().split(' ');\n    }\n\n    if ( anim8.isArray( options ) )\n    {\n      var parsed = {};\n\n      for (var i = 0; i < options.length; i++)\n      {\n        var part = options[i];\n        var first = part.charAt( 0 );\n\n        // Repeats\n        if ( first === 'x' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n        }\n        // Sleeping\n        else if ( first === 'z' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'sleep', 'sleepAdd', 'sleepScale' );\n        }\n        // Delay\n        else if ( first === '~' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'delay', 'delayAdd', 'delayScale' );\n        }\n        // Scaling\n        else if ( first === '!' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.number, 'scale', 'scaleAdd', 'scaleScale' );\n        }\n        else\n        {\n          // Easing?\n          var easing = anim8.easing( part, false );\n\n          if ( easing !== false )\n          {\n            parsed.easing = easing;\n          }\n\n          // Duration?\n          var duration = parseProperty( part, parsed, anim8.time, 'duration', 'durationAdd', 'durationScale' );\n\n          if ( duration === false )\n          {\n            // If not a duration, might be an alternative repeat? (doesn't start with x)\n            parseProperty( part, parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n          }\n        }\n      }\n\n      if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheOptions ) )\n      {\n        anim8.options[ originalInput ] = parsed;\n      }\n\n      return parsed; \n    }\n\n    if ( anim8.isObject( options ) )\n    {\n      return options;\n    }\n\n    return anim8.defaults.noOptions;\n  };\n\n})();","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(subject)\n\t{\n\t  this.subject = subject;\n    this.attrimators = new anim8.AttrimatorMap();\n    this.attrimatorsAdded = [];\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    this.cycleCurrent = 0;\n    this.cycleNext = 0;\n    \n    return this;\n\t},\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are placed\n   * to group them together so we know when to apply their initial value.\n   * \n   * @return {this}\n   */\n  newCycle: function()\n  {\n    this.cycleNext++;\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all events & springs with the same cycle\n   * identifier and applying their initial state.\n   * \n   * @return {this}\n   */\n  applyCurrentCycle: function()\n  {\n    /**\n     * Cycle is applied to event before its placed on the animator or queued\n     * When no events/springs exist for the current cycle, increment it and apply it\n     */\n\n    var cycle = this.cycleCurrent;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the attribute descriptor\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  { \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function(now)\n  {\n    // If there are attribute placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the attribute.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      for (var i = 0; i < aa.length; i++)\n      {\n        var attrimator = aa[ i ];\n\n        this.setDefault( attrimator.attribute );\n\n        attrimator.start( now, this );     \n      }\n\n      aa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this Animator if there's no value there.\n   * \n   * @param {[type]}\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    this.finished = true;\n\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      this.updated[ attr ] = attrimator.setTime( now, this.frame );\n\n      this.finished = this.finished && attrimator.isFinished();\n    }\n\t\n\t\tthis.trigger('update');\n    \n    return this;\n  },\n\n  /**\n   * Places the attribute animator in this animator replacing any existing animator\n   * for the same attribute. The next time the animator is updated the attribute\n   * animator will be started.\n   * \n   * @param  {anim8.Attrimator}\n   */\n  placeAttrimator: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n\n    this.attrimators.put( attr, attrimator );\n    this.attrimatorsAdded.push( attrimator );\n\n    this.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimAttrimators();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimAttrimators: function()\n  {\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( attrimator.isFinished() )\n      {\n        if ( attrimator.next )\n        {\n          this.placeAttrimator( attrimator.next );\n        }\n        else\n        {\n          this.attrimators.removeAt( i );\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there already.\n   * \n   * @return {[type]}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createAttrimators: function(animation, options, cache)\n  {\n    var options = anim8.options( options );    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var attrimators = animation.newAttrimators();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, attrimators );\n    }\n    \n    this.onAnimation( animation, options, attrimators );\n\n    while ( animation.next !== null )\n    {\n      animation = animation.next;\n\n      var queueAttrimators = animation.newAttrimators();\n\n      this.onAnimation( animation, options, queueAttrimators );\n\n      attrimators.queueMap( queueAttrimators );\n    }\n\n    return attrimators;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  onAnimation: function(animation, options, attrimatorMap)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeAttrimator( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Existing events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   * @param [boolean] cache\n   */\n\tplay: function(animation, options, all, cache)\n\t{\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n    \n    this.playAttrimators( attrimatorMap, all );\n\n    return this.activate();\n\t},\n\n  /**\n   * Adds events to this Animator to be played (optionally finishing events for attributes not specified in the given \n   * attribute). Existing events will be replaced immediately. This method will not activate the Animator, that has\n   * to be done manually.\n   * \n   * @param  {anim8.AttributeMap} animatorMap\n   * @param  [boolean] all\n   * @return {this}\n   */\n  playAttrimators: function(attrimatorMap, all)\n  {\n    if ( all )\n    {\n      var attrimators = this.attrimators.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n\n        if ( !attrimatorMap.has( attrimator.attribute ) )\n        {\n          attrimator.finish( this.frame );\n        }\n      }\n    }\n\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      this.placeAttrimator( attrimators[i] );\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options, cache)\n\t{\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n        \n    this.queueAttrimators( attrimatorMap );\n\n    return this.activate();\n\t},\n\n  /**\n   * Queues an array of events on this Animator. The given events will be delayed to start at the same time - at the\n   * end of the events currently on the Animator. This method will not activate the Animator, that has to be done \n   * manually.\n   * \n   * @param  {array} events\n   * @return {this}\n   */\n  queueAttrimators: function(attrimatorMap)\n  {\n    this.attrimators.queueMap( attrimatorMap, this.placeAttrimator, this );\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {string|array|object} transition\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   * @param [Boolean] cache\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n\n    this.transitionAttrimators( transition, attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation. This method will not activate the \n   * Animator, that has to be done manually.\n   *\n   * @param {object} transition\n   * @param {anim8.AttrimatorMap} events\n   * @param [boolean] all\n   */\n  transitionAttrimators: function(transition, attrimatorMap, all)\n  {\n    // If intro & outro are 0, use Tween\n    // If intro is 0, use Quadratic Path between current value, outro point, and first point on new path.\n    // If outro is 0, use Quadratic Path between current value, first point on new path, and intro point.\n    // If intro & outro are not 0, use Cubic Path between current value, outro point, first point on new path, and intro point.\n    // If granularity is given > 1 then compile the path, compute intro & outro velocities, and compute deltas for new \n    //    compiled path based on interpolated velocity over the path (knowing it's length and transition time)\n    \n    var current = this.attrimators;\n    var attrimators = attrimatorMap.values;\n\n    // Only transition if we need to\n    if ( current.hasOverlap( attrimatorMap ) )\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var a1 = attrimators[ i ];\n        var attr = a1.attribute;\n\n        if ( current.has( attr ) )\n        {\n          var attribute = this.getAttribute( attr );\n          var a2 = current.get( attr );\n        \n          var p0 = attribute.calculator.clone( this.frame[attr] );\n          var p1 = a2.getFuture( transition.outroDelta );\n          var p2 = a1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, attribute.calculator, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transition.time, transition.easing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = a1;\n\n          this.placeAttrimator( transitionEvent );\n        }\n        else\n        {\n          a1.delay += transition.time;\n     \n          this.placeAttrimator( a1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        this.placeAttrimator( attrimators[ i ] );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   * /\n  transitionInto: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var events = this.createEvents( animation, options, cache );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.transitionIntoEvents( transition, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation. This method will not activate the Animator, that has to be done \n   * manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {array} events\n   * @param [boolean] all\n   * /\n  transitionIntoEvents: function(transition, events, all)\n  {\n    // Check if we even need to transition\n    var transitionRequired = false;\n    \n    for (var i = 0; i < events.length && !transitionRequired; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transitionRequired = true;\n      }\n    }\n    \n    // Only transition if we need to\n    if ( transitionRequired )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transition.outroDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transition.introDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transition.time, transition.easing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transition.time;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n      \n    return this;\n  },\n  /**/\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {string} attr\n   * @param {any} target\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenTo: function(attr, target, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attribute to target values.\n   *\n   * @param {object} targets\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenManyTo: function(targets, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {string} attr\n   * @param {any} starts\n   * @param {any} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tween: function(attr, starts, ends, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {object} starts\n   * @param {object} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   * @param [number] scale\n   * @param [any] scaleBase\n   */\n  tweenMany: function(starts, ends, options)\n  {\n    var options = anim8.options( options );\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n    \n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n      \n      request[ attr ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n      \n      return attribute.defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number|string] duration\n   * @param [number|string] delay\n   * @param [function|string] easing\n   * @param [number|string] repeat\n   * @param [number|string] sleep  \n   * @param [number] scale\n   */\n  follow: function(attribute, path, options)\n  {\n    var options = anim8.options( options );\n    var path = anim8.path( path );\n    \n    var event = new anim8.Event( \n      attribute, \n      path, \n      options.duration,\n      options.easing,\n      options.delay, \n      options.sleep,\n      options.repeat,\n      options.scale,\n      options.scaleBase\n    );\n    \n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  attrimatorsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n   \n    var attrimatorMap = this.attrimators; \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        var attrimator = attrimatorMap.get( attr );\n        \n        if ( attrimator )\n        {\n          if ( resulting )\n          {\n            results.push( attrimator );\n          }\n          else\n          {\n            callback.call( this, attrimator, attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      var attrimators = attrimatorMap.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n\n        if ( resulting )\n        {\n          results.push( attrimator );\n        }\n        else\n        {\n          callback.call( this, attrimator, attrimator.attribute );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator, attr) \n\t\t{\n      this.attrimators.remove( attr );\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator) \n\t\t{\n\t\t\twhile (attrimator.next)\n\t\t\t{\n\t\t\t\tattrimator = attrimator.next;\n\t\t\t}\n\t\t\t\n\t\t\tattrimator.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.attrimatorsFor( attributes, function(attrimator)\n\t\t{\n\t\t\tattrimator.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attribtues. Unsetting involves removing all events,\n   * springs, and the current value in the frame.\n   * \n   * @param  {string|array|object}\n   * @return {this}\n   */\n  unset: function(attributes)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      this.attrimators.remove( attributes );\n      delete this.frame[ attributes ];\n    }\n    else if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        this.unset( attributes[ i ] );\n      }\n    }\n    else if ( anim8.isObject( attributes ) )\n    {\n      for (var attr in attributes)\n      {\n        this.unset( attr );\n      }\n    }\n\n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns the amount of finite time remaining before the animator is done\n   * animating. Attrimators that don't have a known end time aren't included.\n   */\n  timeRemaining: function()\n  {\n    return this.attrimators.timeRemaining();\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasAttrimators: function()\n  {\n    return this.attrimators.size() > 0;\n  },\n  \n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator if none is given. This is particularly\n   * useful for having a function be called on deferred statements.\n   * \n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  invoke: function(func, context, arguments)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, arguments || [] );\n    }\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n   * @param [function] callback\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t}\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'restore', 'placeAttrimator', 'preupdate', 'update', 'apply', 'trimAttrimators',\n  'activate', 'deactivate', 'destroy', 'spring', 'play', 'playAttrimators', 'queue',\n  'queueAttrimators', 'transition', 'transitionAttrimators', 'tween', 'tweenTo', \n  'tweenMany', 'tweenManyTo', 'follow', 'stop', 'end', 'finish', 'pause', 'resume',\n  'set', 'unset', 'get', 'invoke'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.override( anim8s.fn = anim8.Animators.prototype = new Array(),\n{\n  /**\n   * Invokes a callback for each element in the array.\n   * \n   * @param {function} iterator\n   */\n  each: function(iterator, context) \n  {\n    for (var i = 0; i < this.length; i++) \n    {\n      if ( iterator.call( context || this[i], this[i], i ) === false ) \n      {\n        break;\n      }\n    }\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @param {array} animators\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n   *\n   * @param {function} filterer\n   */\n  filter: function(filterer)\n  {\t\n  \tvar alive = 0;\n  \t\n  \tfor (var i = 0; i < this.length; i++)\n  \t{\n  \t\tvar remove = filterer( this[i] );\n  \t\t\n  \t\tif ( !remove )\n  \t\t{\n  \t\t\tthis[alive++] = this[i];\n  \t\t}\n  \t}\n  \t\n  \tthis.length = alive;\n  \t\n  \treturn this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  getSubjects: function(wrapper)\n  {\n    var subjects = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      subjects.push( this[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   */\n  first: function()\n  {\n    return this[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   */\n  reverse: function()\n  {\n    var last = this.length - 1;\n    var mid = Math.floor( this.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = this[ i ];\n      var e1 = this[ last - i ];\n\n      this[ i ] = e1;\n      this[ last - i ] = e0;\n    }\n\n    return this;\n  },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   * \n   * @return {this}\n   */\n  activate: function()\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var animator = this[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * [timeRemaining description]\n   * @return {[type]}\n   */\n  timeRemaining: function()\n  {\n    var maxRemaining = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      maxRemaining = Math.max( maxRemaining, this[ i ].timeRemaining() );\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Adds the following methods to make an array of Animators appear like a single Animator.\n   */\n  restore               : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n  placeAttrimator       : anim8.delegate( 'placeAttrimator', anim8.delegate.RETURN_THIS ),\n  preupdate             : anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS ),\n  update                : anim8.delegate( 'update', anim8.delegate.RETURN_THIS ),\n  apply                 : anim8.delegate( 'apply', anim8.delegate.RETURN_THIS ),\n  trimAttrimators       : anim8.delegate( 'trimAttrimators', anim8.delegate.RETURN_THIS ),\n  activate              : anim8.delegate( 'activate', anim8.delegate.RETURN_THIS ),\n  deactivate            : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n  destroy               : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n  spring                : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n  play                  : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n  playAttrimators       : anim8.delegate( 'playAttrimators', anim8.delegate.RETURN_THIS ),\n  queue                 : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n  queueAttrimators      : anim8.delegate( 'queueAttrimators', anim8.delegate.RETURN_THIS ),\n  transition            : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n  transitionAttrimators : anim8.delegate( 'transitionAttrimators', anim8.delegate.RETURN_THIS ),\n  tween                 : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n  tweenTo               : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n  tweenMany             : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n  tweenManyTo           : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n  follow                : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n  attrimatorsFor        : anim8.delegate( 'attrimatorsFor', anim8.delegate.RETURN_RESULTS ),\n  stop                  : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n  end                   : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n  finish                : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n  pause \t\t\t          : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n  resume \t\t\t          : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n  set                   : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n  unset                 : anim8.delegate( 'unset', anim8.delegate.RETURN_THIS ),\n  get                   : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n  hasAttrimators        : anim8.delegate( 'hasAttrimators', anim8.delegate.RETURN_TRUE ),\n  invoke                : anim8.delegate( 'invoke', anim8.delegate.RETURN_THIS ),\n  on\t\t\t              : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n  once\t\t              : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n  off\t\t\t              : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n  trigger               : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n});\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate( now );\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * [Sequence description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * [maxDelay description]\n   * @return {[type]}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  /**\n   * [createEvents description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  createAttrimators: function(animation, options, i)\n  {\n    var attrimatorMap = animation.newAttrimators();\n    var attrimators = attrimatorMap.values;\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = attrimators.length - 1; k >= 0; k--)\n    {\n      attrimators[ k ].delay += delayOffset;\n    }\n\n    animation.merge( options, attrimatorMap );\n    \n    return attrimatorMap;\n  },\n\n  /**\n   * [reverse description]\n   * @return {[type]}\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * [play description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  play: function(animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.playAttrimators( sequence.createAttrimators( anim, options, i ), all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [queue description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  queue: function(animation, options, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var attrimatorMap = sequence.createAttrimators( anim, options, i );\n      var attrimators = attrimatorMap.values;\n\n      for (var k = attrimators.length - 1; k >= 0; k--)\n      {\n        attrimators[ k ].delay += delayOffset;\n      }\n      \n      animator.queueAttrimators( attrimatorMap );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * [transition description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transitionAttrimators( transition, sequence.createAttrimators( anim, options, i ), all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * [add description]\n   */\n  add: function()\n  {\n    this.animators.activate();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimatorMap to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  { \n    var factory = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[ i ];\n      var attr = e.attribute;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = helper.mergeEasing( attr, e.easing );\n      e.repeat    = helper.mergeRepeat( attr, e.repeat );\n      e.delay     = helper.mergeDelay( attr, e.delay );\n      e.sleep     = helper.mergeSleep( attr, e.sleep );\n      e.duration  = helper.mergeDuration( attr, e.duration );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n    }\n  }\n};\n\n\n/**\n * [ParserHelper description]\n * @param {[type]}\n * @param {[type]}\n * @param {[type]}\n */\nanim8.ParserHelper = function( input, oldOptions, newOptions )\n{\n  this.input = input;\n  this.oldOptions = oldOptions || {};\n  this.newOptions = newOptions || {};\n\n  this.prepareSpecifics( 'easings' );\n  this.prepareSpecifics( 'repeats' );\n  this.prepareSpecifics( 'delays' );\n  this.prepareSpecifics( 'sleeps' );\n  this.prepareSpecifics( 'durations' );\n  this.prepareSpecifics( 'scales' );\n  this.prepareSpecifics( 'scaleBases' );\n};\n\nanim8.ParserHelper.prototype = \n{\n\n  /**\n   * [prepareSpecifics description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  prepareSpecifics: function(specifics)\n  {\n    if ( !anim8.isObject( this.input[ specifics ] ) )\n    {\n      this.input[ specifics ] = {};\n    }\n  },\n\n  /* PARSING */\n\n  /**\n   * [parseEasing description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseEasing: function(attr)\n  {\n    return this.parseFirst( attr, 'easing', 'easings' );\n  },\n\n  /**\n   * [parseRepeat description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseRepeat: function(attr)\n  {\n    return this.parseNumber( attr, anim8.repeat, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * [parseDelay description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseDelay: function(attr)\n  {\n    return this.parseNumber( attr, anim8.delay, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * [parseSleep description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseSleep: function(attr)\n  {\n    return this.parseNumber( attr, anim8.sleep, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'sleeps' );\n  },\n\n  /**\n   * [parseDuration description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseDuration: function(attr)\n  {\n    return this.parseNumber( attr, anim8.duration, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * [parseScale description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseScale: function(attr)\n  {\n    return this.parseNumber( attr, anim8.scale, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * [parseScaleBase description]\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseScaleBase: function(attr)\n  {\n    return this.parseFirst( attr, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * [parseFirst description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseFirst: function(attr, option, specifics)\n  {\n    return anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n  },\n\n  /**\n   * [parseNumber description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  parseNumber: function(attr, parseFunction, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n    var base = parseFunction( baseRaw );\n    var add = parseOptionFunction( this.oldOptions[ optionAdd ], 0 );\n    var scale = anim8.coalesce( this.oldOptions[ optionScale ], 1 );\n\n    return (add === 0 && scale === 1) ? baseRaw : (base + add) * scale;\n  },\n\n  /* MERGING */\n\n  /**\n   * [mergeEasing description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeEasing: function(attr, current)\n  {\n    return this.mergeFirst( attr, current, anim8.easing, 'easing', 'easings' );\n  },\n\n  /**\n   * [mergeRepeat description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeRepeat: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * [mergeDelay description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeDelay: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * [mergeSleep description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeSleep: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'scales' );\n  },\n\n  /**\n   * [mergeDuration description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeDuration: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * [mergeScale description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeScale: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * [mergeScaleBase description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeScaleBase: function(attr, current, factory)\n  {\n    var calc = factory.attribute( attr ).calculator;\n    var parseFunction = function(value, defaultValue) {\n      return calc.parse( value, defaultValue );\n    };\n\n    return this.mergeFirst( attr, current, parseFunction, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * [mergeFirst description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeFirst: function(attr, current, parseOptionFunction, option, specifics)\n  {\n    return parseOptionFunction( anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] ), current );\n  },\n\n  /**\n   * [mergeNumber description]\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @param  {[type]}\n   * @return {[type]}\n   */\n  mergeNumber: function(attr, current, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] );\n    var base = parseOptionFunction( baseRaw, current );\n    var add = parseOptionFunction( anim8.coalesce( this.newOptions[ optionAdd ], this.oldOptions[ optionAdd ] ), 0 );\n    var scale = anim8.coalesce( this.newOptions[ optionScale ], this.oldOptions[ optionScale ], 1 );\n\n    return (base + add) * scale;\n  }\n\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n\n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar deltas = animation.deltas;\n  \tvar values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      var valueCount = 0;\n      \n  \t\tfor (var attr in values)\n  \t\t{\n        valueCount++; \n      }\n      \n      deltas = [];\n      \n      for (var i = 0; i < valueCount; i++)\n      {\n        deltas[i] = i / (valueCount - 1);\n      }\n    }\n  \tif ( anim8.isArray( deltas ) )\n  \t{\n  \t\tvar deltaObject = {};\n  \t\t\n  \t\tfor (var attr in values)\n  \t\t{\n  \t\t\tdeltaObject[attr] = deltas;\t\n  \t\t}\n  \t\t\n  \t\tdeltas = deltaObject;\n  \t}\n    \n  \tfor (var attr in values)\n  \t{\n  \t\tvar value = values[ attr ];\n      var attribute = factory.attribute( attr );\n  \t\t\n  \t\tfor (var k = 0; k < value.length; k++)\n  \t\t{\n  \t\t\tvalue[k] = attribute.parse( value[k] );\n  \t\t}\n\n      var easing    = helper.parseEasing( attr );\n      var delay     = helper.parseDelay( attr );\n      var duration  = helper.parseDuration( attr );\n      var sleep     = helper.parseSleep( attr );\n      var repeat    = helper.parseRepeat( attr );\n      var scale     = helper.parseScale( attr );\n      var scaleBase = helper.parseScaleBase( attr );\n      var path      = new anim8.DeltaPath( attr, attribute.calculator, values[attr], deltas[attr] );\n      var event     = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n  \n});\n\n/**\n * Register the parser.\n */\nanim8.parser['values'] = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n  \tvar values = animation.final;\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] );\n      var delay      = anim8.delay( helper.parseDelay( attr ) );\n      var duration   = anim8.duration( helper.parseDuration( attr ) );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, scale, scaleBase, false, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var factory = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n      var attr = e.attribute;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.delay     = helper.mergeDelay( attr, e.delay ) + helper.mergeDuration( attr, e.duration );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory ); \n    }\n  }\n\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['final'] = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays\n    \n    var factory    = anim8.factory( animation.factory );\n  \tvar values     = animation.initial;\n    \n  \tfor (var attr in values)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = helper.parseDelay( attr );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  },\n\n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n      var attr = e.attribute;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      e.delay     = helper.mergeDelay( attr, e.delay );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n    }\n  }\n  \n});\n\n/**\n * Register the parser.\n */\nanim8.parser['initial'] = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    var easings = animation.easings || {};\n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) \n      {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n  \t\t\t\n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n  \t\n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = helper.parseDuration( attr );\n      var delay     = helper.parseDelay( attr );\n      var sleep     = helper.parseSleep( attr );\n      var repeat    = helper.parseRepeat( attr );\n      var scale     = helper.parseScale( attr );\n      var scaleBase = helper.parseScaleBase( attr );\n      var path      = new anim8.KeyframePath( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser['keyframe'] = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTweenTo = function()\n{\n  \n};\n\n// ParserTweenTo extends anim8.Parser()\nanim8.override( anim8.ParserTweenTo.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n\n  \tfor (var attr in tweenTo)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[attr] );\n      var duration   = helper.parseDuration( attr );\n      var easing     = helper.parseEasing( attr );\n      var delay      = helper.parseDelay( attr );\n      var sleep      = helper.parseSleep( attr );\n      var repeat     = helper.parseRepeat( attr );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, value );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenTo'] = new anim8.ParserTweenTo();\n","\n/**\n * Instantiates a new parser for the 'tweenFrom' animation type.\n */\nanim8.ParserTweenFrom = function()\n{\n  \n};\n\n// ParserTweenFrom extends anim8.Parser()\nanim8.override( anim8.ParserTweenFrom.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenFrom  = animation.tweenFrom;\n\n  \tfor (var attr in tweenFrom)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenFrom[attr] );\n      var duration   = helper.parseDuration( attr );\n      var easing     = helper.parseEasing( attr );\n      var delay      = helper.parseDelay( attr );\n      var sleep      = helper.parseSleep( attr );\n      var repeat     = helper.parseRepeat( attr );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.Tween( attr, attribute.calculator, value, anim8.computed.current );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenFrom'] = new anim8.ParserTweenFrom();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParserMove = function()\n{\n  \n};\n\n// ParserMove extends anim8.Parser()\nanim8.override( anim8.ParserMove.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var move       = animation.move;\n\n  \tfor (var attr in move)\n  \t{\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[attr] );\n      var duration   = helper.parseDuration( attr );\n      var easing     = helper.parseEasing( attr );\n      var delay      = helper.parseDelay( attr );\n      var sleep      = helper.parseSleep( attr );\n      var repeat     = helper.parseRepeat( attr );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, anim8.computed.relative( value ) );\n      var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['move'] = new anim8.ParserMove();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParseSpring = function()\n{\n  \n};\n\n// ParseSpring extends anim8.Parser()\nanim8.override( anim8.ParseSpring.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var springs    = animation.springs;\n\n  \tfor (var attr in springs)\n  \t{\n      var spring     = springs[ attr ];\n\n      if ( !anim8.isDefined( spring.attribute ) )\n      {\n        spring.attribute = attr;\n      }\n\n      var parsed = anim8.spring( spring );\n      \n      if ( parsed !== false )\n      {\n        parsed.parser = this;\n\n        attrimatorMap.put( attr, parsed );  \n      }\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['springs'] = new anim8.ParseSpring();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParsePhysics = function()\n{\n  \n};\n\n// ParsePhysics extends anim8.Parser()\nanim8.override( anim8.ParsePhysics.prototype = new anim8.Parser(),\n{\n    \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimators to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var physics    = animation.physics;\n\n  \tfor (var attr in physics)\n  \t{\n      var physic    = physics[ attr ];\n\n      var attrimator = new anim8.Physics(\n        attr, \n        this, \n        physic.calculator, \n        anim8.coalesce( physic.position, true ), \n        physic.velocity, \n        physic.acceleration, \n        physic.terminal,\n        physic.stopAt\n      );\n\n      attrimatorMap.put( attr, attrimator );\n  \t}\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['physics'] = new anim8.ParsePhysics();\n","\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n * \n * @param  [string|anim8.Factory]\n * @return {anim8.Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory.default;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n  this.priority = 0;\n  this.attributes = {};\n};\n\nanim8.override( anim8.ObjectFactory.prototype = new anim8.Factory(),\n{\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;\n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {string} attr\n   * @return {object}\n   */\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory['default'] = anim8.factory['object'] = new anim8.ObjectFactory();\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.dom.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute['default']                 = {defaultValue: 0};\n"],"sourceRoot":"/source/"}