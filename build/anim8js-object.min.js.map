{"version":3,"sources":["anim8js-core.js","anim8js-fast-map.js","anim8js-defer.js","anim8js-easing.js","anim8js-easing-type.js","anim8js-easing-css.js","anim8js-color.js","anim8js-computed.js","anim8js-calculator.js","anim8js-calculator-number.js","anim8js-calculator-2d.js","anim8js-calculator-3d.js","anim8js-calculator-quaternion.js","anim8js-calculator-rgb.js","anim8js-calculator-rgba.js","anim8js-path.js","anim8js-path-tween.js","anim8js-path-cubic.js","anim8js-path-quadratic.js","anim8js-path-delta.js","anim8js-path-jump.js","anim8js-path-compiled.js","anim8js-path-keyframe.js","anim8js-path-point.js","anim8js-attrimator.js","anim8js-attrimator-map.js","anim8js-event.js","anim8js-spring.js","anim8js-spring-linear.js","anim8js-spring-distance.js","anim8js-physics.js","anim8js-animation.js","anim8js-transition.js","anim8js-options.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tweenTo.js","anim8js-parser-tweenFrom.js","anim8js-parser-move.js","anim8js-parser-springs.js","anim8js-parser-physics.js","anim8js-parser-travel.js","anim8js-factory.js","anim8js-object.js"],"names":["m8","anim8","subject","Animator","factory","factoryFor","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","defaults","duration","easing","teasing","delay","sleep","repeat","scale","transitionTime","transitionOutro","transitionIntro","transitionEasing","transitionGranularity","transitionLookup","cache","cacheOptions","cacheTransitions","noOptions","noTransition","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","trim","String","prototype","replace","isEmpty","prop","copy","p","extend","out","arguments","o","override","coalesce","a","b","c","d","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","inf","Number","POSITIVE_INFINITY","infinity","infinite","once","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","number","value","constant","variable","resolve","clamp","v","max","delegate","functionName","returning","RETURN_THIS","this","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","slice","trigger","FastMap","map","reset","putMap","put","values","keys","indices","key","get","remove","removeAt","index","lastValue","pop","lastKey","indexOf","has","hasOverlap","size","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","pair","e","t","easingType","bezier","isEasingName","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","optional","inout","yoyo","mirror","reverse","flip","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","format","ca","cr","cg","cb","toString","computed","current","attrimator","attr","attribute","getAttribute","frame","calculator","clone","cloneDefault","relative","relativeAmount","mask","isComputed","relativeFunction","calc","mul","add","randomSelection","randomFunction","selected","ZERO","Path","compute","create","resolvedMin","resolvedMax","Calculator","createConstants","ONE","INFINITY","adds","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","lengthSq","isValid","isZero","isEqual","distSq","isRelative","getRelativeAmount","z","NumberCalculator","defaultValue","amountScale","ab","epsilon","Point2dCalculator","y","cx","cy","rx","ry","ix","iy","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","Point3dCalculator","cz","rz","iz","dz","QuaternionCalculator","angle","ra","ia","da","RGBCalculator","rr","rg","rb","ir","ig","ib","dr","dg","db","RGBACalculator","path","spring","type","name","points","hasComputed","ps","replaceComputed","resolvePoint","isLinear","granularity","prev","temp","Tween","CubicPath","p0","p1","p2","p3","d1","d2","d3","i1","i3","QuadraticPath","DeltaPath","deltas","ds","d0","pd","JumpPath","CompiledPath","pointCount","KeyframePath","easings","ea","defaultEasing","PointPath","point","Attrimator","parser","startTime","pauseTime","elapsed","stopTime","paused","cycle","offset","finished","startCycle","setTime","updated","finish","update","getElapsed","stopIn","milliseconds","valueAt","totalTime","timeRemaining","isInfinite","pause","resume","isPaused","isFinished","getParser","queue","AttrimatorMap","queueMap","onNewAttribute","maxRemaining","attrimators","existing","unqueueAt","applyCycle","nextCycle","currentDepth","nextDepth","EventState","DELAYED","ANIMATING","SLEEPING","FINISHED","Event","scaleBase","hasInitialState","computeValue","baseValue","applyValue","state","oldState","newState","iteration","Spring","set","rest","position","velocity","gravity","finishOnRest","parseValue","resolveRest","updateVelocity","dt","MAX_DT","starting","EPSILON","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","Physics","acceleration","terminal","resolveVelocity","resolveAcceleration","initalPosition","vel","acc","pos","usePosition","animation","options","Animation","animationStrings","anim","last","parsedAnimation","parsedOptions","attrimatorMap","helper","ParserHelper","parserName","save","isSaved","newAttrimators","merge","force","transition","originalInput","transitionArray","part","first","charAt","intro","substring","outro","lookup","parseProperty","propertyAdd","propertyScale","fn","attrimatorsAdded","active","cycleCurrent","cycleNext","cycleEnded","newCycle","applyCurrentCycle","endCurrentCycle","restore","applyInitialState","preupdate","aa","setDefault","wasFinished","minCycle","placeAttrimator","trimAttrimators","activate","deactivate","destroy","createAttrimators","onAnimation","queueAttrimators","play","all","playAttrimators","finishNotPresent","transitionAttrimators","curr","pastLookahead","pastVelocity","pastNegativeVelocity","past","outTime","outPoint","outNext","inTime","inPoint","inNext","outVelocity","outPerMillis","inVelocity","inPerMillis","compiled","lastPoint","totalDistance","distances","requiredTime","timeDelta","transitionEvent","tweenTo","target","tweenManyTo","targets","tween","starts","ends","tweenMany","move","moveMany","amounts","ref","request","follow","attrimatorsFor","attributes","resulting","stop","unset","hasAttrimators","getSubject","wrapper","invoke","func","args","DeferAnimator","onCycleStart","onCycleEnd","fill","each","iterator","filter","filterer","alive","getSubjects","mid","e0","e1","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","remaining","Parser","newOptions","oldOptions","mergeEasing","mergeRepeat","mergeDelay","mergeSleep","mergeDuration","mergeScale","mergeScaleBase","prepareSpecifics","specifics","parseEasing","parseFirst","parseRepeat","parseNumber","parseDelay","parseSleep","parseDuration","parseScale","parseScaleBase","option","parseEvent","parseOptionFunction","optionAdd","optionScale","baseRaw","base","mergeFirst","mergeNumber","ParserDeltas","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","keyframe","sort","from","half","to","times","maxTime","order","pathEasings","ParserTweenTo","ParserTweenFrom","tweenFrom","ParserMove","ParseSpring","springs","ParsePhysics","physics","physic","stopAt","ParserTravel","travel","pointing","subtractVelocity","pointingFunction","targetValue","difference","traveling","traveler","highestPriorityFactory","factoryName","is","priority","Factory","ObjectFactory","$animator","calculatorName"],"mappings":"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","file":"anim8js-object.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n * @return {anim8.Animator|false}\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factoryFor( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {Array} subject\n * @return {anim8.Animators}\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factoryFor( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n\n/**\n * The default values for anim8js properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   * \n   * @type {Number}\n   */\n  duration: 1000,\n\n  /**\n   * The default easing.\n   * \n   * @type {String|Function}\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   * \n   * @type {String|Function}\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   * \n   * @type {Number}\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   * \n   * @type {Number}\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   * \n   * @type {Number}\n   */\n  repeat: 1,\n\n  /**\n   * The default scale for an animation.\n   * \n   * @type {Number}\n   */\n  scale: 1.0,\n\n  /**\n   * The default transition time in milliseconds.\n   * \n   * @type {Number}\n   */\n  transitionTime: 500,\n\n  /**\n   * The default transition outroduction time in milliseconds.\n   * \n   * @type {Number}\n   */\n  transitionOutro: 100,\n\n  /**\n   * The default transition introduction time in milliseconds.\n   * \n   * @type {Number}\n   */\n  transitionIntro: 100,\n\n  /**\n   * The default transition easing when none is specified.\n   * \n   * @type {String|Function}\n   */\n  transitionEasing: 'linear',\n\n  /**\n   * The default transition granularity. This is used for smooth transitions to\n   * provide a smooth transition from the outro velocity to the intro velocity,\n   * the cubic or quadratic path between the two is a curve with unknown length\n   * so the length needs to be calculated using a maximum number of points to\n   * calculate along the path - summing the distances between the consecutive points.\n   * \n   * @type {Number}\n   */\n  transitionGranularity: 0,\n\n  /**\n   * TODO\n   * \n   * @type {Number}\n   */\n  transitionLookup: 10,\n\n  /**\n   * Whether animtions are cached whenever possible. Animations that can be\n   * cached are strings with options specified in the string and without an\n   * option object given. For example 'tada ~1s 3s x3' is cacheable.\n   * \n   * @type {Boolean}\n   * @see anim8.animation\n   */\n  cache: false,\n\n  /**\n   * Whether parsed options are cached whenever possible. Options that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see anim8.options\n   */\n  cacheOptions: false,\n\n  /**\n   * Whether parsed transitions are cached whenever possible. Transitions that can be\n   * cached must be strings.\n   * \n   * @type {Boolean}\n   * @see anim8.transition\n   */\n  cacheTransitions: false,\n\n  /**\n   * The value to return when options could not be parsed from input.\n   * \n   * @type {Object}\n   */\n  noOptions: {},\n\n  /**\n   * The value to return when a transition could not be parsed from input.\n   * \n   * @type {Object}\n   */\n  noTransition: {}\n\n};\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n *\n * @param {any} x\n * @return {Boolean}\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n *\n * @param {any} x\n * @return {Boolean}\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n *\n * @param {any} x\n * @return {Boolean}\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n *\n * @param {any} x\n * @return {Boolean}\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n *\n * @param {any} x\n * @return {Boolean}\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n *\n * @param {any} x\n * @return {Boolean}\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n *\n * @param {any} x\n * @return {Boolean}\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n *\n * @return {Number}\n */\nanim8.now = (function() \n{\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * Returns the trimmed version of the given string. A trimmed string has no\n * whitespace in the beginning or end of it.\n * \n * @param  {String} x\n * @return {String}\n */\nanim8.trim = (function()\n{ \n  if (String.prototype.trim) {\n    return function(x) {\n      return x.trim();\n    };\n  }\n  return function(x) {\n    return x.replace(/^([\\s]*)|([\\s]*)$/g, '');\n  };\n})();\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n * @return {Boolean}\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or \n * object a new instance of that type is created where the values are copied as \n * well. All other types can't be copied (most likely because they're scalar) so\n * they are returned as-is.\n *\n * @param {T} x\n * @return {T}\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Extends the given object by merging the following objects into it, avoiding \n * overriding any existing properties.\n * \n * @param  {Object} out\n * @return {Object}\n */\nanim8.extend = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        if ( !(prop in out) )\n        {\n          out[prop] = o[prop];\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Extends the given object my merging the following objects into, overriding \n * existing properties where necessary.\n * \n * @param  {Object} out\n * @return {Object}\n */\nanim8.override = function(out)\n{\n  for (var i = 1; i < arguments.length; i++)\n  {\n    var o = arguments[ i ];\n\n    if ( anim8.isObject( o ) )\n    {\n      for (var prop in o)\n      {\n        out[prop] = o[prop];\n      }\n    }\n  }\n\n  return out;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's \n * assumed to be milliseconds and is returned immediately. If a string is given\n * a unit is looked for to determine how to scale the number into milliseconds.\n * If the given time is invalid and returnOnInvalid is not given then zero is\n * returned.\n *\n * @param {String|Number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {String|Number} time\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {String|Number} time\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {String|Number} time\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {String|Number} time\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses a number from the given input and if the input isn't a valid number\n * then returnOnInvalid is returned.\n * \n * @param {String|Number} value\n * @param {E} returnOnInvalid\n * @return {Number|E}\n */\nanim8.number = function(value, returnOnInvalid)\n{\n  var parsed = parseFloat( value );\n\n  return isNaN( parsed ) ? returnOnInvalid : parsed;\n};\n\n/**\n * Parses scale from a string or number.\n * \n * @param {String|Number} scale\n * @return {Number}\n */\nanim8.scale = function(scale)\n{\n  return anim8.number( scale, anim8.defaults.scale );\n};\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {T} variable\n * @return {Function}\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n/**\n * Resolves the given variable. If the variable is a function the result is \n * returned.\n * \n * @param  {Function|E} variable\n * @return {E}\n */\nanim8.resolve = function(variable)\n{\n  return anim8.isFunction( variable ) ? variable() : variable;\n};\n\n/**\n * Returns a value between the given minimum and maximum.\n * \n * @param  {Number} v\n * @param  {Number} min\n * @param  {Number} max\n * @return {Number}\n */\nanim8.clamp = function(v, min, max)\n{\n  return (v < min) ? min : (v > max ? max : v);\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on \n * the first element.\n *\n * @param {String} functionName\n * @param {String} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  // Adds a listener to $this\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   * \n   * @param {String} events\n   * @param {Function} callback\n   * @param {Object} context\n   * @return {this}\n   */\n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n\n    return this;\n  };\n  \n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   * \n   * @param {String} events\n   * @param {Function} callback\n   * @param {Object} context\n   * @return {this}\n   */\n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n\n    return this;\n  };\n  \n  // Removes a listener from an array of listeners.\n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  // Triggers listeneers for the given event\n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var max = eventListeners.length;\n     \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n        if ( eventListeners.length !== max )\n        {\n          listeners[ event ] = eventListeners.slice( max );  \n        }\n        else\n        {\n          delete listeners[ event ];  \n        }\n      }\n    }\n  };\n  \n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   * \n   * @param {String} event\n   * @param {any} argument\n   * @return {this}\n   */\n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n\n    return this;\n  };\n};\n\n","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @param [anim8.FastMap|Object] map\n */\nanim8.FastMap = function(map)\n{\n  this.reset();\n\n  if ( map instanceof anim8.FastMap )\n  {\n    this.putMap( map );\n  }\n  else if ( anim8.isObject( map ) )\n  {\n    for (var prop in map)\n    {\n      this.put( prop, map[ prop ] );\n    }\n  }\n};\n\nanim8.FastMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {this}\n   */\n  reset: function()\n  {\n    this.values = [];\n    this.keys = [];\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   * \n   * @param {String} key\n   * @param {any} value\n   * @return {this}\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   * \n   * @param {anim8.FastMap}\n   * @return {this}\n   */\n  putMap: function(map)\n  {\n    var keys = map.keys;\n    var values = map.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.put( keys[ i ], values[ i ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   * \n   * @param {String} key\n   * @return {any}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   * \n   * @param {String} key\n   * @return {this}\n   */\n  remove: function(key)\n  {\n    if ( key in this.indices )\n    {\n      this.removeAt( this.indices[ key ] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   * \n   * @param {Number} index\n   * @return {this}\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   * \n   * @param {String} key\n   * @return {Number}\n   */\n  indexOf: function(key)\n  {\n    return anim8.coalesce( this.indices[ key ], -1 );\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   * \n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns whether the given input has overlap with keys in this map.\n   * \n   * @param {anim8.FastMap|Object} map\n   * @return {Boolean}\n   */\n  hasOverlap: function(map)\n  {\n    var keys = this.keys;\n    var indices = map.indices;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      if ( keys[i] in indices )\n      {\n        return true;\n      }\n    }\n   \n    return false;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   * \n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Clears all keys & values from the map.\n   * \n   * @return {this}\n   */\n  clear: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  }\n\n};","\n/**\n * Instantiates a Defer instance. Defer instances keep track of method calls\n * to call at a later time - after an event occurs. The first argument needs\n * to be a function which returns an instance of anim8.Defer when it's invoked.\n * The second argument is an array of methods that can be deferred.\n * \n * @param {Function} factory\n * @param {Array} methods\n */\nanim8.Defer = function(factory, methods)\n{\n  this.$factory = factory;\n  \n  for (var i = 0; i < methods.length; i++)\n  {  \n    this[ methods[i] ] = this.$push( methods[i] );\n  }\n};\n\nanim8.Defer.prototype = \n{  \n  /**\n   * Resets the defer instance.\n   * \n   * @param  {anim8.eventize} eventable\n   * @param  {any} previous\n   * @param  {String} eventType\n   * @param  {String} event\n   * @param  {Function} callback\n   */\n  $reset: function(eventable, previous, eventType, event, callback)\n  {\n    this.$eventable = eventable;\n    this.$previous = previous;\n    this.$eventType = eventType;\n    this.$event = event;\n    this.$callback = callback;\n    this.$calls = [];\n    this.$next = [];\n    \n    if ( this.$isRoot() )\n    {\n      this.$register();\n    }\n  },\n\n  /**\n   * Determines whether this Defer instance is at the root.\n   * \n   * @return {Boolean}\n   */\n  $isRoot: function()\n  {\n    return this.$eventable === this.$previous;\n  },\n\n  /**\n   * Registers this Defer instance with the eventable.\n   */\n  $register: function()\n  {\n    this.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n  },\n\n  /**\n   * Creates a defered function which passes the method and arguments for\n   * any method call into an array of calls on this Defer instance.\n   * \n   * @param  {String} methodName\n   * @return {Function}\n   */\n  $push: function(methodName)\n  {\n    return function() \n    {\n      this.$calls.push( [methodName, arguments] );\n      \n      return this;\n    };\n  },\n\n  /**\n   * Executes all defered method calls and starts any child Defer instances.\n   */\n  $run: function() \n  {\n    // Invoke the callback if one was given.\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n    for (var i = 0; i < this.$calls.length; i++)\n    {\n      var call = this.$calls[ i ];\n      \n      this.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n    }\n    \n    for (var k = 0; k < this.$next.length; k++)\n    {\n      this.$next[ k ].$register();\n    }\n  },\n\n  /**\n   * Returns the object before the defer statement.\n   *\n   * @return {any}\n   */\n  undefer: function()\n  {\n    return this.$previous;\n  },\n\n  /**\n   * Defers any following method calls to after the given event is triggered. A\n   * callback can be specified which is a function invoked after the event is\n   * triggered.\n   * \n   * @param {String} eventType\n   * @param {String} event\n   * @param {Function} callback\n   * @return {anim8.Defer}\n   */\n  defer: function(eventType, event, callback)\n  {\n    var next = new this.$factory( this.$eventable, this, eventType, event, callback );\n    \n    this.$next.push( next );\n    \n    return next;\n  }\n  \n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's \n * assumed to be an easing function and is returned immediately. If the input is\n * a string the easing with that name is returned. If the input is a string in \n * the format 'easing-easingType' then an easing is returned that is a \n * combination of the easing with the given name and the easingType with the \n * given name. If the given input is an array with 4 elements it's assumed to be\n * a bezier path and one is created and returned. If no input is given the \n * default easing is returned. If an easing cannot be determined then an error\n * is thrown.\n * \n * @param {Function|String|Array} easing\n * @param [E] returnOnInvalid\n * @return {Function|E}\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n  {\n    return easing;\n  }\n  if ( anim8.isString( easing ) )\n  {\n    if ( easing in anim8.easing )\n    {\n      return anim8.easing[ easing ];\n    }\n    \n    if ( easing.indexOf('-') !== -1 )\n    {\n      var pair = easing.split('-');\n      var e = pair[0];\n      var t = pair[1];\n      \n      if ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n      {        \n        return anim8.easingType[ t ]( anim8.easing[ e ] );\n      }\n    }\n  }\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n  {\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n  {\n    return anim8.easing( anim8.defaults.easing );\n  }\n  \n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @param {String} easing\n * @return {Boolean}\n * @see anim8.easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n  var pair = easing.split('-');\n  var e = pair[0];\n  var t = pair[1];\n  \n  if ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n  {        \n    return true;\n  }\n  \n  return false;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  return x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n  return Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n  var wave = -Math.sin(x * 10.9955742876);\n  return scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n  return (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n  return (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n  return (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x + 0.01) + 2.0) * 0.5 / 1.0021606868913213;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n    return (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\n/**\n * Generates a bezier easing function given the two middle control points. The\n * first point is {0,0} and the last point is {1, 1}.\n * \n * @param {Number} mX1\n * @param {Number} mY1\n * @param {Number} mX2\n * @param {Number} mY2\n * @return {Function}\n */\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n","\n/**\n * Returns an easing type based on the input. If the input is a function that \n * function is immediately returned. If the input is a string the easing type \n * with that name is returned. If no easing type could be determined an error is\n * thrown.\n *\n * @param {Function|String} easingType\n * @param [Boolean] optional\n * @return {Function|false}\n */\nanim8.easingType = function(easingType, optional)\n{\n  if ( anim8.isFunction( easingType ) )\n  {\n    return easingType;\n  }\n  if ( anim8.isString( easingType ) && easingType in anim8.easingType )\n  {\n    return anim8.easingType[ easingType ];\n  }\n  \n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw easingType + ' is not a valid easing type';\n};\n\n/**\n * Plays the animation forward normally.\n * \n * @param  {Function} easing\n * @return {Function}\n */\nanim8.easingType.in = function(easing) \n{\n  return function(x) \n  {\n    return easing( x );\n  };\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum.\n * \n * @param  {Function} easing\n * @return {Function}\n */\nanim8.easingType.out = function(easing) \n{\n  return function(x) \n  {\n    return 1.0 - easing( 1.0 - x );\n  };\n};\n\n/**\n * Plays the animation forward by flipping the easings momentum halfway.\n * \n * @param  {Function} easing\n * @return {Function}\n */\nanim8.easingType.inout = function(easing) \n{\n  return function(x) \n  {\n    if ( x < 0.5 ) \n    {\n      return easing( 2.0 * x ) * 0.5;\n    } \n    else \n    {\n      return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n    }\n  };\n};\n\n/**\n * Plays the aninmation forwards with the given easing, and backwards with the same easing momentum.\n * \n * @param  {Function} easing\n * @return {Function}\n */\nanim8.easingType.yoyo = function(easing) \n{\n  return function(x) \n  {\n    if ( x < 0.5 ) \n    {\n      return easing( 2.0 * x );\n    } \n    else \n    {\n      return easing( 2.0 - 2.0 * x );\n    }\n  };\n};\n\n/**\n * Plays the animation forwards with the given easing, and backwards reflecting the easing's momentum.\n * \n * @param  {Function} easing\n * @return {Function}\n */\nanim8.easingType.mirror = function(easing)\n{\n  return function(x)\n  {\n    if ( x < 0.5 )\n    {\n      return easing( 2.0 * x );\n    }\n    else\n    {\n      return 1.0 - easing( 2.0 - 2.0 * x );\n    }\n  };\n};\n\n/**\n * Plays the animation backwards with using the same easing momentum.\n * \n * @param  {Function} easing\n * @return {Function}\n */\nanim8.easingType.reverse = function(easing)\n{\n  return function(x)\n  {\n    return easing( 1.0 - x );\n  };\n};\n\n/**\n * Plays the animation backwards by flipping the easing's momentum.\n * \n * @param  {Function} easing\n * @return {Function}\n */\nanim8.easingType.flip = function(easing)\n{\n  return function(x)\n  {\n    return 1.0 - easing( x );\n  };\n};\n","\n/**\n * Easings equivalent to the CSS animations. These are approximations since the\n * exact functions don't perform quickly.\n */\n\nanim8.easing.cssEase      = anim8.easing.ease;\n\nanim8.easing.cssEaseIn    = anim8.easing.quad;\n\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\n\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\n\nanim8.easing.cssLinear    = anim8.easing.linear;\n","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {String} input\n * @return {Object|false}\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {Object} color\n * @return {String}\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.clamp( anim8.coalesce( color.a, 1.0 ), 0, 1 );\n  var cr = Math.floor( anim8.clamp( anim8.coalesce( color.r, 255 ), 0, 255 ) );\n  var cg = Math.floor( anim8.clamp( anim8.coalesce( color.g, 255 ), 0, 255 ) );\n  var cb = Math.floor( anim8.clamp( anim8.coalesce( color.b, 255 ), 0, 255 ) );\n  \n  if (ca === 1.0)\n  { \n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};","\n\n/**\n * The namespace for computed functions. Computed functions are functions that\n * are invoked once at the start of an animation given the attrimator and \n * animator and the result replaces the function.\n */\nanim8.computed = {};\n\n/**\n * Calculates the current value for an animator.\n * \n * @param {anim8.Attrimator} attrimator\n * @param {anim8.Animator} animator\n * @return {T}\n */\nanim8.computed.current = function(attrimator, animator)\n{\n  var attr = attrimator.attribute;\n  var attribute = animator.getAttribute( attr );\n\n  if ( attr in animator.frame )\n  {\n    return attribute.calculator.clone( animator.frame[ attr ] );\n  }\n  else\n  {\n    return attribute.cloneDefault();\n  }\n};\n\n// Marks the function as computed which is a signal to paths & events.\nanim8.computed.current.computed = true;\n\n/**\n * Calculates a value relative to the attribute value currently in the animator.\n * A mask can be used for mixed relative & absolute values in a single value\n * where 1 makes it relative and 0 makes it absolute.\n * \n * @param {T} relativeAmount\n * @param {T} mask\n * @return {Function}\n */\nanim8.computed.relative = function(relativeAmount, mask)\n{\n  // If the relativeAmount is already a computed value, return it.\n  if ( anim8.isComputed( relativeAmount ) )\n  {\n    return relativeAmount;\n  }\n\n  var relativeFunction = function(attrimator, animator)\n  { \n    var attr = attrimator.attribute;\n    var attribute = animator.getAttribute( attr );\n    var calc = attribute.calculator;\n    var current = null;\n\n    if ( attr in animator.frame )\n    {\n      current = calc.clone( animator.frame[ attr ] );\n    }\n    else\n    {\n      current = attribute.cloneDefault();\n    }\n\n    if ( mask )\n    {\n      current = calc.mul( current, mask );\n    }\n\n    return calc.add( current, relativeAmount );\n  };\n\n  // Marks the function as computed which is a signal to paths & events.\n  relativeFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  relativeFunction.relativeAmount = relativeAmount;\n  relativeFunction.mask = mask;\n\n  return relativeFunction;\n};\n\n/**\n * Returns a random value based on the given random selection.\n * \n * 1. If an array is given an item is randomly chosen from that array.\n * 2. If an instance of anim8.Path is given a point is randomly computed and returned.\n * 3. If an object with min & max values is given a random value between them is returned.\n * \n * @param  {Array|Object|anim8.Path} randomSelection\n * @return {Function}\n */\nanim8.computed.random = function(randomSelection)\n{\n  var randomFunction = null;\n\n  if ( anim8.isArray( randomSelection ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var selected = randomSelection[ Math.floor( Math.random() * randomSelection.length ) ];\n\n      return calc.parse( selected, calc.ZERO );\n    };\n  }\n  else if ( randomSelection instanceof anim8.Path )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n\n      return randomSelection.compute( calc.create(), Math.random() );\n    };\n  }\n  else if ( anim8.isObject( randomSelection ) && anim8.isDefined( randomSelection.min ) && anim8.isDefined( randomSelection.max ) )\n  {\n    randomFunction = function(attrimator, animator)\n    {\n      var attr = attrimator.attribute;\n      var attribute = animator.getAttribute( attr );\n      var calc = attribute.calculator;\n      var resolvedMin = anim8.resolve( randomSelection.min );\n      var resolvedMax = anim8.resolve( randomSelection.max );\n      var min = calc.parse( resolvedMin, calc.ZERO );\n      var max = calc.parse( resolvedMax, calc.ZERO );\n\n      return calc.random( calc.create(), min, max );\n    };\n  }\n  else\n  {\n    throw 'Invalid random input: ' + randomSelection;\n  }\n\n  // Marks the function as computed which is a signal to paths & events.\n  randomFunction.computed = true;\n\n  // Place the input on the function if the user wants to modify it live\n  randomFunction.randomSelection = randomSelection;\n\n  return randomFunction;\n};\n\n/**\n * Determines whether the given value is a computed value. A computed value is\n * function with a variable 'computed' set to a true value.\n * \n * @param  {any} x\n * @return {Boolean}\n */\nanim8.isComputed = function(x)\n{\n  return anim8.isFunction( x ) && x.computed;\n};\n","\n/**\n * Returns a calculator based on the input. If the input is an instance of\n * anim8.Calculator it is immediately returned. If the input is a string the \n * calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {anim8.Calculator|String} calc\n * @return {anim8.Calculator}\n */\nanim8.calculator = function(calc)\n{\n  if ( calc instanceof anim8.Calculator )\n  {\n    return calc;\n  }\n  if ( anim8.isString( calc ) && calc in anim8.calculator )\n  {\n    return anim8.calculator[ calc ];\n  }\n  \n  return anim8.calculator.default;\n};\n\n/**\n * Instantiates a new Calculator instance.\n */\nanim8.Calculator = function()\n{\n\n};\n\nanim8.Calculator.prototype = \n{\n\n  /**\n   * Creates the constants for this calculator.\n   */\n  createConstants: function()\n  {\n    this.ZERO = this.create();\n    this.ONE = this.parse( 1.0, this.ZERO );\n    this.INFINITY = this.parse( Number.POSITIVE_INFINITY, this.ZERO );\n  },\n\n  /**\n   * Parses the given input for a value this calculator understands.\n   * \n   * @param  {T} x\n   * @param  {T} defaultValue\n   * @return {T|Function|false}\n   */\n  parse: function(x, defaultValue)\n  {\n    throw 'Calculator.parse not implemented';\n  },\n\n  /**\n   * Copies a value and places it in out and returns out.\n   * \n   * @param  {T} out\n   * @param  {T} copy\n   * @return {T}\n   */\n  copy: function(out, copy)\n  {\n    throw 'Calculator.copy not implemented';\n  },\n\n  /**\n   * Clones the value and returns the clone.\n   * \n   * @param {T} clone\n   * @return {T}\n   */\n  clone: function(clone) \n  {\n    return this.copy( this.create(), clone );\n  },\n\n  /**\n   * Creates an empty value equivalent to zero.\n   * \n   * @return {T}\n   */\n  create: function()\n  {\n    throw 'Calculator.create not implemented';\n  },\n\n  /**\n   * Scales out by the given scalar value and returns out.\n   * \n   * @param {T} out\n   * @param {Number} scale\n   * @return {T}\n   */\n  scale: function(out, scale) \n  {\n    return this.adds( out, out, scale - 1 );\n  },\n\n  /**\n   * Adds an amount to out and returns out.\n   * \n   * @param {T} out\n   * @param {T} amount\n   * @return {T}\n   */\n  add: function(out, amount) \n  {\n    return this.adds( out, amount, 1 );\n  },\n\n  /**\n   * Adds an amount scaled by a scalar value to out and returns out.\n   * \n   * @param {T} out\n   * @param {T} amount\n   * @param {Number} amountScale\n   * @return {T}\n   */\n  adds: function(out, amount, amountScale)\n  {\n    throw 'Calculator.adds not implemented';\n  },\n\n  /**\n   * Subtracts an amount from out and returns out.\n   * \n   * @param {T} out\n   * @param {T} amount\n   * @return {T}\n   */\n  sub: function(out, amount) \n  {\n    return this.adds( out, amount, -1 );\n  },\n\n  /**\n   * Multiplies out by some amount and returns out.\n   * \n   * @param {T} out\n   * @param {T} scale\n   * @return {T}\n   */\n  mul: function(out, scale)\n  {\n    throw 'Calculator.mul not implemented';\n  },\n\n  /**\n   * Interpolates out between start & end given a delta value and returns out. \n   * A delta value typically lies between 0 and 1 inclusively.\n   * \n   * @param {T} out\n   * @param {T} start\n   * @param {T} end\n   * @param {Number} delta\n   * @return {T}\n   */\n  interpolate: function(out, start, end, delta) \n  {\n    out = this.zero( out );\n    out = this.adds( out, start, 1 - delta );\n    out = this.adds( out, end, delta );\n    return out;\n  },\n\n  /**\n   * Returns a random value between the given min and max.\n   * \n   * @param {T} out\n   * @param {T} min\n   * @param {T} max\n   * @return {T}\n   */\n  random: function(out, min, max)\n  {\n    return this.interpolate( out, min, max, Math.random() );\n  },\n\n  /**\n   * Calculates the distance between the two values.\n   * \n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  distance: function(a, b)\n  {\n    return Math.sqrt( this.distanceSq( a, b ) );\n  },\n\n  /**\n   * Calculates the squared distance between the two values.\n   * \n   * @param {T} a\n   * @param {T} b\n   * @return {Number}\n   */\n  distanceSq: function(a, b)\n  {\n    throw 'Calculator.distanceSq not implemented';\n  },\n\n  /**\n   * Returns the distance the given value is from zero.\n   * \n   * @param {T} a\n   * @return {Number}\n   */\n  length: function(a)\n  {\n    return this.distance( a, this.ZERO );\n  },\n\n  /**\n   * Returns the squared distance the given value is from zero.\n   * \n   * @param {T} a\n   * @return {Number}\n   */\n  lengthSq: function(a)\n  {\n    return this.distanceSq( a, this.ZERO );\n  },\n\n  /**\n   * Determines whether the given value is valid for this calculator.\n   * \n   * @param {any} a\n   * @return {Boolean}\n   */\n  isValid: function(a)\n  {\n    throw 'Calculator.isValid not implemented';\n  },\n\n  /**\n   * Returns whether the given value is not a number or has a component which is\n   * not a number.\n   * \n   * @param {T} a\n   * @return {Boolean}\n   */\n  isNaN: function(a)\n  {\n    throw 'Calculator.isNaN not implemented';\n  },\n\n  /**\n   * Determines whether the given value is equivalent to zero given an \n   * acceptable distance from zero (epsilon).\n   * \n   * @param {T} a\n   * @param  {Number} epsilon\n   * @return {Boolean}\n   */\n  isZero: function(a, epsilon)\n  {\n    throw 'Calculator.isZero not implemented';\n  },\n\n  /**\n   * Determines whether the given values are equivalent up to an acceptable\n   * distance apart.\n   * \n   * @param {T} a\n   * @param {T} b\n   * @param {Number} epsilon\n   * @return {Boolean}\n   */\n  isEqual: function(a, b, epsilon)\n  {\n    throw 'Calculator.isEqual not implemented';\n  },\n\n  /**\n   * Sets out to the minimum value between the two values and returns out.\n   * \n   * @param {T} out\n   * @param {T} a\n   * @param {T} b\n   * @return {T}\n   */\n  min: function(out, a, b)\n  {\n    throw 'Calculator.min not implemented';\n  },\n\n  /**\n   * Sets out to the maximum value between two values and returns out.\n   * \n   * @param {T} out\n   * @param {T} a\n   * @param {T} b\n   * @return {T}\n   */\n  max: function(out, a, b)\n  {\n    throw 'Calculator.max not implemented';\n  },\n\n  /**\n   * Clamps out between the given minimum and maximum values and returns out.\n   * \n   * @param {T} out\n   * @param {T} min\n   * @param {T} max\n   * @return {T}\n   */\n  clamp: function(out, min, max)\n  {\n    var distSq = this.distanceSq( out, this.ZERO );\n\n    if ( distSq < min * min )\n    {\n      return this.scale( out, min / Math.sqrt( distSq ) );\n    }\n    else if ( distSq > max * max )\n    {\n      return this.scale( out, max / Math.sqrt( distSq ) );\n    }\n\n    return out;\n  },\n\n  /**\n   * Determines whether the given value appears to be a relative value. Relative\n   * values are stored as strings starting with a plus or minus for positive or\n   * negative respectively.\n   * \n   * @param {any} x\n   * @return {Boolean}\n   */\n  isRelative: function(x)\n  {\n    return anim8.isString( x ) && ( x[0] === '-' || x[0] === '+' );\n  },\n\n  /**\n   * Returns the relative amount of the given relative value. If the value is \n   * not a valid relative value false is returned.\n   * \n   * @param {String} x\n   * @return {Number}\n   */\n  getRelativeAmount: function(x)\n  {\n    var z = parseFloat( x );\n\n    return isNaN(z) ? false : z;\n  }\n\n};\n","\n/**\n * A calculator for number primitives.\n */\nanim8.NumberCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.NumberCalculator.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // A raw number\n    if ( anim8.isNumber( x ) )\n    {\n      return x;\n    }\n    // A number in a string or a relative number.\n    if ( anim8.isString( x ) )\n    {\n      var amount = this.getRelativeAmount( x );\n      \n      if ( amount !== false )\n      {\n        if ( this.isRelative( x ) )\n        {\n          return anim8.computed.relative( amount );\n        }\n        else\n        {\n          return amount;\n        }\n      }\n    }\n    \n    return defaultValue;\n  },\n  copy: function(out, copy) \n  { \n    return copy;\n  },\n  create: function() \n  {\n    return 0.0;\n  },\n  zero: function(out) \n  {\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n  {\n    return out *= scale;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    return (end - start) * delta + start;\n  },\n  distanceSq: function(a, b) \n  {\n    var ab = a - b;\n    return ab * ab;\n  },\n  distance: function(a, b)\n  {\n    return Math.abs( a - b );\n  },\n  length: function(a)\n  {\n    return Math.abs( a );\n  },\n  lengthSq: function(a)\n  {\n    return a * a;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a - b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    return Math.min( a, b );\n  },\n  max: function(out, a, b)\n  {\n    return Math.max( a, b );\n  }\n});\n\n/**\n * Register the calculators.\n */\nanim8.calculator['default'] = anim8.calculator['number'] = new anim8.NumberCalculator();\n","\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.Point2dCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Point2dCalculator.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: x,\n        y: x\n      };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n\n      if ( rx !== false && ry !== false )\n      {\n        var parsed = { x: rx, y: ry };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n\n        if ( ix || iy )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // Relative values & left/right/middle/center/top/bottom aliases.\n    if ( anim8.isString( x ) )\n    {\n      // If only a relative value is given it will modify the X & Y components evenly.\n      if ( this.isRelative( x ) )\n      {\n        var rx = this.getRelativeAmount( x );\n\n        if ( rx !== false )\n        {\n          return anim8.computed.relative( { x: rx, y: rx } ); \n        }\n      }\n\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n  {\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    return out;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    return out;\n  }\n});\n\n/**\n * Register all calculators.\n */\nanim8.calculator['2d'] = new anim8.Point2dCalculator();\n","\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.Point3dCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.Point3dCalculator.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a uniform point is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: x,\n        y: x,\n        z: x\n      };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n\n      if ( rx !== false && ry !== false && rz !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n\n        if ( ix || iy || iz )\n        { \n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the X, Y, & Z components evenly.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x: rx, y: rx, z: rx } ); \n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    out.z = copy.z;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n  { \n    out.x = 0.0;\n    out.y = 0.0;\n    out.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    out.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    out.z = (end.z - start.z) * delta + start.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n    var dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon && \n           Math.abs(a.z - b.z) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    return out;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['3d'] = new anim8.Point3dCalculator();\n","\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.QuaternionCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.QuaternionCalculator.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When only a number is given assume it's an angle around the Z-axis.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        x: 0,\n        y: 0,\n        z: 1,\n        angle: x\n      };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cx = anim8.coalesce( x.x, defaultValue.x );\n      var cy = anim8.coalesce( x.y, defaultValue.y );\n      var cz = anim8.coalesce( x.z, defaultValue.z );\n      var ca = anim8.coalesce( x.angle, defaultValue.angle );\n      var rx = this.getRelativeAmount( cx );\n      var ry = this.getRelativeAmount( cy );\n      var rz = this.getRelativeAmount( cz );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rx !== false && ry !== false && rz !== false && ra !== false )\n      {\n        var parsed = { x: rx, y: ry, z: rz, angle: ra };\n        var ix = this.isRelative( cx );\n        var iy = this.isRelative( cy );\n        var iz = this.isRelative( cz );\n        var ia = this.isRelative( ca );\n\n        if ( ix || iy || iz || ia )\n        {\n          var mask = {\n            x: ix ? 1 : 0,\n            y: iy ? 1 : 0,\n            z: iz ? 1 : 0,\n            angle: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed );\n        }\n\n        return parsed;\n      }\n    }\n    // When a relative value is given, assume it's for an angle around the Z-axis.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { x:0, y:0, z:1, angle: rx }, { x:0, y:0, z:0, angle:1 } );\n      }\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;\n  },\n  copy: function(out, copy) \n  {\n    out.x = copy.x;\n    out.y = copy.y;\n    out.z = copy.z;\n    out.angle = copy.angle;\n    return out;\n  },\n  create: function() \n  {\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n  {\n    out.x = 0.0;\n    out.y = 0.0;\n    out.z = 0.0;\n    out.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    out.z += amount.z * amountScale;\n    out.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    out.angle *= scale.angle;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.x = (end.x - start.x) * delta + start.x;\n    out.y = (end.y - start.y) * delta + start.y;\n    out.z = (end.z - start.z) * delta + start.z;\n    out.angle = (end.angle - start.angle) * delta + start.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n    var dz = a.z - b.z; \n    var da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n  {\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.x) < epsilon && \n           Math.abs(a.y) < epsilon && \n           Math.abs(a.z) < epsilon && \n           Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.x - b.x) < epsilon && \n           Math.abs(a.y - b.y) < epsilon && \n           Math.abs(a.z - b.z) < epsilon && \n           Math.abs(a.angle - b.angle) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.x = Math.min(a.x, b.x);\n    out.y = Math.min(a.y, b.y);\n    out.z = Math.min(a.z, b.z);\n    out.angle = Math.min(a.angle, b.angle);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.x = Math.max(a.x, b.x);\n    out.y = Math.max(a.y, b.y);\n    out.z = Math.max(a.z, b.z);\n    out.angle = Math.max(a.angle, b.angle);\n    return out;\n  },\n  random: function(out, min, max)\n  {\n    out.x = (max.x - min.x) * Math.random() + min.x;\n    out.y = (max.y - min.y) * Math.random() + min.y;\n    out.z = (max.z - min.z) * Math.random() + min.z;\n    out.angle = (max.angle - min.angle) * Math.random() + min.angle;\n    return out;\n  }\n});\n\n\n/**\n * Register the calculator.\n */\nanim8.calculator['quaternion'] = new anim8.QuaternionCalculator();\n","\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.RGBCalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.RGBCalculator.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given a grayscale color is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        r: x,\n        g: x,\n        b: x\n      };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n\n      if ( rr !== false && rg !== false && rb !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n\n        if ( ir || ig || ib )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;    \n  },\n  copy: function(out, copy) \n  {\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n  {\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n  {\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.r = (end.r - start.r) * delta + start.r;\n    out.g = (end.g - start.g) * delta + start.g;\n    out.b = (end.b - start.b) * delta + start.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n  {\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    return out;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgb'] = new anim8.RGBCalculator();\n","\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.RGBACalculator = function()\n{\n  this.createConstants();\n};\n\nanim8.override( anim8.RGBACalculator.prototype = new anim8.Calculator(), \n{\n  parse: function(x, defaultValue)\n  {\n    // Values computed live.\n    if ( anim8.isFunction( x ) )\n    {\n      return x;\n    }\n    // Value computed from current value on animator.\n    if ( x === true )\n    {\n      return anim8.computed.current;\n    }\n    // When a number is given an opaque grayscale color is returned.\n    if ( anim8.isNumber( x ) )\n    {\n      return {\n        r: x,\n        g: x,\n        b: x,\n        a: 1.0\n      };\n    }\n    // When an object is given, check for relative values.\n    if ( anim8.isObject( x ) )\n    {\n      var cr = anim8.coalesce( x.r, defaultValue.r );\n      var cg = anim8.coalesce( x.g, defaultValue.g );\n      var cb = anim8.coalesce( x.b, defaultValue.b );\n      var ca = anim8.coalesce( x.a, defaultValue.a );\n      var rr = this.getRelativeAmount( cr );\n      var rg = this.getRelativeAmount( cg );\n      var rb = this.getRelativeAmount( cb );\n      var ra = this.getRelativeAmount( ca );\n\n      if ( rr !== false && rg !== false && rb !== false && ra !== false )\n      {\n        var parsed = { r: rr, g: rg, b: rb, a: ra };\n        var ir = this.isRelative( cr );\n        var ig = this.isRelative( cg );\n        var ib = this.isRelative( cb );\n        var ia = this.isRelative( ca );\n\n        if ( ir || ig || ib || ia )\n        {\n          var mask = {\n            r: ir ? 1 : 0,\n            g: ig ? 1 : 0,\n            b: ib ? 1 : 0,\n            a: ia ? 1 : 0\n          };\n\n          return anim8.computed.relative( parsed, mask );\n        }\n\n        return parsed;\n      }\n    }\n    // If only a relative value is given it will modify the R, G, & B components.\n    if ( this.isRelative( x ) )\n    {\n      var rx = this.getRelativeAmount( x );\n\n      if ( rx !== false )\n      {\n        return anim8.computed.relative( { r: rx, g: rx, b: rx, a: 0 } ); \n      }\n    }\n    \n    // Try to parse the color.\n    var parsed = anim8.color.parse( x );\n\n    if ( parsed !== false )\n    {\n      return parsed;\n    }\n    \n    // If no value was given but the default value was given, clone it.\n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n    \n    return false;  \n  },\n  copy: function(out, copy) \n  {\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n  {\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n  {\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n  {\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n  {\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  interpolate: function(out, start, end, delta) \n  {\n    out.r = (end.r - start.r) * delta + start.r;\n    out.g = (end.g - start.g) * delta + start.g;\n    out.b = (end.b - start.b) * delta + start.b;\n    out.a = (end.a - start.a) * delta + start.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n  {\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n  {\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n  {\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n  {\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n  {\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  },\n  min: function(out, a, b)\n  {\n    out.r = Math.min(a.r, b.r);\n    out.g = Math.min(a.g, b.g);\n    out.b = Math.min(a.b, b.b);\n    out.a = Math.min(a.a, b.a);\n    return out;\n  },\n  max: function(out, a, b)\n  {\n    out.r = Math.max(a.r, b.r);\n    out.g = Math.max(a.g, b.g);\n    out.b = Math.max(a.b, b.b);\n    out.a = Math.max(a.a, b.a);\n    return out;\n  },\n  random: function(out, min, max)\n  {\n    out.r = (max.r - min.r) * Math.random() + min.r;\n    out.g = (max.g - min.g) * Math.random() + min.g;\n    out.b = (max.b - min.b) * Math.random() + min.b;\n    out.a = (max.a - min.a) * Math.random() + min.a;\n    return out;\n  }\n});\n\n/**\n * Register the calculator.\n */\nanim8.calculator['rgba'] = new anim8.RGBACalculator();\n","\n/**\n * Parses a path given the input and returns an instance of anim8.Path or throws\n * an error if the path could not be parsed. If the input is an object and has\n * a type property with a value that maps to a path type the path's parsing\n * function is invoked with the object.\n * \n * @param  {anim8.Path|String|Object} path\n * @return {anim8.Path}\n */\nanim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  throw path + ' is not a valid path';\n};\n\n/**\n * Path class computes a value given a delta value [0, 1].\n */\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  /**\n   * Resets the path with the given name, calculator, and points.\n   * \n   * @param {String|false} name\n   * @param {anim8.Calculator} calculator\n   * @param {Array} points\n   */\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.computed = this.hasComputed();\n  },\n\n  /**\n   * Computes a value at the given delta setting and returning out.\n   * \n   * @param {T} out\n   * @param {Number} delta\n   * @return {T}\n   */\n  compute: function(out, delta) \n  {\n    throw 'Path.compute not implemented';\n  },\n\n  /**\n   * Determines if this path has at least one computed value.\n   * \n   * @return {Boolean}\n   * @see anim8.computed\n   */\n  hasComputed: function() \n  {\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Replaces any computed values in this path with the result from invoking\n   * the function and returns a clone of this path.\n   * \n   * @return {anim8.Path}\n   */\n  replaceComputed: function(event, animator)\n  {\n    var clone = this.copy();\n    var ps = clone.points;\n\n    for (var i = 0; i < ps.length; i++)\n    {\n      if ( anim8.isComputed( ps[i] ) )\n      {\n        ps[i] = ps[i]( event, animator );\n      }\n    }\n    \n    return clone;\n  },\n\n  /**\n   * Resolves and returns the point at the given index.\n   * \n   * @param {Number} i\n   * @return {T}\n   */\n  resolvePoint: function(i)\n  {\n    return anim8.resolve( this.points[ i ] );\n  },\n\n  /**\n   * Returns whether the path is linear. Linear paths go directly from point to\n   * point where curved paths do not. Linear paths can have their length \n   * calculated fairly easily however curves you must compute length with a \n   * given granularity.\n   * \n   * @return {Boolean}\n   */\n  isLinear: function()\n  {\n    return true;\n  },\n\n  /**\n   * Computes the length of the Path with a given granularity. Granularity is \n   * used for non-linear paths - it's the number of segments are calculated on \n   * the path where the length of the segments are summed and returned as the \n   * length.\n   * \n   * @param {Number} granularity\n   * @return {Number}\n   */\n  length: function(granularity)\n  {\n    var distance = 0;\n    var calc = this.calculator;\n\n    if ( this.isLinear() )\n    {\n      var prev = this.resolvePoint( 0 );\n\n      for (var i = 1; i < this.points.length; i++)\n      {\n        var next = this.resolvePoint( i );\n\n        distance += calc.distance( prev, next );\n\n        prev = next;\n      }\n    }\n    else\n    {\n      var deltadelta = 1.0 / granularity;\n      var delta = delta;\n      var prev = calc.clone( this.resolvePoint( 0 ) );\n      var temp = calc.create();\n\n      for (var i = 1; i <= granularity; i++)\n      {\n        var next = this.compute( temp, delta );\n\n        distance += calc.distance( prev, next );\n\n        temp = prev;\n        prev = next;\n      }\n    }\n\n    return distance;\n  }\n\n};\n","\n/**\n * Instantiates a new Tween.\n * \n * @param {String|false} name\n * @param {anim8.Calculator} calculator\n * @param {T} start\n * @param {T} end\n */\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [ start, end ] );\n};\n\nanim8.override( anim8.Tween.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n  },\n  copy: function() \n  {\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n  }\n});\n\n\n/**\n * Parses an object for a tween path.\n * \n * @param {Object} path\n * @return {anim8.Tween}\n */\nanim8.path['tween'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start, calc.ZERO ),\n    calc.parse( path.end, calc.ZERO )\n  );\n};\n","\n/**\n * Instantiates a new CubicPath.\n * \n * @param {String|false} name\n * @param {anim8.Calculator} calculator\n * @param {T} p0\n * @param {T} p1\n * @param {T} p2\n * @param {T} p3\n */\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.override( anim8.CubicPath.prototype = new anim8.Path(),\n{\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var d3 = d1 * d2;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    var i3 = i1 * i2;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i3 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n    out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n    \n    return out;\n  },\n  copy: function() \n  {\n    return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n  },\n  isLinear: function()\n  {\n    return false;\n  }\n});\n\n/**\n * Parses an object for a cubic path.\n * \n * @param {Object} path\n * @return {anim8.CubicPath}\n */\nanim8.path['cubic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n","\n/**\n * Instantiates a new QuadraticPath.\n * \n * @param {String|false} name\n * @param {anim8.Calculator} calculator\n * @param {T} p0\n * @param {T} p1\n * @param {T} p2\n */\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.override( anim8.QuadraticPath.prototype = new anim8.Path(),\n{\n  compute: function(out, d1)\n  {\n    var calc = this.calculator;\n    var d2 = d1 * d1;\n    var i1 = 1 - d1;\n    var i2 = i1 * i1;\n    \n    out = calc.copy( out, this.resolvePoint( 0 ) );\n    out = calc.scale( out, i2 );\n    out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n    out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n      \n    return out;\n  },\n  copy: function() \n  {\n    return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n  },\n  isLinear: function()\n  {\n    return false;\n  }\n});\n\n\n/**\n * Parses an object for a quadratic path.\n * \n * @param {Object} path\n * @return {anim8.QuadraticPath}\n */\nanim8.path['quadratic'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n","\n/**\n * Instantiates a new DeltaPath.\n * \n * @param {String|false} name\n * @param {anim8.Calculator} calculator\n * @param {Array} points\n * @param {Array} deltas\n */\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.override( anim8.DeltaPath.prototype = new anim8.Path(),\n{\n  compute: function(out, delta) \n  {\n    var ds = this.deltas;\n    var end = ds.length - 2;\n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    \n    return this.calculator.interpolate( out, p0, p1, pd );\n  },\n  copy: function() \n  {\n    return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n  }\n});\n\n/**\n * Parses an object for a delta path.\n * \n * @param {Object} path\n * @return {anim8.DeltaPath}\n */\nanim8.path['delta'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n","\n/**\n * Instantiates a new JumpPath.\n * \n * @param {String|false} name\n * @param {anim8.Calculator} calculator\n * @param {Array} points\n */\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.override( anim8.JumpPath.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  copy: function() \n  {\n    return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n  }\n});\n\n/**\n * Parses an object for a jump path.\n * \n * @param {Object} path\n * @return {anim8.JumpPath}\n */\nanim8.path['jump'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","\n/**\n * Instantiates a new CompiledPath.\n * \n * @param {String|false} name\n * @param {anim8.Path} path\n * @param {Number} pointCount\n */\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.override( anim8.CompiledPath.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    var a = Math.floor( delta * this.points.length );\n    var index = Math.min( a, this.points.length - 1 );\n    \n    return this.calculator.copy( out, this.resolvePoint( index ) );\n  },\n  copy: function() \n  {\n    return new anim8.CompiledPath( this.name, this, this.points.length );\n  }\n});\n\n/**\n * Parses an object for a compiled path.\n * \n * @param {Object} path\n * @return {anim8.CompiledPath}\n */\nanim8.path['compiled'] = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n","\n/**\n * Instantiates a new KeyframePath.\n * \n * @param {String|false} name\n * @param {anim8.Calculator} calculator\n * @param {Array} points\n * @param {Array} deltas\n * @param {Array} easings\n */\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.override( anim8.KeyframePath.prototype = new anim8.Path(),\n{\n  compute: function(out, delta) \n  {  \n    var ds = this.deltas;\n    var end = ds.length - 2;\n    \n    if ( delta < ds[0] ) {\n      return false;\n    }\n    \n    if ( delta > ds[ds.length - 1] ) {\n      return this.points[ds.length - 1];\n    }\n    \n    var i = 0;\n    while (ds[i + 1] < delta && i < end) i++;\n    var d0 = ds[i];\n    var d1 = ds[i + 1];\n    var pd = (delta - d0) / (d1 - d0);\n    var p0 = this.resolvePoint( i );\n    var p1 = this.resolvePoint( i + 1 );\n    var ea = this.easings[i];\n    \n    return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n  },\n  copy: function() \n  {\n    return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n  }\n});\n\n/**\n * Parses an object for a keyframe path.\n * \n * @param {Object} path\n * @return {anim8.KeyframePath}\n */\nanim8.path['keyframe'] = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n","\n/**\n * Instantiates a new PointPath.\n * \n * @param {String|false} name\n * @param {anim8.Calculator} calculator\n * @param {T} point\n */\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.override( anim8.PointPath.prototype = new anim8.Path(),\n{\n  compute: function(out, delta)\n  {\n    return this.calculator.copy( out, this.resolvePoint( 0 ) );\n  },\n  copy: function() \n  {\n    return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n  }\n});\n\n\n/**\n * Parses an object for a point path.\n * \n * @param {Object} path\n * @return {anim8.PointPath}\n */\nanim8.path['point'] = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n","\n/**\n * Animates a single attribute over any period of time.\n */\nanim8.Attrimator = function()\n{\n\n};\n\nanim8.Attrimator.prototype =\n{\n\n  /**\n   * Resets this attrimator for the given attribute created by the given parser.\n   * \n   * @param {String} attribute\n   * @param {anim8.Parser} parser\n   * @param [anim8.Attrimator] next\n   */\n  reset: function(attribute, parser, next)\n  {\n    this.attribute = attribute;\n    this.parser = parser;\n    this.next = next;\n\n    this.startTime = 0;\n    this.pauseTime = 0;\n    this.elapsed = 0;\n    this.stopTime = Number.POSITIVE_INFINITY;\n    this.paused = false;\n    this.cycle = 0;\n    this.delay = 0;\n    this.offset = 0;\n  },\n\n  /**\n   * Prepares this attrimator for animation on the given subject \n   * animator. This is called once in anim8.Animator.preupdate before the first \n   * time this attrimator is updated.\n   * \n   * @param {Number} now\n   * @param {anim8.Animator} animator\n   */\n  start: function(now, animator)\n  {\n    this.startTime = now - this.offset;\n    this.elapsed = this.offset;\n    this.finished = false;\n  },\n\n  /**\n   * Invoked once when a new animation cycle is started on an Animator. If this\n   * attrimator updated the frame true must be returned.\n   * \n   * @param {Object} frame\n   * @return {Boolen}\n   */\n  startCycle: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Updates this attrimator given a time to animate to and the frame to\n   * provide with a new value. This method will return true if the attribute\n   * this is animating has been updated and needs to be applied to the subject.\n   * \n   * @param  {Number} now\n   * @param  {Object} frame\n   * @return {Boolean}\n   */\n  setTime: function(now, frame)\n  {\n    if ( this.paused )\n    {\n      return false;\n    }\n\n    var updated = false;\n    var elapsed = now - this.startTime;\n    var updated = false;\n\n    if ( elapsed > this.stopTime )\n    {\n      updated = this.finish( frame );\n    }\n    else if ( elapsed >= this.delay )\n    {\n      updated = this.update( elapsed, frame );\n    }\n\n    this.elapsed = elapsed;\n\n    return updated;\n  },\n\n  /**\n   * Updates the attrimator given elapsed time in milliseconds, the frame to \n   * apply a value to, and returns whether the frame was updated or not.\n   * \n   * @param {Number} elapsed\n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  update: function(elapsed, frame)\n  {\n    throw 'Attrimator.update not implemented';\n  },\n\n  /**\n   * Returns the amount of time that has elapsed in milliseconds.\n   * \n   * @return {Number}\n   */\n  getElapsed: function()\n  {\n    return this.elapsed;\n  },\n\n  /**\n   * Stops this attrimator in the given number of milliseconds.\n   * \n   * @param {Number} milliseconds\n   * @return {this}\n   */\n  stopIn: function(milliseconds)\n  {\n    this.stopTime = this.getElapsed() + milliseconds;\n\n    return this;\n  },\n\n  /**\n   * Returns the value at the given time or returns false if it can't be\n   * calculated.\n   * \n   * @param {Number} time\n   * @param {any} out\n   * @return {any}\n   */\n  valueAt: function(time, out)\n  {\n    return false;\n  },\n\n  /**\n   * The total amount of time this attrimator will take in milliseconds. This \n   * may be an infinite number.\n   * \n   * @return {Number}\n   */\n  totalTime: function()\n  {\n    return this.stopTime;\n  },\n\n  /**\n   * The time remaining before this attrimator and any following will be \n   * finished.\n   * \n   * @return {Number}\n   */\n  timeRemaining: function() \n  {    \n    return this.totalTime() - this.elapsed + ( this.next ? this.next.timeRemaining() : 0 );\n  },\n\n  /**\n   * Clones this attrimator.\n   * \n   * @return {anim8.Attrimator}\n   */\n  clone: function()\n  {\n    throw 'AttributeAnimator.clone not implemented';\n  },\n\n  /**\n   * Returns whether this attrimator has computed values which need to be \n   * resolved by the subject animator calling prepare on this attrimator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return false;\n  },\n\n  /**\n   * Determines whether this attrimator will run infinitely.\n   * \n   * @return {Boolean}\n   */\n  isInfinite: function()\n  {\n    return (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n\n  /**\n   * Pauses this attrimator if it isn't already paused.\n   * \n   * @return {this}\n   */\n  pause: function()\n  {\n    if ( !this.paused )\n    {\n      this.pauseTime = anim8.now();\n      this.paused = true;\n    }\n\n    return this;\n  },\n\n  /**\n   * Resumes this attrimator if it's paused. This involves resetting the start\n   * time of the attrimator.\n   * \n   * @return {this}\n   */\n  resume: function()\n  {\n    if ( this.paused )\n    {\n      this.startTime += anim8.now() - this.pauseTime;\n      this.paused = false;\n    }\n  },\n\n  /**\n   * Whether this attrimator is paused.\n   * \n   * @return {Boolean}\n   */\n  isPaused: function()\n  {\n    return this.paused;\n  },\n\n  /**\n   * Sets the final state of the attrimator to the frame if one exists and \n   * returns true, otherwise false is returned and frame remains unchanged.\n   * \n   * @param {Object} frame\n   * @return {Boolean}\n   */\n  finish: function(frame)\n  {\n    return false;\n  },\n\n  /**\n   * Whether this attrimator is finished.\n   * \n   * @return {Boolean}\n   */\n  isFinished: function()\n  {\n    return false;\n  },\n\n  /**\n   * Returns the parser that created this attrimator (if any).\n   * \n   * @return {anim8.Parser}\n   */\n  getParser: function()\n  {\n    return this.parser;\n  },\n\n  /**\n   * Places the given attrimator on the end of the chain of attrimators starting\n   * with this attrimator.\n   * \n   * @param {anim8.Attrimator} next\n   * @return {this}\n   */\n  queue: function(next)\n  {\n    if ( this.next )\n    {\n      this.next.queue( next );\n    }\n    else\n    {\n      this.next = next;\n    }\n\n    return this;\n  }\n\n};","\n/**\n * [AttributeMap description]\n */\nanim8.AttrimatorMap = function()\n{\n  this.reset();\n};\n\nanim8.override( anim8.AttrimatorMap.prototype = new anim8.FastMap(),\n{\n\n  /**\n   * Queues the attrimator on this map. If the attribute is already on this map\n   * this is placed on the end of the Attrimator chain, otherwise the attrimator\n   * is added to the map. If there is an attrimator already on the map it's\n   * returned.\n   * \n   * @param  {anim8.Attrimator} attrimator\n   * @return [anim8.Attrimator]\n   */\n  queue: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n    var current = this.get( attr );\n\n    if ( current )\n    {\n      current.queue( attrimator );\n    }\n    else\n    {\n      this.put( attr, attrimator );\n    }\n\n    return current;\n  },\n\n  /**\n   * Queues the given map to this map. The attrimators placed on this map are\n   * queued and delayed in a way that they all start at the same time. If a\n   * function is provided as the second argument it is invoked whenever an \n   * attrimator in the given map is new & added to this map.\n   * \n   * @param  {anim8.AttrimatorMap} map\n   * @param  [Function] onNewAttribute\n   * @param  [Object] context\n   * @return {this}\n   */\n  queueMap: function(map, onNewAttribute, context)\n  {\n    var maxRemaining = this.timeRemaining();\n    var attrimators = map.values;\n    \n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n      var existing = this.get( attr );\n\n      if ( existing )\n      {\n        if ( existing.isInfinite() )\n        {\n          existing.stopIn( attrimator.delay + maxRemaining );\n        }\n        else\n        {\n          attrimator.delay += (maxRemaining - existing.timeRemaining());\n        }\n\n        existing.queue( attrimator );\n      }\n      else\n      {\n        attrimator.delay += maxRemaining;\n\n        this.put( attr, attrimator );\n\n        if ( anim8.isFunction( onNewAttribute ) )\n        {\n          onNewAttribute.call( context || this, attrimator );\n        }\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Removes the attrimator at the given index replacing it with the next\n   * attrimator if one exists.\n   * \n   * @param  {Number} index\n   * @return {this}\n   */\n  unqueueAt: function(index)\n  {\n    var current = this.values[ index ];\n\n    if ( current.next )\n    {\n      this.values[ index ] = current.next;\n    }\n    else\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Clones this map returning a deep clone where all attrimators are cloned.\n   * \n   * @return {anim8.AttrimatorMap}\n   */\n  clone: function()\n  {\n    var values = this.values;\n    var keys = this.keys;\n    var clone = new anim8.AttrimatorMap();\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      clone.values[i] = values[i].clone();\n      clone.keys[i] = keys[i];\n      clone.indices[ keys[i] ] = i;\n    }\n\n    return clone;\n  },\n\n  /**\n   * Returns the time remaining for all finite attrimators in this map. The time\n   * remaining includes queued attrimators.\n   * \n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    var maxRemaining = 0;\n    var values = this.values;\n\n    for (var i = values.length - 1; i >= 0; i--)\n    {\n      var attrimator = values[i];\n\n      if ( !attrimator.isInfinite() )\n      {\n        maxRemaining = Math.max( maxRemaining, attrimator.timeRemaining() );\n      }\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Sets the cycle of the attrimators in this map. If there are attrimators\n   * queued the are given the next cycle number. The final cycle number is\n   * returned.\n   * \n   * @param  {Number} nextCycle\n   * @return {Number}\n   */\n  applyCycle: function(nextCycle)\n  {\n    var currentDepth = this.values;\n    var nextDepth = null;\n\n    while ( currentDepth.length )\n    {\n      nextDepth = [];\n\n      for (var i = currentDepth.length - 1; i >= 0; i--)\n      {\n        var attrimator = currentDepth[ i ];\n\n        attrimator.cycle = nextCycle;\n\n        if ( attrimator.next )\n        {\n          nextDepth.push( attrimator.next );\n        }\n      }\n\n      if ( nextDepth.length )\n      {\n        nextCycle++;\n      }\n\n      currentDepth = nextDepth;\n    }\n\n    return nextCycle;\n  }\n\n});","\n/**\n * Possible states an event can be in.\n * \n * @type {Object}\n */\nanim8.EventState = \n{\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  FINISHED: 8\n};\n\n/**\n * Instantiates a new Event which extends anim8.Attrimator.\n * \n * @param {String} attribute\n * @param {anim8.Path} path\n * @param {String|Number} duration\n * @param {String|Function|Array} easing\n * @param {String|Number} delay\n * @param {String|Number} sleep\n * @param {String|Number} repeat\n * @param {Number} scale\n * @param {T|Number} scaleBase\n * @param {Boolean} hasInitialState\n * @param {anim8.Parser} parser\n * @param {anim8.Attrimator} next\n */\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser, next) \n{\n  this.reset( attribute, parser, next )\n\n  this.path             = path;\n  this.easing           = anim8.easing( easing );\n  this.delay            = anim8.delay( delay );\n  this.duration         = anim8.duration( duration );\n  this.sleep            = anim8.sleep( sleep );\n  this.repeat           = anim8.repeat( repeat );\n  this.scale            = anim8.scale( scale );\n  this.scaleBase        = path.calculator.parse( scaleBase, path.calculator.ZERO );\n  this.hasInitialState  = anim8.coalesce( hasInitialState, true );\n};\n\nanim8.override( anim8.Event.prototype = new anim8.Attrimator(),\n{\n  /**\n   * Returns the computed value given a base value and a delta along the path.\n   * \n   * @param {T} baseValue\n   * @param {Number} delta\n   * @return {T}\n   */\n  computeValue: function(baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n\n    if ( value !== false && this.scale !== 1.0 )\n    {\n      var calc = this.path.calculator;\n      var baseValue = calc.clone( this.scaleBase );\n      var distance = calc.sub( baseValue, value );\n\n      value = calc.adds( value, distance, -this.scale );\n    }\n\n    return value;\n  },\n  finish: function(frame) \n  {\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n  },\n\n  /**\n   * Applies the value to the frame and returns true, otherwise returns false.\n   * \n   * @param {Object} frame\n   * @param {T} baseValue\n   * @param {Number} delta\n   * @return {T}\n   */\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.computeValue( baseValue, delta );\n    \n    if ( value !== false )\n    {\n      frame[ this.attribute ] = value;\n    }\n\n    return value;\n  },\n  start: function(now, animator)\n  {\n    anim8.Attrimator.prototype.start.apply( this, arguments );\n    \n    this.state = this.delay ? anim8.EventState.DELAYED : anim8.EventState.ANIMATING;\n\n    if ( this.hasComputed() )\n    {\n      this.path = this.path.replaceComputed( this, animator );\n    }\n  },\n  startCycle: function(frame)\n  {\n    if ( this.hasInitialState )\n    {\n      return this.applyValue( frame, frame[ this.attribute ], 0 );\n    }\n\n    return false;\n  },\n  update: function(elapsed, frame)\n  {\n    var updated = false;\n    var delay = this.delay;\n    var duration = this.duration;\n    var sleep = this.sleep;\n    var repeat = this.repeat;\n    var oldState = this.state;\n    var newState = this.state;\n    var delta = 0;\n\n    elapsed -= delay;\n\n    var cycle = duration + sleep;\n    var iteration = Math.floor( ( elapsed + sleep ) / cycle );\n\n    if (iteration >= repeat)\n    {\n      newState = anim8.EventState.FINISHED;\n      delta = 1;\n    }\n    else\n    {\n      elapsed -= iteration * cycle;\n\n      if ( elapsed > duration )\n      {\n        newState = anim8.EventState.SLEEPING;\n        delta = 1;\n      }\n      else\n      {\n        newState = anim8.EventState.ANIMATING;\n        delta = elapsed / duration;\n      }\n    }\n    \n    if ( newState === anim8.EventState.ANIMATING || \n       ( newState !== anim8.EventState.ANIMATING && oldState === anim8.EventState.ANIMATING ) )\n    {\n      this.applyValue( frame, frame[ this.attribute ], delta );\n      updated = true;\n    }\n\n    this.state = newState;\n\n    return updated;\n  },\n  valueAt: function(time, out)\n  {\n    if ( time < this.delay && !this.hasInitialState )\n    {\n      return false;\n    }\n\n    var delta = 0;\n\n    if ( time >= this.delay )\n    {\n      var cycle = (this.duration + this.sleep);\n      var elapsed = (time - this.delay);\n      var iteration = Math.floor( ( elapsed + this.sleep ) / cycle );\n\n      if ( iteration >= this.repeat )\n      {\n        delta = 1.0;\n      }\n      else\n      {\n        delta = Math.min( 1.0, (elapsed % cycle) / this.duration );        \n      }\n    }\n\n    return this.computeValue( out, delta );\n  },\n  totalTime: function()\n  {\n    return Math.min( this.stopTime, this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep) );\n  },\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.scale, this.scaleBase, this.hasInitialState, this.parser, this.next ? this.next.clone() : null );\n  },\n  hasComputed: function()\n  {\n    return this.path.computed;\n  },\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY) && (this.stopTime === Number.POSITIVE_INFINITY);\n  },\n  isFinished: function()\n  {\n    return (this.state === anim8.EventState.FINISHED);\n  }\n\n});\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, \n * or an object with a spring type to be created. If none of these conditions \n * are true then an error is thrown.\n *\n * @param {anim8.Spring|String|Object} spring\n * @return {anim8.Spring}\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n\n  throw spring + ' is not a valid spring';\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently \n * enacting on the position based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.override( anim8.Spring.prototype = new anim8.Attrimator(),\n{\n\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {String} attribute\n   * @param {anim8.Calculator|String} calculator\n   * @param {T|Function|true} rest\n   * @param {T|Function|true} position\n   * @param {T|Function|true} velocity\n   * @param {T|Function|true} gravity\n   * @param {Boolean} finishOnRest\n   */\n  set: function(attribute, calculator, rest, position, velocity, gravity, finishOnRest)\n  { \n    this.reset( attribute, null, null );\n\n    this.calculator   = calculator;\n    this.rest         = rest;\n    this.position     = position;\n    this.gravity      = gravity;\n    this.velocity     = velocity;\n    this.finishOnRest = finishOnRest;\n  },\n\n  /**\n   * Called the first time preupdate is called on an Animator to prepare the\n   * spring to be updated.\n   *\n   * @param {Number} now\n   * @param {anim8.Animator} animator\n   */\n  start: function(now, animator)\n  {\n    anim8.Attrimator.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator = calc;\n    this.rest       = this.parseValue( animator, this.rest, attribute.defaultValue );\n    this.position   = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.gravity    = this.parseValue( animator, this.gravity, calc.ZERO );\n    this.velocity   = this.parseValue( animator, this.velocity, calc.ZERO );\n  },\n\n  /**\n   * Returns whether this animator has computed values which need to be resolved\n   * by the subject animator calling prepare on this attribute animator.\n   * \n   * @return {Boolean}\n   */\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity );\n  },\n\n  /**\n   * Parses a value with the calculator given a default value to fallback on.\n   * \n   * @param  {anim8.Animator} animator\n   * @param  {T|Function|true} value\n   * @param  {T} defaultValue\n   * @return {T|Function}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isComputed( parsed ) )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n  \n  /**\n   * Resolves the rest to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.resolve( this.rest );\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    throw 'Spring.updateVelocity not implemented';\n  },\n\n  update: function(elapsed, frame)\n  {\n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.clone( this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    else if ( this.finishOnRest && calc.isZero( this.velocity ) )\n    {\n      this.finished = true;\n    }\n    \n    return updated;\n  },\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n  isFinished: function()\n  {\n    return this.finished;\n  }\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n","\n/**\n * Instantiates a new LinearSpring.\n * \n * @param {String|false} attribute\n * @param {anim8.Calculator} calculator\n * @param {T} position\n * @param {T} rest\n * @param {T} damping\n * @param {T} stiffness\n * @param {T} velocity\n * @param {T} gravity\n * @param {Boolean} finishOnRest\n */\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.damping      = damping;\n  this.stiffness    = stiffness;\n  this.temp0        = null;\n  this.temp1        = null;\n};\n\nanim8.override( anim8.LinearSpring.prototype = new anim8.Spring(), \n{\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = this.calculator;\n\n    this.damping      = this.parseValue( animator, this.damping, attribute.defaultValue );\n    this.stiffness    = this.parseValue( animator, this.stiffness, attribute.defaultValue );\n    this.temp0        = calc.create();\n    this.temp1        = calc.create();\n  },\n  clone: function()\n  {\n    return new anim8.LinearSpring( this.attribute, this.calculator, this.position, this.rest, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.rest ) || \n           anim8.isComputed( this.position ) ||\n           anim8.isComputed( this.gravity ) ||\n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.damping ) || \n           anim8.isComputed( this.stiffness );\n  },\n  updateVelocity: function(dt)\n  {\n    // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n      \n    var calc = this.calculator;\n\n    this.temp1 = calc.copy( this.temp1, this.damping );\n    this.temp1 = calc.mul( this.temp1, this.velocity );\n    \n    this.temp0 = calc.copy( this.temp0, this.position );\n    this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n    this.temp0 = calc.mul( this.temp0, this.stiffness );\n    this.temp0 = calc.sub( this.temp0, this.temp1 );\n    \n    this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param {Object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['linear'] = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Instantiates a new DistanceSpring.\n * \n * @param {String|false} attribute\n * @param {anim8.Calculator} calculator\n * @param {T} position\n * @param {T} rest\n * @param {Number} distance\n * @param {Number} damping\n * @param {Number} stiffness\n * @param {T} velocity\n * @param {T} gravity\n * @param {Boolean} finishOnRest\n */\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, velocity, gravity, finishOnRest)\n{\n  this.set( attribute, calculator, rest, position, velocity, gravity, finishOnRest );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = null;\n};\n\nanim8.override( anim8.DistanceSpring.prototype = new anim8.Spring(), \n{\n  start: function(now, animator)\n  {\n    anim8.Spring.prototype.start.apply( this, arguments );\n    \n    this.temp = this.calculator.create();\n  },\n  clone: function()\n  {\n    return new anim8.DistanceSpring( this.attribute, this.calculator, this.position, this.rest, this.distance, this.damping, this.stiffness, this.velocity, this.gravity, this.finishOnRest );\n  },\n  updateVelocity: function(dt)\n  {\n    // d = DISTANCE( position, rest )\n    // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n    // position += velocity * elapsed.seconds;\n\n    var calc = this.calculator;\n    var rest = this.resolveRest();\n    \n    var d = calc.distance( this.position, rest );\n    \n    this.temp = calc.copy( this.temp, this.position )\n    this.temp = calc.sub( this.temp, rest );\n    \n    if ( d !== 0 )\n    {\n      this.temp = calc.scale( this.temp, 1.0 / d );\n      this.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n    }\n\n    this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n    this.velocity = calc.adds( this.velocity, this.temp, dt );\n  }\n});\n\n/**\n * Register the spring parser.\n * \n * @param {Object}\n * @return {anim8.LinearSpring}\n */\nanim8.spring['distance'] = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    spring.calculator,\n    anim8.coalesce( spring.position, true ),\n    anim8.coalesce( spring.rest, true ),\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.velocity,\n    spring.gravity,\n    spring.finishOnRest\n  );\n};","\n/**\n * Animates a single attribute with a velocity and acceleration.\n *\n * @param {String} attribute\n * @param {anim8.Parser} parser\n * @param {anim8.Calculator} calculator\n * @param {T} position\n * @param {T} velocity\n * @param {T} acceleration\n * @param {Number} terminal\n * @param {Number} stopTime\n */\nanim8.Physics = function( attribute, parser, calculator, position, velocity, acceleration, terminal, stopTime )\n{\n  this.reset( attribute, parser, null );\n\n  this.calculator   = calculator;\n  this.position     = position;\n  this.velocity     = velocity;\n  this.acceleration = acceleration;\n  this.terminal     = anim8.number( terminal, Number.POSITIVE_INFINITY );\n  this.stopTime     = anim8.time( stopTime, Number.POSITIVE_INFINITY );\n  this.finished     = false;\n};\n\nanim8.override( anim8.Physics.prototype = new anim8.Attrimator(),\n{\n  /**\n   * Parses a value for the animator given a default value.\n   * \n   * @param {anim8.Animator} animator.\n   * @param {T} value\n   * @param {T} defaultValue\n   * @return {T}\n   */\n  parseValue: function(animator, value, defaultValue)\n  {\n    var parsed = this.calculator.parse( value, defaultValue );\n\n    if ( anim8.isComputed( parsed ) )\n    {\n       parsed = parsed( this, animator );\n    }\n\n    return parsed;\n  },\n\n  /**\n   * Resolves the velocity to a value.\n   * \n   * @return {T}\n   */\n  resolveVelocity: function()\n  {\n    return anim8.resolve( this.velocity );\n  },\n\n  /**\n   * Resolves the acceleration to a value.\n   * \n   * @return {T}\n   */\n  resolveAcceleration: function()\n  {\n    return anim8.resolve( this.acceleration );\n  },\n\n  start: function(now, animator)\n  {\n    anim8.Attrimator.prototype.start.apply( this, arguments );\n\n    var attribute = animator.getAttribute( this.attribute );\n    var calc = anim8.calculator( anim8.coalesce( this.calculator, attribute.calculator ) );\n\n    this.calculator     = calc;\n    this.position       = this.parseValue( animator, this.position, attribute.defaultValue );\n    this.initalPosition = calc.clone( this.position );\n    this.velocity       = this.parseValue( animator, this.velocity, calc.ZERO );\n    this.acceleration   = this.parseValue( animator, this.acceleration, calc.ZERO );\n    this.temp           = calc.create();\n  },\n  hasComputed: function()\n  {\n    return anim8.isComputed( this.position ) || \n           anim8.isComputed( this.velocity ) ||\n           anim8.isComputed( this.acceleration );\n  },\n  update: function(elapsed, frame)\n  {\n    var value = this.valueAt( elapsed, this.temp, true );\n\n    if ( value !== false )\n    {\n      frame[ this.attribute ] = this.position = value;\n\n      return true;\n    }\n\n    var calc = this.calculator;\n    var dt = Math.min( (elapsed - this.elapsed) * 0.001, anim8.Physics.MAX_DT );\n    var vel = calc.copy( this.temp, this.resolveVelocity() );\n    var acc = this.resolveAcceleration();\n    var pos = this.position;\n\n    vel = calc.adds( vel, acc, dt );\n\n    if ( this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      vel = calc.clamp( vel, 0, this.terminal );\n    }\n\n    pos = calc.adds( pos, vel, dt );\n    \n    this.position = pos;\n\n    if ( !anim8.isFunction( this.velocity ) )\n    {\n      this.velocity = calc.copy( this.velocity, vel );\n    }\n\n    frame[ this.attribute ] = pos;\n\n    return true;\n  },\n  valueAt: function(time, out, usePosition)\n  {\n    if ( anim8.isFunction( this.velocity ) || anim8.isFunction( this.acceleration ) || this.terminal !== Number.POSITIVE_INFINITY )\n    {\n      return false;\n    }\n\n    time -= this.delay;\n    time *= 0.001;\n\n    var calc = this.calculator;\n    var value = usePosition ? calc.copy( this.position, this.initalPosition ) : calc.copy( out, this.initalPosition );\n    value = calc.adds( value, this.velocity, time );\n    value = calc.adds( value, this.acceleration, time * time );\n\n    return value;\n  },\n  clone: function()\n  {\n    return new anim8.Physics( this.attribute, this.parser, this.calculator, this.position, this.velocity, this.acceleration, this.terminal, this.stopTime );\n  },\n  finish: function(frame)\n  {\n    this.finished = true;\n\n    return true;\n  },\n  isFinished: function()\n  {\n    return this.finished;\n  }\n});\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Physics.MAX_DT = 0.1;\n","\n/**\n * Returns an instance of anim8.Animation based on the given input & options. If \n * the input is an instance of anim8.Animation that instance is immediately \n * returned. If the input is a string the animation with that name is returned. \n * If the input is a string with an animation name and an option string the\n * animation with the given name modified by any additional options is returned.\n * Commas can be used to queue animation & option pairs one after another. If \n * the input is an object an anonymous animation is created. If no animation\n * could be determined then false is returned.\n *\n * Examples:\n * anim8.animation('wiggle');\n * anim8.animation('wiggle ~1s 4s z40ms x5 !1.2');\n * anim8.animation('wiggle', {...options...});\n * anim8.animation('wiggle, tada ~50ms, fadeOut 2s');\n * anim8.animation({...definition...});\n * \n * If the given input is a string you can cache it. An example would be\n * 'wiggle ~1s 2s x3' - if cache is true and you call this method again it won't\n * need to be parsed again.\n * \n * @param {anim8.Animation|String|Object} animation\n * @param [String|Object] options\n * @param [Boolean] cache\n */\nanim8.animation = function(animation, options, cache)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n  if ( anim8.isString( animation ) )\n  {\n    var key = animation.toLowerCase();\n\n    if ( key in anim8.animation )\n    {\n      return anim8.animation[ key ];\n    }\n\n    var animationStrings = animation.split(',');\n    var anim = false;\n    var last = false;\n\n    for (var k = 0; k < animationStrings.length; k++)\n    {\n      var split = anim8.trim( animationStrings[ k ].toLowerCase() ).split(' ');\n      var parsedAnimation = anim8.animation[ split[ 0 ] ];\n      var parsedOptions = anim8.options( split.slice( 1 ) );\n\n      if ( parsedAnimation )\n      {\n        if ( anim === false )\n        {\n          last = anim = parsedAnimation.extend( parsedOptions, true );\n        }\n        else\n        {\n          last = last.next = parsedAnimation.extend( parsedOptions, true );\n        }\n      }\n      else\n      {\n        throw parsedAnimation + ' is not a valid animation in \"' + animationStrings[ k ] + '\"';\n      }\n    }\n\n    if ( anim8.coalesce( cache, anim8.defaults.cache ) && anim8.isEmpty( options ) )\n    {\n      anim.name = animation;\n\n      anim8.animation[ key ] = anim;\n    }\n\n    return anim;\n  }\n  if ( anim8.isObject( animation ) )\n  {\n    var attrimatorMap = new anim8.AttrimatorMap();\n    var options = anim8.options( options );\n    var helper = new anim8.ParserHelper( animation, options );\n    \n    for (var parserName in animation)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.parse( animation, options, attrimatorMap, helper );\n      }\n    }\n    \n    if (attrimatorMap.size())\n    {\n      return new anim8.Animation( false, animation, options, attrimatorMap );\n    }\n    else\n    {\n      throw 'Failed to create any attrimators in anim8.animation';\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and \n * transitioned into at a later time providing the name and optionally options \n * to override with.\n *\n * @param {String} name\n * @param {anim8.Animation|String|Object} animation\n * @param [String|Object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  var key = name.toLowerCase();\n\n  animation.name = name;\n  \n  anim8.animation[ key ] = animation;\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and \n * the attrimators that were generated from the input & options. If the name is \n * false this is an anonymous animation. Input & Options are used by parsers to \n * generate attrimators, options allow for an animations default properties to \n * be overriden.\n *\n * @param {String|Boolean} name\n * @param {Object} input\n * @param [Object] options\n * @param {anim8.AttrimatorMap} attrimators\n */\nanim8.Animation = function(name, input, options, attrimators)\n{\n  this.name = name;\n  this.input = input;\n  this.options = options;\n  this.attrimators = attrimators;\n  this.next = null;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an \n   * anonymous one and false is returned. Anonymous animations are typically\n   * generated once and won't be used again.\n   *\n   * @return {Boolean} \n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an map of event instances from the attrimators in this animation.\n   *\n   * @return {anim8.AttrimatorMap}\n   */\n  newAttrimators: function()\n  {\n    return this.attrimators.clone();\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {Object} options\n   * @param  {anim8.AttrimatorMap} attrimatorMap\n   * @return {anim8.AttrimatorMap}\n   */\n  merge: function(options, attrimatorMap)\n  {\n    var helper = new anim8.ParserHelper( this.input, this.options, options );\n\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, attrimatorMap, helper );\n      }\n    }\n\n    return attrimatorMap;\n  },\n\n  /**\n   * Extends this animation and returns an anonymous animation modified with the \n   * given options. If an empty set of options is given this animation instance\n   * may be returned. This can be overriden if the second argument is true.\n   *\n   * @param {Object} options\n   * @param {Boolean} force\n   * @return {anim8.Animation}\n   */\n  extend: function(options, force)\n  {\n    if ( anim8.isEmpty( options ) && !force )\n    {\n      return this;\n    }\n\n    var attrimatorMap = this.newAttrimators();\n\n    this.merge( options, attrimatorMap );\n\n    anim8.extend( options, this.options );\n\n    return new anim8.Animation( false, this.input, options, attrimatorMap );\n  }\n\n};","\n/**\n * Parses a value into a transition object. If the given input is a string it's\n * expected to be in a similar format to:\n *\n * [time] [easing[-easingType]] >[outro] <[intro] /[granularity] ^[lookup]\n * \n * This is also a registry of transitions, you can add your own transitions that\n * can be used later with syntax like:\n *\n * anim8.transition['myTransition'] = anim8.transition('50ms 0.05 linear');\n *\n * So you can use 'myTransition' as the transition input.\n * \n * @param {Object|String|Array} options\n * @param {Boolean} cache\n * @return {Object}\n */\nanim8.transition = function(transition, cache) \n{\n  // 1. If it's a string, convert it into an array.\n  // 2. If it's an array, parse it and convert it into an object.\n  // 3. If it's an object, fill in any missing values with the defaults.\n\n  var originalInput = transition;\n\n  if ( anim8.isString( transition ) )\n  {\n    if ( transition in anim8.transition )\n    {\n      return anim8.transition[ transition ];\n    }\n\n    transition = transition.toLowerCase().split(' ');\n  }\n\n  if ( anim8.isArray( transition ) )\n  {\n    var transitionArray = transition;\n\n    transition = {};\n\n    for (var i = 0; i < transitionArray.length; i++)\n    {\n      var part = transitionArray[i];\n      var first = part.charAt( 0 );\n\n      // Introduction Time (into next event)\n      if ( first === '<' )\n      {\n        var intro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( intro ) )\n        {\n          transition.intro = intro;\n        }\n      }\n      // Outroduction Time (out of current event)\n      else if ( first === '>' )\n      {\n        var outro = anim8.time( part.substring(1), false );\n\n        if ( !isNaN( outro ) )\n        {\n          transition.outro = outro;\n        }\n      }\n      // Granularity (for velocity conscious transitions)\n      else if ( first === '/' )\n      {\n        var granularity = anim8.number( part.substring(1), false );\n\n        if ( granularity !== false )\n        {\n          transition.granularity = granularity;\n        }\n      }\n      // Lookup (for velocity conscious transitions)\n      else if ( first === '^' )\n      {\n        var lookup = anim8.time( part.substring(1), false );\n\n        if ( lookup !== false )\n        {\n          transition.lookup = lookup;\n        }\n      }\n      else\n      {\n        // Easing\n        var easing = anim8.easing( part, false );\n\n        if ( easing !== false )\n        {\n          transition.easing = easing;\n        }\n\n        // Time\n        var time = anim8.time( part, false );\n\n        if ( time !== false )\n        {\n          transition.time = time;\n        }\n      }\n    }\n  }\n\n  if ( anim8.isObject( transition ) )\n  {\n    transition.time        = anim8.time( transition.time, anim8.defaults.transitionTime );\n    transition.outro       = anim8.time( transition.outro, anim8.defaults.transitionOutro );\n    transition.intro       = anim8.time( transition.intro, anim8.defaults.transitionIntro );\n    transition.easing      = anim8.easing( anim8.coalesce( transition.easing, anim8.defaults.transitionEasing ) );\n    transition.granularity = anim8.number( transition.granularity, anim8.defaults.transitionGranularity );\n    transition.lookup      = anim8.time( transition.lookup, anim8.defaults.transitionLookup );\n    \n    if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheTransitions ) )\n    {\n      anim8.transition[ originalInput ] = transition;\n    }\n\n    return transition;\n  }\n\n  return anim8.defaults.noTransition;\n};\n","\n/**\n * Parses a value into an options object. If the given input is a string it's \n * expected to be in a similar format to:\n *\n * [duration] x[repeat] z[sleep] ~[delay] ![scale] [easing[-easingType]]\n *\n * This is also a registry of options, you can add your own options that\n * can be used later with syntax like:\n *\n * anim8.option['myOptions'] = anim8.option('1.5s x2 !2');\n *\n * So you can use 'myOptions' as the options input.\n * \n * @param {Object|String|Array} options\n * @param {Boolean} cache\n * @return {Object}\n */\nanim8.options = (function()\n{\n  function parseProperty(input, out, parseFunction, property, propertyAdd, propertyScale)\n  {\n    var first = input.charAt( 0 );\n\n    if ( first === '*' )\n    {\n      parsed = anim8.number( input.substring( 1 ), false );\n\n      if ( parsed !== false )\n      {\n        out[ propertyScale ] = parsed;\n      }\n    }\n    else\n    {\n      if ( first === '+' || first === '-' )\n      {\n        property = propertyAdd;\n        input = input.substring( 1 );\n      }\n\n      var parsed = parseFunction( input, false )\n\n      if ( parsed !== false )\n      {\n        out[ property ] = parsed;\n      }  \n    }\n\n    return parsed;\n  }\n\n  return function(options, cache)\n  {\n    var originalInput = options;\n\n    if ( anim8.isString( options ) )\n    {\n      if ( options in anim8.options )\n      {\n        return anim8.options[ options ];\n      }\n\n      options = options.toLowerCase().split(' ');\n    }\n\n    if ( anim8.isArray( options ) )\n    {\n      var parsed = {};\n\n      for (var i = 0; i < options.length; i++)\n      {\n        var part = options[i];\n        var first = part.charAt( 0 );\n\n        // Repeats\n        if ( first === 'x' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n        }\n        // Sleeping\n        else if ( first === 'z' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'sleep', 'sleepAdd', 'sleepScale' );\n        }\n        // Delay\n        else if ( first === '~' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.time, 'delay', 'delayAdd', 'delayScale' );\n        }\n        // Scaling\n        else if ( first === '!' )\n        {\n          parseProperty( part.substring(1), parsed, anim8.number, 'scale', 'scaleAdd', 'scaleScale' );\n        }\n        else\n        {\n          // Easing?\n          var easing = anim8.easing( part, false );\n\n          if ( easing !== false )\n          {\n            parsed.easing = easing;\n          }\n\n          // Duration?\n          var duration = parseProperty( part, parsed, anim8.time, 'duration', 'durationAdd', 'durationScale' );\n\n          if ( duration === false )\n          {\n            // If not a duration, might be an alternative repeat? (doesn't start with x)\n            parseProperty( part, parsed, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale' );\n          }\n        }\n      }\n\n      if ( anim8.isString( originalInput ) && anim8.coalesce( cache, anim8.defaults.cacheOptions ) )\n      {\n        anim8.options[ originalInput ] = parsed;\n      }\n\n      return parsed; \n    }\n\n    if ( anim8.isObject( options ) )\n    {\n      return options;\n    }\n\n    return anim8.defaults.noOptions;\n  };\n\n})();","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n  this.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} subject\n   * @return {this}\n   */\n  reset: function(subject)\n  {\n    this.subject = subject;\n    this.attrimators = new anim8.AttrimatorMap();\n    this.attrimatorsAdded = [];\n    this.frame = {};\n    this.updated = {};\n    this.finished = false;\n    this.factory = null;\n    this.active = false;\n    this.cycleCurrent = 0;\n    this.cycleNext = 0;\n    this.cycleEnded = 0;\n    \n    return this;\n  },\n\n  /**\n   * Starts a new animation cycle. This is done before events & springs are \n   * placed to group them together so we know when to apply their initial value.\n   *\n   * @param {anim8.Attrimator|anim8.AttrimatorMap} attrimators\n   * @return {this}\n   */\n  newCycle: function(attrimators)\n  {\n    this.cycleNext++;\n\n    if ( attrimators instanceof anim8.AttrimatorMap )\n    {\n      this.cycleNext = attrimators.applyCycle( this.cycleNext );\n    }\n    else if ( attrimators instanceof anim8.Attrimator )\n    {\n      attrimators.cycle = this.cycleNext;\n    }\n\n    return this;\n  },\n\n  /**\n   * Applies the current cycle. This involves finding all attrimators with the \n   * same cycle identifier and applying their initial state.\n   * \n   * @return {this}\n   */\n  applyCurrentCycle: function()\n  {\n    var cycle = this.cycleCurrent;\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      if ( attrimator.cycle === cycle )\n      {\n        this.updated[ attr ] = (attrimator.startCycle( this.frame ) !== false) || this.updated[ attr ];\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Ends the current cycle which calls any listening functions.\n   * \n   * @return {this}\n   */\n  endCurrentCycle: function()\n  {\n    if ( this.cycleCurrent > this.cycleEnded )\n    {\n      this.cycleEnded = this.cycleCurrent;\n      this.trigger( 'cycleEnd:' + this.cycleCurrent, this.cycleCurrent ); \n    }\n  },\n\n  /**\n   * Returns the attribute descriptor given the name of the attribute.\n   * \n   * @param  {String} attr\n   * @return {Object}\n   */\n  getAttribute: function(attr)\n  {\n    return this.factory.attribute( attr );\n  },\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   *\n   * @return {this}\n   */\n  restore: function()\n  { \n    return this;\n  },\n\n  /**\n   * Applies the initial state of recently added attrimators immediately.\n   * \n   * @return {this}\n   */\n  applyInitialState: function()\n  {\n    this.preupdate( anim8.now() );\n    this.apply();\n    \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are \n   * called. This is used to make any necessary preparations before the animator\n   * is updated.\n   *\n   * @param {Number} now\n   * @return {this}\n   */\n  preupdate: function(now)\n  {\n    // If there are attribute placed on the animator since the last preupdate\n    // that has computed values we need to replace the path on the event with\n    // a copy containing the computed values. This is where current value & \n    // relative values are injected from the animator into the attribute.\n    var aa = this.attrimatorsAdded;\n    if ( aa.length )\n    {\n      for (var i = 0; i < aa.length; i++)\n      {\n        var attrimator = aa[ i ];\n        var attr = attrimator.attribute;\n\n        if ( attr in this.subject )\n        {\n          this.frame[ attr ] = this.subject[ attr ];\n        }\n        else\n        {\n          this.setDefault( attr );          \n        }\n\n        attrimator.start( now, this );     \n      }\n\n      aa.length = 0;\n    }\n\n    this.trigger('preupdate');\n    \n    return this;\n  },\n\n  /**\n   * Sets the default value for the given attribute in the frame of this \n   * Animator if there's no value there.\n   * \n   * @param {String} attr\n   */\n  setDefault: function(attr)\n  {\n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = this.getAttribute( attr ).cloneDefault();\n    }\n  },\n  \n  /**\n   * Updates all attrimators in this animator with the given time.\n   *\n   * @param {Number} now\n   * @return {this}\n   */\n  update: function(now) \n  {  \n    this.wasFinished = this.finished;\n    this.finished = true;\n\n    var attrimators = this.attrimators.values;\n    var minCycle = this.cycleNext;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n      var attr = attrimator.attribute;\n\n      this.updated[ attr ] = attrimator.setTime( now, this.frame );\n\n      this.finished = this.finished && attrimator.isFinished();\n\n      minCycle = Math.min( minCycle, attrimator.cycle );\n    }\n\n    if ( this.cycleCurrent < minCycle )\n    {\n      while ( this.cycleCurrent < minCycle )\n      {\n        this.endCurrentCycle();\n        this.cycleCurrent++;\n      }\n\n      this.cycleCurrent = minCycle;\n      this.applyCurrentCycle();\n      this.trigger( 'cycleStart:' + this.cycleCurrent, this.cycleCurrent );\n    }\n\n    if ( !this.wasFinished && this.finished )\n    {\n      this.endCurrentCycle();\n    }\n\n    this.trigger('update');\n    \n    return this;\n  },\n\n  /**\n   * Places the attribute animator in this animator replacing any existing \n   * animator for the same attribute. The next time the animator is updated the \n   * attribute animator will be started. The previous (if any) attrimator is\n   * returned.\n   * \n   * @param {anim8.Attrimator}\n   * @return [anim8.Attrimator] \n   */\n  placeAttrimator: function(attrimator)\n  {\n    var attr = attrimator.attribute;\n    var existing = this.attrimators.get( attr );\n\n    this.attrimators.put( attr, attrimator );\n    this.attrimatorsAdded.push( attrimator );\n\n    this.finished = false;\n\n    return existing;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with \n   * all of the other animators at the end of the animation cycle.\n   *\n   * @return {this}\n   */\n  apply: function()\n  {\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n        this.updated[ attr ] = false;\n      }\n    }\n  \n    this.trigger('apply');\n  \n    this.trimAttrimators();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished attrimators and places any queued attrimators. If the\n   * animator previously wasn't finished but now is the 'finished' event will\n   * be triggered.\n   *\n   * @return {this}\n   */\n  trimAttrimators: function()\n  {\n    var attrimators = this.attrimators.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( attrimator.isFinished() )\n      {\n        if ( attrimator.next )\n        {\n          this.placeAttrimator( attrimator.next );\n        }\n        else\n        {\n          this.attrimators.removeAt( i );\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n\n    return this;\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the \n   * attribute is not or has not animated).\n   *\n   * @param {String} attr\n   * @return {any}\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there \n   * already.\n   * \n   * @return {this}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed \n   * from the list of currently animating Animators.\n   *\n   * @return {this}\n   */\n  deactivate: function()\n  { \n    this.trigger('deactivate', this);\n\n    return this;\n  },\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any \n   * relationship between the subject and animator. The next time an animator is\n   * generated for the subject a new animator will be created.\n   *\n   * @return {this}\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n\n    return this;\n  },\n  \n  /**\n   * Creates a map of attrimators based on the animation and options given. For\n   * each anim8.Animation instance thats being converted into attrimators,\n   * the onAnimation(animation, option, attrimatorMap) function is invoked.\n   *\n   * @param {anim8.Animation|String|Object} animation\n   * @param [String|Object] options\n   * @param {Boolean} cache\n   * @see anim8.animation\n   */\n  createAttrimators: function(animation, options, cache)\n  {\n    var options = anim8.options( options );    \n    var animation = anim8.animation( animation, options, cache );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var attrimators = animation.newAttrimators();\n    \n    if ( animation.isSaved() && !anim8.isEmpty( options ) )\n    { \n      animation.merge( options, attrimators );\n    }\n    \n    this.onAnimation( animation, options, attrimators );\n\n    while ( animation.next !== null )\n    {\n      animation = animation.next;\n\n      var queueAttrimators = animation.newAttrimators();\n\n      this.onAnimation( animation, options, queueAttrimators );\n\n      attrimators.queueMap( queueAttrimators );\n    }\n\n    return attrimators;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {Object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   */\n  onAnimation: function(animation, options, attrimatorMap)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing attrimator for the \n   * same attribute. A spring object can be given, an instance of anim8.Spring, \n   * or a name of a saved Spring. The spring added to the animator is returned.\n   * \n   * @param {anim8.Spring|String|Object} spring\n   * @return {anim8.Spring}\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.newCycle( spring );\n    this.placeAttrimator( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Plays an animation. Attributes in the animation that are currently being\n   * animated will be stopped and replaced with the new attrimators. If \"all\" is\n   * true then any attrimators animating not specified in the given animation\n   * will be stopped.\n   *\n   * @param {anim8.Animation|String|Object} animation\n   * @param [String|Object] options\n   * @param [Boolean] all \n   * @param [Boolean] cache\n   * @see anim8.animation\n   * @see anim8.options\n   */\n  play: function(animation, options, all, cache)\n  {\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n    \n    this.newCycle( attrimatorMap );\n    this.playAttrimators( attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Plays a map of attrimators. Attributes in the attrimator map that are \n   * currently being animated will be stopped and replaced with the new\n   * attrimators. If \"all\" is true then any attrimators animating not specified\n   * in the given attrimator map will be stopped. This method will not activate \n   * the Animator, that has to be done manually.\n   * \n   * @param  {anim8.AttrimatorMap} animatorMap\n   * @param  [Boolean] all\n   * @return {this}\n   */\n  playAttrimators: function(attrimatorMap, all)\n  {\n    if ( all )\n    {\n      this.finishNotPresent( attrimatorMap, 0 );\n    }\n\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      this.placeAttrimator( attrimators[i] );\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation. The attrimators generated from the given animation \n   * will be started at the same time - as soon as all finite attrimators for\n   * the same attributes are finished. Any infinite attrimators will be \n   * automatically stopped when all queued attrimators are set to start.\n   *\n   * @param {anim8.Animation|String|Object} animation\n   * @param [String|Object] options\n   * @param [Boolean] cache\n   * @see anim8.animation\n   * @see anim8.options\n   */\n  queue: function(animation, options, cache)\n  {\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n        \n    this.newCycle( attrimatorMap );\n    this.queueAttrimators( attrimatorMap );\n\n    return this.activate();\n  },\n\n  /**\n   * Queues a map of attrimators. The map of attrimators will be started at the\n   * same time - as soon as all finished attrimators for the same attribute are\n   * finished. Any infinite attrimators will be automatically stopped when all\n   * queued attrimators are set to start.\n   * \n   * @param  {anim8.AttrimatorMap} attrimatorMap\n   * @return {this}\n   */\n  queueAttrimators: function(attrimatorMap)\n  {\n    this.attrimators.queueMap( attrimatorMap, this.placeAttrimator, this );\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing attrimators into the beginning of a \n   * new animation. Several parameters can be specified in the transition object\n   * which determine how the transition is made. If \"all\" is true then any \n   * attrimators animating not specified in the given animation will be stopped.\n   *\n   * time: the total time to take to transition into a new animation.\n   * outro: time to look into the future for the current attrimator to curve to.\n   * intro: time to look into the future for the next attrimator to curve into.\n   * lookup: time to look into the future to calculate velocity which is used\n   *   for negative intros and maintaing consistent exit & entrance velocity.\n   * granularity: when greater than 2 it activates smooth transitions where the\n   *    velocity of the new & old attrimators is maintained over the transition.\n   * \n   * @param {String|Array|Object} transition\n   * @param {String|Object|anim8.Animation} animation\n   * @param [Object] options\n   * @param [Boolean] all\n   * @param [Boolean] cache\n   * @see anim8.transition\n   * @see anim8.animation\n   * @see anim8.options\n   * @see anim8.Animator.transitionAttrimators\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var attrimatorMap = this.createAttrimators( animation, options, cache );\n    \n    if ( attrimatorMap === false )\n    {\n      return false;\n    }\n\n    this.newCycle( attrimatorMap );\n    this.transitionAttrimators( transition, attrimatorMap, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing attrimators into the beginning of a\n   * new animation. Several parameters can be specified in the transition object\n   * which determine how the transition is made. If \"all\" is true then any \n   * attrimators animating not specified in the given attrimator map will be \n   * stopped.\n   *\n   * time: the total time to take to transition into a new animation.\n   * outro: time to look into the future for the current attrimator to curve to.\n   * intro: time to look into the future for the next attrimator to curve into.\n   * lookup: time to look into the future to calculate velocity which is used\n   *   for negative intros and maintaing consistent exit & entrance velocity.\n   * granularity: when greater than 2 it activates smooth transitions where the\n   *    velocity of the new & old attrimators is maintained over the transition.\n   *\n   * @param {Object} transition\n   * @param {anim8.AttrimatorMap} events\n   * @param [Boolean] all\n   * @return {this}\n   */\n  transitionAttrimators: function(transition, attrimatorMap, all)\n  {\n    // TRANSITIONING:\n    // If the animator doesn't have an attrimator for the given attribute just add the attrimator adding the total delay\n    // If the animator has an attrimator currently...\n    //   If the current attrimator or new attrimator don't have values at the desired times...\n    //      Stop the current attrimator after the total delay (adding the delay of the new attrimator as well)\n    //      Queue the new attrimator\n    //   Else\n    //      Create a path using the methods detailed above\n    // If all is true and there's an attrimator left on the animator that isn't being transitioned, stop it after the total delay.\n\n    // CREATING A TRANSITION PATH:\n    // If intro & outro are 0, use Tween\n    // If intro is 0, use Quadratic Path between current value, outro point, and first point on new path.\n    // If outro is 0, use Quadratic Path between current value, first point on new path, and intro point.\n    // If intro & outro are not 0, use Cubic Path between current value, outro point, first point on new path, and intro point.\n    // If granularity is given > 1 then compile the path, compute intro & outro velocities, and compute deltas for new \n    //    compiled path based on interpolated velocity over the path (knowing it's length and transition time)\n\n    var current = this.attrimators;\n    var attrimators = attrimatorMap.values;\n\n    // If transition all attributes, \n    if ( all )\n    {\n      this.finishNotPresent( attrimatorMap, transition.time );\n    }\n\n    // Only transition if we need to\n    if ( current.hasOverlap( attrimatorMap ) )\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var next = attrimators[ i ];\n        var attr = next.attribute;\n        var curr = current.get( attr );\n\n        if ( curr && anim8.isDefined( this.frame[ attr ] ) )\n        {\n          var attribute = this.getAttribute( attr );\n          var calc = attribute.calculator;\n\n          var p2 = next.valueAt( 0, calc.create() );\n          \n          if ( p2 !== false )\n          {\n            var transitionTime = transition.time;\n            var p0 = calc.clone( this.frame[ attr ] );            \n            var p1 = transition.outro ? curr.valueAt( curr.getElapsed() + transition.outro, calc.create() ) : false;\n            var p3 = transition.intro ? next.valueAt( transition.intro, calc.create() ) : false;\n            var path = null;\n\n            // If the intro is negative we can look into the past by looking a little bit into\n            // the future and assume the past is going in the same direction (only the opposite). \n            if ( p3 !== false && transition.intro < 0 && transition.lookup > 0 )\n            {\n              var pastLookahead = next.valueAt( transition.lookup, calc.create() );\n              var pastVelocity = calc.sub( pastLookahead, p2 );\n\n              if ( pastVelocity !== false )\n              {\n                var pastNegativeVelocity = calc.scale( pastVelocity, transition.intro / transition.lookup );\n                var past = calc.add( pastNegativeVelocity, p2 );\n                \n                p3 = p2;\n                p2 = past;\n              }\n            }\n\n            // Build a path with as many of the points as possible.\n            if ( p1 === false && p3 === false )\n            {\n              path = new anim8.Tween( attr, calc, p0, p2 );\n            }\n            else if ( p1 === false )\n            {\n              path = new anim8.QuadraticPath( attr, calc, p0, p2, p3 );\n            }\n            else if ( p3 === false )\n            {\n              path = new anim8.QuadraticPath( attr, calc, p0, p1, p2 );\n            }\n            else\n            {\n              path = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n            }\n            \n            // If granularity is specified we will try to make the transition \n            // smooth by maintaining exit (outro) velocity from the current attrimator\n            // and interpolating it to the entrance (intro) velocity for the \n            // attrimator we're transitioning into.\n            if ( transition.granularity > 2 && transition.lookup > 0 )\n            { \n              var outTime  = p1 === false ? curr.getElapsed() : curr.getElapsed() + transition.outro;\n              var outPoint = p1 === false ? p0 : p1;\n              var outNext  = curr.valueAt( outTime + transition.lookup, calc.create() );\n\n              var inTime   = p3 === false ? 0 : transition.intro;\n              var inPoint  = p3 === false ? p2 : p3;\n              var inNext   = next.valueAt( inTime + transition.lookup, calc.create() );\n\n              // We can only proceed if we have reference points to calculate\n              // exit & entrance velocity.\n              if ( outNext !== false && inNext !== false )\n              {\n                var outVelocity  = calc.sub( calc.clone( outNext ), outPoint );\n                var outPerMillis = calc.length( outVelocity ) / transition.lookup;\n\n                var inVelocity   = calc.sub( calc.clone( inNext ), inPoint );\n                var inPerMillis  = calc.length( inVelocity ) / transition.lookup;\n\n                var compiled = new anim8.CompiledPath( attr, path, transition.granularity );\n                var points = compiled.points;\n                var lastPoint = points.length - 1;\n                var totalDistance = 0;\n                var distances = [];\n\n                for (var k = 0; k < lastPoint; k++)\n                {\n                  distances[ k ] = totalDistance;\n                  totalDistance += calc.distance( points[ k ], points[ k + 1 ] );\n                }\n                distances[ lastPoint ] = totalDistance;\n\n                if ( !isNaN( totalDistance ) )\n                {\n                  var requiredTime = 2.0 * totalDistance / (outPerMillis + inPerMillis);\n                  var acceleration = 0.5 * (inPerMillis - outPerMillis) / requiredTime;\n                  var timeDelta = requiredTime / lastPoint;\n                  var deltas = [];\n\n                  for (var k = 0; k < lastPoint; k++)\n                  { \n                    var time = k * timeDelta;\n                    var position = outPerMillis * time + acceleration * time * time;\n\n                    deltas[ k ] = position / totalDistance;\n                  }\n                  deltas[ lastPoint ] = 1.0;\n\n                  path = new anim8.DeltaPath( attr, calc, points, deltas );\n                  transitionTime = requiredTime;\n                }\n              }\n            }\n\n            var transitionEvent = new anim8.Event( attr, path, transitionTime, transition.easing, 0, 0, 1 );\n          \n            transitionEvent.next = next;\n            transitionEvent.cycle = next.cycle;\n\n            next.offset = transition.intro;\n\n            this.placeAttrimator( transitionEvent );\n          }\n          else\n          {\n            curr.stopIn( transition.time + next.delay );\n            curr.queue( next );\n            next.delay = 0;\n          }\n        }\n        else\n        {\n          next.delay += transition.time;\n          \n          this.placeAttrimator( next );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        this.placeAttrimator( attrimators[ i ] );\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Finishes any attrimators on this animator that are not present in the given\n   * map of attrimators. Optionally a delay in stopping them can be given.\n   * \n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {Number} delay\n   * @return {this}\n   */\n  finishNotPresent: function(attrimatorMap, delay)\n  {\n    var attrimators = this.attrimators.values;\n    var stopIn = delay || 0;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var attrimator = attrimators[ i ];\n\n      if ( !attrimatorMap.has( attrimator.attribute ) )\n      {\n        attrimator.stopIn( stopIn );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {String} attr\n   * @param {T} target\n   * @param {String|Array|Object} options\n   * @return {this}\n   * @see anim8.options\n   */\n  tweenTo: function(attr, target, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var end       = attribute.parse( target );\n    var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attributes to target values.\n   *\n   * @param {Object} targets\n   * @param {String|Array|Object} options\n   * @return {this}\n   * @see anim8.options\n   */\n  tweenManyTo: function(targets, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in targets )\n    {\n      var attribute = this.getAttribute( attr );\n      var end       = attribute.parse( targets[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {String} attr\n   * @param {T} starts\n   * @param {T} ends\n   * @param {String|Array|Object} options\n   * @return {this}\n   * @see anim8.options\n   */\n  tween: function(attr, starts, ends, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var start     = attribute.parse( starts );\n    var end       = attribute.parse( ends );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {Object} starts\n   * @param {Object} ends\n   * @param {String|Array|Object} options\n   * @return {this}\n   * @see anim8.options\n   */\n  tweenMany: function(starts, ends, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in starts )\n    {\n      var attribute = this.getAttribute( attr );\n      var start     = attribute.parse( starts[ attr ] );\n      var end       = attribute.parse( ends[ attr ] );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n\n  /**\n   * Moves an attribute relative to its current value.\n   * \n   * @param {String} attr\n   * @param {T} amount\n   * @param {String|Array|Object} options\n   * @return {this}\n   */\n  move: function(attr, amount, options)\n  {\n    var options   = anim8.options( options );\n    var attribute = this.getAttribute( attr );\n    var relative  = attribute.parse( amount );\n    var start     = anim8.computed.current;\n    var end       = anim8.isComputed( relative ) ? relative : anim8.computed.relative( relative );\n    var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n    var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n\n    return this.activate();\n  },\n\n  /**\n   * Moves multiple attribute relative to their current value.\n   * \n   * @param {Object} amounts\n   * @param {String|Array|Object} options\n   * @return {this}\n   */\n  moveMany: function(amounts, options)\n  {\n    var options = anim8.options( options );\n\n    this.newCycle();\n\n    for ( var attr in amounts )\n    {\n      var attribute = this.getAttribute( attr );\n      var relative  = attribute.parse( amounts[ attr ] );\n      var start     = anim8.computed.current;\n      var end       = anim8.isComputed( relative ) ? relative : anim8.computed.relative( relative );\n      var path      = new anim8.Tween( attr, attribute.calculator, start, end );\n      var event     = new anim8.Event( attr, path, options.duration, options.easing, options.delay, options.sleep, options.repeat, options.scale, options.scaleBase );\n      \n      event.cycle = this.cycleNext;\n      this.placeAttrimator( event );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute \n   * when invoked. The returned function can be given as values for paths & \n   * springs that are evaluated every frame.\n   * \n   * @param {String} attr\n   * @return {Function}\n   */\n  ref: function(attr)\n  {\n    var animator = this;\n    var attribute = this.getAttribute( attr );\n    var request = {};\n    \n    return function()\n    {\n      if ( attr in animator.frame )\n      {\n        return animator.frame[ attr ];\n      }\n      \n      request[ attr ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attr ] ) )\n      {\n        return current[ attr ];\n      }\n      \n      return attribute.defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {String} attribute\n   * @param {anim8.Path|Object|String} path\n   * @param [Object] options\n   * @return {this}\n   * @see anim8.options\n   */\n  follow: function(attribute, path, options)\n  {\n    var options = anim8.options( options );\n    var path = anim8.path( path );\n    \n    var event = new anim8.Event( \n      attribute, \n      path, \n      options.duration,\n      options.easing,\n      options.delay, \n      options.sleep,\n      options.repeat,\n      options.scale,\n      options.scaleBase\n    );\n    \n    this.newCycle( event );\n    this.placeAttrimator( event );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that iterates over given attributes. If callback is specified\n   * it is invoked for each attrimator in this animator for the given \n   * attributes. If no callback is given an array of anim8.Attrimators is \n   * returned for each attrimator in this animator for the given attributes.\n   *\n   * @param {String|Array} attributes\n   * @param {Function} callback\n   * @return {this|Array}\n   */\n  attrimatorsFor: function(attributes, callback)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      attributes = attributes.split( ' ' );\n    }\n   \n    var attrimatorMap = this.attrimators; \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n    if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        var attrimator = attrimatorMap.get( attr );\n        \n        if ( attrimator )\n        {\n          if ( resulting )\n          {\n            results.push( attrimator );\n          }\n          else\n          {\n            callback.call( this, attrimator, attr );\n          }\n        }\n      }\n    }\n    else\n    {\n      var attrimators = attrimatorMap.values;\n\n      for (var i = attrimators.length - 1; i >= 0; i--)\n      {\n        var attrimator = attrimators[ i ];\n\n        if ( resulting )\n        {\n          results.push( attrimator );\n        }\n        else\n        {\n          callback.call( this, attrimator, attrimator.attribute );\n        }\n      }\n    }\n    \n    return resulting ? results : this;\n  },\n  \n  /**\n   * Stops all attributes for the specified attributes. Attribute names can be \n   * given as an array or a space separated string. If no attributes are given \n   * all attributes are assumed.\n   *\n   * @param {String|Array} attributes\n   * @return {this}\n   */\n  stop: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator, attr) \n    {\n      this.attrimators.remove( attr );\n    });\n  },\n  \n  /**\n   * Ends all attributes for the specified attributes. If attributes are queued \n   * the last value of the last attribute is applied to this Animator before \n   * being completely removed. Attribute names can be given as an array or a \n   * space separated string. If no attributes are given all attributes are \n   * assumed.\n   *\n   * @param {String|Array} attributes\n   * @return {this}\n   */\n  end: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator) \n    {\n      while (attrimator.next)\n      {\n        attrimator = attrimator.next;\n      }\n      \n      attrimator.finish( this.frame );\n    });\n  },\n  \n  /**\n   * Finishes all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @param {String|Array} attributes\n   * @return {this}\n   */\n  finish: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.finish( this.frame );\n    });\n  },\n  \n  /**\n   * Pauses all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @param {String|Array} attributes\n   * @return {this}\n   */\n  pause: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.pause();\n    });\n  },\n  \n  /**\n   * Resumes all current attrimators for the specified attributes. Attribute \n   * names can be given as an array or a space separated string. If no \n   * attributes are given all attributes are assumed.\n   *\n   * @param {String|Array} attributes\n   * @return {this}\n   */\n  resume: function(attributes)\n  {\n    return this.attrimatorsFor( attributes, function(attrimator)\n    {\n      attrimator.resume();\n    });\n  },\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {Object} attributes\n   * @return {this}\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n      this.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n\n  /**\n   * Unsets the attribute, array of attributes, or object of attributes. \n   * Unsetting involves removing all attrimators and the current value in the \n   * frame,\n   * \n   * @param  {String|Array|Object}\n   * @return {this}\n   */\n  unset: function(attributes)\n  {\n    if ( anim8.isString( attributes ) )\n    {\n      this.attrimators.remove( attributes );\n      delete this.frame[ attributes ];\n    }\n    else if ( anim8.isArray( attributes ) )\n    {\n      for (var i = 0; i < attributes.length; i++)\n      {\n        this.unset( attributes[ i ] );\n      }\n    }\n    else if ( anim8.isObject( attributes ) )\n    {\n      for (var attr in attributes)\n      {\n        this.unset( attr );\n      }\n    }\n\n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The \n   * argument must be an object where the key is the name of an attribute.\n   *\n   * @param {Object} attributes\n   * @return {Object}\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n\n  /**\n   * Returns the amount of finite time remaining before the animator is done\n   * animating. Attrimators that don't have a known end time are not included.\n   * If there are no attrimators with end times then zero is returned.\n   *\n   * @return {Number}\n   */\n  timeRemaining: function()\n  {\n    return this.attrimators.timeRemaining();\n  },\n  \n  /**\n   * Returns true if there are any attrimators on this Animator.\n   *\n   * @return {Boolean}\n   */\n  hasAttrimators: function()\n  {\n    return this.attrimators.size() > 0;\n  },\n  \n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [Function] wrapper\n   * @return {any}\n   */\n  getSubject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\n  /**\n   * Invokes a function with the given context or the context of this Animator \n   * if none is given. This is particularly useful for having a function be \n   * called on deferred statements.\n   * \n   * @param  {Function} func\n   * @param  [Object] context\n   * @param  [Array] args\n   * @return {this}\n   */\n  invoke: function(func, context, args)\n  {\n    if ( anim8.isFunction( func ) )\n    {\n      func.apply( context || this, args || [] );\n    }\n\n    return this;\n  },\n  \n  /**\n   * Defers the method calls following this one to when the given event type \n   * (on or once) and event. To return this animator you need to call undefer() \n   * as many times as you called defer().\n   *\n   * @param {String} eventType\n   * @param {String} event\n   * @param [Function] callback\n   * @return {anim8.DeferAnimator}\n   */\n  defer: function(eventType, event, callback)\n  {\n    return new anim8.DeferAnimator( this, this, eventType, event, callback );\n  },\n\n  /**\n   * Invokes the given callback when the last animation that was \n   * played/queued/transitioned starts.\n   * \n   * @param  {Function} callback\n   * @param  {Object} context\n   * @return {this}\n   */\n  onCycleStart: function(callback, context)\n  {\n    this.once( 'cycleStart:' + this.cycleNext, callback, context );\n\n    return this;\n  },\n\n  /**\n   * Invokes the given callback when the last animation that was\n   * played/queued/transitioned ends.\n   * \n   * @param  {Function} callback\n   * @param  {Object} context\n   * @return {this}\n   */\n  onCycleEnd: function(callback, context)\n  {\n    this.once( 'cycleEnd:' + this.cycleNext, callback, context );\n\n    return this;\n  }\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n  this.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'restore', 'placeAttrimator', 'preupdate', 'update', 'apply', 'trimAttrimators',\n  'activate', 'deactivate', 'destroy', 'spring', 'play', 'playAttrimators', 'queue',\n  'queueAttrimators', 'transition', 'transitionAttrimators', 'tween', 'tweenTo', \n  'tweenMany', 'tweenManyTo', 'follow', 'stop', 'end', 'finish', 'pause', 'resume',\n  'set', 'unset', 'get', 'invoke', 'onCycleStart', 'onCycleEnd', 'move', 'moveMany',\n  'applyInitialState'\n]);\n","\n/**\n * Instantiates an Array of anim8.Animator instances.\n * \n * @param [Array]\n */\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8.override( anim8s.fn = anim8.Animators.prototype = new Array(),\n{\n\n  /**\n   * Invokes a callback for each element in the array.\n   * \n   * @param {Function} iterator\n   * @param {Object} context\n   * @return {this}\n   */\n  each: function(iterator, context) \n  {\n    for (var i = 0; i < this.length; i++) \n    {\n      if ( iterator.call( context || this[i], this[i], i ) === false ) \n      {\n        break;\n      }\n    }\n    \n    return this;\n  },\n\n  /**\n   * Appends the array of animators given to the end of this array.\n   *\n   * @param {Array} animators\n   * @return {this}\n   */\n  fill: function(animators)\n  {\n    for (var i = 0; i < animators.length; i++)\n    {\n      this.push( animators[i] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Invokes a callback for each element in the array and if a true value is\n   * returned  that element is removed from the array.\n   *\n   * @param {Function} filterer\n   * @return {this}\n   */\n  filter: function(filterer)\n  {  \n    var alive = 0;\n    \n    for (var i = 0; i < this.length; i++)\n    {\n      var remove = filterer( this[i] );\n      \n      if ( !remove )\n      {\n        this[alive++] = this[i];\n      }\n    }\n    \n    this.length = alive;\n    \n    return this;\n  },\n\n  /**\n   * Returns the subjects of the Animators optionally passing them through a \n   * wrapper function before it's returned.\n   *\n   * @param [Function] wrapper\n   * @return {any}\n   */\n  getSubjects: function(wrapper)\n  {\n    var subjects = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      subjects.push( this[i].subject );\n    }\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subjects = wrapper( subjects );\n    }\n    \n    return subjects;\n  },\n\n  /**\n   * Returns the first animator in the array.\n   *\n   * @return {anim8.Animator}\n   */\n  first: function()\n  {\n    return this[0];\n  },\n\n  /**\n   * Reverses the order of animators in the array.\n   *\n   * @return {this}\n   */\n  reverse: function()\n  {\n    var last = this.length - 1;\n    var mid = Math.floor( this.length / 2 );\n\n    for (var i = 0; i < mid; i++)\n    {\n      var e0 = this[ i ];\n      var e1 = this[ last - i ];\n\n      this[ i ] = e1;\n      this[ last - i ] = e0;\n    }\n\n    return this;\n  },\n\n  /**\n   * Activates all Animators in the array if they aren't active already.\n   * \n   * @return {this}\n   */\n  activate: function()\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var animator = this[i];\n\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    }\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n      anim8.trigger('starting');\n      anim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  },\n\n  /**\n   * Plays a sequence of events separated by a delay.\n   *\n   * @param {String|Number} delay\n   * @param {String|Array|Function} easing\n   * @return {anim8.Sequence}\n   */\n  sequence: function(delay, easing)\n  {\n    return new anim8.Sequence( this, delay, easing );\n  },\n\n  /**\n   * Returns the maximum time remaining out of all Animators in the array.\n   * \n   * @return {Number}\n   * @see anim8.Animator.timeRemaining\n   */\n  timeRemaining: function()\n  {\n    var maxRemaining = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      maxRemaining = Math.max( maxRemaining, this[ i ].timeRemaining() );\n    }\n\n    return maxRemaining;\n  },\n\n  /**\n   * Adds the following methods to make an array of Animators appear like a single Animator.\n   */\n  restore               : anim8.delegate( 'restore', anim8.delegate.RETURN_THIS ),\n  placeAttrimator       : anim8.delegate( 'placeAttrimator', anim8.delegate.RETURN_THIS ),\n  applyInitialState     : anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS ),\n  preupdate             : anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS ),\n  update                : anim8.delegate( 'update', anim8.delegate.RETURN_THIS ),\n  apply                 : anim8.delegate( 'apply', anim8.delegate.RETURN_THIS ),\n  trimAttrimators       : anim8.delegate( 'trimAttrimators', anim8.delegate.RETURN_THIS ),\n  activate              : anim8.delegate( 'activate', anim8.delegate.RETURN_THIS ),\n  deactivate            : anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS ),\n  destroy               : anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS ),\n  spring                : anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS ),\n  play                  : anim8.delegate( 'play', anim8.delegate.RETURN_THIS ),\n  playAttrimators       : anim8.delegate( 'playAttrimators', anim8.delegate.RETURN_THIS ),\n  queue                 : anim8.delegate( 'queue', anim8.delegate.RETURN_THIS ),\n  queueAttrimators      : anim8.delegate( 'queueAttrimators', anim8.delegate.RETURN_THIS ),\n  transition            : anim8.delegate( 'transition', anim8.delegate.RETURN_THIS ),\n  transitionAttrimators : anim8.delegate( 'transitionAttrimators', anim8.delegate.RETURN_THIS ),\n  tween                 : anim8.delegate( 'tween', anim8.delegate.RETURN_THIS ),\n  tweenTo               : anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS ),\n  tweenMany             : anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS ),\n  tweenManyTo           : anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS ),\n  move                  : anim8.delegate( 'move', anim8.delegate.RETURN_THIS ),\n  moveMany              : anim8.delegate( 'moveMany', anim8.delegate.RETURN_THIS ),\n  follow                : anim8.delegate( 'follow', anim8.delegate.RETURN_THIS ),\n  attrimatorsFor        : anim8.delegate( 'attrimatorsFor', anim8.delegate.RETURN_RESULTS ),\n  stop                  : anim8.delegate( 'stop', anim8.delegate.RETURN_THIS ),\n  end                   : anim8.delegate( 'end', anim8.delegate.RETURN_THIS ),\n  finish                : anim8.delegate( 'finish', anim8.delegate.RETURN_THIS ),\n  pause                 : anim8.delegate( 'pause', anim8.delegate.RETURN_THIS ),\n  resume                : anim8.delegate( 'resume', anim8.delegate.RETURN_THIS ),\n  set                   : anim8.delegate( 'set', anim8.delegate.RETURN_THIS ),\n  unset                 : anim8.delegate( 'unset', anim8.delegate.RETURN_THIS ),\n  get                   : anim8.delegate( 'get', anim8.delegate.RETURN_FIRST ),\n  hasAttrimators        : anim8.delegate( 'hasAttrimators', anim8.delegate.RETURN_TRUE ),\n  invoke                : anim8.delegate( 'invoke', anim8.delegate.RETURN_THIS ),\n  onCycleStart          : anim8.delegate( 'onCycleStart', anim8.delegate.RETURN_THIS ),\n  onCycleEnd            : anim8.delegate( 'onCycleEnd', anim8.delegate.RETURN_THIS ),\n  on                    : anim8.delegate( 'on', anim8.delegate.RETURN_THIS ),\n  once                  : anim8.delegate( 'once', anim8.delegate.RETURN_THIS ),\n  off                   : anim8.delegate( 'off', anim8.delegate.RETURN_THIS ),\n  trigger               : anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS )\n\n});\n","\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate( now );\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Pauses all animators.\n *\n * @param {String|Array} attributes\n * @return {anim8}\n * @see anim8.Animator.pause\n */\nanim8.pause = function(attributes)\n{\n  anim8.animating.pause( attributes );\n\n  return anim8;\n};\n\n/**\n * Resumes all animators.\n * \n * @param {String|Array} attributes\n * @return {anim8}\n * @see anim8.Animator.resume\n */\nanim8.resume = function(attributes)\n{\n  anim8.animating.resume( attributes );\n\n  return anim8;\n};\n\n/**\n * Stops all animators.\n * \n * @param {String|Array} attributes\n * @return {anim8}\n * @see anim8.Animator.stop\n */\nanim8.stop = function(attributes)\n{\n  anim8.animating.stop( attributes );\n\n  return anim8;\n};\n\n/**\n * Ends all animators.\n * \n * @param {String|Array} attributes\n * @return {anim8}\n * @see anim8.Animator.end\n */\nanim8.end = function(attributes)\n{\n  anim8.animating.end( attributes );\n\n  return anim8;\n};\n\n/**\n * Finishes all animators.\n * \n * @param {String|Array} attributes\n * @return {anim8}\n * @see anim8.Animator.finish\n */\nanim8.finish = function(attributes)\n{\n  anim8.animating.finish( attributes );\n\n  return anim8;\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );\n","\n/**\n * Creates a seqeuence for the given animators offseting animations be the given\n * delay and easing.\n * \n * @param {anim8.Animators} animators\n * @param {String|Number} delay\n * @param {String|Array|Function} easing\n */\nanim8.Sequence = function(animators, delay, easing)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n};\n\nanim8.Sequence.prototype =\n{\n  /**\n   * Returns the maximum delay for delaying generated attrimators.\n   *\n   * @return {Number}\n   */\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  /**\n   * Creates an AttrimatorMap with the given options for the animator at the \n   * given index.\n   * \n   * @param {anim8.Animation} animation\n   * @param {Object} options\n   * @param {Number} i\n   * @return {anim8.AttrimatorMap}\n   */\n  createAttrimators: function(animation, options, i)\n  {\n    var attrimatorMap = animation.newAttrimators();\n    var attrimators = attrimatorMap.values;\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = attrimators.length - 1; k >= 0; k--)\n    {\n      attrimators[ k ].delay += delayOffset;\n    }\n\n    animation.merge( options, attrimatorMap );\n    \n    return attrimatorMap;\n  },\n\n  /**\n   * Reverses the sequence by reversing the underlying array of animators.\n   * \n   * @return {this}\n   */\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  /**\n   * Plays the animation across the animators in this sequence.\n   * \n   * @param {anim8.Animation|String|Object} animation\n   * @param {String|Array|Object} options\n   * @param {Boolean} all\n   * @param {Boolean} cache\n   * @return {this}\n   * @see anim8.animation\n   * @see anim8.options\n   * @see anim8.Animator.play\n   */\n  play: function(animation, options, all, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( anim, options, i );\n      animator.newCycle( attrimators );\n      animator.playAttrimators( attrimators, all );       \n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * Queues the animation across the animators in this sequence.\n   * \n   * @param {anim8.Animation|String|Object} animation\n   * @param {String|Array|Object} options\n   * @param {Boolean} cache\n   * @return {this}\n   * @see anim8.animation\n   * @see anim8.options\n   * @see anim8.Animator.queue\n   */\n  queue: function(animation, options, cache)\n  {\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.timeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var attrimatorMap = sequence.createAttrimators( anim, options, i );\n      var attrimators = attrimatorMap.values;\n\n      for (var k = attrimators.length - 1; k >= 0; k--)\n      {\n        attrimators[ k ].delay += delayOffset;\n      }\n      \n      animator.newCycle( attrimatorMap );\n      animator.queueAttrimators( attrimatorMap );\n    });\n    \n    return this.add();\n  },\n\n  /**\n   * Transitions into the animation across the animators in this sequence.\n   * \n   * @param {String|Array|Object} transition\n   * @param {anim8.Animation|String|Object} animation\n   * @param {String|Array|Object} options\n   * @param {Boolean} all\n   * @param {Boolean} cache\n   * @return {this}\n   * @see anim8.transition\n   * @see anim8.animation\n   * @see anim8.options\n   * @see anim8.Animator.transition\n   */\n  transition: function(transition, animation, options, all, cache)\n  {\n    var transition = anim8.transition( transition );\n    var options = anim8.options( options );\n    var anim = anim8.animation( animation, options, cache );\n\n    if ( anim === false )\n    {\n      return this;\n    }\n\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      var attrimators = sequence.createAttrimators( anim, options, i );\n      animator.newCycle( attrimators );\n      animator.transitionAttrimators( transition, attrimators, all );\n    });\n    \n    return this.add();\n  },\n  \n  /**\n   * Activates all animators in this sequence and returns this.\n   *\n   * @return {this}\n   */\n  add: function()\n  {\n    this.animators.activate();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {Function|String} parser\n * @return {anim8.Parser|false}\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n  if ( anim8.isString( parser ) && parser in anim8.parser )\n  {\n    return anim8.parser[ parser ];\n  }\n  \n  return false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated attrimatorMap to the given array.\n   * \n   * @param {Object} animation\n   * @param {Object} options\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    throw 'Parser.parse not implemented';\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {Object} animation\n   * @param {Object} newOptions\n   * @param {Object} oldOptions\n   * @param {anim8.AttrimatorMap} attrimatorMap\n   * @param {anim8.ParserHelper} helper\n   */\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  { \n    var factory = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[ i ];\n      var attr = e.attribute;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = helper.mergeEasing( attr, e.easing );\n      e.repeat    = helper.mergeRepeat( attr, e.repeat );\n      e.delay     = helper.mergeDelay( attr, e.delay );\n      e.sleep     = helper.mergeSleep( attr, e.sleep );\n      e.duration  = helper.mergeDuration( attr, e.duration );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n    }\n  }\n};\n\n\n/**\n * Instantiates a new instance of Parser Helper.\n * \n * @param {Object} input\n * @param {Object} oldOptions\n * @param {Object} newOptions\n */\nanim8.ParserHelper = function( input, oldOptions, newOptions )\n{\n  this.input = input;\n  this.oldOptions = oldOptions || {};\n  this.newOptions = newOptions || {};\n\n  this.prepareSpecifics( 'easings' );\n  this.prepareSpecifics( 'repeats' );\n  this.prepareSpecifics( 'delays' );\n  this.prepareSpecifics( 'sleeps' );\n  this.prepareSpecifics( 'durations' );\n  this.prepareSpecifics( 'scales' );\n  this.prepareSpecifics( 'scaleBases' );\n};\n\nanim8.ParserHelper.prototype = \n{\n\n  /**\n   * If an object with the given name doesn't exist on the input it's created.\n   * \n   * @param  {String} specifics\n   */\n  prepareSpecifics: function(specifics)\n  {\n    if ( !anim8.isObject( this.input[ specifics ] ) )\n    {\n      this.input[ specifics ] = {};\n    }\n  },\n\n  /* PARSING */\n\n  /**\n   * Parses an easing from the input.\n   * \n   * @param  {String} attr\n   * @return {String|Function|Array}\n   */\n  parseEasing: function(attr)\n  {\n    return this.parseFirst( attr, 'easing', 'easings' );\n  },\n\n  /**\n   * Parses repeats from the input.\n   * \n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseRepeat: function(attr)\n  {\n    return this.parseNumber( attr, anim8.repeat, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * Parses delay from the input.\n   * \n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseDelay: function(attr)\n  {\n    return this.parseNumber( attr, anim8.delay, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * Parses sleep from the input.\n   * \n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseSleep: function(attr)\n  {\n    return this.parseNumber( attr, anim8.sleep, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'sleeps' );\n  },\n\n  /**\n   * Parses duration from the input.\n   * \n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseDuration: function(attr)\n  {\n    return this.parseNumber( attr, anim8.duration, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * Parses scale from the input.\n   * \n   * @param  {String} attr\n   * @return {Number}\n   */\n  parseScale: function(attr)\n  {\n    return this.parseNumber( attr, anim8.scale, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * Parses scale base from the input.\n   * \n   * @param  {String} attr\n   * @return {any}\n   */\n  parseScaleBase: function(attr)\n  {\n    return this.parseFirst( attr, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * Parses a value from the input given the attribute, option, and specific.\n   * \n   * @param {String} attr\n   * @param {String} option\n   * @param {String} specifics\n   * @return {any}\n   */\n  parseFirst: function(attr, option, specifics)\n  {\n    return anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n  },\n\n  /**\n   * Parses an event from the input given a path & parser for the event.\n   * \n   * @param {String} attr\n   * @param {anim8.Path} path\n   * @param {anim8.Parser} parser\n   * @param {Boolean} hasInitialState\n   * @return {anim8.Event}\n   */\n  parseEvent: function(attr, path, parser, hasInitialState)\n  {\n    var duration   = this.parseDuration( attr );\n    var easing     = this.parseEasing( attr );\n    var delay      = this.parseDelay( attr );\n    var sleep      = this.parseSleep( attr );\n    var repeat     = this.parseRepeat( attr );\n    var scale      = this.parseScale( attr );\n    var scaleBase  = this.parseScaleBase( attr );\n    var event      = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, scale, scaleBase, hasInitialState, parser );\n\n    return event;\n  },\n\n  /**\n   * Parses a number from the input given parse functions.\n   * \n   * @param {String} attr\n   * @param {Function} parseFunction\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} optionAdd\n   * @param {String} optionScale\n   * @param {String} specifics\n   * @return {Number}\n   */\n  parseNumber: function(attr, parseFunction, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.oldOptions[ option ] );\n    var base = parseFunction( baseRaw );\n    var add = parseOptionFunction( this.oldOptions[ optionAdd ], 0 );\n    var scale = anim8.coalesce( this.oldOptions[ optionScale ], 1 );\n\n    return (add === 0 && scale === 1) ? baseRaw : (base + add) * scale;\n  },\n\n  /* MERGING */\n\n  /**\n   * Merges easing based on the input, new options, and the current easing.\n   * \n   * @param {String} attr\n   * @param {Function} current\n   * @return {Function}\n   */\n  mergeEasing: function(attr, current)\n  {\n    return this.mergeFirst( attr, current, anim8.easing, 'easing', 'easings' );\n  },\n\n  /**\n   * Merges repeats based on the input, new options, and the current repeat.\n   * \n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeRepeat: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.repeat, 'repeat', 'repeatAdd', 'repeatScale', 'repeats' );\n  },\n\n  /**\n   * Merges delay based on the input, new options, and the current delay.\n   * \n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeDelay: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'delay', 'delayAdd', 'delayScale', 'delays' );\n  },\n\n  /**\n   * Merges sleep based on the input, new options, and the current sleep.\n   * \n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeSleep: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'sleep', 'sleepAdd', 'sleepScale', 'scales' );\n  },\n\n  /**\n   * Merges duration based on the input, new options, and the current duration.\n   * \n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeDuration: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.time, 'duration', 'durationAdd', 'durationScale', 'durations' );\n  },\n\n  /**\n   * Merges scale based on the input, new options, and the current scale.\n   * \n   * @param {String} attr\n   * @param {Number} current\n   * @return {Number}\n   */\n  mergeScale: function(attr, current)\n  {\n    return this.mergeNumber( attr, current, anim8.number, 'scale', 'scaleAdd', 'scaleScale', 'scales' );\n  },\n\n  /**\n   * Merges scale base based on the input, new options, and the current scale \n   * base.\n   * \n   * @param {String} attr\n   * @param {T} current\n   * @param {anim8.Factory} factory\n   * @return {T}\n   */\n  mergeScaleBase: function(attr, current, factory)\n  {\n    var calc = factory.attribute( attr ).calculator;\n    var parseFunction = function(value, defaultValue) {\n      return calc.parse( value, defaultValue );\n    };\n\n    return this.mergeFirst( attr, current, parseFunction, 'scaleBase', 'scaleBases' );\n  },\n\n  /**\n   * Returns the first available option from input, new options, old options,\n   * and the current value.\n   * \n   * @param {String} attr\n   * @param {T} current\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} specifics\n   * @return {T}\n   */\n  mergeFirst: function(attr, current, parseOptionFunction, option, specifics)\n  {\n    return parseOptionFunction( anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] ), current );\n  },\n\n  /**\n   * Merges a number by returning the first occurrence from input, new options,\n   * old options, and the current value.\n   * \n   * @param {String} attr\n   * @param {Number} current\n   * @param {Function} parseOptionFunction\n   * @param {String} option\n   * @param {String} optionAdd\n   * @param {String} optionScale\n   * @param {String} specifics\n   * @return {Number}\n   */\n  mergeNumber: function(attr, current, parseOptionFunction, option, optionAdd, optionScale, specifics)\n  {\n    var baseRaw = anim8.coalesce( this.input[ specifics ][ attr ], this.newOptions[ option ], this.oldOptions[ option ] );\n    var base = parseOptionFunction( baseRaw, current );\n    var add = parseOptionFunction( anim8.coalesce( this.newOptions[ optionAdd ], this.oldOptions[ optionAdd ] ), 0 );\n    var scale = anim8.coalesce( this.newOptions[ optionScale ], this.oldOptions[ optionScale ], 1 );\n\n    return (base + add) * scale;\n  }\n\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.override( anim8.ParserDeltas.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. If deltas wasn't specified, assume a uniform distribution of points\n    // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n    // 3. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var deltas = animation.deltas;\n    var values = animation.values;\n\n    if ( !anim8.isDefined( deltas ) )\n    {\n      var valueCount = 0;\n      \n      for (var attr in values)\n      {\n        valueCount++; \n      }\n      \n      deltas = [];\n      \n      for (var i = 0; i < valueCount; i++)\n      {\n        deltas[i] = i / (valueCount - 1);\n      }\n    }\n    if ( anim8.isArray( deltas ) )\n    {\n      var deltaObject = {};\n      \n      for (var attr in values)\n      {\n        deltaObject[attr] = deltas;  \n      }\n      \n      deltas = deltaObject;\n    }\n    \n    for (var attr in values)\n    {\n      var value = values[ attr ];\n      var attribute = factory.attribute( attr );\n      \n      for (var k = 0; k < value.length; k++)\n      {\n        value[k] = attribute.parse( value[k] );\n      }\n\n      var path      = new anim8.DeltaPath( attr, attribute.calculator, values[ attr ], deltas[ attr ] );\n      var event     = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['values'] = new anim8.ParserDeltas();\n","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.override( anim8.ParserFinal.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays and durations\n    \n    var factory = anim8.factory( animation.factory );\n    var values = animation.final;\n    \n    for (var attr in values)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] );\n      var delay      = anim8.delay( helper.parseDelay( attr ) );\n      var duration   = anim8.duration( helper.parseDuration( attr ) );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, scale, scaleBase, false, this );\n      \n      attrimatorMap.put( attr, event );\n    }\n  },\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var factory = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n      var attr = e.attribute;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.delay     = helper.mergeDelay( attr, e.delay ) + helper.mergeDuration( attr, e.duration );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory ); \n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['final'] = new anim8.ParserFinal();\n\n","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.override( anim8.ParserInitial.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Generate the attrimators, only caring about the delays\n    \n    var factory    = anim8.factory( animation.factory );\n    var values     = animation.initial;\n    \n    for (var attr in values)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( values[ attr ] ); \n      var delay      = helper.parseDelay( attr );\n      var scale      = helper.parseScale( attr );\n      var scaleBase  = helper.parseScaleBase( attr );\n      var path       = new anim8.PointPath( attr, attribute.calculator, value );\n      var event      = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n    }\n  },\n  merge: function( animation, newOptions, oldOptions, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var attrimators = attrimatorMap.values;\n\n    for (var i = attrimators.length - 1; i >= 0; i--)\n    {\n      var e = attrimators[i];\n      var attr = e.attribute;\n        \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n      \n      e.delay     = helper.mergeDelay( attr, e.delay );\n      e.scale     = helper.mergeScale( attr, e.scale );\n      e.scaleBase = helper.mergeScaleBase( attr, e.scaleBase, factory );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['initial'] = new anim8.ParserInitial();\n","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.override( anim8.ParserKeyframe.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Normalize keys by converting aliases to the actual value\n    // 2. Split up keys that have commas into multiple entries\n    // 3. Validate keys and remove invalid ones - also calculate max key value\n    // 4. Sort frames by the key\n    // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n    // 6. Generate the attrimators\n    \n    var factory = anim8.factory( animation.factory );\n    var kframes = animation.keyframe;\n    var easings = animation.easings || {};\n    var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n    \n    var sort = false;\n    \n    var aliases = {\n      from:     '0',\n      start:    '0',\n      initial:  '0',\n      first:    '0',\n      half:     '50',\n      middle:   '50',\n      to:       '100',\n      end:      '100',\n      last:     '100'\n    };\n    \n    // split up comma delimited times\n    for (var time in kframes)\n    {\n      if ( time in aliases )\n      {\n        kframes[ aliases[time] ] = kframes[ time ];\n        \n        delete kframes[ time ];\n      }\n      else if ( time.indexOf(',') !== -1 )\n      {\n        var times = time.split(',');\n        \n        for (var i = 0; i < times.length; i++)\n        {\n          kframes[times[i]] = kframes[time];\n        }\n        \n        delete kframes[time];\n        \n        sort = true;\n      }\n    }\n    \n    var times = [];\n    \n    // validate times\n    var lastTime = 0.0;\n    var maxTime = 0.0;\n    \n    for (var time in kframes)\n    {\n      var t = parseFloat(time);\n      \n      if (isNaN(t))\n      {\n        delete kframes[time];\n      }\n      else\n      {\n        if (t < lastTime)\n        {\n          sort = true;\n        }\n        \n        times.push({\n          order: t,\n          key: time,\n          value: kframes[time]\n        });\n        \n        lastTime = t;\n        \n        maxTime = Math.max( maxTime, t );\n      }\n    }\n    \n    // sort if necessary\n    if (sort)\n    {\n      times.sort(function(a, b) \n      {\n        return a.order - b.order;\n      });\n      \n      kframes = {};\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i].key] = times[i].value;\n      }\n    }\n    \n    // split up into deltas and values\n    var deltas = {};\n    var values = {};\n    var pathEasings = {};\n    var attributes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      var frame = times[i];\n      var easing = anim8.coalesce( frame.value.easing, options.easing );\n      \n      delete frame.value.easing;\n      \n      for (var attr in frame.value)\n      {\n        if ( !(attr in deltas) )\n        {\n          deltas[attr] = [];\n          values[attr] = [];\n          pathEasings[attr] = [];\n          attributes[attr] = factory.attribute( attr );\n        }\n        \n        deltas[attr].push( frame.order / maxTime );\n        values[attr].push( attributes[ attr ].parse( frame.value[ attr ] ) );\n        pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[ attr ], easing ) ) );\n      }\n    }\n    \n    // create events & paths\n    for (var attr in deltas)\n    {\n      var duration  = helper.parseDuration( attr );\n      var delay     = helper.parseDelay( attr );\n      var sleep     = helper.parseSleep( attr );\n      var repeat    = helper.parseRepeat( attr );\n      var scale     = helper.parseScale( attr );\n      var scaleBase = helper.parseScaleBase( attr );\n      var path      = new anim8.KeyframePath( attr, attributes[attr].calculator, values[attr], deltas[attr], pathEasings[attr] );\n      var event     = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, scale, scaleBase, true, this );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Registers the parser.\n */\nanim8.parser['keyframe'] = new anim8.ParserKeyframe();\n","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTweenTo = function()\n{\n  \n};\n\n// ParserTweenTo extends anim8.Parser()\nanim8.override( anim8.ParserTweenTo.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenTo    = animation.tweenTo;\n\n    for (var attr in tweenTo)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenTo[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, value );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenTo'] = new anim8.ParserTweenTo();\n","\n/**\n * Instantiates a new parser for the 'tweenFrom' animation type.\n */\nanim8.ParserTweenFrom = function()\n{\n  \n};\n\n// ParserTweenFrom extends anim8.Parser()\nanim8.override( anim8.ParserTweenFrom.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var tweenFrom  = animation.tweenFrom;\n\n    for (var attr in tweenFrom)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( tweenFrom[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, value, anim8.computed.current );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['tweenFrom'] = new anim8.ParserTweenFrom();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParserMove = function()\n{\n  \n};\n\n// ParserMove extends anim8.Parser()\nanim8.override( anim8.ParserMove.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var move       = animation.move;\n\n    for (var attr in move)\n    {\n      var attribute  = factory.attribute( attr );\n      var value      = attribute.parse( move[ attr ] );\n      var path       = new anim8.Tween( attr, attribute.calculator, anim8.computed.current, anim8.computed.relative( value ) );\n      var event      = helper.parseEvent( attr, path, this, true );\n      \n      attrimatorMap.put( attr, event );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['move'] = new anim8.ParserMove();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParseSpring = function()\n{\n  \n};\n\n// ParseSpring extends anim8.Parser()\nanim8.override( anim8.ParseSpring.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var springs    = animation.springs;\n\n    for (var attr in springs)\n    {\n      var spring     = springs[ attr ];\n\n      if ( !anim8.isDefined( spring.attribute ) )\n      {\n        spring.attribute = attr;\n      }\n\n      var parsed = anim8.spring( spring );\n      \n      if ( parsed !== false )\n      {\n        parsed.parser = this;\n\n        attrimatorMap.put( attr, parsed );  \n      }\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['springs'] = new anim8.ParseSpring();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParsePhysics = function()\n{\n  \n};\n\n// ParsePhysics extends anim8.Parser()\nanim8.override( anim8.ParsePhysics.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    var factory    = anim8.factory( animation.factory );\n    var physics    = animation.physics;\n\n    for (var attr in physics)\n    {\n      var physic    = physics[ attr ];\n\n      var attrimator = new anim8.Physics(\n        attr, \n        this, \n        physic.calculator, \n        anim8.coalesce( physic.position, true ), \n        physic.velocity, \n        physic.acceleration, \n        physic.terminal,\n        physic.stopAt\n      );\n\n      attrimatorMap.put( attr, attrimator );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['physics'] = new anim8.ParsePhysics();\n","\n/**\n * Instantiates a new parser for the 'move' animation type.\n */\nanim8.ParserTravel = function()\n{\n  \n};\n\n// ParserTravel extends anim8.Parser()\nanim8.override( anim8.ParserTravel.prototype = new anim8.Parser(),\n{\n  parse: function( animation, options, attrimatorMap, helper )\n  {\n    // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n    var factory    = anim8.factory( animation.factory );\n    var travel     = animation.travel;\n\n    /**\n     * The computed function which returns a function which returns a value pointing\n     * to a given target given the current position of the animator.\n     * \n     * @param  {Number}\n     * @param  {any}\n     * @param  {Number}\n     * @return {Function}\n     */\n    var pointing = function(amount, target, epsilon, subtractVelocity)\n    {\n      var pointingFunction = function(attrimator, animator)\n      {\n        var attribute = animator.getAttribute( attrimator.attribute );\n        var calc = attribute.calculator;\n        var targetValue = anim8.isComputed( target ) ? target( attrimator, animator ) : target;\n        var temp = calc.create();\n\n        return function()\n        {\n          var position   = attrimator.position;\n          var current    = calc.copy( temp, anim8.resolve( targetValue ) );\n          var difference = calc.sub( current, position );\n          var distance   = calc.distance( difference, calc.ZERO );\n\n          if ( distance < epsilon )\n          {\n            attrimator.stopIn( 0 );\n          }\n          else\n          {\n            difference = calc.scale( difference, amount / distance );\n          }\n          \n          if ( subtractVelocity )\n          {\n            difference = calc.sub( difference, attrimator.resolveVelocity() );\n          }\n\n          return difference;\n        };\n      };\n\n      pointingFunction.computed = true;\n\n      return pointingFunction;\n    };\n\n    for (var attr in travel)\n    {\n      var traveling     = travel[ attr ];\n      var attribute     = factory.attribute( attr );\n      var from          = attribute.parse( anim8.coalesce( traveling.from, true ) );\n      var to            = attribute.parse( anim8.coalesce( traveling.to, true ) );\n      var velocity      = anim8.number( traveling.velocity, 0 );\n      var acceleration  = anim8.number( traveling.acceleration, 0 );\n      var terminal      = anim8.number( anim8.coalesce( traveling.terminal, traveling.velocity ), Number.POSITIVE_INFINITY );\n      var epsilon       = anim8.number( traveling.epsilon, 0.001 );\n\n      if ( acceleration !== 0 )\n      {\n        acceleration = pointing( acceleration, to, epsilon, true );\n      }\n\n      if ( velocity !== 0 )\n      {\n        velocity = pointing( velocity, to, epsilon, false );\n      }\n\n      var traveler = new anim8.Physics(\n        attr,\n        this,\n        attribute.calculator,\n        from,\n        velocity,\n        acceleration,\n        terminal\n      );\n      \n      attrimatorMap.put( attr, traveler );\n    }\n  }\n});\n\n/**\n * Register the parser.\n */\nanim8.parser['travel'] = new anim8.ParserTravel();\n","\n\n/**\n * Returns a factory for the given subject and optionally throws an error if no\n * factory exists.\n *\n * @param {any} subject\n * @param {Boolean} optional\n */\nanim8.factoryFor = function(subject, optional) \n{\n  var highestPriorityFactory = false;\n\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) && (highestPriorityFactory === false || highestPriorityFactory.priority < factory.priority) )\n    {     \n      highestPriorityFactory = factory;\n    }\n  }\n  \n  if ( highestPriorityFactory )\n  {\n    return highestPriorityFactory;\n  }\n\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * Returns a factory given the input and returns the default if none is found.\n * \n * @param [string|anim8.Factory]\n * @return {anim8.Factory}\n */\nanim8.factory = function(factory)\n{\n  if ( factory instanceof anim8.Factory )\n  {\n    return factory;\n  }\n  if ( anim8.isString( factory ) && factory in anim8.factory )\n  {\n    return anim8.factory[ factory ];\n  }\n\n  return anim8.factory.default;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n  this.priority = 0;\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {Boolean}\n   */\n  is: function(subject)\n  {\n    throw 'Factory.is not implemented';\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    throw 'Factory.animatorFor not implemented';\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {Array} animators\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   */\n  destroy: function(animator)\n  {\n\n  },\n\n  /**\n   * Returns the attribute descriptor for the given attribute.\n   * \n   * @param  {String} attr\n   * @return {Object}\n   */\n  attribute: function(attr)\n  {\n    throw 'Factory.attribute not implemented';\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n  this.priority = 0;\n  this.attributes = {};\n};\n\nanim8.override( anim8.ObjectFactory.prototype = new anim8.Factory(),\n{\n  is: function(subject)\n  {\n    return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n  },\n  animatorFor: function(subject)\n  {\n    var animator = subject.$animator;\n      \n    if ( !animator )\n    {\n      animator = new anim8.Animator( subject );\n      animator.factory = this;      \n      \n      subject.$animator = animator;\n    }\n    \n    return animator;\n  },\n  destroy: function(animator)\n  {\n    delete animator.subject.$animator;\n  },\n  attribute: function(attr)\n  {\n    var attribute = this.attributes[ attr ];\n\n    if ( !attribute )\n    {\n      attribute = this.attributes[ attr ] = anim8.object.attribute( attr );\n\n      var calculatorName = attribute.calculator;\n      var calculator = anim8.calculator( calculatorName );\n      var defaultValue = calculator.parse( attribute.defaultValue, calculator.ZERO );\n\n      attribute.calculatorName = calculatorName;\n      attribute.calculator = calculator;\n      attribute.defaultValue = defaultValue;\n      attribute.name = attr;\n      attribute.parse = function(value) {\n        return this.calculator.parse( value, this.defaultValue );\n      };\n      attribute.cloneDefault = function() {\n        return this.calculator.clone( this.defaultValue );\n      };\n    }\n\n    return attribute;\n  }\n});\n\n/**\n * Registers the object factory.\n */\nanim8.factory['default'] = anim8.factory['object'] = new anim8.ObjectFactory();\n\n/**\n * The Object namespace.\n * \n * @type {Object}\n */\nanim8.object = {};\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {Object|String} attr\n * @return {Object}\n */\nanim8.object.attribute = function(attr) \n{\n  if ( anim8.isObject( attr ) && anim8.isDefined( attr.defaultValue ) ) \n  {\n    return attr;\n  }\n  if ( anim8.isString( attr ) && attr in anim8.object.attribute ) \n  {\n    return anim8.object.attribute[ attr ];\n  }\n  \n  return anim8.object.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.object.attribute['default']                 = {defaultValue: 0};\n"],"sourceRoot":"/source/"}