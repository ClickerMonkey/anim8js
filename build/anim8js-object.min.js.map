{"version":3,"sources":["anim8js-core.js","anim8js-defer.js","anim8js-easing.js","anim8js-path.js","anim8js-spring.js","anim8js-event.js","anim8js-animation.js","anim8js-animator.js","anim8js-sequence.js","anim8js-color.js","anim8js-calculator.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-object.js"],"names":["m8","anim8","subjects","this","window","args","Array","prototype","slice","call","arguments","isArray","i","length","push","animators","arg","Animator","factory","factories","parseAnimators","noop","isDefined","x","isFunction","constructor","apply","isNumber","isString","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","copy","p","coalesce","a","b","c","d","delegate","functionName","returning","RETURN_THIS","RETURN_RESULTS","results","RETURN_FIRST","undefined","eventize","object","onListeners","$this","property","events","callback","context","split","on","once","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","max","trigger","time","regex","conversions","s","sec","min","ms","hr","parsed","exec","parseFloat","unit","Math","floor","constant","variable","subject","optional","factoryName","is","attribute","attr","defaultValue","easing","indexOf","pair","e","t","easingType","bezier","isEasingName","calculator","calc","parser","animation","options","Animation","parserName","defaults","duration","teasing","delay","sleep","repeat","each","iterator","filter","filterer","alive","remove","isAnimating","first","sequence","Sequence","pause","transition","play","resume","stop","finish","end","queue","restore","eventsFor","set","get","spring","unspring","springsFor","tweenTo","applyInitialState","running","live","animating","requestRun","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","add","animator","active","run","preupdate","update","finished","cleanup","Defer","methods","$factory","$push","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","out","inout","pong","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","scale","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","path","Path","type","reset","name","points","trues","hasTrue","compute","ps","reference","last","point","resolvePoint","DeltaPath","deltas","delta","ds","d0","d1","pd","p0","p1","interpolate","parse","PointPath","KeyframePath","easings","ea","keyframe","defaultEasing","CubicPath","p2","p3","d2","d3","i1","i3","adds","QuadraticPath","quadratic","CompiledPath","pointCount","create","index","compiled","Tween","start","tween","JumpPath","jump","Spring","rest","position","gravity","velocity","frame","dt","MAX_DT","starting","updateVelocity","updated","isEqual","EPSILON","resolveRest","BoxSpring","acceleration","sub","mul","box","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","distance","temp","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","totalTime","newInstance","EventInstance","state","pauseTime","pauseState","elapsed","catchup","isInfinite","progress","applyValue","getPoint","getFuture","fdelta","getDelta","getStart","getEnd","baseValue","value","isPaused","isDelayed","isSleeping","cycle","cycleCount","maxCycles","newState","timeRemaining","timeRemainingInChain","Number","POSITIVE_INFINITY","hasStarted","isFinished","hasStates","states","stateText","input","isSaved","mergeOptions","durations","delays","sleeps","repeats","newEvents","save","springs","attributes","wasFinished","placeSpring","placeEvent","trimEvents","createEvents","onAnimation","all","attrs","maxRemaining","transitionTime","transitionDelta","transitionEasing","e1","e2","transitionPath","transitionEvent","f","target","eventCount","ref","request","current","follow","objectsFor","objects","resulting","objectCount","hasEvents","hasSprings","DeferAnimator","maxDelay","delayOffset","color","r","g","parsers","parseComponent","parseFunction","v","vparsed","isNaN","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","toLowerCase","named","matches","parseInt","invalidColor","format","ca","cr","cg","cb","toString","defaultMethods","clone","amount","zero","distanceSq","isPristine","method","amountScale","ab","isValid","isZero","epsilon","y","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","z","dz","angle","da","dr","dg","db","number","values","deltaObject","calculators","initial","kframes","sort","from","half","to","times","maxTime","order","key","pathEasings","$animator"],"mappings":"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","file":"anim8js-object.min.js","sourcesContent":["\n/**\n * The core object of the framework. It extends Array and the method can be used \n * to construct an array of animators from subjects.\n * \n * @param {array} subjects\n */\nm8 = anim8 = function(subjects) \n{\n  if ( this === window ) \n  {\n\t\tvar args = Array.prototype.slice.call( arguments );\n\t\t\n\t\tif ( !anim8.isArray( subjects ) )\n\t\t{\n\t\t\tsubjects = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < args.length; i++)\n\t\t\t{\n\t\t\t\tsubjects.push( args[i] );\n\t\t\t}\n\t\t}\n\t\t\n    var animators = [];\n    \n    for (var i = 0; i < subjects.length; i++) \n    {\n      var arg = subjects[ i ];\n      \n      if ( arg instanceof anim8.Animator ) \n      {\n        animators.push( arg );\n      } \n      else\n      {\n\t\t\t\tvar factory = anim8.factories( arg );\n\t\t\t\t\n\t\t\t\tif (factory !== false)\n\t\t\t\t{\n          factory.parseAnimators( arg, animators );\n\t\t\t\t}\n      }\n    }\n\t\t\n\t\treturn new anim8( animators );\n  } \n  else \n  {\n    for (var i = 0; i < subjects.length; i++) \n    {\n      this.push( subjects[ i ] );\n    }\n  }\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n      \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t        eventListeners.length = 0;\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n */\nanim8.time = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(s|sec|min|ms|hr)?/;\n  \n  var conversions = {\n    s:    1000,\n    sec:  1000,\n    min:  1000 * 60,\n    ms:   1,\n    hr:   1000 * 60 * 60\n  };\n  \n  return function(time) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      return time;\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor(time);\n      }\n    }\n    \n    return false;\n  };\n  \n})();\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n\n/*****************************************************************\n  REGISTRIES\n******************************************************************/\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factories = function(subject, optional) \n{\n\tfor (var factoryName in anim8.factories) \n\t{\n\t\tvar factory = anim8.factories[ factoryName ];\n\t\t\t\n\t\tif ( factory.is( subject ) )\n\t\t{\t\t\t\n\t\t\treturn factory;\n\t\t}\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow 'No factory exists for subject ' + subject;\n};\n\n/* Attributes are the animatable properties of a subject\n\n  anim8.attribute[name] = {\n    // the default value for an attribute if none exists on the subject\n    defaultValue: 0,\n    // the name of the calculator this attribute requires for mathematical operations. default value: anim8.calculator.default\n    calculator: calculatorName,\n    // other values can be specified here that the respective factory might use\n    \"factory specific attributes\"\n  }\n*/\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.attribute = function(attr) \n{\n  if ( anim8.isObject(attr) && anim8.isDefined(attr.defaultValue) ) \n\t{\n    return attr;\n  }\n  if ( anim8.isString(attr) && attr in anim8.attribute ) \n\t{\n    return anim8.attribute[ attr ];\n  }\n\t\n  return anim8.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.attribute.default = {defaultValue: 0};\n \n/* Easings are functions that are magic\n\n  anim8.applier[name] = {\n    // array of properties required \n    properties: [],\n    // function to invoke each frame\n    apply: function(e, anim)\n  }\n*/\n\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, optional) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n\tif ( anim8.isObject(calc) )\n\t{\n\t\treturn calc;\n\t}\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n\tif ( anim8.isFunction( parser ) )\n\t{\n\t\treturn parser;\n\t}\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n */\nanim8.animation = function(animation, options)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) && animation in anim8.animation )\n\t{\n\t\treturn anim8.animation[ animation ];\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n\t\tvar events = [];\n\t\t\n\t\toptions = options || {};\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser( animation, options, events );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (events.length)\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, events );\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n  duration: 1000,\n  easing: 'ease',\n  teasing: 'linear',\n  delay: 0,\n  sleep: 0,\n  repeat: 1\n};\n\n\n/*****************************************************************\n  ANIM8 DEFINITION\n******************************************************************/\n\n/**\n * anim8 is an instance of Array. All array methods are supported.\n */\nanim8.prototype = new Array();\n\n/**\n * Invokes a callback for each element in the array.\n * \n * @param {function} iterator\n */\nanim8.prototype.each = function(iterator, context) \n{\n  for (var i = 0; i < this.length; i++) \n  {\n    if ( iterator.call( context || this[i], this[i], i ) === false ) \n    {\n      break;\n    }\n  }\n\t\n\treturn this;\n};\n\n/**\n * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n *\n * @param {function} filterer\n */\nanim8.prototype.filter = function(filterer)\n{\t\n\tvar alive = 0;\n\t\n\tfor (var i = 0; i < this.length; i++)\n\t{\n\t\tvar remove = filterer( this[i] );\n\t\t\n\t\tif ( !remove )\n\t\t{\n\t\t\tthis[alive++] = this[i];\n\t\t}\n\t}\n\t\n\tthis.length = alive;\n\t\n\treturn this;\n};\n\n/**\n * Returns true if any of the animators in the array are animating.\n */\nanim8.prototype.isAnimating = function() \n{\n  for (var i = 0; i < this.length; i++)\n  {\n    if ( this[i].isAnimating() )\n    {\n      return true;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Returns the first animator in the array.\n */\nanim8.prototype.first = function()\n{\n  return this[0];\n};\n\n/**\n * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n */\nanim8.prototype.sequence = function(delay, easing, animation, options)\n{\n  return new anim8.Sequence( this, delay, easing, animation, options );\n};\n\n/**\n * Adds the following methods to anim8 to make an array of Animators appear like a single Animator.\n */\nanim8.prototype.pause \t\t\t= anim8.delegate( 'pause', anim8.delegate.RETURN_THIS );\nanim8.prototype.transition \t= anim8.delegate( 'transition', anim8.delegate.RETURN_THIS );\nanim8.prototype.play \t\t\t\t= anim8.delegate( 'play', anim8.delegate.RETURN_THIS );\nanim8.prototype.resume \t\t\t= anim8.delegate( 'resume', anim8.delegate.RETURN_THIS );\nanim8.prototype.stop \t\t\t\t= anim8.delegate( 'stop', anim8.delegate.RETURN_THIS );\nanim8.prototype.finish \t\t\t= anim8.delegate( 'finish', anim8.delegate.RETURN_THIS );\nanim8.prototype.end   \t\t\t= anim8.delegate( 'end', anim8.delegate.RETURN_THIS );\nanim8.prototype.queue \t\t\t= anim8.delegate( 'queue', anim8.delegate.RETURN_THIS );\nanim8.prototype.restore\t\t\t= anim8.delegate( 'restore', anim8.delegate.RETURN_THIS );\nanim8.prototype.eventsFor   = anim8.delegate( 'eventsFor', anim8.delegate.RETURN_RESULTS );\nanim8.prototype.set         = anim8.delegate( 'set', anim8.delegate.RETURN_THIS );\nanim8.prototype.get         = anim8.delegate( 'get', anim8.delegate.RETURN_FIRST );\nanim8.prototype.spring \t\t\t= anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS );\nanim8.prototype.unspring \t\t= anim8.delegate( 'unspring', anim8.delegate.RETURN_THIS );\nanim8.prototype.springsFor \t= anim8.delegate( 'springsFor', anim8.delegate.RETURN_RESULTS );\nanim8.prototype.tweenTo   \t= anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS );\nanim8.prototype.applyInitialState = anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS );\n\nanim8.prototype.on\t\t\t    = anim8.delegate( 'on', anim8.delegate.RETURN_THIS );\nanim8.prototype.once\t\t    = anim8.delegate( 'once', anim8.delegate.RETURN_THIS );\nanim8.prototype.off\t\t\t    = anim8.delegate( 'off', anim8.delegate.RETURN_THIS );\nanim8.prototype.trigger     = anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS );\n\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = anim8();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n\t\tanim8.trigger('starting');\n\t\tanim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n\tanim8.trigger('begin');\n\t\n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate();\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n\t\t\tanimator.cleanup();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n\t\n\tanim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n\t\tanim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n\t\tanim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Easing & Easing Type functions\n */\n\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) {\n\t\treturn easing( x );\n\t};\n};\n\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) {\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } else {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\nanim8.easingType.pong = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x );\n\t  } else {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10/0)) * x * (10.0 / 3.0);\n};\n\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x))\n};\n\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\nanim8.easing.lasso = function(x)\n{\n  var x2 = x * x;\n\treturn (1.0 - Math.cos(x2 * x * 36.0) * (1.0 - x));\n};\n\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x) + 2.0) * 0.5;\n};\n\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\nanim8.easing.gentle = function(x)\n{\n  return  (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  \n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n\nanim8.easing.default      = anim8.easing.ease;","anim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.trues = this.hasTrue();\n  },\n  compute: function(out, delta) \n\t{\n    return out;\n  },\n  hasTrue: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if (ps[i] === true) \n      {\n        return true;\n      }\n    }\n    return false;\n  },\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  }\n};\n\n\n\n\n\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.DeltaPath.prototype = new anim8.Path();\n\nanim8.DeltaPath.prototype.compute = function(out, delta) \n{\n  var ds = this.deltas;\n  var end = ds.length - 2;\n  var i = 0;\n  while (ds[i + 1] < delta && i < end) i++;\n  var d0 = ds[i];\n  var d1 = ds[i + 1];\n  var pd = (delta - d0) / (d1 - d0);\n  var p0 = this.resolvePoint( i );\n  var p1 = this.resolvePoint( i + 1 );\n  \n  return this.calculator.interpolate( out, p0, p1, pd );\n};\n  \nanim8.DeltaPath.prototype.copy = function() \n{\n    return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n};\n\nanim8.path.delta = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n\n\n\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.PointPath.prototype = new anim8.Path();\n\nanim8.PointPath.prototype.compute = function(out, delta)\n{\n  return this.calculator.copy( out, this.resolvePoint( 0 ) );\n};\n  \nanim8.PointPath.prototype.copy = function() \n{\n  return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n};\n\nanim8.path.point = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n\n\n\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.KeyframePath.prototype = new anim8.Path();\n\nanim8.KeyframePath.prototype.compute = function(out, delta) \n{  \n  var ds = this.deltas;\n  var end = ds.length - 2;\n  \n  if ( delta < ds[0] ) {\n    return false;\n  }\n  \n  if ( delta > ds[ds.length - 1] ) {\n    return this.points[ds.length - 1];\n  }\n  \n  var i = 0;\n  while (ds[i + 1] < delta && i < end) i++;\n  var d0 = ds[i];\n  var d1 = ds[i + 1];\n  var pd = (delta - d0) / (d1 - d0);\n  var p0 = this.resolvePoint( i );\n  var p1 = this.resolvePoint( i + 1 );\n  var ea = this.easings[i];\n  \n  return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n};\n  \nanim8.KeyframePath.prototype.copy = function() \n{\n  return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n};\n\nanim8.path.keyframe = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, true );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n\n\n\n\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.CubicPath.prototype = new anim8.Path();\n\nanim8.CubicPath.prototype.compute = function(out, d1)\n{\n  var calc = this.calculator;\n  var d2 = d1 * d1;\n  var d3 = d1 * d2;\n  var i1 = 1 - d1;\n  var i2 = i1 * i1;\n  var i3 = i1 * i2;\n  \n  out = calc.copy( out, this.resolvePoint( 0 ) );\n  out = calc.scale( out, i3 );\n  out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n  out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n  out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n  \n  return out;\n};\n  \nanim8.CubicPath.prototype.copy = function() \n{\n  return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n};\n\nanim8.path.cubic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n\n\n\n\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.QuadraticPath.prototype = new anim8.Path();\n\nanim8.QuadraticPath.prototype.compute = function(out, d1)\n{\n  var calc = this.calculator;\n  var d2 = d1 * d1;\n  var i1 = 1 - d1;\n  var i2 = i1 * i1;\n  \n  out = calc.copy( out, this.resolvePoint( 0 ) );\n  out = calc.scale( out, i2 );\n  out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n  out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n    \n  return out;\n};\n  \nanim8.QuadraticPath.prototype.copy = function() \n{\n  return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n};\n\nanim8.path.quadratic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n\n\n\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.CompiledPath.prototype = new anim8.Path();\n\nanim8.CompiledPath.prototype.compute = function(out, delta)\n{\n  var a = Math.floor( delta * this.points.length );\n  var index = Math.min( a, this.points.length - 1 );\n  \n  return this.calculator.copy( out, this.resolvePoint( index ) );\n};\n  \nanim8.CompiledPath.prototype.copy = function() \n{\n  return new anim8.CompiledPath( this.name, this, this.points.length );\n};\n\nanim8.path.compiled = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n\n\n\n\n\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [start, end] );\n};\n\nanim8.Tween.prototype = new anim8.Path();\n\nanim8.Tween.prototype.compute = function(out, delta)\n{\n  return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n};\n  \nanim8.Tween.prototype.copy = function() \n{\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n};\n\nanim8.path.tween = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start ),\n    calc.parse( path.end )\n  );\n};\n\n\n\n\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.JumpPath.prototype = new anim8.Path();\n\nanim8.JumpPath.prototype.compute = function(out, delta)\n{\n  var a = Math.floor( delta * this.points.length );\n  var index = Math.min( a, this.points.length - 1 );\n  \n  return this.calculator.copy( out, this.resolvePoint( index ) );\n};\n  \nanim8.JumpPath.prototype.copy = function() \n{\n  return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n};\n\nanim8.path.jump = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.Spring.prototype = \n{\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  reset: function(attribute, calculator, rest, position, gravity)\n  {\n    var calc = anim8.calculator( calculator );\n    var a = anim8.attribute( attribute );\n    \n    this.attribute    = attribute;\n    this.calculator   = calc;\n    this.rest         = calc.parse( rest, a.defaultValue );\n    this.position     = calc.parse( position, a.defaultValue );\n    this.gravity      = calc.parse( gravity, calc.create() );\n    this.velocity     = calc.create();\n    this.time         = 0;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} now\n   * @param {object} frame\n   */\n  update: function(now, frame)\n  {\n    if (this.time === 0)\n    {\n      this.time = now;\n    }\n    \n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (now - this.time) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.copy( {}, this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    this.time = now;\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    \n  }\n};\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n\n\n\n/**\n * A box spring is a simple string\n */\nanim8.BoxSpring = function(attribute, calculator, position, rest, constant, gravity)\n{\n  var a = anim8.attribute( attribute );\n    \n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.acceleration   = this.calculator.create();\n  this.constant       = this.calculator.parse( constant, a.defaultValue );\n};\n\nanim8.BoxSpring.prototype = new anim8.Spring();\n\nanim8.BoxSpring.prototype.updateVelocity = function(dt)\n{\n  var calc = this.calculator;\n  \n  this.acceleration = calc.copy( this.acceleration, this.resolveRest() );\n  this.acceleration = calc.sub( this.acceleration, this.position );\n  this.acceleration = calc.mul( this.acceleration, this.constant );\n  this.velocity     = calc.adds( this.velocity, this.acceleration, dt );\n};\n\nanim8.spring.box = function(spring)\n{ \n  return new anim8.BoxSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.constant,\n    spring.gravity\n  );\n};\n\n\n\n\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, gravity)\n{\n  var a = anim8.attribute( attribute );\n  \n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.damping      = this.calculator.parse( damping, a.defaultValue );\n  this.stiffness    = this.calculator.parse( stiffness, a.defaultValue );\n  this.temp0        = this.calculator.create();\n  this.temp1        = this.calculator.create();\n};\n\nanim8.LinearSpring.prototype = new anim8.Spring();\n\nanim8.LinearSpring.prototype.updateVelocity = function(dt)\n{\n  // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n\t// position += velocity * elapsed.seconds;\n    \n  var calc = this.calculator;\n\n  this.temp1 = calc.copy( this.temp1, this.damping );\n  this.temp1 = calc.mul( this.temp1, this.velocity );\n  \n  this.temp0 = calc.copy( this.temp0, this.position );\n  this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n  this.temp0 = calc.mul( this.temp0, this.stiffness );\n  this.temp0 = calc.sub( this.temp0, this.temp1 );\n  \n  this.velocity = calc.adds( this.velocity, this.temp0, dt );\n};\n\nanim8.spring.linear = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};\n\n\n\n\n\n\n\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = this.calculator.create();\n};\n\nanim8.DistanceSpring.prototype = new anim8.Spring();\n\nanim8.DistanceSpring.prototype.updateVelocity = function(dt)\n{\n  // d = DISTANCE( position, rest )\n  // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n  // position += velocity * elapsed.seconds;\n\n  var calc = this.calculator;\n  var rest = this.resolveRest();\n  \n  var d = calc.distance( this.position, rest );\n  \n  this.temp = calc.copy( this.temp, this.position )\n  this.temp = calc.sub( this.temp, rest );\n  \n  if ( d !== 0 )\n  {\n  \tthis.temp = calc.scale( this.temp, 1.0 / d );\n  \tthis.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n  }\n\n  this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n  this.velocity = calc.adds( this.velocity, this.temp, dt );\n};\n\nanim8.spring.distance = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat) \n{\n  this.attribute \t= attribute;\n  this.path \t\t\t= path;\n  this.easing \t\t= anim8.easing( easing );\n  this.delay \t\t\t= anim8.coalesce( delay, anim8.defaults.delay );\n  this.duration \t= anim8.coalesce( duration, anim8.defaults.duration );\n  this.sleep \t\t\t= anim8.coalesce( sleep, anim8.defaults.sleep );\n  this.repeat \t\t= anim8.coalesce( repeat, anim8.defaults.repeat );\n};\n\nanim8.Event.prototype = \n{\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this );\n  }\n};\n\nanim8.EventInstance = function(event)\n{\n\tthis.event \t\t\t= event;\n\tthis.attribute \t= event.attribute;\n\tthis.path \t\t\t= event.path;\n\tthis.duration \t= event.duration;\n\tthis.easing \t\t= event.easing;\n\tthis.delay \t\t\t= event.delay;\n\tthis.sleep \t\t\t= event.sleep;\n\tthis.repeat \t\t= event.repeat;\n  this.state \t\t\t= anim8.EventState.CREATED;\n  this.time \t\t\t= 0;\n  this.pauseTime \t= 0;\n  this.pauseState = 0;\n\tthis.elapsed\t\t= 0;\n\tthis.next\t\t\t\t= null;\n};\n\nanim8.EventInstance.prototype = \n{\n  update: function(now, frame) \n\t{\n    var updated = false;\n    var elapsed = this.catchup( now, frame );\n    \n    if ( this.isAnimating() ) \n\t\t{\t\t\t\n      var delta = elapsed / this.duration;\n      \n      if (delta >= 1 || this.duration === 0)\n\t\t\t{\n        if (!this.isInfinite() && --this.repeat === 0) \n\t\t\t\t{\n          this.finish(frame);\n\t\t\t\t\t\n          return true;\n        } \n\t\t\t\telse \n\t\t\t\t{\n          if (this.sleep)\n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING ); \n            delta = 1;\n            \n            this.trigger('sleeping', this);\n          } \n\t\t\t\t\telse \n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.ANIMATING );\n            delta -= 1;\n          }\n        }\n      }\n      \n      this.applyValue( frame, frame[this.attribute], delta );\n      updated = true;\n    }\n    \n    return updated;\n  },\n  getPoint: function(delta)\n  {\n    return this.path.compute( this.path.calculator.create(), this.easing( delta ) );\n  },\n  getFuture: function(fdelta)\n  {\n    return this.getPoint( Math.min( 1.0, this.getDelta() + fdelta ) );\n  },\n  getDelta: function()\n  {\n    return this.isAnimating() ? Math.min( 1.0, (anim8.now() - this.time) / this.duration ) : 0.0;\n  },\n  getStart: function()\n  {\n    return this.getPoint( 0 );\n  },\n  getEnd: function() \n\t{\n    return this.getPoint( 1 );\n  },\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n        \n    if ( value !== false )\n    {\n      frame[this.attribute] = value;\n    }\n  },\n  catchup: function(now, frame)\n\t{\n    if ( this.isPaused() )\n    {\n      return;\n    }\n    \n    if ( this.state === anim8.EventState.CREATED )\n\t\t{\n      this.time = now;\n\t\t\t\n      if ( this.delay )\n\t\t\t{\n        this.state = anim8.EventState.DELAYED;\n        \n        this.trigger('delaying', this);\n      } \n\t\t\telse \n\t\t\t{\n        this.state = anim8.EventState.ANIMATING;\n      }\n    }\n    \n\t\tvar elapsed = now - this.time;\n    \n    if ( this.isDelayed() )\n\t\t{\n      if ( elapsed > this.delay ) \n\t\t\t{\n        this.trigger('delayed', this);\n        \n        elapsed = this.progress( elapsed, this.delay, anim8.EventState.ANIMATING );\n      }\n    }\n\t\t\n    if ( this.isSleeping() )\n\t\t{\n      if ( elapsed > this.sleep )\n\t\t\t{\n        this.trigger('slept', this);\n        \n        elapsed = this.progress( elapsed, this.sleep, anim8.EventState.ANIMATING );\n      }\n    }\n\t\t\n    if ( this.isAnimating() && this.duration )\n    {\n      var cycle = this.duration + this.sleep;\n      var cycleCount = Math.floor( ( elapsed + this.sleep ) / cycle );\n      var maxCycles = Math.min( this.repeat, cycleCount );\n            \n      elapsed = this.progress( elapsed, maxCycles * cycle, anim8.EventState.ANIMATING );\n      \n      if ( !this.isInfinite() )\n      { \n        if (maxCycles === this.repeat)\n        {\n          elapsed = this.duration;\n          this.repeat = 1;\n        }\n        else\n        {\n          this.repeat -= cycleCount;\n        }\n      }\n      \n      if ( elapsed > this.duration )\n      {\n        elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING );\n        \n        this.trigger('sleeping', this);\n      }\n    }\n\t\t\n\t\treturn elapsed;\n  },\n  progress: function(elapsed, time, newState) \n\t{\n    this.time += time;\n\t\tthis.elapsed += time;\n    this.state = newState;\n\t\t\n    return elapsed - time;\n  },\n  finish: function(frame) \n\t{\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n    \n    this.trigger('finish', this);\n  },\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n  timeRemaining: function() \n\t{    \n\t\treturn this.totalTime() - this.elapsed;\n  },\n  timeRemainingInChain: function()\n  {\n    return this.timeRemaining() + (this.next ? this.next.timeRemainingInChain() : 0);\n  },\n  queue: function(e)\n  {\n    if ( this.next )\n    {\n      this.next.queue( e );\n    }\n    else\n    {\n      this.next = e;\n    }\n  },\n  pause: function() \n\t{\n    if (this.state !== anim8.EventState.PAUSED) \n\t\t{\n      this.pauseTime = anim8.now();\n      this.pauseState = this.state;\n      this.state = anim8.EventState.PAUSED; \n    }\n  },\n  resume: function() \n\t{\n    if (this.state === anim8.EventState.PAUSED) \n\t\t{\n      this.time += anim8.now() - this.pauseTime;\n      this.state = this.pauseState; \n    }\n  },\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY);\n  },\n\thasStarted: function()\n\t{\n\t\treturn (this.state !== anim8.EventState.CREATED && this.state !== anim8.EventState.DELAYED);\n\t},\n  isAnimating: function() \n\t{\n    return (this.state === anim8.EventState.ANIMATING);\n  },\n  isFinished: function() \n\t{\n    return (this.state === anim8.EventState.FINISHED);\n  },\n  isDelayed: function() \n\t{\n    return (this.state === anim8.EventState.DELAYED);\n  },\n  isPaused: function() \n\t{\n    return (this.state === anim8.EventState.PAUSED);\n  },\n  isSleeping: function() \n\t{\n    return (this.state === anim8.EventState.SLEEPING);\n  },\n  hasStates: function(states) \n\t{\n    return (this.state & states) !== 0;\n  },\n  stateText: function() \n\t{\n    switch(this.state) \n    {\n      case anim8.EventState.CREATED:            return \"created\";\n      case anim8.EventState.DELAYED:            return \"delayed\";\n      case anim8.EventState.ANIMATING:          return \"animating\";\n      case anim8.EventState.SLEEPING:           return \"sleeping\";\n      case anim8.EventState.FINISHED:           return \"finished\";\n    }\n  },\n  hasTrue: function()\n  {\n    return this.path.trues;\n  }\n};\n\n/**\n * Adds the following event methods to EventInstances: on, once, off, trigger.\n */\nanim8.eventize( anim8.EventInstance.prototype );","\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the events that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate events, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} events\n */\nanim8.Animation = function(name, input, options, events)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.events = events;\n};\n\nanim8.Animation.prototype = \n{\n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  /**\n   * Merges options provided during play to override the defaults in the events.\n   *\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  mergeOptions: function(options, events)\n  { \n    // TODO move to parsers\n    \n    var durations = this.input.durations || {};\n    var easings   = this.input.easings || {};\n    var delays    = this.input.delays || {};\n    var sleeps    = this.input.sleeps || {};\n    var repeats   = this.input.repeats || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      \n      e.easing   = anim8.easing( anim8.coalesce( easings[attr], options.easing, this.options.easing, e.easing ) );\n      e.duration = anim8.coalesce( durations[attr], options.duration, this.options.duration, e.duration );\n      e.delay    = anim8.coalesce( delays[attr], options.delay, this.options.delay, e.delay );\n      e.sleep    = anim8.coalesce( sleeps[attr], options.sleep, this.options.sleep, e.sleep );\n      e.repeat   = anim8.coalesce( repeats[attr], options.repeat, this.options.repeat, e.repeat );\n    }\n  },\n  /**\n   * Generates an array of event instances from the events in this animation.\n   */\n  newEvents: function()\n  {\n    var e = [];\n    \n    for (var i = 0; i < this.events.length; i++)\n    {\n      e.push( this.events[i].newInstance() );\n    }\n    \n    return e;\n  }\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  \n  animation.name = name;\n  \n\tanim8.animation[name] = animation;\n};","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(e)\n\t{\n\t  this.e = e;\n\t  this.events = {};\n    this.springs = {};\n\t  this.attributes = {};\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    \n    return this;\n\t},\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  {\n    \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function()\n  {\n\t\tthis.trigger('preupdate');\n    \n    return this;\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    \n    this.finished = true;\n\t\t\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      this.updated[ attr ] = e.update( now, this.frame );\n      \n      this.finished = this.finished && e.isFinished();\n    }\n    \n    for (var attr in this.springs)\n    {\n      var s = this.springs[ attr ];\n      \n      this.updated[ attr ] = s.update( now, this.frame );\n      \n      this.finished = false;\n    }\n\t\n\t\tthis.trigger('update');\n    \n    return this;\n  },\n  \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function(s)\n  {\n    var attr = s.attribute;\n    \n    this.springs[ attr ] = s;\n    \n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = anim8.attribute( attr ).defaultValue;\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function(e)\n  {\n    var attr = e.attribute;\n    \n    this.events[ attr ] = e;\n    \n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = anim8.attribute( attr ).defaultValue;\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.e[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimEvents();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      var e = this.events[attr];\n      \n      if ( e.isFinished() )\n      {\n        if ( e.next )\n        {                    \n          this.placeEvent( e.next );\n          this.finished = false;\n        }\n        else\n        {\n          delete this.events[attr];\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tcleanup: function()\n\t{ \n    this.trigger('cleanup', this);\n\t},\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createEvents: function(animation, options)\n  {\n    options = options || {};\n    \n    var animation = anim8.animation( animation, options );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var events = animation.newEvents();\n    \n    if ( animation.isSaved() )\n    {\n      animation.mergeOptions( options, events );\n    }\n    \n    this.onAnimation( animation, options, events );\n    \n    return events;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeSpring( spring );\n    \n    anim8.add( this );\n    \n    return spring;\n  },\n  \n  /**\n   * Removes springs for the specified attributes. If no attributes are specified then all springs\n   * are removed. Attributes can be specified as an array of attribute names or a string with attribute\n   * names separated by a space.\n   *\n   * @param {string|Array} attributes\n   */\n  unspring: function(attributes)\n  {\n    return this.springsFor( attributes, function(s)\n    {\n      delete this.springs[ s.attribute ];\n    });\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   */\n\tplay: function(animation, options, all)\n\t{\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    var attrs = {};\n    \n    for (var i = 0; i < events.length; i++)\n    { \n      this.placeEvent( events[i] );\n      \n      attrs[ events[i].attribute ] = true;\n    }\n    \n    if ( all )\n    {\n      for (var attr in this.events)\n      {\n        if ( !(attr in attrs) )\n        {\n          this.events[ attr ].finish( this.frame );\n        }\n      }\n    }\n    \n    anim8.add( this );\n    \n\t\treturn this;\n\t},\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options)\n\t{\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n        \n    var maxRemaining = 0.0;\n    \n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      if ( !e.isInfinite() )\n      {\n        maxRemaining = Math.max( maxRemaining, this.events[attr].timeRemainingInChain() );  \n      }\n    }\n        \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      \n      if ( attr in this.events  && !this.events[ attr ].isInfinite() )\n      {    \n        e.delay += (maxRemaining - this.events[attr].timeRemainingInChain());\n        \n        this.events[attr].queue( e );\n      }\n      else\n      {\n        e.delay += maxRemaining;\n        \n        this.placeEvent( e );\n      }\n    }\n    \n    anim8.add( this );\n    \n\t\treturn this;\n\t},\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a quadratic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n\ttransition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all)\n\t{\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.copy( calc.create(), this.frame[attr] );\n          var p1 = e2.getFuture( transitionDelta );\n          var p2 = e1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, calc, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n    \n    anim8.add( this );\n    \n\t\treturn this;\n\t},\n\t\n\t/**\n\t * Tweens a single attribute or a map of attributes to target values.\n\t *\n\t * .tweenTo( attributeName, targetValue, duration, delay, easing, repeat, sleep )\n\t * .tweenTo( attributeMap, duration, delay, easing, repeat sleep )\n\t *\n\t * @param {object|string}\n\t * @param [any]\n\t * @param \n\t */\n\ttweenTo: function(input, a, b, c, d, e, f)\n\t{\n\t\tif ( anim8.isString( input ) )\n\t\t{\n\t\t\tvar attr = anim8.attribute( input );\n\t\t\tvar calc = anim8.calculator( attr.calculator );\n\t\t\tvar target = calc.parse( a, attr.defaultValue );\n\t\t\tvar duration = anim8.coalesce( b, anim8.defaults.duration );\n\t\t\tvar delay = anim8.coalesce( c, anim8.defaults.delay );\n\t\t\tvar easing = anim8.easing( d );\n\t\t\tvar repeat = anim8.coalesce( e, anim8.defaults.repeat );\n\t\t\tvar sleep = anim8.coalesce( f, anim8.defaults.sleep );\n\t\t\t\n\t\t\tvar path = new anim8.Tween( input, calc, this.frame[ input ], target );\n\t\t\tvar event = new anim8.Event( input, path, duration, easing, delay, sleep, repeat );\n\t\t\t\n\t\t\tthis.placeEvent( event.newInstance() );\n\t\t}\n\t\telse if ( anim8.isObject( input ) )\n\t\t{\n\t\t\tfor ( var attribute in input )\n\t\t\t{\n\t\t\t\tvar attr = anim8.attribute( input );\n\t\t\t\tvar calc = anim8.calculator( attr.calculator );\n\t\t\t\tvar target = calc.parse( input[ attribute ], attr.defaultValue );\n\t\t\t\tvar duration = anim8.coalesce( a, anim8.defaults.duration );\n\t\t\t\tvar delay = anim8.coalesce( b, anim8.defaults.delay );\n\t\t\t\tvar easing = anim8.easing( c );\n\t\t\t\tvar repeat = anim8.coalesce( d, anim8.defaults.repeat );\n\t\t\t\tvar sleep = anim8.coalesce( e, anim8.defaults.sleep );\n\t\t\t\t\n\t\t\t\tvar path = new anim8.Tween( input, calc, this.frame[ input ], target );\n\t\t\t\tvar event = new anim8.Event( input, path, duration, easing, delay, sleep, repeat );\n\t\t\t\t\n\t\t\t\tthis.placeEvent( event.newInstance() );\n\t\t\t}\n\t\t}\n\t\t\n\t\tanim8.add( this );\n\t\t\n\t\treturn this;\n\t},\n\t\n\t/**\n\t * Applies the initial state of all unstarted current events for the specified attributes immediately. \n\t * Attribute names can be given as an array or a space separated string. If no attributes are given all \n\t * attributes are assumed.\n\t *\n   * @param {string|array} attributes\n\t */\n\tapplyInitialState: function(attributes)\n\t{\n\t\tvar eventCount = this.eventsFor( attributes, function(event, attr) \n\t\t{\n\t\t\tif ( !event.hasStarted() )\n\t\t\t{\n\t\t\t\tevent.applyValue( this.frame, this.frame[ attr ], 0.0 );\n\t\t\t\t\n\t\t\t\tthis.updated[ attr ] = true;\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.apply();\n\t\t\n\t\treturn eventCount;\n\t},\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame )\n      {\n        return animator.frame[ attribute ];\n      }\n      \n      request[ attribute ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return anim8.attribute( attribute ).defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number] duration\n   * @param [number] delay\n   * @param [function|string] easing\n   * @param [number] repeat\n   * @param [number] sleep  \n   */\n  follow: function(attribute, path, duration, delay, easing, repeat, sleep)\n  {\n    var path = anim8.path( path );\n    \n    // attribute, path, duration, easing, delay, sleep, repeat) \n    var event = new anim8.Event( \n      attribute, \n      path, \n      anim8.coalesce( duration, anim8.defaults.duration ),\n      anim8.easing( easing ),\n      anim8.coalesce( delay, anim8.defaults.delay ),\n      anim8.coalesce( sleep, anim8.defaults.sleep ),\n      anim8.coalesce( repeat, anim8.defaults.repeat )\n    );\n    \n    this.placeEvent( event.newInstance() );\n    \n    anim8.add( this );\n    \n    return this;\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  objectsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n    \n    var resulting = !anim8.isFunction( callback );\n    var objectCount = 0;\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        \n        if ( attr in objects )\n        {\n          if ( resulting )\n          {\n            results.push( objects[attr] );\n          }\n          else\n          {\n            callback.call( this, objects[attr], attr ); \n            \n            objectCount++;\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      for (var attr in objects)\n      {\n        if ( resulting )\n        {\n          results.push( objects[attr] );\n        }\n        else\n        {\n          callback.call( this, objects[attr], attr ); \n          \n          objectCount++;\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : objectCount;\n  },\n  \n  /**\n   * Invokes the callback for each event for the given attributes.\n   * \n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\teventsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.events );\n\t},\n  \n  /**\n   * Invokes the callback for each spring for the given attributes.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\tspringsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.springs );\n\t},\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event, attr) \n\t\t{\n\t\t\tdelete this.events[ attr ];\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event) \n\t\t{\n\t\t\twhile (event.next)\n\t\t\t{\n\t\t\t\tevent = event.next;\n\t\t\t}\n\t\t\t\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator.\n   */\n  hasSprings: function()\n  {\n    for (var attr in this.springs)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator or animating events.\n   */\n  isAnimating: function()\n  {\n    if ( this.hasSprings() )\n    {\n      return true;\n    }\n    \n    for (var attr in this.events)\n    {\n      if ( this.events[attr].isAnimating() )\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n\t */\n\tdefer: function(eventType, event)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event );\n\t}\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, ['play', 'queue', 'transition', 'restore', 'set', 'resume', 'pause', 'finish', 'end', 'stop', 'follow', 'applyInitialState', 'tweenTo', 'spring', 'unspring', 'apply', 'placeSpring', 'placeEvent'] );\n","anim8.Sequence = function(animators, delay, easing, animation, options)\n{\n  this.animators = animators;\n  this.delay = delay;\n  this.easing = anim8.easing( easing );\n  this.animation = anim8.animation( animation, options );\n  this.options = options;\n};\n\nanim8.Sequence.prototype =\n{\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  createEvents: function(i)\n  {\n    var events = this.animation.newEvents();\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = 0; k < events.length; k++)\n    {\n      events[k].delay += delayOffset;\n    }\n    \n    return events;\n  },\n  \n  play: function()\n  {    \n    this.animators.each(function(animator, i)\n    {\n      var events = this.createEvents(i);\n      \n      for (var k = 0; k < events.length; k++)\n      {\n        animator.placeEvent( events[k] );\n      }\n            \n    }, this);\n    \n    return this.add();\n  },\n  \n  add: function()\n  {\n    this.animators.each(function(animator)\n    {\n      if ( !animator.active )\n      {\n        animator.active = true;\n        anim8.animating.push( animator ); \n      }\n    });\n    \n    this.animators.applyInitialState();\n    \n    if ( !anim8.running )\n    {\n      anim8.running = true;\n  \t\tanim8.trigger('starting');\n  \t\tanim8.requestRun( anim8.run );\n    }\n    \n    return this;\n  }\n  \n};","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return this.invalidColor;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.coalesce( color.a, 1.0 );\n  var cr = anim8.coalesce( color.r, 255 );\n  var cg = anim8.coalesce( color.g, 255 );\n  var cb = anim8.coalesce( color.b, 255 );\n  \n  if (ca === 1.0)\n  {\n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};\n\n/**\n * The color to return when input is invalid.\n */\nanim8.color.invalidColor = anim8.color.defaultValue =\n{\n  r: 255,\n  g: 255,\n  b: 255,\n  a: 1.0\n};","/**\n * Calculators perform math and basic operations for a specific data structure. Calculators have the following methods.\n *\n *  parse(x, default)\n *  copy(out, copy)\n * -clone(out)\n *  create()\n *  zero(out)\n * -scale(out, scale)\n * -add(out, amount)\n *  adds(out, amount, amountScale)\n * -sub(out, amount)\n *  mul(out, scale)\n * -interpolate(out, start, end, delta)\n *  distanceSq(a, b)\n *  isValid(a)\n *  isNaN(a)\n *  isZero(a, epsilon)\n *  isEqual(a, b, epsilon)\n */\n\n/**\n * Creates a calculator and fills in any missing methods where possible.\n * \n * @param {string} name\n * @param {object} methods\n */\nanim8.calculator.create = function(name, methods)\n{\n  var defaultMethods = \n\t{\n\t  clone: function(out) \n\t\t{\n\t    return this.copy( this.create(), out );\n\t  },\n\t  scale: function(out, scale) \n\t\t{\n\t    return this.adds( out, out, scale - 1 );\n\t  },\n\t  add: function(out, amount) \n\t\t{\n\t    return this.adds( out, amount, 1 );\n\t  },\n\t  sub: function(out, amount) \n\t\t{\n\t    return this.adds( out, amount, -1 );\n\t  },\n\t  interpolate: function(out, start, end, delta) \n\t\t{\n\t    out = this.zero( out );\n\t    out = this.adds( out, start, 1 - delta );\n\t    out = this.adds( out, end, delta );\n\t    return out;\n\t  },\n\t\tdistance: function(a, b)\n\t\t{\n\t\t\treturn Math.sqrt( this.distanceSq( a, b ) );\n\t\t},\n    isPristine: function(x)\n    {\n      return ( x === true || anim8.isFunction( x ) );\n    }\n\t};\n  \n  for (var method in defaultMethods)\n  {\n    if ( !(method in methods) )\n    {\n      methods[ method ] = defaultMethods[ method ];\n    }\n  }\n  \n\tanim8.calculator[name] = methods; \n};\n\n/**\n * A calculator for number primitives.\n */\nanim8.calculator.create('number', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\tif ( anim8.isString( x ) )\n\t\t{\n\t\t\tx = parseFloat( x );\n\t\t\t\n\t\t\tif (!isNaN(x))\n\t\t\t{\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn defaultValue;\n\t},\n  copy: function(out, copy) \n\t{\t\n    return copy;\n  },\n  create: function() \n\t{\n    return 0.0;\n  },\n  zero: function(out) \n\t{\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n\t{\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n\t{\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a - b) < epsilon;\n  }\n});\n\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.calculator.create('2d', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y )\n\t\t\t};\n\t\t}\n    if ( anim8.isString( x ) )\n    {\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.calculator.create('3d',\n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\t\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y ),\n\t\t\t\tz: anim8.coalesce( x.z, defaultValue.z )\n\t\t\t};\n\t\t}\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.calculator.create('quaternion', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y ),\n\t\t\t\tz: anim8.coalesce( x.z, defaultValue.z ),\n\t\t\t\tangle: anim8.coalesce( x.angle, defaultValue.angle )\n\t\t\t};\n\t\t}\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.calculator.create('rgb', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn anim8.color.parse( x );\n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.calculator.create('rgba', \n{\n\tparse: function(a, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( a ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: a,\n\t\t\t\tg: a,\n\t\t\t\tb: a,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn anim8.color.parse( a );\n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  }\n});\n\n/**\n * Sets the default calculator to the numeric calculator.\n */\nanim8.calculator.default = anim8.calculator.number;","anim8.parser.deltas = function( animation, options, events ) \n{\n\tvar deltas = animation.deltas;\n\tvar values = animation.values;\n\t\n\tif ( anim8.isArray( deltas ) )\n\t{\n\t\tvar deltaObject = {};\n\t\t\n\t\tfor (var attr in values)\n\t\t{\n\t\t\tdeltaObject[attr] = deltas;\t\n\t\t}\n\t\t\n\t\tdeltas = deltaObject;\n\t}\n\t\n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculators[attr] = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaults[attr] = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculators[attr] = anim8.calculator.default;\n\t\t\tdefaults[attr] = calculators[attr].create();\n    }\n\t\t\n\t\tfor (var k = 0; k < value.length; k++)\n\t\t{\n      if ( value[k] !== true )\n      {\n  \t\t\tvalue[k] = calculators[attr].parse( value[k], defaults[attr] ); \n      }\n\t\t}\n\t\t\n    var duration = anim8.coalesce( durations[attr], options.duration, anim8.defaults.duration );\n    var easing   = anim8.coalesce( easings[attr], options.easing, anim8.defaults.easing );\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep, anim8.defaults.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat, anim8.defaults.repeat );\n\n    var path     = new anim8.DeltaPath( attr, calculators[attr], values[attr], deltas[attr] );\n    var event    = new anim8.Event( attr, path, duration, anim8.easing( easing ), delay, sleep, repeat );\n    \n    events.push( event );\n\t}\n\t\n\treturn true;\n};","anim8.parser.final = function( animation, options, events ) \n{\n\tvar values = animation.final;\n\t\n  var delays = animation.delays || {};\n  var durations = animation.durations || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n\n    if ( value !== true )\n    {\n      value = calculator.parse( value, defaultValue ); \n    }\n\t\t\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    var duration = anim8.coalesce( durations[attr], options.duration, anim8.defaults.duration );\n    \n    var path     = new anim8.PointPath( attr, calculator, value );\n    var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1 );\n    \n    events.push( event );\n\t}\n\t\n\treturn true;\n};","anim8.parser.initial = function( animation, options, events ) \n{\n\tvar values = animation.initial;\n\t\n  var delays = animation.delays || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n    \n    if ( value !== true )\n    {\n      value = calculator.parse( value, defaultValue ); \n    }\n\t\t\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    \n    var path     = new anim8.PointPath( attr, calculator, value );\n    var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1 );\n    \n    events.push( event );\n\t}\n\t\n\treturn true;\n};","anim8.parser.keyframe = function( animation, options, events ) \n{\n  var kframes = animation.keyframe;\n  \n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n  \n  var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n  \n  var sort = false;\n  \n  var aliases = {\n    from:     '0',\n    start:    '0',\n    initial:  '0',\n    first:    '0',\n    half:     '50',\n    middle:   '50',\n    to:       '100',\n    end:      '100',\n    last:     '100'\n  };\n  \n  // split up comma delimited times\n  for (var time in kframes)\n  {\n    if ( time in aliases )\n    {\n      kframes[ aliases[time] ] = kframes[ time ];\n      \n      delete kframes[ time ];\n    }\n    else if ( time.indexOf(',') !== -1 )\n    {\n      var times = time.split(',');\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i]] = kframes[time];\n      }\n      \n      delete kframes[time];\n      \n      sort = true;\n    }\n  }\n  \n  var times = [];\n  \n  // validate times\n  var lastTime = 0.0;\n  var maxTime = 0.0;\n  \n  for (var time in kframes)\n  {\n    var t = parseFloat(time);\n    \n    if (isNaN(t))\n    {\n      delete kframes[time];\n    }\n    else\n    {\n      if (t < lastTime)\n      {\n        sort = true;\n      }\n      \n      times.push({\n        order: t,\n        key: time,\n        value: kframes[time]\n      });\n      \n      lastTime = t;\n      \n      maxTime = Math.max( maxTime, t );\n    }\n  }\n  \n  // sort if necessary\n  if (sort)\n  {\n    times.sort(function(a, b) {\n      return a.order - b.order;\n    });\n    \n    kframes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      kframes[times[i].key] = times[i].value;\n    }\n  }\n  \n  // split up into deltas and values\n  var deltas = {};\n  var values = {};\n  var calculators = {};\n\tvar defaults = {};\n  var pathEasings = {};\n  \n  for (var i = 0; i < times.length; i++)\n  {\n    var frame = times[i];\n    var easing = anim8.coalesce( frame.value.easing, options.easing );\n    \n    delete frame.value.easing;\n    \n    for (var attr in frame.value)\n    {\n      if ( !(attr in deltas) )\n      {\n        deltas[attr] = [];\n        values[attr] = [];\n        pathEasings[attr] = [];\n        \n        if (attr in anim8.attribute)\n        {\n          calculators[attr] = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\t\t\tdefaults[attr] = anim8.attribute[attr].defaultValue;\n        }\n        else\n        {\n          calculators[attr] = anim8.calculator.default;\n\t\t\t\t\tdefaults[attr] = calculators[attr].create();\n        }\n      }\n\t\t\t\n      deltas[attr].push( frame.order / maxTime );\n      values[attr].push( frame.value[attr] === true ? true : calculators[attr].parse( frame.value[attr], defaults[attr] ) );\n      pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[attr], easing ) ) );\n    }\n  }\n\t\n  // create events & paths\n  for (var attr in deltas)\n  {\n    var duration = anim8.coalesce( durations[attr], options.duration, anim8.defaults.duration );\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep, anim8.defaults.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat, anim8.defaults.repeat );\n\n    var path     = new anim8.KeyframePath( attr, calculators[attr], values[attr], deltas[attr], pathEasings[attr] );\n    var event    = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat );\n    \n    events.push( event );\n  }\n};","\n/**\n * The factory for Plain-Old-Javascript-Objects.\n */\nanim8.factories.object = \n{\n  is: function(subject) \n\t{\n    return anim8.isObject( subject ) && !anim8.isElement( subject );\n  },\n  \n  parseAnimators: function(from, animators) \n\t{\n    var animator = from.$animator;\n    \n    if ( !animator )\n    {\n      animator = new anim8.Animator( from );\n      animator.factory = this;\n      \n      from.$animator = animator;\n    }\n    \n    animators.push( animator );\n  }\n};"],"sourceRoot":"/source/"}