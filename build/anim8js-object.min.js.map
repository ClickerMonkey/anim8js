{"version":3,"sources":["anim8js-core.js","anim8js-defer.js","anim8js-easing.js","anim8js-color.js","anim8js-calculator.js","anim8js-path.js","anim8js-spring.js","anim8js-event.js","anim8js-animation.js","anim8js-animator.js","anim8js-animators.js","anim8js-loop.js","anim8js-sequence.js","anim8js-parser.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-parser-tween.js","anim8js-factory.js","anim8js-object.js"],"names":["m8","anim8","subject","Animator","factory","animatorFor","m8s","anim8s","subjects","animators","animatorsFor","Animators","isArray","i","length","animator","push","noop","isDefined","x","isFunction","constructor","call","apply","isNumber","isString","Array","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","log","size","prop","isEmpty","copy","p","coalesce","a","b","c","d","delegate","functionName","returning","RETURN_THIS","this","arguments","RETURN_RESULTS","results","RETURN_FIRST","undefined","RETURN_TRUE","eventize","object","onListeners","$this","property","events","callback","context","split","on","once","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","max","slice","trigger","time","regex","conversions","ms","cs","jiffy","third","s","sec","m","min","h","hr","returnOnInvalid","Math","floor","parsed","exec","parseFloat","unit","repeat","inf","Number","POSITIVE_INFINITY","infinity","infinite","twice","thrice","dozen","random","toLowerCase","parseInt","isNaN","defaults","delay","sleep","duration","constant","variable","attribute","attr","defaultValue","easing","teasing","Defer","methods","$factory","$push","prototype","$reset","eventable","previous","eventType","$eventable","$previous","$eventType","$event","$callback","$calls","$next","$isRoot","$register","$run","methodName","undefer","defer","next","indexOf","pair","e","t","easingType","bezier","isEasingName","optional","out","inout","pong","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","scale","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","color","r","g","parsers","parse","input","parseComponent","parseFunction","v","vparsed","window","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","named","matches","invalidColor","format","ca","cr","cg","cb","toString","calculator","calc","create","name","defaultMethods","clone","adds","add","amount","sub","interpolate","start","end","delta","zero","distance","distanceSq","isPristine","method","amountScale","mul","ab","isValid","isZero","epsilon","isEqual","y","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","z","dz","angle","da","dr","dg","db","number","path","Path","spring","type","reset","points","trues","hasTrue","compute","ps","reference","last","first","point","resolvePoint","DeltaPath","deltas","ds","d0","d1","pd","p0","p1","PointPath","KeyframePath","easings","ea","keyframe","defaultEasing","CubicPath","p2","p3","d2","d3","i1","i3","QuadraticPath","quadratic","CompiledPath","pointCount","index","compiled","Tween","tween","JumpPath","jump","Spring","rest","position","gravity","velocity","update","frame","dt","MAX_DT","starting","updateVelocity","updated","EPSILON","resolveRest","BoxSpring","acceleration","box","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","temp","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","hasInitialState","parser","totalTime","newInstance","EventInstance","getParser","state","pauseTime","pauseState","elapsed","catchup","isAnimating","isInfinite","finish","progress","applyValue","getPoint","getFuture","fdelta","getDelta","getStart","getEnd","baseValue","value","isPaused","isDelayed","isSleeping","cycle","cycleCount","maxCycles","newState","timeRemaining","timeRemainingInChain","finiteTimeRemaining","finiteTimeRemainingInChain","queue","pause","resume","hasStarted","isFinished","hasStates","states","stateText","animation","options","Animation","animations","parseAnimationString","parserName","save","part","substring","isSaved","newEvents","instances","cloneEvents","merge","extend","fn","springs","attributes","finished","active","restore","preupdate","wasFinished","placeSpring","placeEvent","trimEvents","activate","deactivate","destroy","createEvents","onAnimation","unspring","springsFor","play","all","playEvents","attrs","queueEvents","maxRemaining","transition","transitionTime","transitionDelta","transitionEasing","transitionEvents","e1","e2","transitionPath","transitionEvent","transitionInto","transitionFromDelta","transitionIntoDelta","transitionIntoEvents","tweenTo","target","tweenManyTo","targets","starts","ends","tweenMany","applyInitialState","eventCount","eventsFor","remaining","ref","request","current","get","follow","objectsFor","objects","resulting","stop","set","hasEvents","hasSprings","wrapper","DeferAnimator","fill","each","iterator","filter","filterer","alive","remove","reverse","mid","e0","animating","running","requestRun","run","sequence","Sequence","live","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","currTime","id","setTimeout","maxDelay","delayOffset","Parser","newOptions","oldOptions","durations","delays","sleeps","repeats","ParserDeltas","values","valueCount","deltaObject","ParserFinal","ParserInitial","initial","ParserKeyframe","kframes","sort","from","half","to","times","maxTime","order","key","calculators","pathEasings","ParserTween","factoryName","is","Factory","ObjectFactory","$animator"],"mappings":"AAOAA,GAAAC,MAAA,SAAAC,GAEA,GAAAA,YAAAD,OAAAE,SAEA,MAAAD,EAGA,IAAAE,GAAAH,MAAAG,QAAAF,GAAA,EAEA,OAAAE,MAAA,GAEA,EAGAA,EAAAC,YAAAH,IAQAI,IAAAC,OAAA,SAAAC,GAEA,GAAAJ,GAAAH,MAAAG,QAAAI,GAAA,GACAC,IAEA,IAAAL,KAAA,EAIA,MAFAA,GAAAM,aAAAF,EAAAC,GAEA,GAAAR,OAAAU,UAAAF,EAGAR,OAAAW,QAAAJ,KAEAA,GAAAA,GAKA,KAAA,GAFAC,MAEAI,EAAA,EAAAA,EAAAL,EAAAM,OAAAD,IACA,CACA,GAAAE,GAAAd,MAAAO,EAAAK,GAEAE,MAAA,GAEAN,EAAAO,KAAAD,GAIA,MAAA,IAAAd,OAAAU,UAAAF,IAUAR,MAAAgB,KAAA,aAKAhB,MAAAiB,UAAA,SAAAC,GAEA,MAAA,mBAAAA,IAMAlB,MAAAmB,WAAA,SAAAD,GAEA,SAAAA,GAAAA,EAAAE,aAAAF,EAAAG,MAAAH,EAAAI,QAMAtB,MAAAuB,SAAA,SAAAL,GAEA,MAAA,gBAAAA,IAMAlB,MAAAwB,SAAA,SAAAN,GAEA,MAAA,gBAAAA,IAOAlB,MAAAW,QAAA,SAAAO,GAEA,MAAAA,aAAAO,QAMAzB,MAAA0B,SAAA,SAAAR,GAEA,MAAA,gBAAAA,IAMAlB,MAAA2B,UAAA,SAAAT,GAEA,MAAA,gBAAAU,aAAAV,YAAAU,aACAV,GAAA,gBAAAA,IAAA,OAAAA,GAAA,IAAAA,EAAAW,UAAA,gBAAAX,GAAAY,UAMA9B,MAAA+B,IAAA,WAEA,MAAAC,MAAAD,IAAAC,KAAAD,IAAA,WAEA,OAAA,GAAAC,OAAAC,cAeAjC,MAAAkC,KAAA,EAUAlC,MAAAmC,KAAA,SAAAjB,GAEA,GAAAlB,MAAAW,QAAAO,IAAAlB,MAAAwB,SAAAN,GAEA,MAAAA,GAAAL,MAEA,IAAA,OAAAK,EAEA,MAAA,EAEA,IAAAlB,MAAA0B,SAAAR,GACA,CACA,GAAAiB,GAAA,CAEA,KAAA,GAAAC,KAAAlB,GAEAiB,GAGA,OAAAA,GAEA,MAAAnC,OAAAuB,SAAAL,GAEAA,EAGA,GAQAlB,MAAAqC,QAAA,SAAAnB,GAEA,GAAAlB,MAAAW,QAAAO,IAAAlB,MAAAwB,SAAAN,GAEA,MAAAA,GAAAL,OAAA,CAEA,IAAA,OAAAK,EAEA,OAAA,CAEA,IAAAlB,MAAA0B,SAAAR,GAEA,IAAA,GAAAkB,KAAAlB,GAEA,OAAA,MAGA,IAAAlB,MAAAuB,SAAAL,GAEA,MAAA,KAAAA,CAGA,QAAA,GAUAlB,MAAAsC,KAAA,SAAApB,GAEA,GAAAlB,MAAAW,QAAAO,GACA,CAEA,IAAA,GADAoB,MACA1B,EAAA,EAAAA,EAAAM,EAAAL,OAAAD,IAEA0B,EAAAvB,KAAAf,MAAAsC,KAAApB,EAAAN,IAEAM,GAAAoB,MAEA,IAAAtC,MAAA0B,SAAAR,GACA,CACA,GAAAoB,KACA,KAAA,GAAAC,KAAArB,GAEAoB,EAAAC,GAAAvC,MAAAsC,KAAApB,EAAAqB,GAEArB,GAAAoB,EAGA,MAAApB,IAMAlB,MAAAwC,SAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,MAAA5C,OAAAiB,UAAAwB,GAAAA,EACAzC,MAAAiB,UAAAyB,GAAAA,EACA1C,MAAAiB,UAAA0B,GAAAA,EACAC,GASA5C,MAAA6C,SAAA,SAAAC,EAAAC,GAEA,OAAAA,GAEA,IAAA/C,OAAA6C,SAAAG,YACA,MAAA,YAEA,IAAA,GAAApC,GAAA,EAAAA,EAAAqC,KAAApC,OAAAD,IAEAqC,KAAArC,GAAAkC,GAAAxB,MAAA2B,KAAArC,GAAAsC,UAGA,OAAAD,MAGA,KAAAjD,OAAA6C,SAAAM,eACA,MAAA,YAIA,IAAA,GAFAC,MAEAxC,EAAA,EAAAA,EAAAqC,KAAApC,OAAAD,IAEAwC,EAAArC,KAAAkC,KAAArC,GAAAkC,GAAAxB,MAAA2B,KAAArC,GAAAsC,WAGA,OAAAE,GAGA,KAAApD,OAAA6C,SAAAQ,aACA,MAAA,YAEA,MAAA,KAAAJ,KAAApC,OAAAyC,OAAAL,KAAA,GAAAH,GAAAxB,MAAA2B,KAAA,GAAAC,WAGA,KAAAlD,OAAA6C,SAAAU,YACA,MAAA,YAEA,IAAA,GAAA3C,GAAA,EAAAA,EAAAqC,KAAApC,OAAAD,IAEA,GAAAqC,KAAArC,GAAAkC,GAAAxB,MAAA2B,KAAArC,GAAAsC,WAEA,OAAA,CAIA,QAAA,GAKA,MAAAlD,OAAAgB,MAMAhB,MAAA6C,SAAAG,YAAA,OAKAhD,MAAA6C,SAAAM,eAAA,UAKAnD,MAAA6C,SAAAQ,aAAA,QAKArD,MAAA6C,SAAAU,YAAA,OAOAvD,MAAAwD,SAAA,SAAAC,GAEA,GAAAC,GAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAF,EAAAA,EAAAG,MAAA,KAEAhE,MAAAiB,UAAA0C,EAAAC,MAEAD,EAAAC,MAGA,KAAA,GAAAhD,GAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IAEAZ,MAAAiB,UAAA0C,EAAAC,GAAAC,EAAAjD,OAEA+C,EAAAC,GAAAC,EAAAjD,QAGA+C,EAAAC,GAAAC,EAAAjD,IAAAG,MAAA+C,EAAAC,GAAAJ,IAIAF,GAAAQ,GAAA,SAAAJ,EAAAC,EAAAC,GAEAL,EAAAT,KAAA,MAAAY,EAAAC,EAAAC,IAGAN,EAAAS,KAAA,SAAAL,EAAAC,EAAAC,GAEAL,EAAAT,KAAA,QAAAY,EAAAC,EAAAC,GAGA,IAAAI,GAAA,SAAAC,EAAAC,EAAAP,GAEA,GAAAM,GAAAC,IAAAD,GAIA,IAAA,GAFAE,GAAAF,EAAAC,GAEAE,EAAAD,EAAAzD,OAAA,EAAA0D,GAAA,EAAAA,IAEAD,EAAAC,GAAA,KAAAT,GAEAQ,EAAAE,OAAAD,EAAA,GAMAd,GAAAgB,IAAA,SAAAZ,GAEAA,EAAAA,EAAAG,MAAA,IAEA,KAAA,GAAApD,GAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IAEAuD,EAAAlB,KAAAyB,IAAAb,EAAAjD,IACAuD,EAAAlB,KAAA0B,MAAAd,EAAAjD,IAIA,IAAAgE,GAAA,SAAAR,EAAAC,EAAAQ,EAAAC,GAEA,GAAAV,GAAAC,IAAAD,GACA,CAIA,IAAA,GAHAE,GAAAF,EAAAC,GACAU,EAAAT,EAAAzD,OAEAD,EAAA,EAAAmE,EAAAnE,EAAAA,IACA,CACA,GAAAkD,GAAAQ,EAAA1D,EAEAkD,GAAA,GAAAzC,KAAAyC,EAAA,GAAAe,GAGAC,IAEAR,EAAAzD,SAAAkE,EAEAX,EAAAC,GAAAC,EAAAU,MAAAD,GAIAT,EAAAzD,OAAA,IAMA4C,GAAAwB,QAAA,SAAAZ,EAAAQ,GAEAD,EAAA3B,KAAAyB,IAAAL,EAAAQ,GAAA,GACAD,EAAA3B,KAAA0B,MAAAN,EAAAQ,GAAA,KAWA7E,MAAAkF,KAAA,WAEA,GAAAC,GAAA,gEAEAC,GACAC,GAAA,EACA1C,EAAA,IACA2C,GAAA,IACAC,MAAA,IAAA,GACAC,MAAA,IAAA,GACAC,EAAA,IACAC,IAAA,IACAC,EAAA,IACAC,IAAA,IACAC,EAAA,KACAC,GAAA,KAGA,OAAA,UAAAZ,EAAAa,GAEA,GAAA/F,MAAAuB,SAAA2D,GAGA,MAAAc,MAAAC,MAAAf,EAEA,IAAAlF,MAAAwB,SAAA0D,GACA,CACA,GAAAgB,GAAAf,EAAAgB,KAAAjB,EAEA,IAAAgB,EACA,CACA,GAAAhB,GAAAkB,WAAAF,EAAA,IACAG,EAAAH,EAAA,EAOA,OALAG,KAAAjB,KAEAF,GAAAE,EAAAiB,IAGAL,KAAAC,MAAAf,IAIA,MAAAlF,OAAAwC,SAAAuD,EAAA,OAWA/F,MAAAsG,OAAA,WAEA,GAAAlB,IACAmB,IAAAC,OAAAC,kBACAC,SAAAF,OAAAC,kBACAE,SAAAH,OAAAC,kBACAvC,KAAA,EACA0C,MAAA,EACAC,OAAA,EACAC,MAAA,GACAC,OAAA,EAGA,OAAA,UAAAT,EAAAP,GAEA,GAAA/F,MAAAuB,SAAA+E,GAEA,MAAAA,EAEA,IAAAtG,MAAAwB,SAAA8E,GACA,CAGA,GAFAA,EAAAA,EAAAU,cAEAV,IAAAlB,GAEA,MAAAA,GAAAkB,EAIA,IAAAJ,GAAAe,SAAAX,EAEA,KAAAY,MAAAhB,GAEA,MAAAA,GAKA,MAAAlG,OAAAwC,SAAAuD,EAAA/F,MAAAmH,SAAAb,YAYAtG,MAAAoH,MAAA,SAAAlC,GAEA,MAAAlF,OAAAkF,KAAAA,EAAAlF,MAAAmH,SAAAC,QAUApH,MAAAqH,MAAA,SAAAnC,GAEA,MAAAlF,OAAAkF,KAAAA,EAAAlF,MAAAmH,SAAAE,QAUArH,MAAAsH,SAAA,SAAApC,GAEA,MAAAlF,OAAAkF,KAAAA,EAAAlF,MAAAmH,SAAAG,WASAtH,MAAAuH,SAAA,SAAAC,GAEA,MAAA,YAEA,MAAAA,KA4BAxH,MAAAyH,UAAA,SAAAC,GAEA,MAAA1H,OAAA0B,SAAAgG,IAAA1H,MAAAiB,UAAAyG,EAAAC,cAEAD,EAEA1H,MAAAwB,SAAAkG,IAAAA,IAAA1H,OAAAyH,UAEAzH,MAAAyH,UAAAC,GAGA1H,MAAAyH,UAAAzH,YAMAA,MAAAyH,UAAAzH,YAAA2H,aAAA,GAKA3H,MAAAmH,UAMAG,SAAA,IAKAM,OAAA,OAMAC,QAAA,SAKAT,MAAA,EAKAC,MAAA,EAKAf,OAAA,GC/pBAtG,MAAA8H,MAAA,SAAA3H,EAAA4H,GAEA9E,KAAA+E,SAAA7H,CAEA,KAAA,GAAAS,GAAA,EAAAA,EAAAmH,EAAAlH,OAAAD,IAEAqC,KAAA8E,EAAAnH,IAAAqC,KAAAgF,MAAAF,EAAAnH,KAIAZ,MAAA8H,MAAAI,WAEAC,OAAA,SAAAC,EAAAC,EAAAC,EAAAjE,EAAAP,GAEAb,KAAAsF,WAAAH,EACAnF,KAAAuF,UAAAH,EACApF,KAAAwF,WAAAH,EACArF,KAAAyF,OAAArE,EACApB,KAAA0F,UAAA7E,EACAb,KAAA2F,UACA3F,KAAA4F,SAEA5F,KAAA6F,WAEA7F,KAAA8F,aAGAD,QAAA,WAEA,MAAA7F,MAAAsF,aAAAtF,KAAAuF,WAEAO,UAAA,WAEA9F,KAAAsF,WAAAtF,KAAAwF,YAAAxF,KAAAyF,OAAAzF,KAAA+F,KAAA/F,OAEAgF,MAAA,SAAAgB,GAEA,MAAA,YAIA,MAFAhG,MAAA2F,OAAA7H,MAAAkI,EAAA/F,YAEAD,OAGA+F,KAAA,WAEAhJ,MAAAmB,WAAA8B,KAAA0F,YAEA1F,KAAA0F,UAAAtH,KAAA4B,KAAAsF,WAAAtF,KAGA,KAAA,GAAArC,GAAA,EAAAA,EAAAqC,KAAA2F,OAAA/H,OAAAD,IACA,CACA,GAAAS,GAAA4B,KAAA2F,OAAAhI,EAEAqC,MAAAsF,WAAAlH,EAAA,IAAAC,MAAA2B,KAAAsF,WAAAlH,EAAA,IAGA,IAAA,GAAAkD,GAAA,EAAAA,EAAAtB,KAAA4F,MAAAhI,OAAA0D,IAEAtB,KAAA4F,MAAAtE,GAAAwE,aAGAG,QAAA,WAEA,MAAAjG,MAAAuF,WAEAW,MAAA,SAAAb,EAAAjE,EAAAP,GAEA,GAAAsF,GAAA,GAAAnG,MAAA+E,SAAA/E,KAAAsF,WAAAtF,KAAAqF,EAAAjE,EAAAP,EAIA,OAFAb,MAAA4F,MAAA9H,KAAAqI,GAEAA,IC9DApJ,MAAA4H,OAAA,SAAAA,EAAA7B,GAEA,GAAA/F,MAAAmB,WAAAyG,GAEA,MAAAA,EAEA,IAAA5H,MAAAwB,SAAAoG,GACA,CACA,GAAAA,IAAA5H,OAAA4H,OAEA,MAAA5H,OAAA4H,OAAAA,EAEA,IAAA,KAAAA,EAAAyB,QAAA,KACA,CACA,GAAAC,GAAA1B,EAAA5D,MAAA,KACAuF,EAAAD,EAAA,GACAE,EAAAF,EAAA,EAEA,IAAAA,EAAAzI,QAAA,GAAA0I,IAAAvJ,OAAA4H,QAAA4B,IAAAxJ,OAAAyJ,WAEA,MAAAzJ,OAAAyJ,WAAAD,GAAAxJ,MAAA4H,OAAA2B,KAIA,GAAAvJ,MAAAW,QAAAiH,IAAA,IAAAA,EAAA/G,QAAAb,MAAAuB,SAAAqG,EAAA,KAAA5H,MAAAuB,SAAAqG,EAAA,KAAA5H,MAAAuB,SAAAqG,EAAA,KAAA5H,MAAAuB,SAAAqG,EAAA,IAEA,MAAA5H,OAAA4H,OAAA8B,OAAApI,MAAA,KAAAsG,EAEA,KAAA5H,MAAAiB,UAAA2G,GAEA,MAAA5H,OAAA4H,OAAA5H,UAGA,IAAAA,MAAAiB,UAAA8E,GAEA,MAAAA,EAGA,MAAA6B,GAAA,0BASA5H,MAAA2J,aAAA,SAAA/B,GAEA,GAAAA,IAAA5H,OAAA4H,OAEA,OAAA,CAGA,IAAA0B,GAAA1B,EAAA5D,MAAA,KACAuF,EAAAD,EAAA,GACAE,EAAAF,EAAA,EAEA,OAAAA,GAAAzI,QAAA,GAAA0I,IAAAvJ,OAAA4H,QAAA4B,IAAAxJ,OAAAyJ,YAEA,GAGA,GAUAzJ,MAAAyJ,WAAA,SAAAA,EAAAG,GAEA,GAAA5J,MAAAmB,WAAAsI,GAEA,MAAAA,EAEA,IAAAzJ,MAAAwB,SAAAiI,IAAAA,IAAAzJ,OAAAyJ,WAEA,MAAAzJ,OAAAyJ,WAAAA,EAGA,IAAAG,EAEA,OAAA,CAGA,MAAAH,GAAA,+BAQAzJ,MAAAyJ,WAAAzJ,MAAA,SAAA4H,GAEA,MAAA,UAAA1G,GACA,MAAA0G,GAAA1G,KAIAlB,MAAAyJ,WAAAI,IAAA,SAAAjC,GAEA,MAAA,UAAA1G,GACA,MAAA,GAAA0G,EAAA,EAAA1G,KAIAlB,MAAAyJ,WAAAK,MAAA,SAAAlC,GAEA,MAAA,UAAA1G,GACA,MAAA,GAAAA,EACA,GAAA0G,EAAA,EAAA1G,GAEA,EAAA,GAAA0G,EAAA,EAAA,EAAA1G,KAKAlB,MAAAyJ,WAAAM,KAAA,SAAAnC,GAEA,MAAA,UAAA1G,GACA,MACA0G,GADA,GAAA1G,EACA,EAAAA,EAEA,EAAA,EAAAA,KAMAlB,MAAA4H,OAAAoC,OAAA,SAAA9I,GAEA,MAAAA,IAIAlB,MAAA4H,OAAAqC,KAAA,SAAA/I,GAEA,MAAAA,GAAAA,GAIAlB,MAAA4H,OAAAsC,KAAA,SAAAhJ,GAEA,GAAAN,GAAA,EAAAM,EACAiJ,EAAAvJ,EAAAA,EACAwJ,EAAAlJ,EAAAA,EACAmJ,EAAA,GAAAF,EAAAjJ,EAAA,EAAAN,EAAAwJ,EAAAA,EAAAlJ,EACAoJ,EAAA,EAAAH,EAAAA,CAEA,OAAAE,GAAAzJ,EAAA0J,EAAApJ,GAIAlB,MAAA4H,OAAA2C,MAAA,SAAArJ,GAEA,MAAAA,GAAAA,EAAAA,GAIAlB,MAAA4H,OAAA4C,QAAA,SAAAtJ,GAEA,GAAAkJ,GAAAlJ,EAAAA,CACA,OAAAkJ,GAAAA,GAIApK,MAAA4H,OAAA6C,QAAA,SAAAvJ,GAEA,GAAAkJ,GAAAlJ,EAAAA,CACA,OAAAkJ,GAAAA,EAAAlJ,GAIAlB,MAAA4H,OAAA8C,KAAA,SAAAxJ,GAEA,GAAAkJ,GAAAlJ,EAAAA,EACAyJ,EAAAP,EAAAlJ,CACA,OAAAyJ,GAAAP,EAAAlJ,GAIAlB,MAAA4H,OAAAgD,KAAA,SAAA1J,GAEA,MAAA8E,MAAA6E,IAAA,cAAA3J,IAIAlB,MAAA4H,OAAAkD,SAAA,SAAA5J,GAEA,OAAA,EAAA,GAAAA,GAAAA,GAAA,GAAA,IAIAlB,MAAA4H,OAAAmD,QAAA,SAAA7J,GAEA,GAAAkJ,GAAAlJ,EAAAA,EACAyJ,EAAAP,EAAAlJ,EACA8J,EAAAZ,GAAA,EAAAO,EAAAP,EAAA,EAAAlJ,EAAA,GACA+J,GAAAjF,KAAA6E,IAAA,cAAA3J,EACA,OAAA8J,GAAAC,GAIAjL,MAAA4H,OAAAsD,QAAA,SAAAhK,GAEA,MAAA8E,MAAAmF,IAAAjK,EAAA8E,KAAA6E,IAAA,cAAA3J,KAIAlB,MAAA4H,OAAAwD,MAAA,SAAAlK,GAEA,MAAA,GAAA8E,KAAAqF,IAAAnK,EAAAA,EAAAA,EAAA,KAAA,EAAAA,IAIAlB,MAAA4H,OAAA0D,WAAA,SAAApK,GAEA,GAAAkJ,GAAAlJ,EAAAA,CACA,OAAA,GAAA8E,KAAAmF,KAAA,EAAAf,GAAApE,KAAAqF,IAAAjB,EAAAlJ,EAAA,iBAIAlB,MAAA4H,OAAA2D,OAAA,SAAArK,GAEA,MAAA,GAAA8E,KAAAmF,KAAA,EAAAjK,GAAA8E,KAAAqF,IAAAnK,EAAAA,EAAA,iBAIAlB,MAAA4H,OAAA4D,YAAA,SAAAtK,GAEA,GAAAuK,GAAA,EAAAvK,CACA,OAAA,GAAA8E,KAAAmF,IAAAM,EAAAA,EAAAzF,KAAAqF,IAAAnK,EAAAA,EAAA,iBAIAlB,MAAA4H,OAAA8D,WAAA,SAAAxK,GAEA,GAAAuK,GAAA,EAAAvK,CACA,OAAA,GAAA8E,KAAAmF,IAAAM,EAAAA,EAAAzF,KAAAqF,IAAAnK,EAAAA,EAAA,KAIAlB,MAAA4H,OAAA+D,SAAA,SAAAzK,GAEA,MAAA8E,MAAAqF,IAAAnK,EAAAA,EAAA,IAAAA,GAAA,EAAAA,GAAAA,GAIAlB,MAAA4H,OAAAgE,KAAA,SAAA1K,GAEA,MAAA8E,MAAA4F,KAAA1K,IAIAlB,MAAA4H,OAAAiE,MAAA,SAAA3K,GAEA,GAAAN,GAAA,EAAAM,EACAiJ,EAAAvJ,EAAAA,CACA,OAAA,IAAA,EAAAuJ,EAAAA,EAAAjJ,IAIAlB,MAAA4H,OAAAkE,MAAA,SAAA5K,GAEA,MAAA,IAAA8E,KAAA8F,MAAA5K,GAAA,IAIAlB,MAAA4H,OAAAmE,UAAA,SAAA7K,GAEA,GAAA,GAAAA,EACA,MAAAA,IAAA,IAEA,IAAA0B,GAAA1B,EAAA,EACA,OAAA,IAAA0B,EAAAA,EAAA,KAAA,KAKA5C,MAAA4H,OAAAoE,SAAA,SAAA9K,GAEA,MAAA,GAAA8E,KAAA4F,KAAA,EAAA1K,EAAAA,IAIAlB,MAAA4H,OAAAqE,OAAA,SAAA/K,GAEA,MAAA,IAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAGAlB,MAAA4H,OAAA8B,OAAA,SAAAwC,EAAAC,EAAAC,EAAAC,GAIA,QAAAC,GAAAC,EAAAC,GAAA,MAAA,GAAA,EAAAA,EAAA,EAAAD,EACA,QAAAE,GAAAF,EAAAC,GAAA,MAAA,GAAAA,EAAA,EAAAD,EACA,QAAAG,GAAAH,GAAA,MAAA,GAAAA,EAGA,QAAAI,GAAAC,EAAAL,EAAAC,GACA,QAAAF,EAAAC,EAAAC,GAAAI,EAAAH,EAAAF,EAAAC,IAAAI,EAAAF,EAAAH,IAAAK,EAIA,QAAAC,GAAAD,EAAAL,EAAAC,GACA,MAAA,GAAAF,EAAAC,EAAAC,GAAAI,EAAAA,EAAA,EAAAH,EAAAF,EAAAC,GAAAI,EAAAF,EAAAH,GAGA,QAAAO,GAAAC,GAGA,IAAA,GADAC,GAAAD,EACAnM,EAAA,EAAA,EAAAA,IAAAA,EAAA,CACA,GAAAqM,GAAAJ,EAAAG,EAAAd,EAAAE,EACA,IAAA,GAAAa,EAAA,MAAAD,EACA,IAAAE,GAAAP,EAAAK,EAAAd,EAAAE,GAAAW,CACAC,IAAAE,EAAAD,EAEA,MAAAD,GAGA,MAAA,UAAA9L,GACA,MAAAyL,GAAAG,EAAA5L,GAAAiL,EAAAE,KAIArM,MAAA4H,OAAAuF,QAAAnN,MAAA4H,OAAAsC,KACAlK,MAAA4H,OAAAwF,UAAApN,MAAA4H,OAAAqC,KACAjK,MAAA4H,OAAAyF,WAAArN,MAAAyJ,WAAAI,IAAA7J,MAAA4H,OAAAqC,MACAjK,MAAA4H,OAAA0F,aAAAtN,MAAAyJ,WAAAK,MAAA9J,MAAA4H,OAAAqC,MACAjK,MAAA4H,OAAA2F,UAAAvN,MAAA4H,OAAAoC,OAEAhK,MAAA4H,OAAA5H,WAAAA,MAAA4H,OAAAsC,KCrVAlK,MAAAwN,MAAA,SAAAC,EAAAC,EAAAhL,EAAAD,GAEA,OACAgL,EAAAzN,MAAAwC,SAAAiL,EAAA,KACAC,EAAA1N,MAAAwC,SAAAkL,EAAA,KACAhL,EAAA1C,MAAAwC,SAAAE,EAAA,KACAD,EAAAzC,MAAAwC,SAAAC,EAAA,KAOAzC,MAAAwN,MAAAG,UAGAC,MAAA,SAAAC,GACA,GAAA,gBAAAA,GAAA,CACA,GAAAL,IACAC,EAAAxK,KAAA6K,eAAAD,EAAAJ,EAAA,WAAA,KACAC,EAAAzK,KAAA6K,eAAAD,EAAAH,EAAA,WAAA,KACAhL,EAAAO,KAAA6K,eAAAD,EAAAnL,EAAA,WAAA,KACAD,EAAAQ,KAAA6K,eAAAD,EAAApL,EAAA,aAAA,GAEA,OAAA+K,GAEA,OAAA,GAEAM,eAAA,SAAAnL,EAAAoL,EAAAhJ,GACA,GAAAyE,SAAA7G,GACAqL,EAAAjJ,CACA,IAAA,WAAAyE,EAAA,CACA,GAAAyE,GAAAC,OAAAH,GAAAvE,EAAA,GACAtC,OAAA+G,KACAD,EAAAC,OAGA,WAAAzE,IACAwE,EAAArL,EAQA,OANAqL,GAAAjJ,IACAiJ,EAAAjJ,GAEA,EAAAiJ,IACAA,EAAA,GAEAA,KAIAG,OACAC,aAAAX,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA4L,WAAAZ,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA6L,cAAAb,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA8L,MAAAd,EAAA,EAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA+L,YAAAf,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAgM,OAAAhB,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAiM,OAAAjB,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAkM,QAAAlB,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAmM,OAAAnB,EAAA,EAAAC,EAAA,EAAAhL,EAAA,EAAAD,EAAA,GACAoM,gBAAApB,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAqM,MAAArB,EAAA,EAAAC,EAAA,EAAAhL,EAAA,IAAAD,EAAA,GACAsM,YAAAtB,EAAA,IAAAC,EAAA,GAAAhL,EAAA,IAAAD,EAAA,GACAuM,OAAAvB,EAAA,IAAAC,EAAA,GAAAhL,EAAA,GAAAD,EAAA,GACAwM,WAAAxB,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAyM,WAAAzB,EAAA,GAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA0M,YAAA1B,EAAA,IAAAC,EAAA,IAAAhL,EAAA,EAAAD,EAAA,GACA2M,WAAA3B,EAAA,IAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACA4M,OAAA5B,EAAA,IAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACA6M,gBAAA7B,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA8M,UAAA9B,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA+M,SAAA/B,EAAA,IAAAC,EAAA,GAAAhL,EAAA,GAAAD,EAAA,GACAgN,MAAAhC,EAAA,EAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAiN,UAAAjC,EAAA,EAAAC,EAAA,EAAAhL,EAAA,IAAAD,EAAA,GACAkN,UAAAlC,EAAA,EAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAmN,eAAAnC,EAAA,IAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACAoN,UAAApC,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAqN,WAAArC,EAAA,EAAAC,EAAA,IAAAhL,EAAA,EAAAD,EAAA,GACAsN,WAAAtC,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAuN,aAAAvC,EAAA,IAAAC,EAAA,EAAAhL,EAAA,IAAAD,EAAA,GACAwN,gBAAAxC,EAAA,GAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACAyN,YAAAzC,EAAA,IAAAC,EAAA,IAAAhL,EAAA,EAAAD,EAAA,GACA0N,YAAA1C,EAAA,IAAAC,EAAA,GAAAhL,EAAA,IAAAD,EAAA,GACA2N,SAAA3C,EAAA,IAAAC,EAAA,EAAAhL,EAAA,EAAAD,EAAA,GACA4N,YAAA5C,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA6N,cAAA7C,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA8N,eAAA9C,EAAA,GAAAC,EAAA,GAAAhL,EAAA,IAAAD,EAAA,GACA+N,eAAA/C,EAAA,GAAAC,EAAA,GAAAhL,EAAA,GAAAD,EAAA,GACAgO,eAAAhD,EAAA,EAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAiO,YAAAjD,EAAA,IAAAC,EAAA,EAAAhL,EAAA,IAAAD,EAAA,GACAkO,UAAAlD,EAAA,IAAAC,EAAA,GAAAhL,EAAA,IAAAD,EAAA,GACAmO,aAAAnD,EAAA,EAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAoO,SAAApD,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAqO,YAAArD,EAAA,GAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAsO,UAAAtD,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAuO,WAAAvD,EAAA,IAAAC,EAAA,GAAAhL,EAAA,GAAAD,EAAA,GACAwO,aAAAxD,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAyO,aAAAzD,EAAA,GAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACA0O,SAAA1D,EAAA,IAAAC,EAAA,EAAAhL,EAAA,IAAAD,EAAA,GACA2O,WAAA3D,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA4O,YAAA5D,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA6O,MAAA7D,EAAA,IAAAC,EAAA,IAAAhL,EAAA,EAAAD,EAAA,GACA8O,WAAA9D,EAAA,IAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACA+O,MAAA/D,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAgP,OAAAhE,EAAA,EAAAC,EAAA,IAAAhL,EAAA,EAAAD,EAAA,GACAiP,aAAAjE,EAAA,IAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACAkP,UAAAlE,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAmP,SAAAnE,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAoP,WAAApE,EAAA,IAAAC,EAAA,GAAAhL,EAAA,GAAAD,EAAA,GACAqP,QAAArE,EAAA,GAAAC,EAAA,EAAAhL,EAAA,IAAAD,EAAA,GACAsP,OAAAtE,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAuP,OAAAvE,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAwP,UAAAxE,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAyP,eAAAzE,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA0P,WAAA1E,EAAA,IAAAC,EAAA,IAAAhL,EAAA,EAAAD,EAAA,GACA2P,cAAA3E,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA4P,WAAA5E,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA6P,YAAA7E,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA8P,WAAA9E,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA+P,sBAAA/E,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAgQ,WAAAhF,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAiQ,YAAAjF,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAkQ,WAAAlF,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAmQ,aAAAnF,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAoQ,eAAApF,EAAA,GAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAqQ,cAAArF,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAsQ,gBAAAtF,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAuQ,gBAAAvF,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAwQ,gBAAAxF,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAyQ,aAAAzF,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA0Q,MAAA1F,EAAA,EAAAC,EAAA,IAAAhL,EAAA,EAAAD,EAAA,GACA2Q,WAAA3F,EAAA,GAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACA4Q,OAAA5F,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA6Q,SAAA7F,EAAA,IAAAC,EAAA,EAAAhL,EAAA,IAAAD,EAAA,GACA8Q,QAAA9F,EAAA,IAAAC,EAAA,EAAAhL,EAAA,EAAAD,EAAA,GACA+Q,kBAAA/F,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAgR,YAAAhG,EAAA,EAAAC,EAAA,EAAAhL,EAAA,IAAAD,EAAA,GACAiR,cAAAjG,EAAA,IAAAC,EAAA,GAAAhL,EAAA,IAAAD,EAAA,GACAkR,cAAAlG,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAmR,gBAAAnG,EAAA,GAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAoR,iBAAApG,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAqR,mBAAArG,EAAA,EAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAsR,iBAAAtG,EAAA,GAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAuR,iBAAAvG,EAAA,IAAAC,EAAA,GAAAhL,EAAA,IAAAD,EAAA,GACAwR,cAAAxG,EAAA,GAAAC,EAAA,GAAAhL,EAAA,IAAAD,EAAA,GACAyR,WAAAzG,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA0R,WAAA1G,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA2R,UAAA3G,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA4R,aAAA5G,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA6R,MAAA7G,EAAA,EAAAC,EAAA,EAAAhL,EAAA,IAAAD,EAAA,GACA8R,SAAA9G,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA+R,OAAA/G,EAAA,IAAAC,EAAA,IAAAhL,EAAA,EAAAD,EAAA,GACAgS,WAAAhH,EAAA,IAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACAiS,QAAAjH,EAAA,IAAAC,EAAA,IAAAhL,EAAA,EAAAD,EAAA,GACAkS,WAAAlH,EAAA,IAAAC,EAAA,GAAAhL,EAAA,EAAAD,EAAA,GACAmS,QAAAnH,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAoS,eAAApH,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAqS,WAAArH,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAsS,eAAAtH,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAuS,eAAAvH,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAwS,YAAAxH,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAyS,WAAAzH,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA0S,MAAA1H,EAAA,IAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACA2S,MAAA3H,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA4S,MAAA5H,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA6S,YAAA7H,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA8S,QAAA9H,EAAA,IAAAC,EAAA,EAAAhL,EAAA,IAAAD,EAAA,GACA+S,KAAA/H,EAAA,IAAAC,EAAA,EAAAhL,EAAA,EAAAD,EAAA,GACAgT,WAAAhI,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAiT,WAAAjI,EAAA,GAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAkT,aAAAlI,EAAA,IAAAC,EAAA,GAAAhL,EAAA,GAAAD,EAAA,GACAmT,QAAAnI,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAoT,YAAApI,EAAA,IAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACAqT,UAAArI,EAAA,GAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,GACAsT,UAAAtI,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAuT,QAAAvI,EAAA,IAAAC,EAAA,GAAAhL,EAAA,GAAAD,EAAA,GACAwT,QAAAxI,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAyT,SAAAzI,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA0T,WAAA1I,EAAA,IAAAC,EAAA,GAAAhL,EAAA,IAAAD,EAAA,GACA2T,WAAA3I,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA4T,MAAA5I,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA6T,aAAA7I,EAAA,EAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA8T,WAAA9I,EAAA,GAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACA+T,KAAA/I,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAgU,MAAAhJ,EAAA,EAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAiU,SAAAjJ,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAkU,QAAAlJ,EAAA,IAAAC,EAAA,GAAAhL,EAAA,GAAAD,EAAA,GACAmU,WAAAnJ,EAAA,GAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAoU,QAAApJ,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAqU,WAAArJ,EAAA,IAAAC,EAAA,GAAAhL,EAAA,IAAAD,EAAA,GACAsU,OAAAtJ,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAuU,OAAAvJ,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAwU,YAAAxJ,EAAA,IAAAC,EAAA,IAAAhL,EAAA,IAAAD,EAAA,GACAyU,QAAAzJ,EAAA,IAAAC,EAAA,IAAAhL,EAAA,EAAAD,EAAA,GACA0U,aAAA1J,EAAA,IAAAC,EAAA,IAAAhL,EAAA,GAAAD,EAAA,IAEAmL,MAAA,SAAAC,GACA,GAAA,gBAAAA,KACAA,EAAAA,EAAA7G,cACA6G,IAAA5K,MAAAkL,OAAA,CACA,GAAAiJ,GAAAnU,KAAAkL,MAAAN,EACA,QACAJ,EAAA2J,EAAA3J,EACAC,EAAA0J,EAAA1J,EACAhL,EAAA0U,EAAA1U,EACAD,EAAA2U,EAAA3U,GAIA,OAAA,KAIA0C,MAAA,sCACAyI,MAAA,SAAAC,GACA,GAAAwJ,GAAApU,KAAAkC,MAAAgB,KAAA0H,EACA,OAAA,QAAAwJ,GAEA5J,EAAAxG,SAAAoQ,EAAA,GAAAA,EAAA,GAAA,IACA3J,EAAAzG,SAAAoQ,EAAA,GAAAA,EAAA,GAAA,IACA3U,EAAAuE,SAAAoQ,EAAA,GAAAA,EAAA,GAAA,IACA5U,EAAA,IAGA,KAIA0C,MAAA,+CACAyI,MAAA,SAAAC,GACA,GAAAwJ,GAAApU,KAAAkC,MAAAgB,KAAA0H,EACA,OAAA,QAAAwJ,GAEA5J,EAAAxG,SAAAoQ,EAAA,GAAA,IACA3J,EAAAzG,SAAAoQ,EAAA,GAAA,IACA3U,EAAAuE,SAAAoQ,EAAA,GAAA,IACA5U,EAAA,IAGA,KAIA0C,MAAA,sDACAyI,MAAA,SAAAC,GACA,GAAAwJ,GAAApU,KAAAkC,MAAAgB,KAAA0H,EACA,OAAA,QAAAwJ,GAEA5J,EAAAzH,KAAAJ,IAAA,IAAAqB,SAAAoQ,EAAA,GAAA,KACA3J,EAAA1H,KAAAJ,IAAA,IAAAqB,SAAAoQ,EAAA,GAAA,KACA3U,EAAAsD,KAAAJ,IAAA,IAAAqB,SAAAoQ,EAAA,GAAA,KACA5U,EAAA,IAGA,KAIA0C,MAAA,4EACAyI,MAAA,SAAAC,GACA,GAAAwJ,GAAApU,KAAAkC,MAAAgB,KAAA0H,EACA,OAAA,QAAAwJ,GAEA5J,EAAAzH,KAAAJ,IAAA,IAAAqB,SAAAoQ,EAAA,GAAA,KACA3J,EAAA1H,KAAAJ,IAAA,IAAAqB,SAAAoQ,EAAA,GAAA,KACA3U,EAAAsD,KAAAJ,IAAA,IAAAqB,SAAAoQ,EAAA,GAAA,KACA5U,EAAAuD,KAAAJ,IAAA,EAAAQ,WAAAiR,EAAA,OAGA,KAUArX,MAAAwN,MAAAI,MAAA,SAAAC,GAIA,IAAA,GAAAjN,IAFAb,GAAAyN,MAAAG,QAEA,GAAA/M,EAAAqC,KAAA0K,QAAA9M,OAAAD,IACA,CACA,GAAAsF,GAAAjD,KAAA0K,QAAA/M,GAAAgN,MAAAC,EAEA,IAAA3H,KAAA,EAEA,MAAAA,GAIA,MAAAjD,MAAAqU,cAQAtX,MAAAwN,MAAA+J,OAAA,SAAA/J,GAEA,GAAAgK,GAAAxX,MAAAwC,SAAAgL,EAAA/K,EAAA,GACAgV,EAAAzX,MAAAwC,SAAAgL,EAAAC,EAAA,KACAiK,EAAA1X,MAAAwC,SAAAgL,EAAAE,EAAA,KACAiK,EAAA3X,MAAAwC,SAAAgL,EAAA9K,EAAA,IAEA,IAAA,IAAA8U,EACA,CACA,GAAA/J,GAAAgK,EAAAG,SAAA,IACAlK,EAAAgK,EAAAE,SAAA,IACAlV,EAAAiV,EAAAC,SAAA,GAMA,OAJA,IAAAnK,EAAA5M,SAAA4M,EAAA,IAAAA,GACA,GAAAC,EAAA7M,SAAA6M,EAAA,IAAAA,GACA,GAAAhL,EAAA7B,SAAA6B,EAAA,IAAAA,GAEA,IAAA+K,EAAAC,EAAAhL,EAIA,MAAA,QAAA+U,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAAH,EAAA,KAOAxX,MAAAwN,MAAA8J,aAAAtX,MAAAwN,MAAA7F,cAEA8F,EAAA,IACAC,EAAA,IACAhL,EAAA,IACAD,EAAA,GCxTAzC,MAAA6X,WAAA,SAAAC,GAEA,MAAA9X,OAAA0B,SAAAoW,GAEAA,EAEA9X,MAAAwB,SAAAsW,IAAAA,IAAA9X,OAAA6X,WAEA7X,MAAA6X,WAAAC,GAGA9X,MAAA6X,WAAA7X,YASAA,MAAA6X,WAAAE,OAAA,SAAAC,EAAAjQ,GAEA,GAAAkQ,IAEAC,MAAA,SAAArO,GAEA,MAAA5G,MAAAX,KAAAW,KAAA8U,SAAAlO,IAEAmB,MAAA,SAAAnB,EAAAmB,GAEA,MAAA/H,MAAAkV,KAAAtO,EAAAA,EAAAmB,EAAA,IAEAoN,IAAA,SAAAvO,EAAAwO,GAEA,MAAApV,MAAAkV,KAAAtO,EAAAwO,EAAA,IAEAC,IAAA,SAAAzO,EAAAwO,GAEA,MAAApV,MAAAkV,KAAAtO,EAAAwO,EAAA,KAEAE,YAAA,SAAA1O,EAAA2O,EAAAC,EAAAC,GAKA,MAHA7O,GAAA5G,KAAA0V,KAAA9O,GACAA,EAAA5G,KAAAkV,KAAAtO,EAAA2O,EAAA,EAAAE,GACA7O,EAAA5G,KAAAkV,KAAAtO,EAAA4O,EAAAC,IAGAE,SAAA,SAAAnW,EAAAC,GAEA,MAAAsD,MAAA4F,KAAA3I,KAAA4V,WAAApW,EAAAC,KAEAoW,WAAA,SAAA5X,GAEA,MAAAA,MAAA,GAAAlB,MAAAmB,WAAAD,IAIA,KAAA,GAAA6X,KAAAd,GAEAc,IAAAhR,KAEAA,EAAAgR,GAAAd,EAAAc,GAIA/Y,OAAA6X,WAAAG,GAAAjQ,GAMA/H,MAAA6X,WAAAE,OAAA,UAEAnK,MAAA,SAAA1M,EAAAyG,GAEA,MAAA1E,MAAA6V,WAAA5X,GAEAA,EAEAlB,MAAAuB,SAAAL,GAEAA,EAEAlB,MAAAwB,SAAAN,KAEAA,EAAAkF,WAAAlF,IAEAgG,MAAAhG,IAEAA,EAIAyG,GAEArF,KAAA,SAAAuH,EAAAvH,GAEA,MAAAA,IAEAyV,OAAA,WAEA,MAAA,IAEAY,KAAA,WAEA,MAAA,IAEAR,KAAA,SAAAtO,EAAAwO,EAAAW,GAEA,MAAAnP,IAAAwO,EAAAW,GAEAC,IAAA,SAAApP,EAAAmB,GAEA,MAAAnB,IAAAmB,GAEA6N,WAAA,SAAApW,EAAAC,GAEA,GAAAwW,GAAAzW,EAAAC,CACA,OAAAwW,GAAAA,GAEAC,QAAA,SAAA1W,GAEA,MAAA,gBAAAA,IAEAyE,MAAA,SAAAzE,GAEA,MAAAyE,OAAAzE,IAEA2W,OAAA,SAAA3W,EAAA4W,GAEA,MAAArT,MAAAmF,IAAA1I,GAAA4W,GAEAC,QAAA,SAAA7W,EAAAC,EAAA2W,GAEA,MAAArT,MAAAmF,IAAA1I,EAAAC,GAAA2W,KAOArZ,MAAA6X,WAAAE,OAAA,MAEAnK,MAAA,SAAA1M,EAAAyG,GAEA,GAAA1E,KAAA6V,WAAA5X,GAEA,MAAAA,EAEA,IAAAlB,MAAAuB,SAAAL,GAEA,OACAA,EAAAA,EACAqY,EAAArY,EAGA,IAAAlB,MAAA0B,SAAAR,GAEA,OACAA,EAAAlB,MAAAwC,SAAAtB,EAAAA,EAAAyG,EAAAzG,GACAqY,EAAAvZ,MAAAwC,SAAAtB,EAAAqY,EAAA5R,EAAA4R,GAGA,IAAAvZ,MAAAwB,SAAAN,GACA,CACA,GAAAsY,IACAC,KAAA,EACAC,MAAA,IACAC,OAAA,GACAC,OAAA,GACAC,IAAA,EACAC,OAAA,IAGA,IAAA,KAAA5Y,EAAAmI,QAAA,KACA,CACA,GAAA0Q,GAAA3T,WAAAlF,EAEA,KAAAgG,MAAA6S,IAAA7Y,IAAAsY,GAEA,OACAtY,EAAAA,IAAAsY,GAAAA,EAAAtY,GAAA6Y,EACAR,EAAArY,IAAAsY,GAAAA,EAAAtY,GAAA6Y,OAKA,CACA,GAAAzQ,GAAApI,EAAA8C,MAAA,KACA+V,EAAA3T,WAAAkD,EAAA,IACA0Q,EAAA5T,WAAAkD,EAAA,GAEA,MAAApC,MAAA6S,IAAAzQ,EAAA,IAAAkQ,OAAAtS,MAAA8S,IAAA1Q,EAAA,IAAAkQ,IAEA,OACAtY,EAAAoI,EAAA,IAAAkQ,GAAAA,EAAAlQ,EAAA,IAAAyQ,EACAR,EAAAjQ,EAAA,IAAAkQ,GAAAA,EAAAlQ,EAAA,IAAA0Q,IAMA,MAAAha,OAAAiB,UAAA0G,GAEA1E,KAAAiV,MAAAvQ,IAGA,GAEArF,KAAA,SAAAuH,EAAAvH,GAIA,MAFAuH,GAAA3I,EAAAoB,EAAApB,EACA2I,EAAA0P,EAAAjX,EAAAiX,EACA1P,GAEAkO,OAAA,WAEA,OAAA7W,EAAA,EAAAqY,EAAA,IAEAZ,KAAA,SAAA9O,GAIA,MAFAA,GAAA3I,EAAA,EACA2I,EAAA0P,EAAA,EACA1P,GAEAsO,KAAA,SAAAtO,EAAAwO,EAAAW,GAIA,MAFAnP,GAAA3I,GAAAmX,EAAAnX,EAAA8X,EACAnP,EAAA0P,GAAAlB,EAAAkB,EAAAP,EACAnP,GAEAoP,IAAA,SAAApP,EAAAmB,GAIA,MAFAnB,GAAA3I,GAAA8J,EAAA9J,EACA2I,EAAA0P,GAAAvO,EAAAuO,EACA1P,GAEAgP,WAAA,SAAApW,EAAAC,GAEA,GAAAuX,GAAAxX,EAAAvB,EAAAwB,EAAAxB,EACAgZ,EAAAzX,EAAA8W,EAAA7W,EAAA6W,CACA,OAAAU,GAAAA,EAAAC,EAAAA,GAEAf,QAAA,SAAA1W,GAEA,MAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,IAEAyE,MAAA,SAAAzE,GAEA,MAAAyE,OAAAzE,EAAAvB,IAAAgG,MAAAzE,EAAA8W,IAEAH,OAAA,SAAA3W,EAAA4W,GAEA,MAAArT,MAAAmF,IAAA1I,EAAAvB,GAAAmY,GACArT,KAAAmF,IAAA1I,EAAA8W,GAAAF,GAEAC,QAAA,SAAA7W,EAAAC,EAAA2W,GAEA,MAAArT,MAAAmF,IAAA1I,EAAAvB,EAAAwB,EAAAxB,GAAAmY,GACArT,KAAAmF,IAAA1I,EAAA8W,EAAA7W,EAAA6W,GAAAF,KAOArZ,MAAA6X,WAAAE,OAAA,MAEAnK,MAAA,SAAA1M,EAAAyG,GAEA,MAAA1E,MAAA6V,WAAA5X,GAEAA,EAEAlB,MAAAuB,SAAAL,IAGAA,EAAAA,EACAqY,EAAArY,EACAiZ,EAAAjZ,GAGAlB,MAAA0B,SAAAR,IAGAA,EAAAlB,MAAAwC,SAAAtB,EAAAA,EAAAyG,EAAAzG,GACAqY,EAAAvZ,MAAAwC,SAAAtB,EAAAqY,EAAA5R,EAAA4R,GACAY,EAAAna,MAAAwC,SAAAtB,EAAAiZ,EAAAxS,EAAAwS,IAIAna,MAAAiB,UAAA0G,GAEA1E,KAAAiV,MAAAvQ,IAGA,GAEArF,KAAA,SAAAuH,EAAAvH,GAKA,MAHAuH,GAAA3I,EAAAoB,EAAApB,EACA2I,EAAA0P,EAAAjX,EAAAiX,EACA1P,EAAAsQ,EAAA7X,EAAA6X,EACAtQ,GAEAkO,OAAA,WAEA,OAAA7W,EAAA,EAAAqY,EAAA,EAAAY,EAAA,IAEAxB,KAAA,SAAA9O,GAKA,MAHAA,GAAA3I,EAAA,EACA2I,EAAA0P,EAAA,EACA1P,EAAAsQ,EAAA,EACAtQ,GAEAsO,KAAA,SAAAtO,EAAAwO,EAAAW,GAKA,MAHAnP,GAAA3I,GAAAmX,EAAAnX,EAAA8X,EACAnP,EAAA0P,GAAAlB,EAAAkB,EAAAP,EACAnP,EAAAsQ,GAAA9B,EAAA8B,EAAAnB,EACAnP,GAEAoP,IAAA,SAAApP,EAAAmB,GAKA,MAHAnB,GAAA3I,GAAA8J,EAAA9J,EACA2I,EAAA0P,GAAAvO,EAAAuO,EACA1P,EAAAsQ,GAAAnP,EAAAmP,EACAtQ,GAEAgP,WAAA,SAAApW,EAAAC,GAEA,GAAAuX,GAAAxX,EAAAvB,EAAAwB,EAAAxB,EACAgZ,EAAAzX,EAAA8W,EAAA7W,EAAA6W,EACAa,EAAA3X,EAAA0X,EAAAzX,EAAAyX,CACA,OAAAF,GAAAA,EAAAC,EAAAA,EAAAE,EAAAA,GAEAjB,QAAA,SAAA1W,GAEA,MAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,IAAA,KAAAA,IAEAyE,MAAA,SAAAzE,GAEA,MAAAyE,OAAAzE,EAAAvB,IAAAgG,MAAAzE,EAAA8W,IAAArS,MAAAzE,EAAA0X,IAEAf,OAAA,SAAA3W,EAAA4W,GAEA,MAAArT,MAAAmF,IAAA1I,EAAAvB,GAAAmY,GACArT,KAAAmF,IAAA1I,EAAA8W,GAAAF,GAAArT,KAAAmF,IAAA1I,EAAA0X,GAAAd,GAEAC,QAAA,SAAA7W,EAAAC,EAAA2W,GAEA,MAAArT,MAAAmF,IAAA1I,EAAAvB,EAAAwB,EAAAxB,GAAAmY,GACArT,KAAAmF,IAAA1I,EAAA8W,EAAA7W,EAAA6W,GAAAF,GACArT,KAAAmF,IAAA1I,EAAA0X,EAAAzX,EAAAyX,GAAAd,KAOArZ,MAAA6X,WAAAE,OAAA,cAEAnK,MAAA,SAAA1M,EAAAyG,GAEA,MAAA1E,MAAA6V,WAAA5X,GAEAA,EAEAlB,MAAAuB,SAAAL,IAGAA,EAAA,EACAqY,EAAA,EACAY,EAAA,EACAE,MAAAnZ,GAGAlB,MAAA0B,SAAAR,IAGAA,EAAAlB,MAAAwC,SAAAtB,EAAAA,EAAAyG,EAAAzG,GACAqY,EAAAvZ,MAAAwC,SAAAtB,EAAAqY,EAAA5R,EAAA4R,GACAY,EAAAna,MAAAwC,SAAAtB,EAAAiZ,EAAAxS,EAAAwS,GACAE,MAAAra,MAAAwC,SAAAtB,EAAAmZ,MAAA1S,EAAA0S,QAIAra,MAAAiB,UAAA0G,GAEA1E,KAAAiV,MAAAvQ,IAGA,GAEArF,KAAA,SAAAuH,EAAAvH,GAMA,MAJAuH,GAAA3I,EAAAoB,EAAApB,EACA2I,EAAA0P,EAAAjX,EAAAiX,EACA1P,EAAAsQ,EAAA7X,EAAA6X,EACAtQ,EAAAwQ,MAAA/X,EAAA+X,MACAxQ,GAEAkO,OAAA,WAEA,OAAA7W,EAAA,EAAAqY,EAAA,EAAAY,EAAA,EAAAE,MAAA,IAEA1B,KAAA,SAAA9O,GAMA,MAJAA,GAAA3I,EAAA,EACA2I,EAAA0P,EAAA,EACA1P,EAAAsQ,EAAA,EACAtQ,EAAAwQ,MAAA,EACAxQ,GAEAsO,KAAA,SAAAtO,EAAAwO,EAAAW,GAMA,MAJAnP,GAAA3I,GAAAmX,EAAAnX,EAAA8X,EACAnP,EAAA0P,GAAAlB,EAAAkB,EAAAP,EACAnP,EAAAsQ,GAAA9B,EAAA8B,EAAAnB,EACAnP,EAAAwQ,OAAAhC,EAAAgC,MAAArB,EACAnP,GAEAoP,IAAA,SAAApP,EAAAmB,GAMA,MAJAnB,GAAA3I,GAAA8J,EAAA9J,EACA2I,EAAA0P,GAAAvO,EAAAuO,EACA1P,EAAAsQ,GAAAnP,EAAAmP,EACAtQ,EAAAwQ,OAAArP,EAAAqP,MACAxQ,GAEAgP,WAAA,SAAApW,EAAAC,GAEA,GAAAuX,GAAAxX,EAAAvB,EAAAwB,EAAAxB,EACAgZ,EAAAzX,EAAA8W,EAAA7W,EAAA6W,EACAa,EAAA3X,EAAA0X,EAAAzX,EAAAyX,EACAG,EAAA7X,EAAA4X,MAAA3X,EAAA2X,KACA,OAAAJ,GAAAA,EAAAC,EAAAA,EAAAE,EAAAA,EAAAE,EAAAA,GAEAnB,QAAA,SAAA1W,GAEA,MAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,IAAA,KAAAA,IAAA,SAAAA,IAEAyE,MAAA,SAAAzE,GAEA,MAAAyE,OAAAzE,EAAAvB,IAAAgG,MAAAzE,EAAA8W,IAAArS,MAAAzE,EAAA0X,IAAAjT,MAAAzE,EAAA4X,QAEAjB,OAAA,SAAA3W,EAAA4W,GAEA,MAAArT,MAAAmF,IAAA1I,EAAAvB,GAAAmY,GACArT,KAAAmF,IAAA1I,EAAA8W,GAAAF,GACArT,KAAAmF,IAAA1I,EAAA0X,GAAAd,GACArT,KAAAmF,IAAA1I,EAAA4X,OAAAhB,GAEAC,QAAA,SAAA7W,EAAAC,EAAA2W,GAEA,MAAArT,MAAAmF,IAAA1I,EAAAvB,EAAAwB,EAAAxB,GAAAmY,GACArT,KAAAmF,IAAA1I,EAAA8W,EAAA7W,EAAA6W,GAAAF,GACArT,KAAAmF,IAAA1I,EAAA0X,EAAAzX,EAAAyX,GAAAd,GACArT,KAAAmF,IAAA1I,EAAA4X,MAAA3X,EAAA2X,OAAAhB,KAOArZ,MAAA6X,WAAAE,OAAA,OAEAnK,MAAA,SAAA1M,GAEA,MAAA+B,MAAA6V,WAAA5X,GAEAA,EAEAlB,MAAAuB,SAAAL,IAGAuM,EAAAvM,EACAwM,EAAAxM,EACAwB,EAAAxB,GAIAlB,MAAAwN,MAAAI,MAAA1M,IAEAoB,KAAA,SAAAuH,EAAAvH,GAKA,MAHAuH,GAAA4D,EAAAnL,EAAAmL,EACA5D,EAAA6D,EAAApL,EAAAoL,EACA7D,EAAAnH,EAAAJ,EAAAI,EACAmH,GAEAkO,OAAA,WAEA,OAAAtK,EAAA,EAAAC,EAAA,EAAAhL,EAAA,IAEAiW,KAAA,SAAA9O,GAKA,MAHAA,GAAA4D,EAAA,EACA5D,EAAA6D,EAAA,EACA7D,EAAAnH,EAAA,EACAmH,GAEAsO,KAAA,SAAAtO,EAAAwO,EAAAW,GAKA,MAHAnP,GAAA4D,GAAA4K,EAAA5K,EAAAuL,EACAnP,EAAA6D,GAAA2K,EAAA3K,EAAAsL,EACAnP,EAAAnH,GAAA2V,EAAA3V,EAAAsW,EACAnP,GAEAoP,IAAA,SAAApP,EAAAmB,GAKA,MAHAnB,GAAA4D,GAAAzC,EAAAyC,EACA5D,EAAA6D,GAAA1C,EAAA0C,EACA7D,EAAAnH,GAAAsI,EAAAtI,EACAmH,GAEAgP,WAAA,SAAApW,EAAAC,GAEA,GAAA6X,GAAA9X,EAAAgL,EAAA/K,EAAA+K,EACA+M,EAAA/X,EAAAiL,EAAAhL,EAAAgL,EACA+M,EAAAhY,EAAAC,EAAAA,EAAAA,CACA,OAAA6X,GAAAA,EAAAC,EAAAA,EAAAC,EAAAA,GAEAtB,QAAA,SAAA1W,GAEA,MAAAzC,OAAA0B,SAAAe,IAAA,KAAAA,IAAA,KAAAA,IAAA,KAAAA,IAEAyE,MAAA,SAAAzE,GAEA,MAAAyE,OAAAzE,EAAAgL,IAAAvG,MAAAzE,EAAAiL,IAAAxG,MAAAzE,EAAAC,IAEA0W,OAAA,SAAA3W,EAAA4W,GAEA,MAAArT,MAAAmF,IAAA1I,EAAAgL,GAAA4L,GACArT,KAAAmF,IAAA1I,EAAAiL,GAAA2L,GACArT,KAAAmF,IAAA1I,EAAAC,GAAA2W,GAEAC,QAAA,SAAA7W,EAAAC,EAAA2W,GAEA,MAAArT,MAAAmF,IAAA1I,EAAAgL,EAAA/K,EAAA+K,GAAA4L,GACArT,KAAAmF,IAAA1I,EAAAiL,EAAAhL,EAAAgL,GAAA2L,GACArT,KAAAmF,IAAA1I,EAAAC,EAAAA,EAAAA,GAAA2W,KAQArZ,MAAA6X,WAAAE,OAAA,QAEAnK,MAAA,SAAAnL,GAEA,MAAAQ,MAAA6V,WAAA5X,GAEAA,EAEAlB,MAAAuB,SAAAkB,IAGAgL,EAAAhL,EACAiL,EAAAjL,EACAC,EAAAD,EACAA,EAAA,GAIAzC,MAAAwN,MAAAI,MAAAnL,IAEAH,KAAA,SAAAuH,EAAAvH,GAMA,MAJAuH,GAAA4D,EAAAnL,EAAAmL,EACA5D,EAAA6D,EAAApL,EAAAoL,EACA7D,EAAAnH,EAAAJ,EAAAI,EACAmH,EAAApH,EAAAH,EAAAG,EACAoH,GAEAkO,OAAA,WAEA,OAAAtK,EAAA,EAAAC,EAAA,EAAAhL,EAAA,EAAAD,EAAA,IAEAkW,KAAA,SAAA9O,GAMA,MAJAA,GAAA4D,EAAA,EACA5D,EAAA6D,EAAA,EACA7D,EAAAnH,EAAA,EACAmH,EAAApH,EAAA,EACAoH,GAEAsO,KAAA,SAAAtO,EAAAwO,EAAAW,GAMA,MAJAnP,GAAA4D,GAAA4K,EAAA5K,EAAAuL,EACAnP,EAAA6D,GAAA2K,EAAA3K,EAAAsL,EACAnP,EAAAnH,GAAA2V,EAAA3V,EAAAsW,EACAnP,EAAApH,GAAA4V,EAAA5V,EAAAuW,EACAnP,GAEAoP,IAAA,SAAApP,EAAAmB,GAMA,MAJAnB,GAAA4D,GAAAzC,EAAAyC,EACA5D,EAAA6D,GAAA1C,EAAA0C,EACA7D,EAAAnH,GAAAsI,EAAAtI,EACAmH,EAAApH,GAAAuI,EAAAvI,EACAoH,GAEAgP,WAAA,SAAApW,EAAAC,GAEA,GAAA6X,GAAA9X,EAAAgL,EAAA/K,EAAA+K,EACA+M,EAAA/X,EAAAiL,EAAAhL,EAAAgL,EACA+M,EAAAhY,EAAAC,EAAAA,EAAAA,EACA4X,EAAA7X,EAAAA,EAAAC,EAAAD,CACA,OAAA8X,GAAAA,EAAAC,EAAAA,EAAAC,EAAAA,EAAAH,EAAAA,GAEAnB,QAAA,SAAA1W,GAEA,MAAAzC,OAAA0B,SAAAe,IAAA,KAAAA,IAAA,KAAAA,IAAA,KAAAA,IAAA,KAAAA,IAEAyE,MAAA,SAAAzE,GAEA,MAAAyE,OAAAzE,EAAAgL,IAAAvG,MAAAzE,EAAAiL,IAAAxG,MAAAzE,EAAAC,IAAAwE,MAAAzE,EAAAA,IAEA2W,OAAA,SAAA3W,EAAA4W,GAEA,MAAArT,MAAAmF,IAAA1I,EAAAgL,GAAA4L,GACArT,KAAAmF,IAAA1I,EAAAiL,GAAA2L,GACArT,KAAAmF,IAAA1I,EAAAC,GAAA2W,GACArT,KAAAmF,IAAA1I,EAAAA,GAAA4W,GAEAC,QAAA,SAAA7W,EAAAC,EAAA2W,GAEA,MAAArT,MAAAmF,IAAA1I,EAAAgL,EAAA/K,EAAA+K,GAAA4L,GACArT,KAAAmF,IAAA1I,EAAAiL,EAAAhL,EAAAgL,GAAA2L,GACArT,KAAAmF,IAAA1I,EAAAC,EAAAA,EAAAA,GAAA2W,GACArT,KAAAmF,IAAA1I,EAAAA,EAAAC,EAAAD,GAAA4W,KAOArZ,MAAA6X,WAAA7X,WAAAA,MAAA6X,WAAA6C,OC7pBA1a,MAAA2a,KAAA,SAAAA,GAEA,MAAAA,aAAA3a,OAAA4a,KAEAD,EAEA3a,MAAAwB,SAAAmZ,IAAAA,IAAA3a,OAAA2a,KAEA3a,MAAA2a,KAAAE,QAEA7a,MAAA0B,SAAAiZ,IAAAA,EAAAG,OAAA9a,OAAA2a,KAEA3a,MAAA2a,KAAAA,EAAAG,MAAAH,IAGA,GAIA3a,MAAA4a,KAAA,aAIA5a,MAAA4a,KAAA1S,WAEA6S,MAAA,SAAA/C,EAAAH,EAAAmD,GAEA/X,KAAA+U,KAAAA,EACA/U,KAAA4U,WAAA7X,MAAA6X,WAAAA,GACA5U,KAAA+X,OAAAA,EACA/X,KAAAgY,MAAAhY,KAAAiY,WAEAC,QAAA,SAAAtR,GAEA,MAAAA,IAEAqR,QAAA,WAIA,IAAA,GAFAE,GAAAnY,KAAA+X,OAEApa,EAAA,EAAAA,EAAAwa,EAAAva,OAAAD,IAEA,GAAAwa,EAAAxa,MAAA,EAEA,OAAA,CAGA,QAAA,GAEAya,UAAA,WAEA,MAAApY,MAAAgY,MAAAhY,KAAAX,OAAAW,MAEAqY,KAAA,WAEA,MAAArY,MAAA+X,OAAA/X,KAAA+X,OAAAna,OAAA,IAEA0a,MAAA,WAEA,MAAAtY,MAAA+X,OAAA,IAEAQ,MAAA,SAAA5a,GAEA,MAAAqC,MAAA+X,OAAApa,IAEA6a,aAAA,SAAA7a,GAEA,GAAA2B,GAAAU,KAAA+X,OAAApa,EAOA,OALAZ,OAAAmB,WAAAoB,KAEAA,EAAAA,KAGAA,IAQAvC,MAAA0b,UAAA,SAAA1D,EAAAH,EAAAmD,EAAAW,GAEA1Y,KAAA8X,MAAA/C,EAAAH,EAAAmD,GACA/X,KAAA0Y,OAAAA,GAGA3b,MAAA0b,UAAAxT,UAAA,GAAAlI,OAAA4a,KAEA5a,MAAA0b,UAAAxT,UAAAiT,QAAA,SAAAtR,EAAA6O,GAKA,IAHA,GAAAkD,GAAA3Y,KAAA0Y,OACAlD,EAAAmD,EAAA/a,OAAA,EACAD,EAAA,EACAgb,EAAAhb,EAAA,GAAA8X,GAAAD,EAAA7X,GAAAA,GACA,IAAAib,GAAAD,EAAAhb,GACAkb,EAAAF,EAAAhb,EAAA,GACAmb,GAAArD,EAAAmD,IAAAC,EAAAD,GACAG,EAAA/Y,KAAAwY,aAAA7a,GACAqb,EAAAhZ,KAAAwY,aAAA7a,EAAA,EAEA,OAAAqC,MAAA4U,WAAAU,YAAA1O,EAAAmS,EAAAC,EAAAF,IAGA/b,MAAA0b,UAAAxT,UAAA5F,KAAA,WAEA,MAAA,IAAAtC,OAAA0b,UAAAzY,KAAA+U,KAAAhY,MAAAsC,KAAAW,KAAA+X,QAAAhb,MAAAsC,KAAAW,KAAA0Y,QAAA1Y,KAAA4U,aAGA7X,MAAA2a,KAAAjC,MAAA,SAAAiC,GAEA,GAAA7C,GAAA9X,MAAA6X,WAAA8C,EAAA9C,WAEA,KAAA8C,EAAAgB,OACA,CACAhB,EAAAgB,SAEA,KAAA,GAAA/a,GAAA,EAAAA,EAAA+Z,EAAAK,OAAAna,OAAAD,IAEA+Z,EAAAgB,OAAA/a,GAAAA,GAAA+Z,EAAAK,OAAAna,OAAA,GAIA,IAAA,GAAAD,GAAA,EAAAA,EAAA+Z,EAAAK,OAAAna,OAAAD,IAEA+Z,EAAAK,OAAApa,GAAAkX,EAAAlK,MAAA+M,EAAAK,OAAApa,GAGA,OAAA,IAAAZ,OAAA0b,UACAf,EAAA3C,KACAF,EACA6C,EAAAK,OACAL,EAAAgB,SAMA3b,MAAAkc,UAAA,SAAAlE,EAAAH,EAAA2D,GAEAvY,KAAA8X,MAAA/C,EAAAH,GAAA2D,KAGAxb,MAAAkc,UAAAhU,UAAA,GAAAlI,OAAA4a,KAEA5a,MAAAkc,UAAAhU,UAAAiT,QAAA,SAAAtR,GAEA,MAAA5G,MAAA4U,WAAAvV,KAAAuH,EAAA5G,KAAAwY,aAAA,KAGAzb,MAAAkc,UAAAhU,UAAA5F,KAAA,WAEA,MAAA,IAAAtC,OAAAkc,UAAAjZ,KAAA+U,KAAA/U,KAAA4U,WAAA5U,KAAA+X,OAAA,KAGAhb,MAAA2a,KAAAa,MAAA,SAAAb,GAEA,GAAA7C,GAAA9X,MAAA6X,WAAA8C,EAAA9C,WAEA,OAAA,IAAA7X,OAAAkc,UACAvB,EAAA3C,KACAF,EACAA,EAAAlK,MAAA+M,EAAAa,SAMAxb,MAAAmc,aAAA,SAAAnE,EAAAH,EAAAmD,EAAAW,EAAAS,GAEAnZ,KAAA8X,MAAA/C,EAAAH,EAAAmD,GACA/X,KAAA0Y,OAAAA,EACA1Y,KAAAmZ,QAAAA,GAGApc,MAAAmc,aAAAjU,UAAA,GAAAlI,OAAA4a,KAEA5a,MAAAmc,aAAAjU,UAAAiT,QAAA,SAAAtR,EAAA6O,GAEA,GAAAkD,GAAA3Y,KAAA0Y,OACAlD,EAAAmD,EAAA/a,OAAA,CAEA,IAAA6X,EAAAkD,EAAA,GACA,OAAA,CAGA,IAAAlD,EAAAkD,EAAAA,EAAA/a,OAAA,GACA,MAAAoC,MAAA+X,OAAAY,EAAA/a,OAAA,EAIA,KADA,GAAAD,GAAA,EACAgb,EAAAhb,EAAA,GAAA8X,GAAAD,EAAA7X,GAAAA,GACA,IAAAib,GAAAD,EAAAhb,GACAkb,EAAAF,EAAAhb,EAAA,GACAmb,GAAArD,EAAAmD,IAAAC,EAAAD,GACAG,EAAA/Y,KAAAwY,aAAA7a,GACAqb,EAAAhZ,KAAAwY,aAAA7a,EAAA,GACAyb,EAAApZ,KAAAmZ,QAAAxb,EAEA,OAAAqC,MAAA4U,WAAAU,YAAA1O,EAAAmS,EAAAC,EAAAI,EAAAN,KAGA/b,MAAAmc,aAAAjU,UAAA5F,KAAA,WAEA,MAAA,IAAAtC,OAAAmc,aAAAlZ,KAAA+U,KAAA/U,KAAA4U,WAAA7X,MAAAsC,KAAAW,KAAA+X,QAAAhb,MAAAsC,KAAAW,KAAA0Y,QAAA3b,MAAAsC,KAAAW,KAAAmZ,WAGApc,MAAA2a,KAAA2B,SAAA,WAEA,GAAAxE,GAAA9X,MAAA6X,WAAA8C,KAAA9C,WAEA,KAAA8C,KAAAgB,OACA,CACAhB,KAAAgB,SAEA,KAAA,GAAA/a,GAAA,EAAAA,EAAA+Z,KAAAK,OAAAna,OAAAD,IAEA+Z,KAAAgB,OAAA/a,GAAAA,GAAA+Z,KAAAK,OAAAna,OAAA,GAIA,GAAA0b,GAAAvc,MAAA4H,OAAA+S,KAAAyB,QAAA,KAEA,KAAApc,MAAAiB,UAAA0Z,KAAAyB,WAAApc,MAAAW,QAAAga,KAAAyB,UAAA,OAAAG,EACA,CACA5B,KAAAyB,UAEA,KAAA,GAAAxb,GAAA,EAAAA,EAAA+Z,KAAAK,OAAAna,OAAAD,IAEA+Z,KAAAyB,QAAAxb,GAAA2b,EAIA,IAAA,GAAA3b,GAAA,EAAAA,EAAA+Z,KAAAyB,QAAAvb,OAAAD,IAEA+Z,KAAAyB,QAAAxb,GAAAZ,MAAA4H,OAAA+S,KAAAyB,QAAAxb,GAGA,KAAA,GAAAA,GAAA,EAAAA,EAAA+Z,KAAAK,OAAAna,OAAAD,IAEA+Z,KAAAK,OAAApa,GAAAkX,EAAAlK,MAAA+M,KAAAK,OAAApa,GAGA,OAAA,IAAAZ,OAAAmc,aACAxB,KAAA3C,KACAF,EACA6C,KAAAK,OACAL,KAAAgB,OACAhB,KAAAyB,UAOApc,MAAAwc,UAAA,SAAAxE,EAAAH,EAAAmE,EAAAC,EAAAQ,EAAAC,GAEAzZ,KAAA8X,MAAA/C,EAAAH,GAAAmE,EAAAC,EAAAQ,EAAAC,KAGA1c,MAAAwc,UAAAtU,UAAA,GAAAlI,OAAA4a,KAEA5a,MAAAwc,UAAAtU,UAAAiT,QAAA,SAAAtR,EAAAiS,GAEA,GAAAhE,GAAA7U,KAAA4U,WACA8E,EAAAb,EAAAA,EACAc,EAAAd,EAAAa,EACAE,EAAA,EAAAf,EACA3R,EAAA0S,EAAAA,EACAC,EAAAD,EAAA1S,CAQA,OANAN,GAAAiO,EAAAxV,KAAAuH,EAAA5G,KAAAwY,aAAA,IACA5R,EAAAiO,EAAA9M,MAAAnB,EAAAiT,GACAjT,EAAAiO,EAAAK,KAAAtO,EAAA5G,KAAAwY,aAAA,GAAA,EAAAtR,EAAA2R,GACAjS,EAAAiO,EAAAK,KAAAtO,EAAA5G,KAAAwY,aAAA,GAAA,EAAAoB,EAAAF,GACA9S,EAAAiO,EAAAK,KAAAtO,EAAA5G,KAAAwY,aAAA,GAAAmB,IAKA5c,MAAAwc,UAAAtU,UAAA5F,KAAA,WAEA,MAAA,IAAAtC,OAAAwc,UAAAvZ,KAAA+U,KAAA/U,KAAA4U,WAAA5U,KAAA+X,OAAA,GAAA/X,KAAA+X,OAAA,GAAA/X,KAAA+X,OAAA,GAAA/X,KAAA+X,OAAA,KAGAhb,MAAA2a,KAAApQ,MAAA,SAAAoQ,GAEA,GAAA7C,GAAA9X,MAAA6X,WAAA8C,EAAA9C,WAEA,OAAA,IAAA7X,OAAAwc,UACA7B,EAAA3C,KACAF,EACAA,EAAAlK,MAAA+M,EAAAqB,IACAlE,EAAAlK,MAAA+M,EAAAsB,IACAnE,EAAAlK,MAAA+M,EAAA8B,IACA3E,EAAAlK,MAAA+M,EAAA+B,MAOA1c,MAAA+c,cAAA,SAAA/E,EAAAH,EAAAmE,EAAAC,EAAAQ,GAEAxZ,KAAA8X,MAAA/C,EAAAH,GAAAmE,EAAAC,EAAAQ,KAGAzc,MAAA+c,cAAA7U,UAAA,GAAAlI,OAAA4a,KAEA5a,MAAA+c,cAAA7U,UAAAiT,QAAA,SAAAtR,EAAAiS,GAEA,GAAAhE,GAAA7U,KAAA4U,WACA8E,EAAAb,EAAAA,EACAe,EAAA,EAAAf,EACA3R,EAAA0S,EAAAA,CAOA,OALAhT,GAAAiO,EAAAxV,KAAAuH,EAAA5G,KAAAwY,aAAA,IACA5R,EAAAiO,EAAA9M,MAAAnB,EAAAM,GACAN,EAAAiO,EAAAK,KAAAtO,EAAA5G,KAAAwY,aAAA,GAAA,EAAAoB,EAAAf,GACAjS,EAAAiO,EAAAK,KAAAtO,EAAA5G,KAAAwY,aAAA,GAAAkB,IAKA3c,MAAA+c,cAAA7U,UAAA5F,KAAA,WAEA,MAAA,IAAAtC,OAAA+c,cAAA9Z,KAAA+U,KAAA/U,KAAA4U,WAAA5U,KAAA+X,OAAA,GAAA/X,KAAA+X,OAAA,GAAA/X,KAAA+X,OAAA,KAGAhb,MAAA2a,KAAAqC,UAAA,SAAArC,GAEA,GAAA7C,GAAA9X,MAAA6X,WAAA8C,EAAA9C,WAEA,OAAA,IAAA7X,OAAA+c,cACApC,EAAA3C,KACAF,EACAA,EAAAlK,MAAA+M,EAAAqB,IACAlE,EAAAlK,MAAA+M,EAAAsB,IACAnE,EAAAlK,MAAA+M,EAAA8B,MAMAzc,MAAAid,aAAA,SAAAjF,EAAA2C,EAAAuC,GAKA,IAAA,GAHApF,GAAA6C,EAAA9C,WACAmD,KAEApa,EAAA,EAAAsc,EAAAtc,EAAAA,IAEAoa,EAAAja,KAAA4Z,EAAAQ,QAAArD,EAAAC,SAAAnX,GAAAsc,EAAA,IAGAja,MAAA8X,MAAA/C,EAAAF,EAAAkD,IAGAhb,MAAAid,aAAA/U,UAAA,GAAAlI,OAAA4a,KAEA5a,MAAAid,aAAA/U,UAAAiT,QAAA,SAAAtR,EAAA6O,GAEA,GAAAjW,GAAAuD,KAAAC,MAAAyS,EAAAzV,KAAA+X,OAAAna,QACAsc,EAAAnX,KAAAJ,IAAAnD,EAAAQ,KAAA+X,OAAAna,OAAA,EAEA,OAAAoC,MAAA4U,WAAAvV,KAAAuH,EAAA5G,KAAAwY,aAAA0B,KAGAnd,MAAAid,aAAA/U,UAAA5F,KAAA,WAEA,MAAA,IAAAtC,OAAAid,aAAAha,KAAA+U,KAAA/U,KAAAA,KAAA+X,OAAAna,SAGAb,MAAA2a,KAAAyC,SAAA,SAAAzC,GAEA,MAAA,IAAA3a,OAAAid,aACAtC,EAAA3C,KACAhY,MAAA2a,KAAAA,EAAAA,MACAA,EAAAuC,aAQAld,MAAAqd,MAAA,SAAArF,EAAAH,EAAAW,EAAAC,GAEAxV,KAAA8X,MAAA/C,EAAAH,GAAAW,EAAAC,KAGAzY,MAAAqd,MAAAnV,UAAA,GAAAlI,OAAA4a,KAEA5a,MAAAqd,MAAAnV,UAAAiT,QAAA,SAAAtR,EAAA6O,GAEA,MAAAzV,MAAA4U,WAAAU,YAAA1O,EAAA5G,KAAAwY,aAAA,GAAAxY,KAAAwY,aAAA,GAAA/C,IAGA1Y,MAAAqd,MAAAnV,UAAA5F,KAAA,WAEA,MAAA,IAAAtC,OAAAqd,MAAApa,KAAA+U,KAAA/U,KAAA4U,WAAA5U,KAAA+X,OAAA,GAAA/X,KAAA+X,OAAA,KAGAhb,MAAA2a,KAAA2C,MAAA,SAAA3C,GAEA,GAAA7C,GAAA9X,MAAA6X,WAAA8C,EAAA9C,WAEA,OAAA,IAAA7X,OAAAqd,MACA1C,EAAA3C,KACAF,EACAA,EAAAlK,MAAA+M,EAAAnC,OACAV,EAAAlK,MAAA+M,EAAAlC,OAOAzY,MAAAud,SAAA,SAAAvF,EAAAH,EAAAmD,GAEA/X,KAAA8X,MAAA/C,EAAAH,EAAAmD,IAGAhb,MAAAud,SAAArV,UAAA,GAAAlI,OAAA4a,KAEA5a,MAAAud,SAAArV,UAAAiT,QAAA,SAAAtR,EAAA6O,GAEA,GAAAjW,GAAAuD,KAAAC,MAAAyS,EAAAzV,KAAA+X,OAAAna,QACAsc,EAAAnX,KAAAJ,IAAAnD,EAAAQ,KAAA+X,OAAAna,OAAA,EAEA,OAAAoC,MAAA4U,WAAAvV,KAAAuH,EAAA5G,KAAAwY,aAAA0B,KAGAnd,MAAAud,SAAArV,UAAA5F,KAAA,WAEA,MAAA,IAAAtC,OAAAud,SAAAta,KAAA+U,KAAA/U,KAAA4U,WAAA7X,MAAAsC,KAAAW,KAAA+X,UAGAhb,MAAA2a,KAAA6C,KAAA,SAAA7C,GAIA,IAAA,GAFA7C,GAAA9X,MAAA6X,WAAA8C,EAAA9C,YAEAjX,EAAA,EAAAA,EAAA+Z,EAAAK,OAAAna,OAAAD,IAEA+Z,EAAAK,OAAApa,GAAAkX,EAAAlK,MAAA+M,EAAAK,OAAApa,GAGA,OAAA,IAAAZ,OAAAud,SACA5C,EAAA3C,KACAF,EACA6C,EAAAK,SC3bAhb,MAAA6a,OAAA,SAAAA,GAEA,MAAAA,aAAA7a,OAAAyd,OAEA5C,EAEA7a,MAAAwB,SAAAqZ,IAAAA,IAAA7a,OAAA6a,OAEA7a,MAAA6a,OAAAA,GAEA7a,MAAA0B,SAAAmZ,IAAAA,EAAAC,OAAA9a,OAAA6a,OAEA7a,MAAA6a,OAAAA,EAAAC,MAAAD,IAGA,GAQA7a,MAAAyd,OAAA,aAIAzd,MAAAyd,OAAAvV,WAUA6S,MAAA,SAAAtT,EAAAoQ,EAAA6F,EAAAC,EAAAC,GAEA,GAAA9F,GAAA9X,MAAA6X,WAAAA,GACApV,EAAAzC,MAAAyH,UAAAA,EAEAxE,MAAAwE,UAAAA,EACAxE,KAAA4U,WAAAC,EACA7U,KAAAya,KAAA5F,EAAAlK,MAAA8P,EAAAjb,EAAAkF,cACA1E,KAAA0a,SAAA7F,EAAAlK,MAAA+P,EAAAlb,EAAAkF,cACA1E,KAAA2a,QAAA9F,EAAAlK,MAAAgQ,EAAA9F,EAAAC,UACA9U,KAAA4a,SAAA/F,EAAAC,SACA9U,KAAAiC,KAAA,GAUA4Y,OAAA,SAAA/b,EAAAgc,GAEA,IAAA9a,KAAAiC,OAEAjC,KAAAiC,KAAAnD,EAGA,IAAA+V,GAAA7U,KAAA4U,WAGAmG,EAAAhY,KAAAJ,IAAA,MAAA7D,EAAAkB,KAAAiC,MAAAlF,MAAAyd,OAAAQ,QAGAC,EAAApG,EAAAxV,QAAAW,KAAA0a,SAGA1a,MAAAkb,eAAAH,GACA/a,KAAA4a,SAAA/F,EAAAK,KAAAlV,KAAA4a,SAAA5a,KAAA2a,QAAAI,GACA/a,KAAA0a,SAAA7F,EAAAK,KAAAlV,KAAA0a,SAAA1a,KAAA4a,SAAAG,GAEA/a,KAAAiC,KAAAnD,CAGA,IAAAqc,IAAAtG,EAAAwB,QAAA4E,EAAAjb,KAAA0a,SAAA3d,MAAAyd,OAAAY,QAOA,OALAD,KAEAL,EAAA9a,KAAAwE,WAAAxE,KAAA0a,UAGAS,GAMAE,YAAA,WAEA,MAAAte,OAAAmB,WAAA8B,KAAAya,MAAAza,KAAAya,OAAAza,KAAAya,MAQAS,eAAA,cAUAne,MAAAyd,OAAAQ,OAAA,GAKAje,MAAAyd,OAAAY,QAAA,KAQAre,MAAAue,UAAA,SAAA9W,EAAAoQ,EAAA8F,EAAAD,EAAAnW,EAAAqW,GAEA,GAAAnb,GAAAzC,MAAAyH,UAAAA,EAEAxE,MAAA8X,MAAAtT,EAAAoQ,EAAA6F,EAAAC,EAAAC,GAEA3a,KAAAub,aAAAvb,KAAA4U,WAAAE,SACA9U,KAAAsE,SAAAtE,KAAA4U,WAAAjK,MAAArG,EAAA9E,EAAAkF,eAGA3H,MAAAue,UAAArW,UAAA,GAAAlI,OAAAyd,OAEAzd,MAAAue,UAAArW,UAAAiW,eAAA,SAAAH,GAEA,GAAAlG,GAAA7U,KAAA4U,UAEA5U,MAAAub,aAAA1G,EAAAxV,KAAAW,KAAAub,aAAAvb,KAAAqb,eACArb,KAAAub,aAAA1G,EAAAQ,IAAArV,KAAAub,aAAAvb,KAAA0a,UACA1a,KAAAub,aAAA1G,EAAAmB,IAAAhW,KAAAub,aAAAvb,KAAAsE,UACAtE,KAAA4a,SAAA/F,EAAAK,KAAAlV,KAAA4a,SAAA5a,KAAAub,aAAAR,IAGAhe,MAAA6a,OAAA4D,IAAA,SAAA5D,GAEA,MAAA,IAAA7a,OAAAue,UACA1D,EAAApT,UACAzH,MAAA6X,WAAA7X,MAAAyH,UAAAoT,EAAApT,WAAAoQ,YACAgD,EAAA8C,SACA9C,EAAA6C,KACA7C,EAAAtT,SACAsT,EAAA+C,UAOA5d,MAAA0e,aAAA,SAAAjX,EAAAoQ,EAAA8F,EAAAD,EAAAiB,EAAAC,EAAAhB,GAEA,GAAAnb,GAAAzC,MAAAyH,UAAAA,EAEAxE,MAAA8X,MAAAtT,EAAAoQ,EAAA6F,EAAAC,EAAAC,GAEA3a,KAAA0b,QAAA1b,KAAA4U,WAAAjK,MAAA+Q,EAAAlc,EAAAkF,cACA1E,KAAA2b,UAAA3b,KAAA4U,WAAAjK,MAAAgR,EAAAnc,EAAAkF,cACA1E,KAAA4b,MAAA5b,KAAA4U,WAAAE,SACA9U,KAAA6b,MAAA7b,KAAA4U,WAAAE,UAGA/X,MAAA0e,aAAAxW,UAAA,GAAAlI,OAAAyd,OAEAzd,MAAA0e,aAAAxW,UAAAiW,eAAA,SAAAH,GAKA,GAAAlG,GAAA7U,KAAA4U,UAEA5U,MAAA6b,MAAAhH,EAAAxV,KAAAW,KAAA6b,MAAA7b,KAAA0b,SACA1b,KAAA6b,MAAAhH,EAAAmB,IAAAhW,KAAA6b,MAAA7b,KAAA4a,UAEA5a,KAAA4b,MAAA/G,EAAAxV,KAAAW,KAAA4b,MAAA5b,KAAA0a,UACA1a,KAAA4b,MAAA/G,EAAAQ,IAAArV,KAAA4b,MAAA5b,KAAAqb,eACArb,KAAA4b,MAAA/G,EAAAmB,IAAAhW,KAAA4b,MAAA5b,KAAA2b,WACA3b,KAAA4b,MAAA/G,EAAAQ,IAAArV,KAAA4b,MAAA5b,KAAA6b,OAEA7b,KAAA4a,SAAA/F,EAAAK,KAAAlV,KAAA4a,SAAA5a,KAAA4b,MAAAb,IAGAhe,MAAA6a,OAAA7Q,OAAA,SAAA6Q,GAEA,MAAA,IAAA7a,OAAA0e,aACA7D,EAAApT,UACAzH,MAAA6X,WAAA7X,MAAAyH,UAAAoT,EAAApT,WAAAoQ,YACAgD,EAAA8C,SACA9C,EAAA6C,KACA7C,EAAA8D,QACA9D,EAAA+D,UACA/D,EAAA+C,UAUA5d,MAAA+e,eAAA,SAAAtX,EAAAoQ,EAAA8F,EAAAD,EAAA9E,EAAA+F,EAAAC,EAAAhB,GAEA3a,KAAA8X,MAAAtT,EAAAoQ,EAAA6F,EAAAC,EAAAC,GAEA3a,KAAA2V,SAAAA,EACA3V,KAAA0b,QAAAA,EACA1b,KAAA2b,UAAAA,EACA3b,KAAA+b,KAAA/b,KAAA4U,WAAAE,UAGA/X,MAAA+e,eAAA7W,UAAA,GAAAlI,OAAAyd,OAEAzd,MAAA+e,eAAA7W,UAAAiW,eAAA,SAAAH,GAMA,GAAAlG,GAAA7U,KAAA4U,WACA6F,EAAAza,KAAAqb,cAEA1b,EAAAkV,EAAAc,SAAA3V,KAAA0a,SAAAD,EAEAza,MAAA+b,KAAAlH,EAAAxV,KAAAW,KAAA+b,KAAA/b,KAAA0a,UACA1a,KAAA+b,KAAAlH,EAAAQ,IAAArV,KAAA+b,KAAAtB,GAEA,IAAA9a,IAEAK,KAAA+b,KAAAlH,EAAA9M,MAAA/H,KAAA+b,KAAA,EAAApc,GACAK,KAAA+b,KAAAlH,EAAA9M,MAAA/H,KAAA+b,MAAApc,EAAAK,KAAA2V,UAAA3V,KAAA2b,YAGA3b,KAAA+b,KAAAlH,EAAAK,KAAAlV,KAAA+b,KAAA/b,KAAA4a,UAAA5a,KAAA0b,SAEA1b,KAAA4a,SAAA/F,EAAAK,KAAAlV,KAAA4a,SAAA5a,KAAA+b,KAAAhB,IAGAhe,MAAA6a,OAAAjC,SAAA,SAAAiC,GAEA,MAAA,IAAA7a,OAAA+e,eACAlE,EAAApT,UACAzH,MAAA6X,WAAA7X,MAAAyH,UAAAoT,EAAApT,WAAAoQ,YACAgD,EAAA8C,SACA9C,EAAA6C,KACA7C,EAAAjC,SACAiC,EAAA8D,QACA9D,EAAA+D,UACA/D,EAAA+C,UC5QA5d,MAAAif,YAEAC,QAAA,EACAC,QAAA,EACAC,UAAA,EACAC,SAAA,EACAC,OAAA,EACAC,SAAA,IAGAvf,MAAAwf,MAAA,SAAA/X,EAAAkT,EAAArT,EAAAM,EAAAR,EAAAC,EAAAf,EAAAmZ,EAAAC,GAEAzc,KAAAwE,UAAAA,EACAxE,KAAA0X,KAAAA,EACA1X,KAAA2E,OAAA5H,MAAA4H,OAAAA,GACA3E,KAAAmE,MAAApH,MAAAoH,MAAAA,GACAnE,KAAAqE,SAAAtH,MAAAsH,SAAAA,GACArE,KAAAoE,MAAArH,MAAAqH,MAAAA,GACApE,KAAAqD,OAAAtG,MAAAsG,OAAAA,GACArD,KAAAwc,gBAAAA,EACAxc,KAAAyc,OAAAA,GAGA1f,MAAAwf,MAAAtX,WAEAyX,UAAA,WAEA,MAAA1c,MAAAmE,MAAAnE,KAAAqD,OAAArD,KAAAqE,UAAArE,KAAAqD,OAAA,GAAArD,KAAAoE,OAEAuY,YAAA,WAEA,MAAA,IAAA5f,OAAA6f,cAAA5c,OAEAiV,MAAA,WAEA,MAAA,IAAAlY,OAAAwf,MAAAvc,KAAAwE,UAAAxE,KAAA0X,KAAA1X,KAAAqE,SAAArE,KAAA2E,OAAA3E,KAAAmE,MAAAnE,KAAAoE,MAAApE,KAAAqD,OAAArD,KAAAwc,gBAAAxc,KAAAyc;EAEAI,UAAA,WAEA,MAAA7c,MAAAyc,SAIA1f,MAAA6f,cAAA,SAAAxb,GAEApB,KAAAoB,MAAAA,EACApB,KAAAwE,UAAApD,EAAAoD,UACAxE,KAAA0X,KAAAtW,EAAAsW,KACA1X,KAAAqE,SAAAjD,EAAAiD,SACArE,KAAA2E,OAAAvD,EAAAuD,OACA3E,KAAAmE,MAAA/C,EAAA+C,MACAnE,KAAAoE,MAAAhD,EAAAgD,MACApE,KAAAqD,OAAAjC,EAAAiC,OACArD,KAAA8c,MAAA/f,MAAAif,WAAAC,QACAjc,KAAAiC,KAAA,EACAjC,KAAA+c,UAAA,EACA/c,KAAAgd,WAAA,EACAhd,KAAAid,QAAA,EACAjd,KAAAmG,KAAA,MAGApJ,MAAA6f,cAAA3X,WAEA4V,OAAA,SAAA/b,EAAAgc,GAEA,GAAAK,IAAA,EACA8B,EAAAjd,KAAAkd,QAAApe,EAEA,IAAAkB,KAAAmd,cACA,CACA,GAAA1H,GAAAwH,EAAAjd,KAAAqE,QAEA,IAAAoR,GAAA,GAAA,IAAAzV,KAAAqE,SACA,CACA,IAAArE,KAAAod,cAAA,MAAApd,KAAAqD,OAIA,MAFArD,MAAAqd,OAAAvC,IAEA,CAIA9a,MAAAoE,OAEA6Y,EAAAjd,KAAAsd,SAAAL,EAAAjd,KAAAqE,SAAAtH,MAAAif,WAAAI,UACA3G,EAAA,EAEAzV,KAAAgC,QAAA,WAAAhC,QAIAid,EAAAjd,KAAAsd,SAAAL,EAAAjd,KAAAqE,SAAAtH,MAAAif,WAAAG,WACA1G,GAAA,GAKAzV,KAAAud,WAAAzC,EAAAA,EAAA9a,KAAAwE,WAAAiR,GACA0F,GAAA,EAGA,MAAAA,IAEAqB,gBAAA,WAEA,MAAAxc,MAAAoB,MAAAob,iBAEAK,UAAA,WAEA,MAAA7c,MAAAoB,MAAAqb,QAEAe,SAAA,SAAA/H,GAEA,MAAAzV,MAAA0X,KAAAQ,QAAAlY,KAAA0X,KAAA9C,WAAAE,SAAA9U,KAAA2E,OAAA8Q,KAEAgI,UAAA,SAAAC,GAEA,MAAA1d,MAAAwd,SAAAza,KAAAJ,IAAA,EAAA3C,KAAA2d,WAAAD,KAEAC,SAAA,WAEA,MAAA3d,MAAAmd,cAAApa,KAAAJ,IAAA,GAAA5F,MAAA+B,MAAAkB,KAAAiC,MAAAjC,KAAAqE,UAAA,GAEAuZ,SAAA,WAEA,MAAA5d,MAAAwd,SAAA,IAEAK,OAAA,WAEA,MAAA7d,MAAAwd,SAAA,IAEAD,WAAA,SAAAzC,EAAAgD,EAAArI,GAEA,GAAAsI,GAAA/d,KAAA0X,KAAAQ,QAAA4F,EAAA9d,KAAA2E,OAAA8Q,GAEAsI,MAAA,IAEAjD,EAAA9a,KAAAwE,WAAAuZ,IAGAb,QAAA,SAAApe,GAEA,IAAAkB,KAAAge,WAAA,CAKAhe,KAAA8c,QAAA/f,MAAAif,WAAAC,UAEAjc,KAAAiC,KAAAnD,EAEAkB,KAAAmE,OAEAnE,KAAA8c,MAAA/f,MAAAif,WAAAE,QAEAlc,KAAAgC,QAAA,WAAAhC,OAIAA,KAAA8c,MAAA/f,MAAAif,WAAAG,UAIA,IAAAc,GAAAne,EAAAkB,KAAAiC,IAsBA,IApBAjC,KAAAie,aAEAhB,EAAAjd,KAAAmE,QAEAnE,KAAAgC,QAAA,UAAAhC,MAEAid,EAAAjd,KAAAsd,SAAAL,EAAAjd,KAAAmE,MAAApH,MAAAif,WAAAG,YAIAnc,KAAAke,cAEAjB,EAAAjd,KAAAoE,QAEApE,KAAAgC,QAAA,QAAAhC,MAEAid,EAAAjd,KAAAsd,SAAAL,EAAAjd,KAAAoE,MAAArH,MAAAif,WAAAG,YAIAnc,KAAAmd,eAAAnd,KAAAqE,SACA,CACA,GAAA8Z,GAAAne,KAAAqE,SAAArE,KAAAoE,MACAga,EAAArb,KAAAC,OAAAia,EAAAjd,KAAAoE,OAAA+Z,GACAE,EAAAtb,KAAAJ,IAAA3C,KAAAqD,OAAA+a,EAEAnB,GAAAjd,KAAAsd,SAAAL,EAAAoB,EAAAF,EAAAphB,MAAAif,WAAAG,WAEAnc,KAAAod,eAEAiB,IAAAre,KAAAqD,QAEA4Z,EAAAjd,KAAAqE,SACArE,KAAAqD,OAAA,GAIArD,KAAAqD,QAAA+a,GAIAnB,EAAAjd,KAAAqE,WAEA4Y,EAAAjd,KAAAsd,SAAAL,EAAAjd,KAAAqE,SAAAtH,MAAAif,WAAAI,UAEApc,KAAAgC,QAAA,WAAAhC,OAIA,MAAAid,KAEAK,SAAA,SAAAL,EAAAhb,EAAAqc,GAMA,MAJAte,MAAAiC,MAAAA,EACAjC,KAAAid,SAAAhb,EACAjC,KAAA8c,MAAAwB,EAEArB,EAAAhb,GAEAob,OAAA,SAAAvC,GAEA9a,KAAAud,WAAAzC,EAAA9a,KAAA0X,KAAA9C,WAAAE,SAAA,GACA9U,KAAA8c,MAAA/f,MAAAif,WAAAM,SAEAtc,KAAAgC,QAAA,SAAAhC,OAEA0c,UAAA,WAEA,MAAA1c,MAAAmE,MAAAnE,KAAAqD,OAAArD,KAAAqE,UAAArE,KAAAqD,OAAA,GAAArD,KAAAoE,OAEAma,cAAA,WAEA,MAAAve,MAAA0c,YAAA1c,KAAAid,SAEAuB,qBAAA,WAEA,MAAAxe,MAAAue,iBAAAve,KAAAmG,KAAAnG,KAAAmG,KAAAqY,uBAAA,IAEAC,oBAAA,WAEA,MAAAze,MAAAod,aAAA,EAAApd,KAAAue,iBAEAG,2BAAA,WAEA,MAAA1e,MAAAod,aAAA,EAAApd,KAAAue,iBAAAve,KAAAmG,KAAAnG,KAAAmG,KAAAuY,6BAAA,IAEAC,MAAA,SAAArY,GAEAtG,KAAAmG,KAEAnG,KAAAmG,KAAAwY,MAAArY,GAIAtG,KAAAmG,KAAAG,GAGAsY,MAAA,WAEA5e,KAAA8c,QAAA/f,MAAAif,WAAAK,SAEArc,KAAA+c,UAAAhgB,MAAA+B,MACAkB,KAAAgd,WAAAhd,KAAA8c,MACA9c,KAAA8c,MAAA/f,MAAAif,WAAAK,SAGAwC,OAAA,WAEA7e,KAAA8c,QAAA/f,MAAAif,WAAAK,SAEArc,KAAAiC,MAAAlF,MAAA+B,MAAAkB,KAAA+c,UACA/c,KAAA8c,MAAA9c,KAAAgd,aAGAI,WAAA,WAEA,MAAApd,MAAAqD,SAAAE,OAAAC,mBAEAsb,WAAA,WAEA,MAAA9e,MAAA8c,QAAA/f,MAAAif,WAAAC,SAAAjc,KAAA8c,QAAA/f,MAAAif,WAAAE,SAEAiB,YAAA,WAEA,MAAAnd,MAAA8c,QAAA/f,MAAAif,WAAAG,WAEA4C,WAAA,WAEA,MAAA/e,MAAA8c,QAAA/f,MAAAif,WAAAM,UAEA2B,UAAA,WAEA,MAAAje,MAAA8c,QAAA/f,MAAAif,WAAAE,SAEA8B,SAAA,WAEA,MAAAhe,MAAA8c,QAAA/f,MAAAif,WAAAK,QAEA6B,WAAA,WAEA,MAAAle,MAAA8c,QAAA/f,MAAAif,WAAAI,UAEA4C,UAAA,SAAAC,GAEA,MAAA,MAAAjf,KAAA8c,MAAAmC,IAEAC,UAAA,WAEA,OAAAlf,KAAA8c,OAEA,IAAA/f,OAAAif,WAAAC,QAAA,MAAA,SACA,KAAAlf,OAAAif,WAAAE,QAAA,MAAA,SACA,KAAAnf,OAAAif,WAAAG,UAAA,MAAA,WACA,KAAApf,OAAAif,WAAAI,SAAA,MAAA,UACA,KAAArf,OAAAif,WAAAM,SAAA,MAAA,aAGArE,QAAA,WAEA,MAAAjY,MAAA0X,KAAAM,QAOAjb,MAAAwD,SAAAxD,MAAA6f,cAAA3X,WClUAlI,MAAAoiB,UAAA,SAAAA,EAAAC,GAEA,GAAAD,YAAApiB,OAAAsiB,UAEA,MAAAF,EAEA,IAAApiB,MAAAwB,SAAA4gB,GACA,CACA,GAAAA,IAAApiB,OAAAoiB,UAEA,MAAApiB,OAAAoiB,UAAAA,EAMA,KAAA,GAHAG,GAAAH,EAAApe,MAAA,KACA4d,KAEArd,EAAA,EAAAA,EAAAge,EAAA1hB,OAAA0D,IACA,CACA,GAAA2B,GAAAlG,MAAAwiB,qBAAAD,EAAAhe,GAEA2B,MAAA,GAEA0b,EAAA7gB,KAAAf,MAAAoiB,UAAAlc,EAAAkc,UAAAlc,EAAAmc,WAIA,GAAAriB,MAAA0B,SAAA0gB,GACA,CACA,GAAAve,KAEAwe,GAAAA,KAEA,KAAA,GAAAI,KAAAL,GACA,CACA,GAAA1C,GAAA1f,MAAA0f,OAAA+C,EAEA/C,MAAA,GAEAA,EAAA9R,MAAAwU,EAAAC,EAAAxe,GAIA,GAAAA,EAAAhD,OAEA,MAAA,IAAAb,OAAAsiB,WAAA,EAAAF,EAAAC,EAAAxe,GAIA,OAAA,GAWA7D,MAAA0iB,KAAA,SAAA1K,EAAAoK,EAAAC,GAEA,GAAAD,GAAApiB,MAAAoiB,UAAAA,EAAAC,EAEAD,GAAApK,KAAAA,EAEAhY,MAAAoiB,UAAApK,GAAAoK,GAUApiB,MAAAwiB,qBAAA,SAAAJ,GAMA,IAAA,GAJApe,GAAAoe,EAAApe,MAAA,KACAoe,GAAA,EACAC,KAEAzhB,EAAA,EAAAA,EAAAoD,EAAAnD,OAAAD,IACA,CACA,GAAA+hB,GAAA3e,EAAApD,GAAAoG,aAEA,IAAA2b,IAAA3iB,OAAAoiB,YAAAA,EAEAA,EAAApiB,MAAAoiB,UAAAO,OAGA,CACA,GAAA,MAAAA,EAAA,GACA,CACA,GAAArc,GAAAtG,MAAAsG,OAAAqc,EAAAC,UAAA,IAAA,EAEAtc,MAAA,IAEA+b,EAAA/b,OAAAA,GAGA,GAAA,MAAAqc,EAAA,GACA,CACA,GAAAtb,GAAArH,MAAAqH,MAAAsb,EAAAC,UAAA,IAAA,EAEAvb,MAAA,IAEAgb,EAAAhb,MAAAA,GAGA,GAAA,MAAAsb,EAAA,GACA,CACA,GAAAvb,GAAApH,MAAAoH,MAAAub,EAAAC,UAAA,IAAA,EAEAxb,MAAA,IAEAib,EAAAjb,MAAAA,GAGA,GAAAQ,GAAA5H,MAAA4H,OAAA+a,GAAA,EAEA/a,MAAA,IAEAya,EAAAza,OAAAA,EAGA,IAAAN,GAAAtH,MAAAsH,SAAAqb,GAAA,EAEA,IAAArb,KAAA,EAEA+a,EAAA/a,SAAAA,MAGA,CACA,GAAAhB,GAAAtG,MAAAsG,OAAAqc,GAAA,EAEArc,MAAA,IAEA+b,EAAA/b,OAAAA,KAMA,MAAA8b,MAAA,GAEA,GAIAA,UAAAA,EACAC,QAAAA,IAeAriB,MAAAsiB,UAAA,SAAAtK,EAAAnK,EAAAwU,EAAAxe,GAEAZ,KAAA+U,KAAAA,EACA/U,KAAA4K,MAAAA,EACA5K,KAAAof,QAAAA,EACApf,KAAAY,OAAAA,GAGA7D,MAAAsiB,UAAApa,WAOA2a,QAAA,WAEA,MAAA5f,MAAA+U,QAAA,GAMA8K,UAAA,WAIA,IAAA,GAFAC,MAEAniB,EAAA,EAAAA,EAAAqC,KAAAY,OAAAhD,OAAAD,IAEAmiB,EAAAhiB,KAAAkC,KAAAY,OAAAjD,GAAAgf,cAGA,OAAAmD,IAQAC,YAAA,WAIA,IAAA,GAFAnf,MAEAjD,EAAA,EAAAA,EAAAqC,KAAAY,OAAAhD,OAAAD,IAEAiD,EAAA9C,KAAAkC,KAAAY,OAAAjD,GAAAsX,QAGA,OAAArU,IAWAof,MAAA,SAAAZ,EAAAxe,GAEA,IAAA,GAAA4e,KAAAxf,MAAA4K,MACA,CACA,GAAA6R,GAAA1f,MAAA0f,OAAA+C,EAEA/C,MAAA,GAEAA,EAAAuD,MAAAhgB,KAAA4K,MAAAwU,EAAApf,KAAAof,QAAAxe,GAIA,MAAAA,IAQAqf,OAAA,SAAAb,GAEA,GAAAriB,MAAAqC,QAAAggB,GAEA,MAAApf,KAGA,IAAAY,GAAAZ,KAAA+f,aAIA,OAFA/f,MAAAggB,MAAAZ,EAAAxe,GAEA,GAAA7D,OAAAsiB,UAAArf,KAAA+U,KAAA/U,KAAA4K,MAAAwU,EAAAxe,KCpQA7D,MAAAE,SAAA,SAAAqJ,GAEAtG,KAAA8X,MAAAxR,IAGAvJ,MAAAmjB,GAAAnjB,MAAAE,SAAAgI,WAOA6S,MAAA,SAAA9a,GAYA,MAVAgD,MAAAhD,QAAAA,EACAgD,KAAAY,UACAZ,KAAAmgB,WACAngB,KAAAogB,cACApgB,KAAA8a,SACA9a,KAAAmb,WACAnb,KAAAqgB,UAAA,EACArgB,KAAA9C,QAAA,KACA8C,KAAAsgB,QAAA,EAEAtgB,MAOAugB,QAAA,WAGA,MAAAvgB,OAOAwgB,UAAA,WAIA,MAFAxgB,MAAAgC,QAAA,aAEAhC,MASA6a,OAAA,SAAA/b,GAEAkB,KAAAygB,YAAAzgB,KAAAqgB,SAEArgB,KAAAqgB,UAAA,CAEA,KAAA,GAAA5b,KAAAzE,MAAAY,OACA,CACA,GAAA0F,GAAAtG,KAAAY,OAAA6D,EAEAzE,MAAAmb,QAAA1W,GAAA6B,EAAAuU,OAAA/b,EAAAkB,KAAA8a,OAEA9a,KAAAqgB,SAAArgB,KAAAqgB,UAAA/Z,EAAAyY,aAGA,IAAA,GAAAta,KAAAzE,MAAAmgB,QACA,CACA,GAAA3d,GAAAxC,KAAAmgB,QAAA1b,EAEAzE,MAAAmb,QAAA1W,GAAAjC,EAAAqY,OAAA/b,EAAAkB,KAAA8a,OAEA9a,KAAAqgB,UAAA,EAKA,MAFArgB,MAAAgC,QAAA,UAEAhC,MASA0gB,YAAA,SAAAle,GAEA,GAAAiC,GAAAjC,EAAAgC,SAEAxE,MAAAmgB,QAAA1b,GAAAjC,EAEAiC,IAAAzE,MAAA8a,QAEA9a,KAAA8a,MAAArW,GAAA1H,MAAAyH,UAAAC,GAAAC,cAGA1E,KAAAqgB,UAAA,GASAM,WAAA,SAAAra,GAEA,GAAA7B,GAAA6B,EAAA9B,SAEAxE,MAAAY,OAAA6D,GAAA6B,EAEA7B,IAAAzE,MAAA8a,QAEA9a,KAAA8a,MAAArW,GAAA1H,MAAAyH,UAAAC,GAAAC,cAGA1E,KAAAqgB,UAAA,GAOAhiB,MAAA,WAEA,IAAA,GAAAoG,KAAAzE,MAAA8a,MAEA9a,KAAAmb,QAAA1W,KAEAzE,KAAAhD,QAAAyH,GAAAzE,KAAA8a,MAAArW,GACAzE,KAAAmb,QAAA1W,IAAA,EAQA,OAJAzE,MAAAgC,QAAA,SAEAhC,KAAA4gB,aAEA5gB,MAOA4gB,WAAA,WAEA,IAAA,GAAAnc,KAAAzE,MAAAY,OACA,CACA,GAAA0F,GAAAtG,KAAAY,OAAA6D,EAEA6B,GAAAyY,eAEAzY,EAAAH,MAEAnG,KAAA2gB,WAAAra,EAAAH,MACAnG,KAAAqgB,UAAA,SAIArgB,MAAAY,OAAA6D,KAKAzE,KAAAygB,aAAAzgB,KAAAqgB,UAEArgB,KAAAgC,QAAA,WAAAhC,OAUA+d,MAAA,SAAAtZ,GAEA,MAAAzE,MAAA8a,MAAArW,IAQAoc,SAAA,WAIA,MAFA9jB,OAAAoY,IAAAnV,MAEAA,MAOA8gB,WAAA,WAEA9gB,KAAAgC,QAAA,aAAAhC,OAQA+gB,QAAA,WAEA/gB,KAAAqgB,UAAA,EAEArgB,KAAA9C,QAAA6jB,QAAA/gB,MAEAA,KAAAgC,QAAA,cAUAgf,aAAA,SAAA7B,EAAAC,GAEAA,EAAAA,KAEA,IAAAD,GAAApiB,MAAAoiB,UAAAA,EAAAC,EAEA,IAAAD,KAAA,EAEA,OAAA,CAGA,IAAAve,GAAAue,EAAAU,WAEA,IAAAV,EAAAS,UAEA,IAAA,GAAAJ,KAAAL,GAAAvU,MACA,CACA,GAAA6R,GAAA1f,MAAA0f,OAAA+C,EAEA/C,MAAA,GAEAA,EAAAuD,MAAAb,EAAAvU,MAAAwU,EAAAD,EAAAC,QAAAxe,GAOA,MAFAZ,MAAAihB,YAAA9B,EAAAC,EAAAxe,GAEAA,GAUAqgB,YAAA,aAWArJ,OAAA,SAAAA,GAEA,GAAAA,GAAA7a,MAAA6a,OAAAA,EAEA,OAAAA,MAAA,GAEA,GAGA5X,KAAA0gB,YAAA9I,GAEA5X,KAAA6gB,WAEAjJ,IAUAsJ,SAAA,SAAAd,GAEA,MAAApgB,MAAAmhB,WAAAf,EAAA,SAAA5d,SAEAxC,MAAAmgB,QAAA3d,EAAAgC,cAYA4c,KAAA,SAAAjC,EAAAC,EAAAiC,GAEA,GAAAzgB,GAAAZ,KAAAghB,aAAA7B,EAAAC,EAEA,OAAAxe,MAAA,GAEA,GAGAZ,KAAAshB,WAAA1gB,EAAAygB,GAEArhB,KAAA6gB,aAYAS,WAAA,SAAA1gB,EAAAygB,GAIA,IAAA,GAFAE,MAEA5jB,EAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IAEAqC,KAAA2gB,WAAA/f,EAAAjD,IAEA4jB,EAAA3gB,EAAAjD,GAAA6G,YAAA,CAGA,IAAA6c,EAEA,IAAA,GAAA5c,KAAAzE,MAAAY,OAEA6D,IAAA8c,IAEAvhB,KAAAY,OAAA6D,GAAA4Y,OAAArd,KAAA8a,MAKA,OAAA9a,OAUA2e,MAAA,SAAAQ,EAAAC,GAEA,GAAAxe,GAAAZ,KAAAghB,aAAA7B,EAAAC,EAEA,OAAAxe,MAAA,GAEA,GAGAZ,KAAAwhB,YAAA5gB,GAEAZ,OAWAwhB,YAAA,SAAA5gB,GAIA,IAAA,GAFA6gB,GAAAzhB,KAAAye,sBAEA9gB,EAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IACA,CACA,GAAA2I,GAAA1F,EAAAjD,GACA8G,EAAA6B,EAAA9B,SAEAC,KAAAzE,MAAAY,SAAAZ,KAAAY,OAAA6D,GAAA2Y,cAEA9W,EAAAnC,OAAAsd,EAAAzhB,KAAAY,OAAA6D,GAAA+Z,uBAEAxe,KAAAY,OAAA6D,GAAAka,MAAArY,KAIAA,EAAAnC,OAAAsd,EAEAzhB,KAAA2gB,WAAAra,IAIA,MAAAtG,OAeA0hB,WAAA,SAAAC,EAAAC,EAAAC,EAAA1C,EAAAC,EAAAiC,GAEA,GAAAzgB,GAAAZ,KAAAghB,aAAA7B,EAAAC,EAEA,OAAAxe,MAAA,GAEA,GAGAZ,KAAA8hB,iBAAAH,EAAAC,EAAAC,EAAAjhB,EAAAygB,GAEArhB,KAAA6gB,aAeAiB,iBAAA,SAAAH,EAAAC,EAAAC,EAAAjhB,GAKA,IAAA,GAFA8gB,IAAA,EAEA/jB,EAAA,EAAAA,EAAAiD,EAAAhD,SAAA8jB,EAAA/jB,IAEAiD,EAAAjD,GAAA6G,YAAAxE,MAAAY,SAEA8gB,GAAA,EAKA,IAAAA,EAEA,IAAA,GAAA/jB,GAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IACA,CACA,GAAAokB,GAAAnhB,EAAAjD,GACA8G,EAAAsd,EAAAvd,SAEA,IAAAC,IAAAzE,MAAAY,OACA,CACA,GAAA8W,GAAAqK,EAAArK,KACA7C,EAAA6C,EAAA9C,WACAoN,EAAAhiB,KAAAY,OAAA6D,GAEAsU,EAAAlE,EAAAI,MAAAjV,KAAA8a,MAAArW,IACAuU,EAAAgJ,EAAAvE,UAAAmE,GACApI,EAAAuI,EAAAvE,SAAA,GAEAyE,EAAA,GAAAllB,OAAA+c,cAAArV,EAAAoQ,EAAAkE,EAAAC,EAAAQ,GACA0I,EAAA,GAAAnlB,OAAAwf,MAAA9X,EAAAwd,EAAAN,EAAAE,EAAA,EAAA,EAAA,GAAA,GAAAlF,aAEAuF,GAAA/b,KAAA4b,EAEA/hB,KAAA2gB,WAAAuB,OAIAH,GAAA5d,OAAAwd,EAEA3hB,KAAA2gB,WAAAoB,OAOA,KAAA,GAAApkB,GAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IAEAqC,KAAA2gB,WAAA/f,EAAAjD,GAIA,OAAAqC,OAgBAmiB,eAAA,SAAAR,EAAAS,EAAAC,EAAAR,EAAA1C,EAAAC,EAAAiC,GAEA,GAAAzgB,GAAAZ,KAAAghB,aAAA7B,EAAAC,EAEA,OAAAxe,MAAA,GAEA,GAGAZ,KAAAsiB,qBAAAX,EAAAS,EAAAC,EAAAR,EAAAjhB,EAAAygB,GAEArhB,KAAA6gB,aAgBAyB,qBAAA,SAAAX,EAAAS,EAAAC,EAAAR,EAAAjhB,GAKA,IAAA,GAFA8gB,IAAA,EAEA/jB,EAAA,EAAAA,EAAAiD,EAAAhD,SAAA8jB,EAAA/jB,IAEAiD,EAAAjD,GAAA6G,YAAAxE,MAAAY,SAEA8gB,GAAA,EAKA,IAAAA,EAEA,IAAA,GAAA/jB,GAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IACA,CACA,GAAAokB,GAAAnhB,EAAAjD,GACA8G,EAAAsd,EAAAvd,SAEA,IAAAC,IAAAzE,MAAAY,OACA,CACA,GAAA8W,GAAAqK,EAAArK,KACA7C,EAAA6C,EAAA9C,WACAoN,EAAAhiB,KAAAY,OAAA6D,GAEAsU,EAAAlE,EAAAI,MAAAjV,KAAA8a,MAAArW,IACAuU,EAAAgJ,EAAAvE,UAAA2E,GACA5I,EAAAuI,EAAAvE,SAAA,GACA/D,EAAAsI,EAAAvE,SAAA6E,GAEAJ,EAAA,GAAAllB,OAAAwc,UAAA9U,EAAAoQ,EAAAkE,EAAAC,EAAAQ,EAAAC,GACAyI,EAAA,GAAAnlB,OAAAwf,MAAA9X,EAAAwd,EAAAN,EAAAE,EAAA,EAAA,EAAA,GAAA,GAAAlF,aAEAuF,GAAA/b,KAAA4b,EAEA/hB,KAAA2gB,WAAAuB,OAIAH,GAAA5d,OAAAwd,EAEA3hB,KAAA2gB,WAAAoB,OAOA,KAAA,GAAApkB,GAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IAEAqC,KAAA2gB,WAAA/f,EAAAjD,GAIA,OAAAqC,OAcAuiB,QAAA,SAAA/d,EAAAge,EAAAne,EAAAF,EAAAQ,EAAAtB,EAAAe,GAEA,GAAAK,GAAA1H,MAAAyH,UAAAA,GACAqQ,EAAA9X,MAAA6X,WAAAnQ,EAAAmQ,YACAW,EAAA/Q,IAAAxE,MAAA8a,MAAAjG,EAAAI,MAAAjV,KAAA8a,MAAAtW,KAAA,EACAgR,EAAAX,EAAAlK,MAAA6X,EAAA/d,EAAAC,cAEAgT,EAAA,GAAA3a,OAAAqd,MAAA5V,EAAAqQ,EAAAU,EAAAC,GACApU,EAAA,GAAArE,OAAAwf,MAAA/X,EAAAkT,EAAArT,EAAAM,EAAAR,EAAAC,EAAAf,GAAA,EAIA,OAFArD,MAAA2gB,WAAAvf,EAAAub,eAEA3c,KAAA6gB,YAaA4B,YAAA,SAAAC,EAAAre,EAAAF,EAAAQ,EAAAtB,EAAAe,GAEA,IAAA,GAAAI,KAAAke,GACA,CACA,GAAAje,GAAA1H,MAAAyH,UAAAA,GACAqQ,EAAA9X,MAAA6X,WAAAnQ,EAAAmQ,YACAW,EAAA/Q,IAAAxE,MAAA8a,MAAAjG,EAAAI,MAAAjV,KAAA8a,MAAAtW,KAAA,EACAgR,EAAAX,EAAAlK,MAAA+X,EAAAle,GAAAC,EAAAC,cAEAgT,EAAA,GAAA3a,OAAAqd,MAAA5V,EAAAqQ,EAAAU,EAAAC,GACApU,EAAA,GAAArE,OAAAwf,MAAA/X,EAAAkT,EAAArT,EAAAM,EAAAR,EAAAC,EAAAf,GAAA,EAEArD,MAAA2gB,WAAAvf,EAAAub,eAGA,MAAA3c,MAAA6gB,YAeAxG,MAAA,SAAA7V,EAAAme,EAAAC,EAAAve,EAAAF,EAAAQ,EAAAtB,EAAAe,GAEA,GAAAK,GAAA1H,MAAAyH,UAAAA,GACAqQ,EAAA9X,MAAA6X,WAAAnQ,EAAAmQ,YACAW,EAAAV,EAAAlK,MAAAgY,EAAAle,EAAAC,cACA8Q,EAAAX,EAAAlK,MAAAiY,EAAAne,EAAAC,cAEAgT,EAAA,GAAA3a,OAAAqd,MAAA5V,EAAAqQ,EAAAU,EAAAC,GACApU,EAAA,GAAArE,OAAAwf,MAAA/X,EAAAkT,EAAArT,EAAAM,EAAAR,EAAAC,EAAAf,GAAA,EAIA,OAFArD,MAAA2gB,WAAAvf,EAAAub,eAEA3c,KAAA6gB,YAcAgC,UAAA,SAAAF,EAAAC,EAAAve,EAAAF,EAAAQ,EAAAtB,EAAAe,GAEA,IAAA,GAAAI,KAAAme,GACA,CACA,GAAAle,GAAA1H,MAAAyH,UAAAoG,OACAiK,EAAA9X,MAAA6X,WAAAnQ,EAAAmQ,YACAW,EAAAV,EAAAlK,MAAAgY,EAAAne,GAAAC,EAAAC,cACA8Q,EAAAX,EAAAlK,MAAAiY,EAAApe,GAAAC,EAAAC,cAEAgT,EAAA,GAAA3a,OAAAqd,MAAA5V,EAAAqQ,EAAAU,EAAAC,GACApU,EAAA,GAAArE,OAAAwf,MAAA/X,EAAAkT,EAAArT,EAAAM,EAAAR,EAAAC,EAAAf,GAAA,EAEArD,MAAA2gB,WAAAvf,EAAAub,eAGA,MAAA3c,MAAA6gB,YAUAiC,kBAAA,SAAA1C,GAEA,GAAA2C,GAAA/iB,KAAAgjB,UAAA5C,EAAA,SAAAhf,EAAAqD,IAEArD,EAAA0d,cAAA1d,EAAAob,oBAEApb,EAAAmc,WAAAvd,KAAA8a,MAAA9a,KAAA8a,MAAArW,GAAA,GAEAzE,KAAAmb,QAAA1W,IAAA,IAOA,OAFAzE,MAAA3B,QAEA0kB,GAQAtE,oBAAA,WAEA,GAAAwE,GAAA,CAEA,KAAA,GAAAxe,KAAAzE,MAAAY,OACA,CACA,GAAA0F,GAAAtG,KAAAY,OAAA6D,EAEA6B,GAAA8W,eAEA6F,EAAAlgB,KAAAjB,IAAAmhB,EAAAjjB,KAAAY,OAAA6D,GAAAia,+BAIA,MAAAuE,IAQAC,IAAA,SAAA1e,GAEA,GAAA3G,GAAAmC,KACAmjB,IAEA,OAAA,YAEA,GAAA3e,IAAA3G,GAAAid,MAEA,MAAAjd,GAAAid,MAAAtW,EAGA2e,GAAA3e,IAAA,CAEA,IAAA4e,GAAAvlB,EAAAwlB,IAAAF,EAEA,OAAApmB,OAAAiB,UAAAolB,EAAA5e,IAEA4e,EAAA5e,GAGAzH,MAAAyH,UAAAA,GAAAE,eAeA4e,OAAA,SAAA9e,EAAAkT,EAAArT,EAAAF,EAAAQ,EAAAtB,EAAAe,GAEA,GAAAsT,GAAA3a,MAAA2a,KAAAA,GAGAtW,EAAA,GAAArE,OAAAwf,MACA/X,EACAkT,EACA3a,MAAAwC,SAAA8E,EAAAtH,MAAAmH,SAAAG,UACAtH,MAAA4H,OAAAA,GACA5H,MAAAwC,SAAA4E,EAAApH,MAAAmH,SAAAC,OACApH,MAAAwC,SAAA6E,EAAArH,MAAAmH,SAAAE,OACArH,MAAAwC,SAAA8D,EAAAtG,MAAAmH,SAAAb,SACA,EAKA,OAFArD,MAAA2gB,WAAAvf,EAAAub,eAEA3c,KAAA6gB,YAWA0C,WAAA,SAAAnD,EAAAvf,EAAA2iB,GAEAzmB,MAAAwB,SAAA6hB,KAEAA,EAAAA,EAAArf,MAAA,KAGA,IAAA0iB,IAAA1mB,MAAAmB,WAAA2C,GACAV,IAEA,IAAApD,MAAAW,QAAA0iB,GAEA,IAAA,GAAAziB,GAAA,EAAAA,EAAAyiB,EAAAxiB,OAAAD,IACA,CACA,GAAA8G,GAAA2b,EAAAziB,EAEA8G,KAAA+e,KAEAC,EAEAtjB,EAAArC,KAAA0lB,EAAA/e,IAIA5D,EAAAzC,KAAA4B,KAAAwjB,EAAA/e,GAAAA,QAOA,KAAA,GAAAA,KAAA+e,GAEAC,EAEAtjB,EAAArC,KAAA0lB,EAAA/e,IAIA5D,EAAAzC,KAAA4B,KAAAwjB,EAAA/e,GAAAA,EAKA,OAAAgf,GAAAtjB,EAAAH,MASAgjB,UAAA,SAAA5C,EAAAvf,GAEA,MAAAb,MAAAujB,WAAAnD,EAAAvf,EAAAb,KAAAY,SASAugB,WAAA,SAAAf,EAAAvf,GAEA,MAAAb,MAAAujB,WAAAnD,EAAAvf,EAAAb,KAAAmgB,UASAuD,KAAA,SAAAtD,GAEA,MAAApgB,MAAAgjB,UAAA5C,EAAA,SAAAhf,EAAAqD,SAEAzE,MAAAY,OAAA6D,MAWA+Q,IAAA,SAAA4K,GAEA,MAAApgB,MAAAgjB,UAAA5C,EAAA,SAAAhf,GAEA,KAAAA,EAAA+E,MAEA/E,EAAAA,EAAA+E,IAGA/E,GAAAic,OAAArd,KAAA8a,UAUAuC,OAAA,SAAA+C,GAEA,MAAApgB,MAAAgjB,UAAA5C,EAAA,SAAAhf,GAEAA,EAAAic,OAAArd,KAAA8a,UAUA8D,MAAA,SAAAwB,GAEA,MAAApgB,MAAAgjB,UAAA5C,EAAA,SAAAhf,GAEAA,EAAAwd,WAUAC,OAAA,SAAAuB,GAEA,MAAApgB,MAAAgjB,UAAA5C,EAAA,SAAAhf,GAEAA,EAAAyd,YASA8E,IAAA,SAAAvD,GAEA,IAAA,GAAA3b,KAAA2b,GAEApgB,KAAA8a,MAAArW,GAAA2b,EAAA3b,GACAzE,KAAAmb,QAAA1W,IAAA,CAKA,OAFAzE,MAAA3B,QAEA2B,MASAqjB,IAAA,SAAAjD,GAEA,GAAAxZ,KAEA,KAAA,GAAAnC,KAAA2b,GAEAxZ,EAAAnC,GAAAzE,KAAA8a,MAAArW,EAGA,OAAAmC,IAMAgd,UAAA,WAEA,IAAA,GAAAnf,KAAAzE,MAAAY,OAEA,OAAA,CAGA,QAAA,GAMAijB,WAAA,WAEA,IAAA,GAAApf,KAAAzE,MAAAmgB,QAEA,OAAA,CAGA,QAAA,GAMAhD,YAAA,WAEA,GAAAnd,KAAA6jB,aAEA,OAAA,CAGA,KAAA,GAAApf,KAAAzE,MAAAY,OAEA,GAAAZ,KAAAY,OAAA6D,GAAA0Y,cAEA,OAAA,CAIA,QAAA,GASAngB,QAAA,SAAA8mB,GAEA,GAAA9mB,GAAAgD,KAAAhD,OAOA,OALAD,OAAAmB,WAAA4lB,KAEA9mB,EAAA8mB,EAAA9mB,IAGAA,GAWAkJ,MAAA,SAAAb,EAAAjE,EAAAP,GAEA,MAAA,IAAA9D,OAAAgnB,cAAA/jB,KAAAA,KAAAqF,EAAAjE,EAAAP,KAQA9D,MAAAwD,SAAAxD,MAAAE,SAAAgI,WAKAlI,MAAAgnB,cAAA,SAAAlmB,EAAAuH,EAAAC,EAAAjE,GAEApB,KAAAkF,OAAArH,EAAAuH,EAAAC,EAAAjE,IAMArE,MAAAgnB,cAAA9e,UAAA,GAAAlI,OAAA8H,MAAA9H,MAAAgnB,eAEA,OAAA,QAAA,aAAA,UAAA,MAAA,SAAA,QACA,SAAA,MAAA,OAAA,SAAA,oBAAA,UACA,QAAA,YAAA,cAAA,SAAA,WAAA,QACA,cAAA,eCpmCAhnB,MAAAU,UAAA,SAAAmN,GAEA7N,MAAAW,QAAAkN,IAEA5K,KAAAgkB,KAAApZ,IAOAvN,OAAA6iB,GAAAnjB,MAAAU,UAAAwH,UAAA,GAAAzG,OAOAnB,OAAA6iB,GAAA+D,KAAA,SAAAC,EAAApjB,GAEA,IAAA,GAAAnD,GAAA,EAAAA,EAAAqC,KAAApC,QAEAsmB,EAAA9lB,KAAA0C,GAAAd,KAAArC,GAAAqC,KAAArC,GAAAA,MAAA,EAFAA,KAQA,MAAAqC,OAQA3C,OAAA6iB,GAAA8D,KAAA,SAAAzmB,GAEA,IAAA,GAAAI,GAAA,EAAAA,EAAAJ,EAAAK,OAAAD,IAEAqC,KAAAlC,KAAAP,EAAAI,GAGA,OAAAqC,OAQA3C,OAAA6iB,GAAAiE,OAAA,SAAAC,GAIA,IAAA,GAFAC,GAAA,EAEA1mB,EAAA,EAAAA,EAAAqC,KAAApC,OAAAD,IACA,CACA,GAAA2mB,GAAAF,EAAApkB,KAAArC,GAEA2mB,KAEAtkB,KAAAqkB,KAAArkB,KAAArC,IAMA,MAFAqC,MAAApC,OAAAymB,EAEArkB,MASA3C,OAAA6iB,GAAA5iB,SAAA,SAAAwmB,GAIA,IAAA,GAFAxmB,MAEAK,EAAA,EAAAA,EAAAqC,KAAApC,OAAAD,IAEAL,EAAAQ,KAAAkC,KAAArC,GAQA,OALAZ,OAAAmB,WAAA4lB,KAEAxmB,EAAAwmB,EAAAxmB,IAGAA,GAMAD,OAAA6iB,GAAA5H,MAAA,WAEA,MAAAtY,MAAA,IAMA3C,OAAA6iB,GAAAqE,QAAA,WAKA,IAAA,GAHAlM,GAAArY,KAAApC,OAAA,EACA4mB,EAAAzhB,KAAAC,MAAAhD,KAAApC,OAAA,GAEAD,EAAA,EAAA6mB,EAAA7mB,EAAAA,IACA,CACA,GAAA8mB,GAAAzkB,KAAArC,GACAokB,EAAA/hB,KAAAqY,EAAA1a,EAEAqC,MAAArC,GAAAokB,EACA/hB,KAAAqY,EAAA1a,GAAA8mB,EAGA,MAAAzkB,OAQA3C,OAAA6iB,GAAAW,SAAA,WAEA,IAAA,GAAAljB,GAAA,EAAAA,EAAAqC,KAAApC,OAAAD,IACA,CACA,GAAAE,GAAAmC,KAAArC,EAEAE,GAAAyiB,SAEAziB,EAAAyiB,QAAA,EACAvjB,MAAA2nB,UAAA5mB,KAAAD,IAWA,MAPAd,OAAA4nB,UAEA5nB,MAAA4nB,SAAA,EACA5nB,MAAAiF,QAAA,YACAjF,MAAA6nB,WAAA7nB,MAAA8nB,MAGA7kB,MAUA3C,OAAA6iB,GAAA4E,SAAA,SAAA3gB,EAAAQ,EAAAwa,EAAAC,GAEA,MAAA,IAAAriB,OAAAgoB,SAAA/kB,KAAAmE,EAAAQ,EAAAwa,EAAAC,IAMA/hB,OAAA6iB,GAAAK,QAAAxjB,MAAA6C,SAAA,UAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAQ,YAAA3jB,MAAA6C,SAAA,cAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAS,WAAA5jB,MAAA6C,SAAA,aAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAM,UAAAzjB,MAAA6C,SAAA,YAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAArF,OAAA9d,MAAA6C,SAAA,SAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAA7hB,MAAAtB,MAAA6C,SAAA,QAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAU,WAAA7jB,MAAA6C,SAAA,aAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAY,WAAA/jB,MAAA6C,SAAA,aAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAa,QAAAhkB,MAAA6C,SAAA,UAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAtI,OAAA7a,MAAA6C,SAAA,SAAA7C,MAAA6C,SAAAM,gBACA7C,OAAA6iB,GAAAgB,SAAAnkB,MAAA6C,SAAA,WAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAkB,KAAArkB,MAAA6C,SAAA,OAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAoB,WAAAvkB,MAAA6C,SAAA,aAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAvB,MAAA5hB,MAAA6C,SAAA,QAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAsB,YAAAzkB,MAAA6C,SAAA,cAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAwB,WAAA3kB,MAAA6C,SAAA,aAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAA4B,iBAAA/kB,MAAA6C,SAAA,mBAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAiC,eAAAplB,MAAA6C,SAAA,iBAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAoC,qBAAAvlB,MAAA6C,SAAA,uBAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAA7F,MAAAtd,MAAA6C,SAAA,QAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAqC,QAAAxlB,MAAA6C,SAAA,UAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAA2C,UAAA9lB,MAAA6C,SAAA,YAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAuC,YAAA1lB,MAAA6C,SAAA,cAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAA4C,kBAAA/lB,MAAA6C,SAAA,oBAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAoD,OAAAvmB,MAAA6C,SAAA,SAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAA8C,UAAAjmB,MAAA6C,SAAA,YAAA7C,MAAA6C,SAAAM,gBACA7C,OAAA6iB,GAAAiB,WAAApkB,MAAA6C,SAAA,aAAA7C,MAAA6C,SAAAM,gBACA7C,OAAA6iB,GAAAwD,KAAA3mB,MAAA6C,SAAA,OAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAA1K,IAAAzY,MAAA6C,SAAA,MAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAA7C,OAAAtgB,MAAA6C,SAAA,SAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAtB,MAAA7hB,MAAA6C,SAAA,QAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAArB,OAAA9hB,MAAA6C,SAAA,SAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAyD,IAAA5mB,MAAA6C,SAAA,MAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAmD,IAAAtmB,MAAA6C,SAAA,MAAA7C,MAAA6C,SAAAQ,cACA/C,OAAA6iB,GAAA/C,YAAApgB,MAAA6C,SAAA,cAAA7C,MAAA6C,SAAAU,aACAjD,OAAA6iB,GAAA0D,UAAA7mB,MAAA6C,SAAA,YAAA7C,MAAA6C,SAAAU,aACAjD,OAAA6iB,GAAA2D,WAAA9mB,MAAA6C,SAAA,aAAA7C,MAAA6C,SAAAU,aACAjD,OAAA6iB,GAAAlf,GAAAjE,MAAA6C,SAAA,KAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAjf,KAAAlE,MAAA6C,SAAA,OAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAA1e,IAAAzE,MAAA6C,SAAA,MAAA7C,MAAA6C,SAAAG,aACA1C,OAAA6iB,GAAAle,QAAAjF,MAAA6C,SAAA,UAAA7C,MAAA6C,SAAAG,aCvMAhD,MAAA4nB,SAAA,EASA5nB,MAAAioB,MAAA,EAKAjoB,MAAA2nB,UAAA,GAAA3nB,OAAAU,UAOAV,MAAA6nB,WAAA,WAKA,IAAA,GAHAK,IAAA,KAAA,MAAA,SAAA,KACAC,EAAAja,OAAAka,sBAEAlnB,EAAA,EAAAA,EAAAgnB,EAAArnB,SAAAsnB,IAAAjnB,EAEAinB,EAAAja,OAAAga,EAAAhnB,GAAA,wBAGA,KAAAinB,EACA,CACA,GAAAE,GAAA,CAEA,OAAA,UAAAvkB,GAEA,GACAwkB,IADAtoB,MAAA+B,MACAiE,KAAAjB,IAAA,EAAA,IAAAwjB,SAAAF,KACAG,EAAAta,OAAAua,WAAA,WAAA3kB,EAAAykB,SAAAD,IAAAA,EAEA,OADAD,GAAAE,SAAAD,EACAE,GAIA,MAAA,UAAA1kB,GAEAqkB,EAAArkB,OAWA9D,MAAAoY,IAAA,SAAAtX,GAEAA,EAAAyiB,SAEAvjB,MAAA2nB,UAAA5mB,KAAAD,GAEAA,EAAAyiB,QAAA,GAGAvjB,MAAA4nB,UAEA5nB,MAAA4nB,SAAA,EACA5nB,MAAAiF,QAAA,YACAjF,MAAA6nB,WAAA7nB,MAAA8nB,OAYA9nB,MAAA8nB,IAAA,WAEA9nB,MAAAiF,QAAA,QAEA,IAAAlD,GAAA/B,MAAA+B,KAGA/B,OAAA2nB,UAAAT,KAAA,SAAApmB,GAEAA,EAAA2iB,cAIAzjB,MAAA2nB,UAAAT,KAAA,SAAApmB,GAEAA,EAAAgd,OAAA/b,KAIA/B,MAAA2nB,UAAAT,KAAA,SAAApmB,GAEAA,EAAAQ,UAIAtB,MAAA2nB,UAAAP,OAAA,SAAAtmB,GAQA,MANAA,GAAAwiB,WAEAxiB,EAAAijB,aACAjjB,EAAAyiB,QAAA,GAGAziB,EAAAwiB,WAGAtjB,MAAAiF,QAAA,OAGAjF,MAAA2nB,UAAA9mB,QAAAb,MAAAioB,KAEAjoB,MAAA6nB,WAAA7nB,MAAA8nB,MAIA9nB,MAAA4nB,SAAA,EACA5nB,MAAAiF,QAAA,cAOAjF,MAAAwD,SAAAxD,OClJAA,MAAAgoB,SAAA,SAAAxnB,EAAA4G,EAAAQ,EAAAwa,EAAAC,GAEApf,KAAAzC,UAAAA,EACAyC,KAAAmE,MAAApH,MAAAoH,MAAAA,GACAnE,KAAA2E,OAAA5H,MAAA4H,OAAAA,GACA3E,KAAAmf,UAAApiB,MAAAoiB,UAAAA,EAAAC,GACApf,KAAAof,QAAAA,GAGAriB,MAAAgoB,SAAA9f,WAEAwgB,SAAA,WAEA,MAAAzlB,MAAAmE,OAAAnE,KAAAzC,UAAAK,OAAA,IAGAojB,aAAA,SAAArjB,GAMA,IAAA,GAJAiD,GAAAZ,KAAAmf,UAAAU,YACApK,EAAA9X,GAAAqC,KAAAzC,UAAAK,OAAA,GACA8nB,EAAA1lB,KAAA2E,OAAA8Q,GAAAzV,KAAAylB,WAEAnkB,EAAA,EAAAA,EAAAV,EAAAhD,OAAA0D,IAEAV,EAAAU,GAAA6C,OAAAuhB,CAGA,OAAA9kB,IAGA2jB,QAAA,WAIA,MAFAvkB,MAAAzC,UAAAgnB,UAEAvkB,MAGAohB,KAAA,SAAAC,GAEA,GAAAyD,GAAA9kB,IAOA,OALAA,MAAAzC,UAAA0mB,KAAA,SAAApmB,EAAAF,GAEAE,EAAAyjB,WAAAwD,EAAA9D,aAAArjB,GAAA0jB,KAGArhB,KAAAmV,OAGAwJ,MAAA,WAEA,GAAAmG,GAAA9kB,KACAyhB,EAAA,EACAwB,IAqBA,OAnBAjjB,MAAAzC,UAAA0mB,KAAA,SAAApmB,EAAAF,GAEAslB,EAAAtlB,GAAAE,EAAA4gB,sBACAgD,EAAA1e,KAAAjB,IAAA2f,EAAAwB,EAAAtlB,MAGAqC,KAAAzC,UAAA0mB,KAAA,SAAApmB,EAAAF,GAKA,IAAA,GAHA+nB,GAAAjE,EAAAwB,EAAAtlB,GACAiD,EAAAkkB,EAAA9D,aAAArjB,GAEAA,EAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IAEAiD,EAAAjD,GAAAwG,OAAAuhB,CAGA7nB,GAAA2jB,YAAA5gB,KAGAZ,KAAAmV,OAiBAA,IAAA,WAKA,MAHAnV,MAAAzC,UAAAsjB,WACA7gB,KAAAzC,UAAAulB,oBAEA9iB,OCxFAjD,MAAA0f,OAAA,SAAAA,GAEA,MAAAA,aAAA1f,OAAA4oB,OAEAlJ,EAEA1f,MAAAwB,SAAAke,IAAAA,IAAA1f,OAAA0f,OAEA1f,MAAA0f,OAAAA,IAGA,GAMA1f,MAAA4oB,OAAA,aAKA5oB,MAAA4oB,OAAA1gB,WAWA0F,MAAA,WAEA,OAAA,GAiBAqV,MAAA,SAAAb,EAAAyG,EAAAC,EAAAjlB,GAQA,IAAA,GANAklB,GAAA3G,EAAA2G,cACA3M,EAAAgG,EAAAhG,YACA4M,EAAA5G,EAAA4G,WACAC,EAAA7G,EAAA6G,WACAC,EAAA9G,EAAA8G,YAEAtoB,EAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IACA,CACA,GAAA2I,GAAA1F,EAAAjD,GACA8G,EAAA6B,EAAA9B,SAEA8B,GAAAuW,cAAA7c,OAKAsG,EAAA3B,OAAA5H,MAAA4H,OAAA5H,MAAAwC,SAAA4Z,EAAA1U,GAAAmhB,EAAAjhB,OAAAkhB,EAAAlhB,QAAA2B,EAAA3B,QACA2B,EAAAjD,OAAAtG,MAAAsG,OAAAtG,MAAAwC,SAAA0mB,EAAAxhB,GAAAmhB,EAAAviB,OAAAwiB,EAAAxiB,QAAAiD,EAAAjD,QACAiD,EAAAnC,MAAApH,MAAAkF,KAAAlF,MAAAwC,SAAAwmB,EAAAthB,GAAAmhB,EAAAzhB,MAAA0hB,EAAA1hB,OAAAmC,EAAAnC,OACAmC,EAAAlC,MAAArH,MAAAkF,KAAAlF,MAAAwC,SAAAymB,EAAAvhB,GAAAmhB,EAAAxhB,MAAAyhB,EAAAzhB,OAAAkC,EAAAlC,OACAkC,EAAAjC,SAAAtH,MAAAkF,KAAAlF,MAAAwC,SAAAumB,EAAArhB,GAAAmhB,EAAAvhB,SAAAwhB,EAAAxhB,UAAAiC,EAAAjC,cC9EAtH,MAAAmpB,aAAA,aAMAnpB,MAAAmpB,aAAAjhB,UAAA,GAAAlI,OAAA4oB,OAUA5oB,MAAAmpB,aAAAjhB,UAAA0F,MAAA,SAAAwU,EAAAC,EAAAxe,GAMA,GAAA8X,GAAAyG,EAAAzG,OACAyN,EAAAhH,EAAAgH,MAEA,KAAAppB,MAAAiB,UAAA0a,GACA,CACA,GAAA0N,GAAA,CAEA,KAAA,GAAA3hB,KAAA0hB,GAEAC,GAGA1N,KAEA,KAAA,GAAA/a,GAAA,EAAAyoB,EAAAzoB,EAAAA,IAEA+a,EAAA/a,GAAAA,GAAAyoB,EAAA,GAGA,GAAArpB,MAAAW,QAAAgb,GACA,CACA,GAAA2N,KAEA,KAAA,GAAA5hB,KAAA0hB,GAEAE,EAAA5hB,GAAAiU,CAGAA,GAAA2N,EAGA,GAAAP,GAAA3G,EAAA2G,cACA3M,EAAAgG,EAAAhG,YACA4M,EAAA5G,EAAA4G,WACAC,EAAA7G,EAAA6G,WACAC,EAAA9G,EAAA8G,WAEA,KAAA,GAAAxhB,KAAA0hB,GACA,CACA,GAAApI,GAAAoI,EAAA1hB,GACAmQ,GAAA,EACAlQ,GAAA,CAEAD,KAAA1H,OAAAyH,WAEAoQ,EAAA7X,MAAA6X,WAAA7X,MAAAyH,UAAAC,GAAAmQ,YACAlQ,EAAA3H,MAAAyH,UAAAC,GAAAC,eAIAkQ,EAAA7X,MAAA6X,WAAA7X,WACA2H,EAAAkQ,EAAAE,SAGA,KAAA,GAAAxT,GAAA,EAAAA,EAAAyc,EAAAngB,OAAA0D,IAEAyc,EAAAzc,GAAAsT,EAAAjK,MAAAoT,EAAAzc,GAAAoD,EAGA,IAAAL,GAAAtH,MAAAwC,SAAAumB,EAAArhB,GAAA2a,EAAA/a,SAAAtH,MAAAmH,SAAAG,UACAM,EAAA5H,MAAAwC,SAAA4Z,EAAA1U,GAAA2a,EAAAza,OAAA5H,MAAAmH,SAAAS,QACAR,EAAApH,MAAAwC,SAAAwmB,EAAAthB,GAAA2a,EAAAjb,MAAApH,MAAAmH,SAAAC,OACAC,EAAArH,MAAAwC,SAAAymB,EAAAvhB,GAAA2a,EAAAhb,MAAArH,MAAAmH,SAAAE,OACAf,EAAAtG,MAAAwC,SAAA0mB,EAAAxhB,GAAA2a,EAAA/b,OAAAtG,MAAAmH,SAAAb,QAEAqU,EAAA,GAAA3a,OAAA0b,UAAAhU,EAAAmQ,EAAAuR,EAAA1hB,GAAAiU,EAAAjU,IACArD,EAAA,GAAArE,OAAAwf,MAAA9X,EAAAiT,EAAArT,EAAAM,EAAAR,EAAAC,EAAAf,GAAA,EAAArD,KAEAY,GAAA9C,KAAAsD,KAKArE,MAAA0f,OAAA0J,OAAA,GAAAppB,OAAAmpB,aC/FAnpB,MAAAupB,YAAA,aAMAvpB,MAAAupB,YAAArhB,UAAA,GAAAlI,OAAA4oB,OAUA5oB,MAAAupB,YAAArhB,UAAA0F,MAAA,SAAAwU,EAAAC,EAAAxe,GAIA,GAAAulB,GAAAhH,EAAAA,SAEA4G,EAAA5G,EAAA4G,WACAD,EAAA3G,EAAA2G,aAIA,KAAA,GAAArhB,KAAA0hB,GACA,CACA,GAAApI,GAAAoI,EAAA1hB,GACAmQ,GAAA,EACAlQ,GAAA,CAEAD,KAAA1H,OAAAyH,WAEAoQ,EAAA7X,MAAA6X,WAAA7X,MAAAyH,UAAAC,GAAAmQ,YACAlQ,EAAA3H,MAAAyH,UAAAC,GAAAC,eAIAkQ,EAAA7X,MAAA6X,WAAA7X,WACA2H,EAAAkQ,EAAAE,UAGAiJ,EAAAnJ,EAAAjK,MAAAoT,EAAArZ,EAEA,IAAAP,GAAApH,MAAAoH,MAAApH,MAAAwC,SAAAwmB,EAAAthB,GAAA2a,EAAAjb,QACAE,EAAAtH,MAAAsH,SAAAtH,MAAAwC,SAAAumB,EAAArhB,GAAA2a,EAAA/a,WAEAqT,EAAA,GAAA3a,OAAAkc,UAAAxU,EAAAmQ,EAAAmJ,GACA3c,EAAA,GAAArE,OAAAwf,MAAA9X,EAAAiT,EAAA,EAAA3a,MAAA4H,OAAA5H,WAAAoH,EAAAE,EAAA,EAAA,GAAA,EAAArE,KAEAY,GAAA9C,KAAAsD,KAkBArE,MAAAupB,YAAArhB,UAAA+a,MAAA,SAAAb,EAAAyG,EAAAC,EAAAjlB,GAKA,IAAA,GAHAklB,GAAA3G,EAAA2G,cACAC,EAAA5G,EAAA4G,WAEApoB,EAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IACA,CACA,GAAA2I,GAAA1F,EAAAjD,GACA8G,EAAA6B,EAAA9B,SAEA,IAAA8B,EAAAuW,cAAA7c,KAAA,CAKA,GAAAmE,GAAApH,MAAAwC,SAAAwmB,EAAAthB,GAAAmhB,EAAAzhB,MAAA0hB,EAAA1hB,OACAE,EAAAtH,MAAAwC,SAAAumB,EAAArhB,GAAAmhB,EAAAvhB,SAAAwhB,EAAAxhB,SAEAiC,GAAAnC,MAAApH,MAAAoH,MAAAA,GAAApH,MAAAsH,SAAAA,MAKAtH,MAAA0f,OAAA1f,SAAA,GAAAA,OAAAupB,YC7FAvpB,MAAAwpB,cAAA,aAMAxpB,MAAAwpB,cAAAthB,UAAA,GAAAlI,OAAA4oB,OAUA5oB,MAAAwpB,cAAAthB,UAAA0F,MAAA,SAAAwU,EAAAC,EAAAxe,GAIA,GAAAulB,GAAAhH,EAAAqH,QAEAT,EAAA5G,EAAA4G,UAIA,KAAA,GAAAthB,KAAA0hB,GACA,CACA,GAAApI,GAAAoI,EAAA1hB,GACAmQ,GAAA,EACAlQ,GAAA,CAEAD,KAAA1H,OAAAyH,WAEAoQ,EAAA7X,MAAA6X,WAAA7X,MAAAyH,UAAAC,GAAAmQ,YACAlQ,EAAA3H,MAAAyH,UAAAC,GAAAC,eAIAkQ,EAAA7X,MAAA6X,WAAA7X,WACA2H,EAAAkQ,EAAAE,UAGAiJ,EAAAnJ,EAAAjK,MAAAoT,EAAArZ,EAEA,IAAAP,GAAApH,MAAAoH,MAAApH,MAAAwC,SAAAwmB,EAAAthB,GAAA2a,EAAAjb,QAEAuT,EAAA,GAAA3a,OAAAkc,UAAAxU,EAAAmQ,EAAAmJ,GACA3c,EAAA,GAAArE,OAAAwf,MAAA9X,EAAAiT,EAAA,EAAA3a,MAAA4H,OAAA5H,WAAAoH,EAAA,EAAA,GAAA,EAAAnE,KAEAY,GAAA9C,KAAAsD,KAkBArE,MAAAwpB,cAAAthB,UAAA+a,MAAA,SAAAb,EAAAyG,EAAAC,EAAAjlB,GAKA,IAAA,GAFAmlB,IADA5G,EAAA2G,cACA3G,EAAA4G,YAEApoB,EAAA,EAAAA,EAAAiD,EAAAhD,OAAAD,IACA,CACA,GAAA2I,GAAA1F,EAAAjD,GACA8G,EAAA6B,EAAA9B,SAEA8B,GAAAuW,cAAA7c,OAKAsG,EAAAnC,MAAApH,MAAAkF,KAAAlF,MAAAwC,SAAAwmB,EAAAthB,GAAAmhB,EAAAzhB,MAAA0hB,EAAA1hB,OAAAmC,EAAAnC,UAKApH,MAAA0f,OAAA+J,QAAA,GAAAzpB,OAAAwpB,cCxFAxpB,MAAA0pB,eAAA,aAMA1pB,MAAA0pB,eAAAxhB,UAAA,GAAAlI,OAAA4oB,OAUA5oB,MAAA0pB,eAAAxhB,UAAA0F,MAAA,SAAAwU,EAAAC,EAAAxe,GASA,GAAA8lB,GAAAvH,EAAA9F,SAEAyM,EAAA3G,EAAA2G,cACA3M,EAAAgG,EAAAhG,YACA4M,EAAA5G,EAAA4G,WACAC,EAAA7G,EAAA6G,WACAC,EAAA9G,EAAA8G,YAEArhB,EAAA7H,MAAA4H,OAAA5H,MAAAwC,SAAA6f,EAAAxa,QAAA7H,MAAAmH,SAAAU,UAEA+hB,GAAA,EAEApQ,GACAqQ,KAAA,IACArR,MAAA,IACAiR,QAAA,IACAlO,MAAA,IACAuO,KAAA,KACAnQ,OAAA,KACAoQ,GAAA,MACAtR,IAAA,MACA6C,KAAA,MAIA,KAAA,GAAApW,KAAAykB,GAEA,GAAAzkB,IAAAsU,GAEAmQ,EAAAnQ,EAAAtU,IAAAykB,EAAAzkB,SAEAykB,GAAAzkB,OAEA,IAAA,KAAAA,EAAAmE,QAAA,KACA,CAGA,IAAA,GAFA2gB,GAAA9kB,EAAAlB,MAAA,KAEApD,EAAA,EAAAA,EAAAopB,EAAAnpB,OAAAD,IAEA+oB,EAAAK,EAAAppB,IAAA+oB,EAAAzkB,SAGAykB,GAAAzkB,GAEA0kB,GAAA,EAIA,GAAAI,MAGA3B,EAAA,EACA4B,EAAA,CAEA,KAAA,GAAA/kB,KAAAykB,GACA,CACA,GAAAngB,GAAApD,WAAAlB,EAEAgC,OAAAsC,SAEAmgB,GAAAzkB,IAIAmjB,EAAA7e,IAEAogB,GAAA,GAGAI,EAAAjpB,MACAmpB,MAAA1gB,EACA2gB,IAAAjlB,EACA8b,MAAA2I,EAAAzkB,KAGAmjB,EAAA7e,EAEAygB,EAAAjkB,KAAAjB,IAAAklB,EAAAzgB,IAKA,GAAAogB,EACA,CACAI,EAAAJ,KAAA,SAAAnnB,EAAAC,GACA,MAAAD,GAAAynB,MAAAxnB,EAAAwnB,QAGAP,IAEA,KAAA,GAAA/oB,GAAA,EAAAA,EAAAopB,EAAAnpB,OAAAD,IAEA+oB,EAAAK,EAAAppB,GAAAupB,KAAAH,EAAAppB,GAAAogB,MAWA,IAAA,GANArF,MACAyN,KACAgB,KACAjjB,KACAkjB,KAEAzpB,EAAA,EAAAA,EAAAopB,EAAAnpB,OAAAD,IACA,CACA,GAAAmd,GAAAiM,EAAAppB,GACAgH,EAAA5H,MAAAwC,SAAAub,EAAAiD,MAAApZ,OAAAya,EAAAza,cAEAmW,GAAAiD,MAAApZ,MAEA,KAAA,GAAAF,KAAAqW,GAAAiD,MAEAtZ,IAAAiU,KAEAA,EAAAjU,MACA0hB,EAAA1hB,MACA2iB,EAAA3iB,MAEAA,IAAA1H,OAAAyH,WAEA2iB,EAAA1iB,GAAA1H,MAAA6X,WAAA7X,MAAAyH,UAAAC,GAAAmQ,YACA1Q,EAAAO,GAAA1H,MAAAyH,UAAAC,GAAAC,eAIAyiB,EAAA1iB,GAAA1H,MAAA6X,WAAA7X,WACAmH,EAAAO,GAAA0iB,EAAA1iB,GAAAqQ,WAIA4D,EAAAjU,GAAA3G,KAAAgd,EAAAmM,MAAAD,GACAb,EAAA1hB,GAAA3G,KAAAqpB,EAAA1iB,GAAAkG,MAAAmQ,EAAAiD,MAAAtZ,GAAAP,EAAAO,KACA2iB,EAAA3iB,GAAA3G,KAAAf,MAAA4H,OAAA5H,MAAAwC,SAAA4Z,EAAA1U,GAAAE,KAKA,IAAA,GAAAF,KAAAiU,GACA,CACA,GAAArU,GAAAtH,MAAAwC,SAAAumB,EAAArhB,GAAA2a,EAAA/a,UACAF,EAAApH,MAAAwC,SAAAwmB,EAAAthB,GAAA2a,EAAAjb,OACAC,EAAArH,MAAAwC,SAAAymB,EAAAvhB,GAAA2a,EAAAhb,OACAf,EAAAtG,MAAAwC,SAAA0mB,EAAAxhB,GAAA2a,EAAA/b,QAEAqU,EAAA,GAAA3a,OAAAmc,aAAAzU,EAAA0iB,EAAA1iB,GAAA0hB,EAAA1hB,GAAAiU,EAAAjU,GAAA2iB,EAAA3iB,IACArD,EAAA,GAAArE,OAAAwf,MAAA9X,EAAAiT,EAAArT,EAAAO,EAAAT,EAAAC,EAAAf,GAAA,EAAArD,KAEAY,GAAA9C,KAAAsD,KAKArE,MAAA0f,OAAApD,SAAA,GAAAtc,OAAA0pB,eCjLA1pB,MAAAsqB,YAAA,aAMAtqB,MAAAsqB,YAAApiB,UAAA,GAAAlI,OAAA4oB,OAUA5oB,MAAAsqB,YAAApiB,UAAA0F,MAAA,SAAAwU,EAAAC,EAAAxe,GAIA,GAAA2hB,GAAApD,EAAAoD,QAEAuD,EAAA3G,EAAA2G,cACA3M,EAAAgG,EAAAhG,YACA4M,EAAA5G,EAAA4G,WACAC,EAAA7G,EAAA6G,WACAC,EAAA9G,EAAA8G,WAEA,KAAA,GAAAxhB,KAAA8d,GACA,CACA,GAAA3N,GAAA,KACAlQ,GAAA,CAEAD,KAAA1H,OAAAyH,WAEAoQ,EAAA7X,MAAA6X,WAAA7X,MAAAyH,UAAAC,GAAAmQ,YACAlQ,EAAA3H,MAAAyH,UAAAC,GAAAC,eAIAkQ,EAAA7X,MAAA6X,WAAA7X,WACA2H,EAAAkQ,EAAAE,SAGA,IAAAiJ,GAAAnJ,EAAAjK,MAAA4X,EAAA9d,GAAAC,GACAL,EAAAtH,MAAAwC,SAAAumB,EAAArhB,GAAA2a,EAAA/a,UACAM,EAAA5H,MAAAwC,SAAA4Z,EAAA1U,GAAA2a,EAAAza,QACAR,EAAApH,MAAAwC,SAAAwmB,EAAAthB,GAAA2a,EAAAjb,OACAC,EAAArH,MAAAwC,SAAAymB,EAAAvhB,GAAA2a,EAAAhb,OACAf,EAAAtG,MAAAwC,SAAA0mB,EAAAxhB,GAAA2a,EAAA/b,QAEAqU,EAAA,GAAA3a,OAAAqd,MAAA3V,EAAAmQ,GAAA,EAAAmJ,GACA3c,EAAA,GAAArE,OAAAwf,MAAA9X,EAAAiT,EAAArT,EAAAM,EAAAR,EAAAC,EAAAf,GAAA,EAAArD,KAEAY,GAAA9C,KAAAsD,KAKArE,MAAA0f,OAAA8F,QAAA,GAAAxlB,OAAAsqB,YCxDAtqB,MAAAG,QAAA,SAAAF,EAAA2J,GAEA,IAAA,GAAA2gB,KAAAvqB,OAAAG,QACA,CACA,GAAAA,GAAAH,MAAAG,QAAAoqB,EAEA,IAAApqB,EAAAqqB,GAAAvqB,GAEA,MAAAE,GAIA,GAAAyJ,EAEA,OAAA,CAGA,MAAA,iCAAA3J,GAMAD,MAAAyqB,QAAA,aAKAzqB,MAAAyqB,QAAAviB,WASAsiB,GAAA,WAEA,OAAA,GASApqB,YAAA,WAEA,OAAA,GAUAK,aAAA,SAAAR,EAAAO,GAEAA,EAAAO,KAAAkC,KAAA7C,YAAAH,KASA+jB,QAAA,cC1EAhkB,MAAA0qB,cAAA,aAMA1qB,MAAA0qB,cAAAxiB,UAAA,GAAAlI,OAAAyqB,QAQAzqB,MAAA0qB,cAAAxiB,UAAAsiB,GAAA,SAAAvqB,GAEA,MAAAD,OAAA0B,SAAAzB,KAAAD,MAAA2B,UAAA1B,KAAAD,MAAAW,QAAAV,IASAD,MAAA0qB,cAAAxiB,UAAA9H,YAAA,SAAAH,GAEA,GAAAa,GAAAb,EAAA0qB,SAUA,OARA7pB,KAEAA,EAAA,GAAAd,OAAAE,SAAAD,GACAa,EAAAX,QAAA8C,KAEAhD,EAAA0qB,UAAA7pB,GAGAA,GASAd,MAAA0qB,cAAAxiB,UAAA8b,QAAA,SAAAljB,SAEAA,GAAAb,QAAA0qB,WAMA3qB,MAAAG,QAAAsD,OAAA,GAAAzD,OAAA0qB","file":"anim8js-object.min.js","sourcesContent":["\n/**\n * Converts a subject into an animator and returns it. If the subject \n * is already an animator it's returned immediately.\n *\n * @param {any} subject\n */\nm8 = anim8 = function(subject) \n{\n  if ( subject instanceof anim8.Animator )\n  {\n    return subject;\n  }\n\n  var factory = anim8.factory( subject, true );\n\n  if ( factory === false )\n  {\n    return false;\n  }\n\n  return factory.animatorFor( subject );\n};\n\n/**\n * Converts an array of subjects into an array of Animators.\n *\n * @param {array} subject\n */\nm8s = anim8s = function(subjects)\n{\n  var factory = anim8.factory( subjects, true );\n  var animators = [];\n\n  if ( factory !== false )\n  {\n    factory.animatorsFor( subjects, animators );\n\n    return new anim8.Animators( animators );\n  }\n\n  if ( !anim8.isArray( subjects ) )\n  {\n    subjects = [ subjects ];\n  }\n\n  var animators = [];\n\n  for (var i = 0; i < subjects.length; i++)\n  {\n    var animator = anim8( subjects[i] );\n\n    if ( animator !== false )\n    {\n      animators.push( animator );\n    }\n  }\n\n  return new anim8.Animators( animators );\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return !!(x && x.constructor && x.call && x.apply);\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n/**\n * If the user is interested in seeing warnings they can override this by specifying\n * a function which accepts a text argument providing a generc message, a second argument\n * which has the input that caused the warning, and a third agument with the object\n * throwing the warning. Most warnings that are thrown occur when an animation is\n * trying to be parsed an the user provided an invalid animation, time, easing, etc.\n *\n * @param {string} message\n * @param {any} source\n */\nanim8.log = false;\n\n/**\n * Returns the size of the variable. The size of a variable is dependent on the variable\n * type. For arrays and strings their length is returned. If it's an object the number of\n * enumerable properties is returned. If it's a number, the number is returned. Otherwise\n * zero is returned.\n *\n * @param {any} x\n */\n anim8.size = function(x)\n {\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length;\n  }\n  else if ( x === null )\n  {\n    return 0;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    var size = 0;\n\n    for (var prop in x)\n    {\n      size++;\n    }\n\n    return size;\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n};\n\n/**\n * Determines whether the given variable is empty.\n *\n * @param {any} x\n */\nanim8.isEmpty = function(x)\n{\n  if ( anim8.isArray( x ) || anim8.isString( x ) )\n  {\n    return x.length > 0;\n  }\n  else if ( x === null )\n  {\n    return true;\n  }\n  else if ( anim8.isObject( x ) )\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n  }\n  else if ( anim8.isNumber( x ) )\n  {\n    return x !== 0.0;\n  }\n\n  return true;\n};\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n\n  case anim8.delegate.RETURN_TRUE:\n    return function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        if ( this[i][functionName].apply( this[i], arguments ) )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n/**\n * True if any of the methods return true, otherwise false.\n */\nanim8.delegate.RETURN_TRUE = 'true';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[ property ] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || $this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\t\t\tvar max = eventListeners.length;\n      \n      for (var i = 0; i < max; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n\t\t\t\tif ( eventListeners.length !== max )\n\t\t\t\t{\n\t\t\t\t\tlisteners[ event ] = eventListeners.slice( max );\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t        eventListeners.length = 0;\t\n\t\t\t\t}\n      }\n\t\t}\n  };\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n * @param [any] returnOnInvalid\n */\nanim8.time = (function()\n{\n  var regex = /^(-?\\d*(\\.\\d+)|-?\\d+)(ms|s|c|cs|third|jiffy|sec|m|min|h|hr)?$/;\n  \n  var conversions = {\n    ms:     1,\n    c:      100,\n    cs:     100,\n    jiffy:  1000 / 60,\n    third:  1000 / 60,\n    s:      1000,\n    sec:    1000,\n    m:      1000 * 60,\n    min:    1000 * 60,\n    h:      1000 * 60 * 60,\n    hr:     1000 * 60 * 60\n  };\n  \n  return function(time, returnOnInvalid) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      // raw numbers are considered milliseconds\n      return Math.floor( time );\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor( time );\n      }\n    }\n    \n    return anim8.coalesce( returnOnInvalid, 0 );\n  };\n  \n})();\n\n/**\n * Parses repeats from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n */\nanim8.repeat = (function() \n{\n  var conversions = {\n    inf:        Number.POSITIVE_INFINITY,\n    infinity:   Number.POSITIVE_INFINITY,\n    infinite:   Number.POSITIVE_INFINITY,\n    once:       1,\n    twice:      2,\n    thrice:     3,\n    dozen:      12,\n    random:     4 // chosen by fair dice roll. guaranteed to be random.\n  };\n\n  return function(repeat, returnOnInvalid)\n  {\n    if ( anim8.isNumber( repeat ) )\n    {\n      return repeat;\n    }\n    if ( anim8.isString( repeat ) )\n    {\n      repeat = repeat.toLowerCase();\n\n      if ( repeat in conversions )\n      {\n        return conversions[ repeat ];\n      }\n      else\n      {\n        var parsed = parseInt( repeat );\n\n        if ( !isNaN(parsed) )\n        {\n          return parsed;\n        }\n      }\n    }\n\n    return anim8.coalesce( returnOnInvalid, anim8.defaults.repeat );\n  };\n\n})();\n\n/**\n * Parses delay from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n * @see anim8.time\n */ \nanim8.delay = function(time)\n{\n  return anim8.time( time, anim8.defaults.delay );\n};\n\n/**\n * Parses sleep from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n * @see anim8.time\n */ \nanim8.sleep = function(time)\n{\n  return anim8.time( time, anim8.defaults.sleep );\n};\n\n/**\n * Parses duration from a string or number.\n *\n * @param {string|number}\n * @param [any] returnOnInvalid\n * @see anim8.time\n */ \nanim8.duration = function(time)\n{\n  return anim8.time( time, anim8.defaults.duration );\n};\n\n\n/**\n * Provides a way to wrap a variable so calculators don't try copying it on parse.\n *\n * @param {any} variable\n */\nanim8.constant = function(variable)\n{\n  return function() \n  {\n    return variable;\n  };\n};\n\n\n/*****************************************************************\n  REGISTRIES\n******************************************************************/\n\n/* Attributes are the animatable properties of a subject\n\n  anim8.attribute[name] = {\n    // the default value for an attribute if none exists on the subject\n    defaultValue: 0,\n    // the name of the calculator this attribute requires for mathematical operations. default value: anim8.calculator.default\n    calculator: calculatorName,\n    // other values can be specified here that the respective factory might use\n    \"factory specific attributes\"\n  }\n*/\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.attribute = function(attr) \n{\n  if ( anim8.isObject(attr) && anim8.isDefined(attr.defaultValue) ) \n\t{\n    return attr;\n  }\n  if ( anim8.isString(attr) && attr in anim8.attribute ) \n\t{\n    return anim8.attribute[ attr ];\n  }\n\t\n  return anim8.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.attribute.default = {defaultValue: 0};\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n\n  /**\n   * The default animation duration in milliseconds.\n   */\n  duration: 1000,\n\n  /**\n   * The default easing\n   */\n  easing: 'ease',\n\n  /**\n   * The default \"total easing\" which is the overall easing\n   * for an animation which actually has easing values per frame.\n   */\n  teasing: 'linear',\n\n  /**\n   * The default animation delay in milliseconds.\n   */\n  delay: 0,\n\n  /**\n   * The default animation sleep in milliseconds.\n   */\n  sleep: 0,\n\n  /**\n   * The default number of repeats for an animation.\n   */\n  repeat: 1\n\n};\n","anim8.Defer = function(factory, methods)\n{\n\tthis.$factory = factory;\n\t\n\tfor (var i = 0; i < methods.length; i++)\n\t{\t\n\t\tthis[ methods[i] ] = this.$push( methods[i] );\n\t}\n};\n\nanim8.Defer.prototype = \n{\t\n\t$reset: function(eventable, previous, eventType, event, callback)\n\t{\n\t\tthis.$eventable = eventable;\n\t\tthis.$previous = previous;\n\t\tthis.$eventType = eventType;\n\t\tthis.$event = event;\n    this.$callback = callback;\n\t\tthis.$calls = [];\n\t\tthis.$next = [];\n\t\t\n\t\tif ( this.$isRoot() )\n\t\t{\n\t\t\tthis.$register();\n\t\t}\n\t},\n\t$isRoot: function()\n\t{\n\t\treturn this.$eventable === this.$previous;\n\t},\n\t$register: function()\n\t{\n\t\tthis.$eventable[ this.$eventType ]( this.$event, this.$run, this );\n\t},\n\t$push: function(methodName)\n\t{\n\t\treturn function() \n\t\t{\n\t\t\tthis.$calls.push( [methodName, arguments] );\n\t\t\t\n\t\t\treturn this;\n\t\t};\n\t},\n\t$run: function() \n\t{\n    if ( anim8.isFunction( this.$callback ) )\n    {\n      this.$callback.call( this.$eventable, this );\n    }\n    \n\t\tfor (var i = 0; i < this.$calls.length; i++)\n\t\t{\n\t\t\tvar call = this.$calls[ i ];\n\t\t\t\n\t\t\tthis.$eventable[ call[0] ].apply( this.$eventable, call[1] );\n\t\t}\n\t\t\n\t\tfor (var k = 0; k < this.$next.length; k++)\n\t\t{\n\t\t\tthis.$next[ k ].$register();\n\t\t}\n\t},\n\tundefer: function()\n\t{\n\t\treturn this.$previous;\n\t},\n\tdefer: function(eventType, event, callback)\n\t{\n\t\tvar next = new this.$factory( this.$eventable, this, eventType, event, callback );\n\t\t\n\t\tthis.$next.push( next );\n\t\t\n\t\treturn next;\n\t}\n};","\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing, returnOnInvalid) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 && anim8.isNumber( easing[0] ) && anim8.isNumber( easing[1] ) && anim8.isNumber( easing[2] ) && anim8.isNumber( easing[3] ) ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  if ( anim8.isDefined( returnOnInvalid ) )\n  {\n    return returnOnInvalid;\n  }\n  \n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType, optional)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n  \n  if ( optional )\n  {\n    return false;\n  }\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n\n/**\n * Easing & Easing Type functions\n */\n\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) {\n\t\treturn easing( x );\n\t};\n};\n\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) {\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } else {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\nanim8.easingType.pong = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x );\n\t  } else {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDAuMyooMS14KSooMS14KSp4KSsoMy4wKigxLXgpKngqeCkrKHgqeCp4KSkqKDEteCkreCooMS0oMS14KSooMS14KSooMS14KSooMS14KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJ4KngqeCp4KngiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KngpKyh4KngpLXgiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzaW4oeCoxLjU3MDc5NjMyNjc5KSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLXgqKDcuMC8xMCkpKngqKDEwLjAvMy4wKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10)) * x * (10.0 / 3.0);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeCp4KigoMi4wKngqeCp4KSt4KngtKDQuMCp4KSsyLjApKSotc2luKHgqMTAuOTk1NTc0Mjg3NikiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJhYnMoeC1zaW4oeCozLjE0MTU5MjY1MzU5KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWNvcyh4KngqeCozNi4wKSooMS4wLXgpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgqeCkqY29zKHgqeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS4wLXgpKmNvcyh4KngqMTQuODA0NDA2NjAxNikpKSIsImNvbG9yIjoiIzAwMDAwMCJ9LHsidHlwZSI6MTAwMCwid2luZG93IjpbIi0wLjE5MjUwMDAwMDAwMDAwMDI1IiwiMS40MzI0OTk5OTk5OTk5OTk5IiwiMC4wMTc0OTk5OTk5OTk5OTk4NzciLCIxLjAxNzQ5OTk5OTk5OTk5OTgiXX1d\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjE0LjgwNDQwNjYwMTYpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMS4wLWFicygoMS14KSooMS14KSpjb3MoeCp4KjcpKSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoY29zKHgqeCoxMi4wKSp4KigxLjAteCkreCkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiJzcXJ0KHgpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoKDEuMC0oMS14KSooMS14KSooMS14KSooMS14KSkreCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIobG9nKHgpKzIuMCkqMC41IiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x) + 2.0) * 0.5;\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoeDwwLjc_KHgqLTAuMzU3KTooKCh4LTAuNykqKHgtMC43KSoyNy41LTAuNSkqMC41KSkiLCJjb2xvciI6IiMwMDAwMDAifSx7InR5cGUiOjEwMDAsIndpbmRvdyI6WyItMC4xOTI1MDAwMDAwMDAwMDAyNSIsIjEuNDMyNDk5OTk5OTk5OTk5OSIsIjAuMDE3NDk5OTk5OTk5OTk5ODc3IiwiMS4wMTc0OTk5OTk5OTk5OTk4Il19XQ--\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIxLXNxcnQoMS14KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\n// http://fooplot.com/#W3sidHlwZSI6MCwiZXEiOiIoMy4wKigxLjAteCkqeCp4KSsoeCp4KngpIiwiY29sb3IiOiIjMDAwMDAwIn0seyJ0eXBlIjoxMDAwLCJ3aW5kb3ciOlsiLTAuMTkyNTAwMDAwMDAwMDAwMjUiLCIxLjQzMjQ5OTk5OTk5OTk5OTkiLCIwLjAxNzQ5OTk5OTk5OTk5OTg3NyIsIjEuMDE3NDk5OTk5OTk5OTk5OCJdfV0-\nanim8.easing.gentle = function(x)\n{\n  return (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  \n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n\nanim8.easing.default      = anim8.easing.ease;","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return this.invalidColor;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.coalesce( color.a, 1.0 );\n  var cr = anim8.coalesce( color.r, 255 );\n  var cg = anim8.coalesce( color.g, 255 );\n  var cb = anim8.coalesce( color.b, 255 );\n  \n  if (ca === 1.0)\n  {\n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};\n\n/**\n * The color to return when input is invalid.\n */\nanim8.color.invalidColor = anim8.color.defaultValue =\n{\n  r: 255,\n  g: 255,\n  b: 255,\n  a: 1.0\n};","/**\n * Calculators perform math and basic operations for a specific data structure. Calculators have the following methods.\n *\n *  parse(x, default)\n *  copy(out, copy)\n * -clone(out)\n *  create()\n *  zero(out)\n * -scale(out, scale)\n * -add(out, amount)\n *  adds(out, amount, amountScale)\n * -sub(out, amount)\n *  mul(out, scale)\n * -interpolate(out, start, end, delta)\n *  distanceSq(a, b)\n *  isValid(a)\n *  isNaN(a)\n *  isZero(a, epsilon)\n *  isEqual(a, b, epsilon)\n */\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n\tif ( anim8.isObject(calc) )\n\t{\n\t\treturn calc;\n\t}\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Creates a calculator and fills in any missing methods where possible.\n * \n * @param {string} name\n * @param {object} methods\n */\nanim8.calculator.create = function(name, methods)\n{\n  var defaultMethods = \n\t{\n\t  clone: function(out) \n\t\t{\n\t    return this.copy( this.create(), out );\n\t  },\n\t  scale: function(out, scale) \n\t\t{\n\t    return this.adds( out, out, scale - 1 );\n\t  },\n\t  add: function(out, amount) \n\t\t{\n\t    return this.adds( out, amount, 1 );\n\t  },\n\t  sub: function(out, amount) \n\t\t{\n\t    return this.adds( out, amount, -1 );\n\t  },\n\t  interpolate: function(out, start, end, delta) \n\t\t{\n\t    out = this.zero( out );\n\t    out = this.adds( out, start, 1 - delta );\n\t    out = this.adds( out, end, delta );\n\t    return out;\n\t  },\n\t\tdistance: function(a, b)\n\t\t{\n\t\t\treturn Math.sqrt( this.distanceSq( a, b ) );\n\t\t},\n    isPristine: function(x)\n    {\n      return ( x === true || anim8.isFunction( x ) );\n    }\n\t};\n  \n  for (var method in defaultMethods)\n  {\n    if ( !(method in methods) )\n    {\n      methods[ method ] = defaultMethods[ method ];\n    }\n  }\n  \n\tanim8.calculator[name] = methods; \n};\n\n/**\n * A calculator for number primitives.\n */\nanim8.calculator.create('number', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\tif ( anim8.isString( x ) )\n\t\t{\n\t\t\tx = parseFloat( x );\n\t\t\t\n\t\t\tif (!isNaN(x))\n\t\t\t{\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn defaultValue;\n\t},\n  copy: function(out, copy) \n\t{\t\n    return copy;\n  },\n  create: function() \n\t{\n    return 0.0;\n  },\n  zero: function(out) \n\t{\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n\t{\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n\t{\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a - b) < epsilon;\n  }\n});\n\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.calculator.create('2d', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y )\n\t\t\t};\n\t\t}\n    if ( anim8.isString( x ) )\n    {\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.calculator.create('3d',\n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\t\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y ),\n\t\t\t\tz: anim8.coalesce( x.z, defaultValue.z )\n\t\t\t};\n\t\t}\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.calculator.create('quaternion', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y ),\n\t\t\t\tz: anim8.coalesce( x.z, defaultValue.z ),\n\t\t\t\tangle: anim8.coalesce( x.angle, defaultValue.angle )\n\t\t\t};\n\t\t}\n    \n    if ( anim8.isDefined( defaultValue ) )\n    {\n      return this.clone( defaultValue );      \n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.calculator.create('rgb', \n{\n\tparse: function(x, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn anim8.color.parse( x );\n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.calculator.create('rgba', \n{\n\tparse: function(a, defaultValue)\n\t{\n    if ( this.isPristine( x ) )\n    {\n      return x;\n    }\n\t\tif ( anim8.isNumber( a ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: a,\n\t\t\t\tg: a,\n\t\t\t\tb: a,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn anim8.color.parse( a );\n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  }\n});\n\n/**\n * Sets the default calculator to the numeric calculator.\n */\nanim8.calculator.default = anim8.calculator.number;","anim8.path = function(path)\n{\n  if ( path instanceof anim8.Path )\n  {\n    return path;\n  }\n  if ( anim8.isString( path ) && path in anim8.path )\n  {\n    return anim8.path[ spring ];\n  }\n  if ( anim8.isObject( path ) && path.type in anim8.path )\n  {\n    return anim8.path[ path.type ]( path );\n  }\n  \n  return false;\n};\n\n\nanim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.trues = this.hasTrue();\n  },\n  compute: function(out, delta) \n\t{\n    return out;\n  },\n  hasTrue: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if (ps[i] === true) \n      {\n        return true;\n      }\n    }\n    return false;\n  },\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n  point: function(i)\n  {\n    return this.points[ i ];\n  },\n  resolvePoint: function(i)\n  {\n    var p = this.points[ i ];\n    \n    if ( anim8.isFunction( p ) )\n    {\n      p = p();\n    }\n    \n    return p;\n  }\n};\n\n\n\n\n\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.DeltaPath.prototype = new anim8.Path();\n\nanim8.DeltaPath.prototype.compute = function(out, delta) \n{\n  var ds = this.deltas;\n  var end = ds.length - 2;\n  var i = 0;\n  while (ds[i + 1] < delta && i < end) i++;\n  var d0 = ds[i];\n  var d1 = ds[i + 1];\n  var pd = (delta - d0) / (d1 - d0);\n  var p0 = this.resolvePoint( i );\n  var p1 = this.resolvePoint( i + 1 );\n  \n  return this.calculator.interpolate( out, p0, p1, pd );\n};\n  \nanim8.DeltaPath.prototype.copy = function() \n{\n    return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n};\n\nanim8.path.delta = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n\n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.DeltaPath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas\n  );\n};\n\n\n\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.PointPath.prototype = new anim8.Path();\n\nanim8.PointPath.prototype.compute = function(out, delta)\n{\n  return this.calculator.copy( out, this.resolvePoint( 0 ) );\n};\n  \nanim8.PointPath.prototype.copy = function() \n{\n  return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n};\n\nanim8.path.point = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.PointPath(\n    path.name,\n    calc,\n    calc.parse( path.point )\n  );\n};\n\n\n\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.KeyframePath.prototype = new anim8.Path();\n\nanim8.KeyframePath.prototype.compute = function(out, delta) \n{  \n  var ds = this.deltas;\n  var end = ds.length - 2;\n  \n  if ( delta < ds[0] ) {\n    return false;\n  }\n  \n  if ( delta > ds[ds.length - 1] ) {\n    return this.points[ds.length - 1];\n  }\n  \n  var i = 0;\n  while (ds[i + 1] < delta && i < end) i++;\n  var d0 = ds[i];\n  var d1 = ds[i + 1];\n  var pd = (delta - d0) / (d1 - d0);\n  var p0 = this.resolvePoint( i );\n  var p1 = this.resolvePoint( i + 1 );\n  var ea = this.easings[i];\n  \n  return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n};\n  \nanim8.KeyframePath.prototype.copy = function() \n{\n  return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n};\n\nanim8.path.keyframe = function(point)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  if (!path.deltas)\n  {\n    path.deltas = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.deltas[ i ] = i / ( path.points.length - 1 );\n    }\n  }\n  \n  var defaultEasing = anim8.easing( path.easings, null );\n  \n  if ( !anim8.isDefined( path.easings ) || !anim8.isArray( path.easings ) || defaultEasing !== null )\n  {\n    path.easings = [];\n    \n    for (var i = 0; i < path.points.length; i++)\n    {\n      path.easings[ i ] = defaultEasing;\n    }\n  }\n  \n  for (var i = 0; i < path.easings.length; i++)\n  {\n    path.easings[ i ] = anim8.easing( path.easings[ i ] );\n  }\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.KeyframePath(\n    path.name,\n    calc,\n    path.points,\n    path.deltas,\n    path.easings\n  );\n};\n\n\n\n\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.CubicPath.prototype = new anim8.Path();\n\nanim8.CubicPath.prototype.compute = function(out, d1)\n{\n  var calc = this.calculator;\n  var d2 = d1 * d1;\n  var d3 = d1 * d2;\n  var i1 = 1 - d1;\n  var i2 = i1 * i1;\n  var i3 = i1 * i2;\n  \n  out = calc.copy( out, this.resolvePoint( 0 ) );\n  out = calc.scale( out, i3 );\n  out = calc.adds( out, this.resolvePoint( 1 ), 3 * i2 * d1 );\n  out = calc.adds( out, this.resolvePoint( 2 ), 3 * i1 * d2 );\n  out = calc.adds( out, this.resolvePoint( 3 ), d3 );\n  \n  return out;\n};\n  \nanim8.CubicPath.prototype.copy = function() \n{\n  return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n};\n\nanim8.path.cubic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.CubicPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 ),\n    calc.parse( path.p3 )\n  );\n};\n\n\n\n\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.QuadraticPath.prototype = new anim8.Path();\n\nanim8.QuadraticPath.prototype.compute = function(out, d1)\n{\n  var calc = this.calculator;\n  var d2 = d1 * d1;\n  var i1 = 1 - d1;\n  var i2 = i1 * i1;\n  \n  out = calc.copy( out, this.resolvePoint( 0 ) );\n  out = calc.scale( out, i2 );\n  out = calc.adds( out, this.resolvePoint( 1 ), 2 * i1 * d1 );\n  out = calc.adds( out, this.resolvePoint( 2 ), d2 );\n    \n  return out;\n};\n  \nanim8.QuadraticPath.prototype.copy = function() \n{\n  return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n};\n\nanim8.path.quadratic = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.QuadraticPath(\n    path.name,\n    calc,\n    calc.parse( path.p0 ),\n    calc.parse( path.p1 ),\n    calc.parse( path.p2 )\n  );\n};\n\n\n\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.CompiledPath.prototype = new anim8.Path();\n\nanim8.CompiledPath.prototype.compute = function(out, delta)\n{\n  var a = Math.floor( delta * this.points.length );\n  var index = Math.min( a, this.points.length - 1 );\n  \n  return this.calculator.copy( out, this.resolvePoint( index ) );\n};\n  \nanim8.CompiledPath.prototype.copy = function() \n{\n  return new anim8.CompiledPath( this.name, this, this.points.length );\n};\n\nanim8.path.compiled = function(path)\n{\n  return new anim8.CompiledPath(\n    path.name,\n    anim8.path( path.path ),\n    path.pointCount\n  );\n};\n\n\n\n\n\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [start, end] );\n};\n\nanim8.Tween.prototype = new anim8.Path();\n\nanim8.Tween.prototype.compute = function(out, delta)\n{\n  return this.calculator.interpolate( out, this.resolvePoint( 0 ), this.resolvePoint( 1 ), delta );\n};\n  \nanim8.Tween.prototype.copy = function() \n{\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n};\n\nanim8.path.tween = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  return new anim8.Tween(\n    path.name, \n    calc,\n    calc.parse( path.start ),\n    calc.parse( path.end )\n  );\n};\n\n\n\n\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.JumpPath.prototype = new anim8.Path();\n\nanim8.JumpPath.prototype.compute = function(out, delta)\n{\n  var a = Math.floor( delta * this.points.length );\n  var index = Math.min( a, this.points.length - 1 );\n  \n  return this.calculator.copy( out, this.resolvePoint( index ) );\n};\n  \nanim8.JumpPath.prototype.copy = function() \n{\n  return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n};\n\nanim8.path.jump = function(path)\n{\n  var calc = anim8.calculator( path.calculator );\n  \n  for (var i = 0; i < path.points.length; i++)\n  {\n    path.points[ i ] = calc.parse( path.points[i] );\n  }\n  \n  return new anim8.JumpPath(\n    path.name, \n    calc,\n    path.points\n  );\n};\n\n","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.Spring.prototype = \n{\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  reset: function(attribute, calculator, rest, position, gravity)\n  {\n    var calc = anim8.calculator( calculator );\n    var a = anim8.attribute( attribute );\n    \n    this.attribute    = attribute;\n    this.calculator   = calc;\n    this.rest         = calc.parse( rest, a.defaultValue );\n    this.position     = calc.parse( position, a.defaultValue );\n    this.gravity      = calc.parse( gravity, calc.create() );\n    this.velocity     = calc.create();\n    this.time         = 0;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} now\n   * @param {object} frame\n   */\n  update: function(now, frame)\n  {\n    if (this.time === 0)\n    {\n      this.time = now;\n    }\n    \n    var calc = this.calculator;\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (now - this.time) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = calc.copy( {}, this.position );\n    \n    // call the update method which should update the position\n    this.updateVelocity( dt );\n    this.velocity = calc.adds( this.velocity, this.gravity, dt );\n    this.position = calc.adds( this.position, this.velocity, dt );\n    \n    this.time = now;\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !calc.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Resolves the position to the expected format.\n   */\n  resolveRest: function()\n  {\n    return anim8.isFunction( this.rest ) ? this.rest() : this.rest;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  updateVelocity: function(dt)\n  {\n    \n  }\n};\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n\n\n\n/**\n * A box spring is a simple string\n */\nanim8.BoxSpring = function(attribute, calculator, position, rest, constant, gravity)\n{\n  var a = anim8.attribute( attribute );\n    \n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.acceleration   = this.calculator.create();\n  this.constant       = this.calculator.parse( constant, a.defaultValue );\n};\n\nanim8.BoxSpring.prototype = new anim8.Spring();\n\nanim8.BoxSpring.prototype.updateVelocity = function(dt)\n{\n  var calc = this.calculator;\n  \n  this.acceleration = calc.copy( this.acceleration, this.resolveRest() );\n  this.acceleration = calc.sub( this.acceleration, this.position );\n  this.acceleration = calc.mul( this.acceleration, this.constant );\n  this.velocity     = calc.adds( this.velocity, this.acceleration, dt );\n};\n\nanim8.spring.box = function(spring)\n{ \n  return new anim8.BoxSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.constant,\n    spring.gravity\n  );\n};\n\n\n\n\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness, gravity)\n{\n  var a = anim8.attribute( attribute );\n  \n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.damping      = this.calculator.parse( damping, a.defaultValue );\n  this.stiffness    = this.calculator.parse( stiffness, a.defaultValue );\n  this.temp0        = this.calculator.create();\n  this.temp1        = this.calculator.create();\n};\n\nanim8.LinearSpring.prototype = new anim8.Spring();\n\nanim8.LinearSpring.prototype.updateVelocity = function(dt)\n{\n  // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n\t// position += velocity * elapsed.seconds;\n    \n  var calc = this.calculator;\n\n  this.temp1 = calc.copy( this.temp1, this.damping );\n  this.temp1 = calc.mul( this.temp1, this.velocity );\n  \n  this.temp0 = calc.copy( this.temp0, this.position );\n  this.temp0 = calc.sub( this.temp0, this.resolveRest() );\n  this.temp0 = calc.mul( this.temp0, this.stiffness );\n  this.temp0 = calc.sub( this.temp0, this.temp1 );\n  \n  this.velocity = calc.adds( this.velocity, this.temp0, dt );\n};\n\nanim8.spring.linear = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};\n\n\n\n\n\n\n\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness, gravity)\n{\n  this.reset( attribute, calculator, rest, position, gravity );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = this.calculator.create();\n};\n\nanim8.DistanceSpring.prototype = new anim8.Spring();\n\nanim8.DistanceSpring.prototype.updateVelocity = function(dt)\n{\n  // d = DISTANCE( position, rest )\n  // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n  // position += velocity * elapsed.seconds;\n\n  var calc = this.calculator;\n  var rest = this.resolveRest();\n  \n  var d = calc.distance( this.position, rest );\n  \n  this.temp = calc.copy( this.temp, this.position )\n  this.temp = calc.sub( this.temp, rest );\n  \n  if ( d !== 0 )\n  {\n  \tthis.temp = calc.scale( this.temp, 1.0 / d );\n  \tthis.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n  }\n\n  this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n  this.velocity = calc.adds( this.velocity, this.temp, dt );\n};\n\nanim8.spring.distance = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.distance,\n    spring.damping,\n    spring.stiffness,\n    spring.gravity\n  );\n};","\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat, hasInitialState, parser) \n{\n  this.attribute \t      = attribute;\n  this.path \t\t\t      = path;\n  this.easing \t\t      = anim8.easing( easing );\n  this.delay \t\t\t      = anim8.delay( delay );\n  this.duration \t      = anim8.duration( duration );\n  this.sleep \t\t\t      = anim8.sleep( sleep );\n  this.repeat \t\t      = anim8.repeat( repeat );\n  this.hasInitialState  = hasInitialState;\n  this.parser           = parser;\n};\n\nanim8.Event.prototype = \n{\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this );\n  },\n  clone: function()\n  {\n    return new anim8.Event( this.attribute, this.path, this.duration, this.easing, this.delay, this.sleep, this.repeat, this.hasInitialState, this.parser );\n  },\n  getParser: function()\n  {\n    return this.parser;\n  }\n};\n\nanim8.EventInstance = function(event)\n{\n\tthis.event \t\t\t      = event;\n\tthis.attribute \t      = event.attribute;\n\tthis.path \t\t\t      = event.path;\n\tthis.duration \t      = event.duration;\n\tthis.easing \t\t      = event.easing;\n\tthis.delay \t\t\t      = event.delay;\n\tthis.sleep \t\t\t      = event.sleep;\n\tthis.repeat \t\t      = event.repeat;\n  this.state \t\t\t      = anim8.EventState.CREATED;\n  this.time \t\t\t      = 0;\n  this.pauseTime \t      = 0;\n  this.pauseState       = 0;\n\tthis.elapsed\t\t      = 0;\n\tthis.next\t\t\t\t      = null;\n};\n\nanim8.EventInstance.prototype = \n{\n  update: function(now, frame) \n\t{\n    var updated = false;\n    var elapsed = this.catchup( now );\n    \n    if ( this.isAnimating() ) \n\t\t{\t\t\t\n      var delta = elapsed / this.duration;\n      \n      if (delta >= 1 || this.duration === 0)\n\t\t\t{\n        if (!this.isInfinite() && --this.repeat === 0) \n\t\t\t\t{\n          this.finish(frame);\n\t\t\t\t\t\n          return true;\n        } \n\t\t\t\telse \n\t\t\t\t{\n          if (this.sleep)\n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING ); \n            delta = 1;\n            \n            this.trigger('sleeping', this);\n          } \n\t\t\t\t\telse \n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.ANIMATING );\n            delta -= 1;\n          }\n        }\n      }\n      \n      this.applyValue( frame, frame[this.attribute], delta );\n      updated = true;\n    }\n    \n    return updated;\n  },\n  hasInitialState: function()\n  {\n    return this.event.hasInitialState;\n  },\n  getParser: function()\n  {\n    return this.event.parser;\n  },\n  getPoint: function(delta)\n  {\n    return this.path.compute( this.path.calculator.create(), this.easing( delta ) );\n  },\n  getFuture: function(fdelta)\n  {\n    return this.getPoint( Math.min( 1.0, this.getDelta() + fdelta ) );\n  },\n  getDelta: function()\n  {\n    return this.isAnimating() ? Math.min( 1.0, (anim8.now() - this.time) / this.duration ) : 0.0;\n  },\n  getStart: function()\n  {\n    return this.getPoint( 0 );\n  },\n  getEnd: function() \n\t{\n    return this.getPoint( 1 );\n  },\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n        \n    if ( value !== false )\n    {\n      frame[this.attribute] = value;\n    }\n  },\n  catchup: function(now)\n\t{\n    if ( this.isPaused() )\n    {\n      return;\n    }\n    \n    if ( this.state === anim8.EventState.CREATED )\n\t\t{\n      this.time = now;\n\t\t\t\n      if ( this.delay )\n\t\t\t{\n        this.state = anim8.EventState.DELAYED;\n        \n        this.trigger('delaying', this);\n      } \n\t\t\telse\n\t\t\t{\n        this.state = anim8.EventState.ANIMATING;\n      }\n    }\n    \n\t\tvar elapsed = now - this.time;\n    \n    if ( this.isDelayed() )\n\t\t{\n      if ( elapsed > this.delay ) \n\t\t\t{\n        this.trigger('delayed', this);\n        \n        elapsed = this.progress( elapsed, this.delay, anim8.EventState.ANIMATING );\n      }\n    }\n\t\t\n    if ( this.isSleeping() )\n\t\t{\n      if ( elapsed > this.sleep )\n\t\t\t{\n        this.trigger('slept', this);\n        \n        elapsed = this.progress( elapsed, this.sleep, anim8.EventState.ANIMATING );\n      }\n    }\n\t\t\n    if ( this.isAnimating() && this.duration )\n    {\n      var cycle = this.duration + this.sleep;\n      var cycleCount = Math.floor( ( elapsed + this.sleep ) / cycle );\n      var maxCycles = Math.min( this.repeat, cycleCount );\n            \n      elapsed = this.progress( elapsed, maxCycles * cycle, anim8.EventState.ANIMATING );\n      \n      if ( !this.isInfinite() )\n      { \n        if (maxCycles === this.repeat)\n        {\n          elapsed = this.duration;\n          this.repeat = 1;\n        }\n        else\n        {\n          this.repeat -= cycleCount;\n        }\n      }\n      \n      if ( elapsed > this.duration )\n      {\n        elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING );\n        \n        this.trigger('sleeping', this);\n      }\n    }\n\t\t\n\t\treturn elapsed;\n  },\n  progress: function(elapsed, time, newState) \n\t{\n    this.time += time;\n\t\tthis.elapsed += time;\n    this.state = newState;\n\t\t\n    return elapsed - time;\n  },\n  finish: function(frame) \n\t{\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n    \n    this.trigger('finish', this);\n  },\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n  timeRemaining: function() \n\t{    \n\t\treturn this.totalTime() - this.elapsed;\n  },\n  timeRemainingInChain: function()\n  {\n    return this.timeRemaining() + (this.next ? this.next.timeRemainingInChain() : 0);\n  },\n  finiteTimeRemaining: function()\n  {\n    return this.isInfinite() ? 0 : this.timeRemaining();\n  },\n  finiteTimeRemainingInChain: function()\n  {\n    return this.isInfinite() ? 0 : this.timeRemaining() + (this.next ? this.next.finiteTimeRemainingInChain() : 0);\n  },\n  queue: function(e)\n  {\n    if ( this.next )\n    {\n      this.next.queue( e );\n    }\n    else\n    {\n      this.next = e;\n    }\n  },\n  pause: function() \n\t{\n    if (this.state !== anim8.EventState.PAUSED) \n\t\t{\n      this.pauseTime = anim8.now();\n      this.pauseState = this.state;\n      this.state = anim8.EventState.PAUSED; \n    }\n  },\n  resume: function() \n\t{\n    if (this.state === anim8.EventState.PAUSED) \n\t\t{\n      this.time += anim8.now() - this.pauseTime;\n      this.state = this.pauseState; \n    }\n  },\n  isInfinite: function()\n  {\n    return (this.repeat === Number.POSITIVE_INFINITY);\n  },\n\thasStarted: function()\n\t{\n\t\treturn (this.state !== anim8.EventState.CREATED && this.state !== anim8.EventState.DELAYED);\n\t},\n  isAnimating: function() \n\t{\n    return (this.state === anim8.EventState.ANIMATING);\n  },\n  isFinished: function() \n\t{\n    return (this.state === anim8.EventState.FINISHED);\n  },\n  isDelayed: function() \n\t{\n    return (this.state === anim8.EventState.DELAYED);\n  },\n  isPaused: function() \n\t{\n    return (this.state === anim8.EventState.PAUSED);\n  },\n  isSleeping: function() \n\t{\n    return (this.state === anim8.EventState.SLEEPING);\n  },\n  hasStates: function(states) \n\t{\n    return (this.state & states) !== 0;\n  },\n  stateText: function() \n\t{\n    switch(this.state) \n    {\n      case anim8.EventState.CREATED:            return \"created\";\n      case anim8.EventState.DELAYED:            return \"delayed\";\n      case anim8.EventState.ANIMATING:          return \"animating\";\n      case anim8.EventState.SLEEPING:           return \"sleeping\";\n      case anim8.EventState.FINISHED:           return \"finished\";\n    }\n  },\n  hasTrue: function()\n  {\n    return this.path.trues;\n  }\n};\n\n/**\n * Adds the following event methods to EventInstances: on, once, off, trigger.\n */\nanim8.eventize( anim8.EventInstance.prototype );","\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n */\nanim8.animation = function(animation, options)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) )\n\t{\n    if ( animation in anim8.animation )\n    {\n      return anim8.animation[ animation ];      \n    }\n\n    var animations = animation.split(',');\n    var queue = [];\n\n    for (var k = 0; k < animations.length; k++)\n    {\n      var parsed = anim8.parseAnimationString( animations[ k ] );\n\n      if ( parsed !== false )\n      {\n        queue.push( anim8.animation( parsed.animation, parsed.options ) );\n      }\n    }\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n\t\tvar events = [];\n\t\t\n\t\toptions = options || {};\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser.parse( animation, options, events );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (events.length)\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, events );\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  \n  animation.name = name;\n  \n  anim8.animation[name] = animation;\n};\n\n/**\n * Parses a string for an animation in the format of:\n *\n * animationName [duration] x[repeat] z[sleep] ~[delay] [easing]\n * \n * @param {string} animation\n */\nanim8.parseAnimationString = function(animation)\n{\n  var split = animation.split(' ');\n  var animation = false;\n  var options = {};\n\n  for (var i = 0; i < split.length; i++)\n  {\n    var part = split[i].toLowerCase();\n\n    if ( part in anim8.animation && !animation )\n    {\n      animation = anim8.animation[ part ];\n    }\n    else\n    {\n      if ( part[0] === 'x' )\n      {\n        var repeat = anim8.repeat( part.substring(1), false );\n\n        if ( repeat !== false )\n        {\n          options.repeat = repeat;\n        }\n      }\n      if ( part[0] === 'z' )\n      {\n        var sleep = anim8.sleep( part.substring(1), false );\n\n        if ( sleep !== false )\n        {\n          options.sleep = sleep;\n        }\n      }\n      if ( part[0] === '~' )\n      {\n        var delay = anim8.delay( part.substring(1), false );\n\n        if ( delay !== false )\n        {\n          options.delay = delay;\n        }\n      }\n      var easing = anim8.easing( part, false );\n\n      if ( easing !== false )\n      {\n        options.easing = easing;\n      }\n\n      var duration = anim8.duration( part, false );\n\n      if ( duration !== false )\n      {\n        options.duration = duration;\n      }\n      else\n      {\n        var repeat = anim8.repeat( part, false );\n\n        if ( repeat !== false )\n        {\n          options.repeat = repeat;\n        }\n      }\n    }\n  }\n\n  if ( animation === false )\n  {\n    return false;\n  }\n\n  return {\n    animation: animation,\n    options: options\n  };\n};\n\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the events that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate events, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} events\n */\nanim8.Animation = function(name, input, options, events)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.events = events;\n};\n\nanim8.Animation.prototype = \n{\n  \n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  \n  /**\n   * Generates an array of event instances from the events in this animation.\n   */\n  newEvents: function()\n  {\n    var instances = [];\n    \n    for (var i = 0; i < this.events.length; i++)\n    {\n      instances.push( this.events[i].newInstance() );\n    }\n    \n    return instances;\n  },\n\n  /**\n   * Generates an array of event clones from the events in this animation.\n   * \n   * @return {array}\n   */\n  cloneEvents: function()\n  {\n    var events = [];\n\n    for (var i = 0; i < this.events.length; i++)\n    {\n      events.push( this.events[i].clone() );\n    }\n\n    return events;\n  },\n\n  /**\n   * Merges options with the options in this animation and places them in the\n   * events.\n   * \n   * @param  {object} options\n   * @param  {array} events\n   * @return {[type]}\n   */\n  merge: function(options, events)\n  {\n    for (var parserName in this.input)\n    {\n      var parser = anim8.parser( parserName );\n      \n      if ( parser !== false )\n      {\n        parser.merge( this.input, options, this.options, events );\n      }\n    }\n\n    return events;\n  },\n\n  /**\n   * Extends this animation and returns an animation modified with the given options. \n   *\n   * @param {object} options\n   */\n  extend: function(options)\n  {\n    if ( anim8.isEmpty( options ) )\n    {\n      return this;\n    }\n\n    var events = this.cloneEvents();\n\n    this.merge( options, events );\n\n    return new anim8.Animation( this.name, this.input, options, events );\n  }\n  \n};","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.fn = anim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(subject)\n\t{\n\t  this.subject = subject;\n\t  this.events = {};\n    this.springs = {};\n\t  this.attributes = {};\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n    \n    return this;\n\t},\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  {\n    \n    return this;\n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function()\n  {\n\t\tthis.trigger('preupdate');\n    \n    return this;\n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    \n    this.finished = true;\n\t\t\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      this.updated[ attr ] = e.update( now, this.frame );\n      \n      this.finished = this.finished && e.isFinished();\n    }\n    \n    for (var attr in this.springs)\n    {\n      var s = this.springs[ attr ];\n      \n      this.updated[ attr ] = s.update( now, this.frame );\n      \n      this.finished = false;\n    }\n\t\n\t\tthis.trigger('update');\n    \n    return this;\n  },\n  \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function(s)\n  {\n    var attr = s.attribute;\n    \n    this.springs[ attr ] = s;\n    \n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = anim8.attribute( attr ).defaultValue;\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function(e)\n  {\n    var attr = e.attribute;\n    \n    this.events[ attr ] = e;\n    \n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = anim8.attribute( attr ).defaultValue;\n    }\n\t\t\n\t\tthis.finished = false;\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[ attr ] )\n      {\n        this.subject[ attr ] = this.frame[ attr ]; \n\t\t\t\tthis.updated[ attr ] = false;\n      }\n    }\n\t\n\t\tthis.trigger('apply');\n\t\n    this.trimEvents();\n    \n    return this;\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      var e = this.events[attr];\n      \n      if ( e.isFinished() )\n      {\n        if ( e.next )\n        {                    \n          this.placeEvent( e.next );\n          this.finished = false;\n        }\n        else\n        {\n          delete this.events[attr];\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n\n  /**\n   * Activates this Animator by adding it to the main loop if it isn't there already.\n   * \n   * @return {[type]}\n   */\n  activate: function()\n  {\n    anim8.add( this );\n\n    return this;\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tdeactivate: function()\n\t{ \n    this.trigger('deactivate', this);\n\t},\n  \n  /**\n   * A method that can be invoked to destroy an animator - removing any relationship between\n   * the subject and animator. The next time an animator is generated for the subject a new\n   * one will be created.\n   */\n  destroy: function()\n  {\n    this.finished = true;\n\n    this.factory.destroy( this );\n    \n    this.trigger('destroyed');\n  },\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createEvents: function(animation, options)\n  {\n    options = options || {};\n    \n    var animation = anim8.animation( animation, options );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var events = animation.newEvents();\n    \n    if ( animation.isSaved() )\n    {\n      for (var parserName in animation.input)\n      {\n        var parser = anim8.parser( parserName );\n        \n        if ( parser !== false )\n        {\n          parser.merge( animation.input, options, animation.options, events );\n        }\n      }\n    }\n    \n    this.onAnimation( animation, options, events );\n    \n    return events;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeSpring( spring );\n    \n    this.activate();\n    \n    return spring;\n  },\n  \n  /**\n   * Removes springs for the specified attributes. If no attributes are specified then all springs\n   * are removed. Attributes can be specified as an array of attribute names or a string with attribute\n   * names separated by a space.\n   *\n   * @param {string|Array} attributes\n   */\n  unspring: function(attributes)\n  {\n    return this.springsFor( attributes, function(s)\n    {\n      delete this.springs[ s.attribute ];\n    });\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Existing events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   */\n\tplay: function(animation, options, all)\n\t{\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.playEvents( events, all );\n\n    return this.activate();\n\t},\n\n  /**\n   * Adds events to this Animator to be played (optionally finishing events for attributes not specified in the given \n   * attribute). Existing events will be replaced immediately. This method will not activate the Animator, that has\n   * to be done manually.\n   * \n   * @param  {array} events\n   * @param  [boolean] all\n   * @return {this}\n   */\n  playEvents: function(events, all)\n  {\n    var attrs = {};\n    \n    for (var i = 0; i < events.length; i++)\n    { \n      this.placeEvent( events[i] );\n      \n      attrs[ events[i].attribute ] = true;\n    }\n    \n    if ( all )\n    {\n      for (var attr in this.events)\n      {\n        if ( !(attr in attrs) )\n        {\n          this.events[ attr ].finish( this.frame );\n        }\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options)\n\t{\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n        \n    this.queueEvents( events );\n\n    return this;\n\t},\n\n  /**\n   * Queues an array of events on this Animator. The given events will be delayed to start at the same time - at the\n   * end of the events currently on the Animator. This method will not activate the Animator, that has to be done \n   * manually.\n   * \n   * @param  {array} events\n   * @return {this}\n   */\n  queueEvents: function(events)\n  {\n    var maxRemaining = this.finiteTimeRemaining();\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      \n      if ( attr in this.events  && !this.events[ attr ].isInfinite() )\n      {    \n        e.delay += (maxRemaining - this.events[ attr ].timeRemainingInChain());\n        \n        this.events[attr].queue( e );\n      }\n      else\n      {\n        e.delay += maxRemaining;\n        \n        this.placeEvent( e );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all)\n  {\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n\n    this.transitionEvents( transitionTime, transitionDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into the beginning of a new animation. \n   * The transition is made by constructing a quadratic curve from the current value to a \n   * point further on the current path to the starting point of the new animation. This method will not activate the \n   * Animator, that has to be done manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param [array] events\n   * @param [boolean] all\n   */\n  transitionEvents: function(transitionTime, transitionDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionDelta );\n          var p2 = e1.getPoint( 0 );\n        \n          var transitionPath = new anim8.QuadraticPath( attr, calc, p0, p1, p2 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1, true ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n    \n    return this;\n  },\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n  transitionInto: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, animation, options, all)\n  {\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    this.transitionIntoEvents( transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all );\n\n    return this.activate();\n  },\n\n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a cubic curve from the current value to a point further on the current\n   * path to the starting point of the new animation. This method will not activate the Animator, that has to be done \n   * manually.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionFromDelta\n   * @param {number} transitionIntoDelta\n   * @param {string|function|array} transitionEasing\n   * @param {array} events\n   * @param [boolean] all\n   */\n  transitionIntoEvents: function(transitionTime, transitionFromDelta, transitionIntoDelta, transitionEasing, events, all)\n  {\n    // Check if we even need to transition\n    var transition = false;\n    \n    for (var i = 0; i < events.length && !transition; i++)\n    {      \n      if ( events[i].attribute in this.events )\n      {\n        transition = true;\n      }\n    }\n    \n    // Only transition if we need to\n    if ( transition )\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        var e1 = events[i];\n        var attr = e1.attribute;\n      \n        if ( attr in this.events )\n        {\n          var path = e1.path;\n          var calc = path.calculator;\n          var e2 = this.events[attr];\n        \n          var p0 = calc.clone( this.frame[attr] );\n          var p1 = e2.getFuture( transitionFromDelta );\n          var p2 = e1.getPoint( 0 );\n          var p3 = e1.getPoint( transitionIntoDelta );\n          \n          var transitionPath = new anim8.CubicPath( attr, calc, p0, p1, p2, p3 );\n          var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1, true ).newInstance();\n        \n          transitionEvent.next = e1;\n        \n          this.placeEvent( transitionEvent );\n        }\n        else\n        {\n          e1.delay += transitionTime;\n     \n          this.placeEvent( e1 );\n        }\n      }\n    }\n    // We don't need to transition, just play the events\n    else\n    {\n      for (var i = 0; i < events.length; i++)\n      { \n        this.placeEvent( events[i] );\n      }\n    }\n      \n    return this;\n  },\n\n  /**\n   * Tweens a single attribute to a target value.\n   *\n   * @param {string} attribute\n   * @param {any} target\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   */\n  tweenTo: function(attribute, target, duration, delay, easing, repeat, sleep)\n  {\n    var attr = anim8.attribute( attribute );\n    var calc = anim8.calculator( attr.calculator );\n    var start = attribute in this.frame ? calc.clone( this.frame[ attribute ] ) : true;\n    var end = calc.parse( target, attr.defaultValue );\n\n    var path = new anim8.Tween( attribute, calc, start, end );\n    var event = new anim8.Event( attribute, path, duration, easing, delay, sleep, repeat, true );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n\n  /**\n   * Tweens a multiple attribute to target values.\n   *\n   * @param {object} targets\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   */\n  tweenManyTo: function(targets, duration, delay, easing, repeat, sleep)\n  {\n    for ( var attribute in targets )\n    {\n      var attr = anim8.attribute( attribute );\n      var calc = anim8.calculator( attr.calculator );\n      var start = attribute in this.frame ? calc.clone( this.frame[ attribute ] ) : true;\n      var end = calc.parse( targets[ attribute ], attr.defaultValue );      \n      \n      var path = new anim8.Tween( attribute, calc, start, end );\n      var event = new anim8.Event( attribute, path, duration, easing, delay, sleep, repeat, true );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens an attribute from a starting value to an ending value.\n   *\n   * @param {string} attribute\n   * @param {any} starts\n   * @param {any} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   */\n  tween: function(attribute, starts, ends, duration, delay, easing, repeat, sleep)\n  {\n    var attr = anim8.attribute( attribute );\n    var calc = anim8.calculator( attr.calculator );\n    var start = calc.parse( starts, attr.defaultValue );\n    var end = calc.parse( ends, attr.defaultValue );\n\n    var path = new anim8.Tween( attribute, calc, start, end );\n    var event = new anim8.Event( attribute, path, duration, easing, delay, sleep, repeat, true );\n    \n    this.placeEvent( event.newInstance() );\n\n    return this.activate();\n  },\n  \n  /**\n   * Tweens multiple attributes from starting values to ending values.\n   *\n   * @param {object} starts\n   * @param {object} ends\n   * @param [string|number] duration\n   * @param [string|number] delay\n   * @param [string|function] easing\n   * @param [string|number] repeat\n   * @param [string|number] sleep\n   */\n  tweenMany: function(starts, ends, duration, delay, easing, repeat, sleep)\n  {\n    for ( var attribute in starts )\n    {\n      var attr = anim8.attribute( input );\n      var calc = anim8.calculator( attr.calculator );\n      var start = calc.parse( starts[ attribute ], attr.defaultValue );\n      var end = calc.parse( ends[ attribute ], attr.defaultValue );\n      \n      var path = new anim8.Tween( attribute, calc, start, end );\n      var event = new anim8.Event( attribute, path, duration, easing, delay, sleep, repeat, true );\n      \n      this.placeEvent( event.newInstance() );\n    }\n\n    return this.activate();\n  },\n\t\n\t/**\n\t * Applies the initial state of all unstarted current events for the specified attributes immediately. \n\t * Attribute names can be given as an array or a space separated string. If no attributes are given all \n\t * attributes are assumed.\n\t *\n   * @param {string|array} attributes\n\t */\n\tapplyInitialState: function(attributes)\n\t{\n\t\tvar eventCount = this.eventsFor( attributes, function(event, attr)\n\t\t{\n\t\t\tif ( !event.hasStarted() && event.hasInitialState() )\n\t\t\t{\n\t\t\t\tevent.applyValue( this.frame, this.frame[ attr ], 0.0 );\n\t\t\t\t\n\t\t\t\tthis.updated[ attr ] = true;\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.apply();\n\t\t\n\t\treturn eventCount;\n\t},\n\n  /**\n   * Returns the amount of time remaining for all finite events in this Animator.\n   * \n   * @return {number} milliseconds\n   */\n  finiteTimeRemaining: function()\n  {\n    var remaining = 0;\n\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      if ( !e.isInfinite() )\n      {\n        remaining = Math.max( remaining, this.events[attr].finiteTimeRemainingInChain() );  \n      }\n    }\n\n    return remaining;\n  },\n  \n  /**\n   * Returns a function that returns the current value for the given attribute when invoked.\n   * \n   * @param {string} attribute\n   */\n  ref: function(attribute)\n  {\n    var animator = this;\n    var request = {};\n    \n    return function()\n    {\n      if ( attribute in animator.frame )\n      {\n        return animator.frame[ attribute ];\n      }\n      \n      request[ attribute ] = true;\n      \n      var current = animator.get( request );\n      \n      if ( anim8.isDefined( current[ attribute ] ) )\n      {\n        return current[ attribute ];\n      }\n      \n      return anim8.attribute( attribute ).defaultValue;\n    };\n  },\n  \n  /**\n   * Follows the attribute along the given path definition.\n   * \n   * @param {string} attribute\n   * @param {anim8.Path|object|string} path\n   * @param [number] duration\n   * @param [number] delay\n   * @param [function|string] easing\n   * @param [number] repeat\n   * @param [number] sleep  \n   */\n  follow: function(attribute, path, duration, delay, easing, repeat, sleep)\n  {\n    var path = anim8.path( path );\n    \n    // attribute, path, duration, easing, delay, sleep, repeat) \n    var event = new anim8.Event( \n      attribute, \n      path, \n      anim8.coalesce( duration, anim8.defaults.duration ),\n      anim8.easing( easing ),\n      anim8.coalesce( delay, anim8.defaults.delay ),\n      anim8.coalesce( sleep, anim8.defaults.sleep ),\n      anim8.coalesce( repeat, anim8.defaults.repeat ),\n      true\n    );\n    \n    this.placeEvent( event.newInstance() );\n    \n    return this.activate();\n  },\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  objectsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n    \n    var resulting = !anim8.isFunction( callback );\n    var results = [];\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        \n        if ( attr in objects )\n        {\n          if ( resulting )\n          {\n            results.push( objects[attr] );\n          }\n          else\n          {\n            callback.call( this, objects[attr], attr );\n          }\n        }\n      }\n\t\t}\n    else\n    {\n      for (var attr in objects)\n      {\n        if ( resulting )\n        {\n          results.push( objects[attr] );\n        }\n        else\n        {\n          callback.call( this, objects[attr], attr );\n        }\n      }\n    }\n    \n\t\treturn resulting ? results : this;\n  },\n  \n  /**\n   * Invokes the callback for each event for the given attributes.\n   * \n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\teventsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.events );\n\t},\n  \n  /**\n   * Invokes the callback for each spring for the given attributes.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\tspringsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.springs );\n\t},\n\t\n  /**\n   * Stops all events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event, attr) \n\t\t{\n\t\t\tdelete this.events[ attr ];\n\t\t});\n\t},\n  \n  /**\n   * Ends all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tend: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event) \n\t\t{\n\t\t\twhile (event.next)\n\t\t\t{\n\t\t\t\tevent = event.next;\n\t\t\t}\n\t\t\t\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n\t\t\tthis.updated[ attr ] = true;\n    }\n    \n    this.apply();\n    \n    return this;\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator.\n   */\n  hasSprings: function()\n  {\n    for (var attr in this.springs)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator or animating events.\n   */\n  isAnimating: function()\n  {\n    if ( this.hasSprings() )\n    {\n      return true;\n    }\n    \n    for (var attr in this.events)\n    {\n      if ( this.events[attr].isAnimating() )\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  },\n\n  /**\n   * Returns the subject of the Animator optionally passing it through a wrapper\n   * function before it's returned.\n   *\n   * @param [function] wrapper\n   */\n  subject: function(wrapper)\n  {\n    var subject = this.subject;\n\n    if ( anim8.isFunction( wrapper ) )\n    {\n      subject = wrapper( subject );\n    }\n\n    return subject;\n  },\n\t\n\t/**\n\t * Defers the method calls following this one to when the given event type (on or once) and event.\n\t * To return this animator you need to call undefer() as many times as you called defer().\n\t *\n\t * @param {string} eventType\n\t * @param {string} event\n   * @param [function] callback\n\t */\n\tdefer: function(eventType, event, callback)\n\t{\n\t\treturn new anim8.DeferAnimator( this, this, eventType, event, callback );\n\t}\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );\n\n/**\n * Provides the ability to defer method calls until certain events are triggered.\n */\nanim8.DeferAnimator = function(animator, previous, eventType, event)\n{\n\tthis.$reset( animator, previous, eventType, event );\n};\n\n/**\n * Creates the Defer prototype for the following Animator methods.\n */\nanim8.DeferAnimator.prototype = new anim8.Defer( anim8.DeferAnimator, \n[\n  'play', 'queue', 'transition', 'restore', 'set', 'resume', 'pause', \n  'finish', 'end', 'stop', 'follow', 'applyInitialState', 'tweenTo', \n  'tween', 'tweenMany', 'tweenManyTo', 'spring', 'unspring', 'apply', \n  'placeSpring', 'placeEvent'\n]);\n","\n/*****************************************************************\n  ANIMATORS DEFINITION\n******************************************************************/\n\nanim8.Animators = function(input)\n{\n  if ( anim8.isArray( input ) )\n  {\n    this.fill( input );\n  }\n};\n\n/**\n * Animators is an instance of Array. All array methods are supported.\n */\nanim8s.fn = anim8.Animators.prototype = new Array();\n\n/**\n * Invokes a callback for each element in the array.\n * \n * @param {function} iterator\n */\nanim8s.fn.each = function(iterator, context) \n{\n  for (var i = 0; i < this.length; i++) \n  {\n    if ( iterator.call( context || this[i], this[i], i ) === false ) \n    {\n      break;\n    }\n  }\n\t\n\treturn this;\n};\n\n/**\n * Appends the array of animators given to the end of this array.\n *\n * @param {array} animators\n */\nanim8s.fn.fill = function(animators)\n{\n  for (var i = 0; i < animators.length; i++)\n  {\n    this.push( animators[i] );\n  }\n\n  return this;\n};\n\n/**\n * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n *\n * @param {function} filterer\n */\nanim8s.fn.filter = function(filterer)\n{\t\n\tvar alive = 0;\n\t\n\tfor (var i = 0; i < this.length; i++)\n\t{\n\t\tvar remove = filterer( this[i] );\n\t\t\n\t\tif ( !remove )\n\t\t{\n\t\t\tthis[alive++] = this[i];\n\t\t}\n\t}\n\t\n\tthis.length = alive;\n\t\n\treturn this;\n};\n\n/**\n * Returns the subjects of the Animators optionally passing them through a wrapper\n * function before it's returned.\n *\n * @param [function] wrapper\n */\nanim8s.fn.subjects = function(wrapper)\n{\n  var subjects = [];\n\n  for (var i = 0; i < this.length; i++)\n  {\n    subjects.push( this[i] );\n  }\n\n  if ( anim8.isFunction( wrapper ) )\n  {\n    subjects = wrapper( subjects );\n  }\n  \n  return subjects;\n};\n\n/**\n * Returns the first animator in the array.\n */\nanim8s.fn.first = function()\n{\n  return this[0];\n};\n\n/**\n * Reverses the order of animators in the array.\n */\n anim8s.fn.reverse = function()\n {\n  var last = this.length - 1;\n  var mid = Math.floor( this.length / 2 );\n\n  for (var i = 0; i < mid; i++)\n  {\n    var e0 = this[ i ];\n    var e1 = this[ last - i ];\n\n    this[ i ] = e1;\n    this[ last - i ] = e0;\n  }\n\n  return this;\n };\n\n/**\n * Activates all Animators in the array if they aren't active already.\n * \n * @return {this}\n */\nanim8s.fn.activate = function()\n{\n  for (var i = 0; i < this.length; i++)\n  {\n    var animator = this[i];\n\n    if ( !animator.active )\n    {\n      animator.active = true;\n      anim8.animating.push( animator ); \n    }\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n  \n  return this;\n};\n\n/**\n * Returns an array of the subjects optionally\n */\n\n/**\n * Plays a sequence of events separated by a delay given an animation to play on all Animators.\n */\nanim8s.fn.sequence = function(delay, easing, animation, options)\n{\n  return new anim8.Sequence( this, delay, easing, animation, options );\n};\n\n/**\n * Adds the following methods to make an array of Animators appear like a single Animator.\n */\nanim8s.fn.restore              = anim8.delegate( 'restore', anim8.delegate.RETURN_THIS );\nanim8s.fn.placeSpring          = anim8.delegate( 'placeSpring', anim8.delegate.RETURN_THIS );\nanim8s.fn.placeEvent           = anim8.delegate( 'placeEvent', anim8.delegate.RETURN_THIS );\nanim8s.fn.preupdate            = anim8.delegate( 'preupdate', anim8.delegate.RETURN_THIS );\nanim8s.fn.update               = anim8.delegate( 'update', anim8.delegate.RETURN_THIS );\nanim8s.fn.apply                = anim8.delegate( 'apply', anim8.delegate.RETURN_THIS );\nanim8s.fn.trimEvents           = anim8.delegate( 'trimEvents', anim8.delegate.RETURN_THIS );\nanim8s.fn.deactivate           = anim8.delegate( 'deactivate', anim8.delegate.RETURN_THIS );\nanim8s.fn.destroy              = anim8.delegate( 'destroy', anim8.delegate.RETURN_THIS );\nanim8s.fn.spring               = anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS );\nanim8s.fn.unspring             = anim8.delegate( 'unspring', anim8.delegate.RETURN_THIS );\nanim8s.fn.play                 = anim8.delegate( 'play', anim8.delegate.RETURN_THIS );\nanim8s.fn.playEvents           = anim8.delegate( 'playEvents', anim8.delegate.RETURN_THIS );\nanim8s.fn.queue                = anim8.delegate( 'queue', anim8.delegate.RETURN_THIS );\nanim8s.fn.queueEvents          = anim8.delegate( 'queueEvents', anim8.delegate.RETURN_THIS );\nanim8s.fn.transition           = anim8.delegate( 'transition', anim8.delegate.RETURN_THIS );\nanim8s.fn.transitionEvents     = anim8.delegate( 'transitionEvents', anim8.delegate.RETURN_THIS );\nanim8s.fn.transitionInto       = anim8.delegate( 'transitionInto', anim8.delegate.RETURN_THIS );\nanim8s.fn.transitionIntoEvents = anim8.delegate( 'transitionIntoEvents', anim8.delegate.RETURN_THIS );\nanim8s.fn.tween                = anim8.delegate( 'tween', anim8.delegate.RETURN_THIS );\nanim8s.fn.tweenTo              = anim8.delegate( 'tweenTo', anim8.delegate.RETURN_THIS );\nanim8s.fn.tweenMany            = anim8.delegate( 'tweenMany', anim8.delegate.RETURN_THIS );\nanim8s.fn.tweenManyTo          = anim8.delegate( 'tweenManyTo', anim8.delegate.RETURN_THIS );\nanim8s.fn.applyInitialState    = anim8.delegate( 'applyInitialState', anim8.delegate.RETURN_THIS );\nanim8s.fn.follow               = anim8.delegate( 'follow', anim8.delegate.RETURN_THIS );\nanim8s.fn.eventsFor            = anim8.delegate( 'eventsFor', anim8.delegate.RETURN_RESULTS );\nanim8s.fn.springsFor           = anim8.delegate( 'springsFor', anim8.delegate.RETURN_RESULTS );\nanim8s.fn.stop                 = anim8.delegate( 'stop', anim8.delegate.RETURN_THIS );\nanim8s.fn.end                  = anim8.delegate( 'end', anim8.delegate.RETURN_THIS );\nanim8s.fn.finish               = anim8.delegate( 'finish', anim8.delegate.RETURN_THIS );\nanim8s.fn.pause \t\t\t         = anim8.delegate( 'pause', anim8.delegate.RETURN_THIS );\nanim8s.fn.resume \t\t\t         = anim8.delegate( 'resume', anim8.delegate.RETURN_THIS );\nanim8s.fn.set                  = anim8.delegate( 'set', anim8.delegate.RETURN_THIS );\nanim8s.fn.get                  = anim8.delegate( 'get', anim8.delegate.RETURN_FIRST );\nanim8s.fn.isAnimating          = anim8.delegate( 'isAnimating', anim8.delegate.RETURN_TRUE );\nanim8s.fn.hasEvents            = anim8.delegate( 'hasEvents', anim8.delegate.RETURN_TRUE );\nanim8s.fn.hasSprings           = anim8.delegate( 'hasSprings', anim8.delegate.RETURN_TRUE );\nanim8s.fn.on\t\t\t             = anim8.delegate( 'on', anim8.delegate.RETURN_THIS );\nanim8s.fn.once\t\t             = anim8.delegate( 'once', anim8.delegate.RETURN_THIS );\nanim8s.fn.off\t\t\t             = anim8.delegate( 'off', anim8.delegate.RETURN_THIS );\nanim8s.fn.trigger              = anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS );\n","\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * Live Mode keeps the animation cycles running even when there aren't\n * Animators. For highly interactive applications enabling this may\n * take up more resources but it will result in smoother animations. When\n * the animation cycle goes from stopped to running it takes a few frames\n * to smooth out when this is false.\n */\nanim8.live = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = new anim8.Animators();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n    anim8.trigger('starting');\n    anim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  anim8.trigger('begin');\n  \n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate();\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n      animator.deactivate();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  anim8.trigger('end');\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length || anim8.live )\n  {\n    anim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n    anim8.trigger('finished');\n  }\n};\n\n/**\n * Add events to the animation cycle: begin, end, finished, starting\n */\nanim8.eventize( anim8 );","anim8.Sequence = function(animators, delay, easing, animation, options)\n{\n  this.animators = animators;\n  this.delay = anim8.delay( delay );\n  this.easing = anim8.easing( easing );\n  this.animation = anim8.animation( animation, options );\n  this.options = options;\n};\n\nanim8.Sequence.prototype =\n{\n  maxDelay: function()\n  {\n    return this.delay * (this.animators.length - 1);\n  },\n  \n  createEvents: function(i)\n  {\n    var events = this.animation.newEvents();\n    var delta = i / (this.animators.length - 1);\n    var delayOffset = this.easing( delta ) * this.maxDelay();\n    \n    for (var k = 0; k < events.length; k++)\n    {\n      events[k].delay += delayOffset;\n    }\n    \n    return events;\n  },\n\n  reverse: function()\n  {\n    this.animators.reverse();\n\n    return this;\n  },\n  \n  play: function(all)\n  {    \n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.playEvents( sequence.createEvents( i ), all );       \n    });\n    \n    return this.add();\n  },\n  \n  queue: function()\n  {\n    var sequence = this;\n    var maxRemaining = 0;\n    var remaining = [];\n    \n    this.animators.each(function(animator, i)\n    {\n      remaining[i] = animator.finiteTimeRemaining();\n      maxRemaining = Math.max( maxRemaining, remaining[i] );\n    });\n\n    this.animators.each(function(animator, i)\n    {\n      var delayOffset = maxRemaining - remaining[i];\n      var events = sequence.createEvents( i );\n      \n      for (var i = 0; i < events.length; i++)\n      {\n        events[ i ].delay += delayOffset;\n      }\n      \n      animator.queueEvents( events );\n    });\n    \n    return this.add();\n  },\n\n  /*\n  transition: function(transitionTime, transitionDelta, transitionEasing, animation, options)\n  {\n    var sequence = this;\n\n    this.animators.each(function(animator, i)\n    {\n      animator.transition( sequence.createEvents( i ), all );\n    });\n    \n    return this.add();\n  },\n  */\n  \n  add: function()\n  {\n    this.animators.activate();\n    this.animators.applyInitialState();\n    \n    return this;\n  }\n  \n};","\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n  if ( parser instanceof anim8.Parser )\n  {\n    return parser;\n  }\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Instantiates a new Parser.\n */\nanim8.Parser = function()\n{\n  \n};\n\nanim8.Parser.prototype = \n{\n  \n  /**\n   * Parses the animation object (and optionally an option object) and pushes\n   * all generated events to the given array.\n   * \n   * @param {object} animation\n   * @param {object} options\n   * @param {Array} events\n   */\n  parse: function( animation, options, events )\n  {\n    return true;\n  },\n  \n  /**\n   * Merges the options with the given event instances. This is when an existing \n   * animation is provided but the user wants to override the animation's options.\n   *\n   * Because event properties can be specified in several places there's a priority\n   * to which one takes precedence. The properties specified in the animation object\n   * itself are highest priority, followed by the new options, then by the old\n   * options, and finally by the existing property on the event instance.\n   *\n   * @param {object} animation\n   * @param {object} newOptions\n   * @param {object} oldOptions\n   * @param {Array} events\n   */\n  merge: function( animation, newOptions, oldOptions, events )\n  {\n    var durations = animation.durations || {};\n    var easings   = animation.easings || {};\n    var delays    = animation.delays || {};\n    var sleeps    = animation.sleeps || {};\n    var repeats   = animation.repeats || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      \n      if ( e.getParser() !== this )\n      {\n        continue;\n      }\n\n      e.easing    = anim8.easing( anim8.coalesce( easings[attr],   newOptions.easing,   oldOptions.easing   ), e.easing );\n      e.repeat    = anim8.repeat( anim8.coalesce( repeats[attr],   newOptions.repeat,   oldOptions.repeat   ), e.repeat );\n      e.delay     = anim8.time(   anim8.coalesce( delays[attr],    newOptions.delay,    oldOptions.delay    ), e.delay );\n      e.sleep     = anim8.time(   anim8.coalesce( sleeps[attr],    newOptions.sleep,    oldOptions.sleep    ), e.sleep );\n      e.duration  = anim8.time(   anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration ), e.duration );\n    }\n  }\n};","\n/**\n * Instantiates a new parser for the 'deltas' & 'values' animation type.\n */\nanim8.ParserDeltas = function()\n{\n  \n};\n\n// ParserDeltas extends anim8.Parser()\nanim8.ParserDeltas.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserDeltas.prototype.parse = function( animation, options, events )\n{\n  // 1. If deltas wasn't specified, assume a uniform distribution of points\n  // 2. If deltas was an array, expand out into an object where the keys are attributes and the value is the delta array\n  // 3. Generate the events\n  \n\tvar deltas = animation.deltas;\n\tvar values = animation.values;\n\n  if ( !anim8.isDefined( deltas ) )\n  {\n    var valueCount = 0;\n    \n\t\tfor (var attr in values)\n\t\t{\n      valueCount++; \n    }\n    \n    deltas = [];\n    \n    for (var i = 0; i < valueCount; i++)\n    {\n      deltas[i] = i / (valueCount - 1);\n    }\n  }\n\tif ( anim8.isArray( deltas ) )\n\t{\n\t\tvar deltaObject = {};\n\t\t\n\t\tfor (var attr in values)\n\t\t{\n\t\t\tdeltaObject[attr] = deltas;\t\n\t\t}\n\t\t\n\t\tdeltas = deltaObject;\n\t}\n\t\n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n\t\t\n\t\tfor (var k = 0; k < value.length; k++)\n\t\t{\n\t\t\tvalue[k] = calculator.parse( value[k], defaultValue );\n\t\t}\n\t\t\n    var duration = anim8.coalesce( durations[attr], options.duration, anim8.defaults.duration );\n    var easing   = anim8.coalesce( easings[attr], options.easing, anim8.defaults.easing );\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep, anim8.defaults.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat, anim8.defaults.repeat );\n\n    var path     = new anim8.DeltaPath( attr, calculator, values[attr], deltas[attr] );\n    var event    = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, true, this );\n    \n    events.push( event );\n\t}\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.values = new anim8.ParserDeltas();","\n/**\n * Instantiates a new parser for the 'final' animation type.\n */\nanim8.ParserFinal = function()\n{\n  \n};\n\n// ParserFinal extends anim8.Parser()\nanim8.ParserFinal.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserFinal.prototype.parse = function( animation, options, events )\n{\n  // 1. Generate the events, only caring about the delays and durations\n  \n\tvar values = animation.final;\n\t\n  var delays = animation.delays || {};\n  var durations = animation.durations || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n\n    value = calculator.parse( value, defaultValue ); \n\t\t\n    var delay    = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n    var duration = anim8.duration( anim8.coalesce( durations[attr], options.duration ) );\n    \n    var path     = new anim8.PointPath( attr, calculator, value );\n    var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1, false, this );\n    \n    events.push( event );\n\t}\n};\n\n/**\n * Merges the options with the given event instances. This is when an existing \n * animation is provided but the user wants to override the animation's options.\n *\n * Because event properties can be specified in several places there's a priority\n * to which one takes precedence. The properties specified in the animation object\n * itself are highest priority, followed by the new options, then by the old\n * options, and finally by the existing property on the event instance.\n *\n * @param {object} animation\n * @param {object} newOptions\n * @param {object} oldOptions\n * @param {Array} events\n */\nanim8.ParserFinal.prototype.merge = function( animation, newOptions, oldOptions, events )\n{\n  var durations = animation.durations || {};\n  var delays    = animation.delays || {};\n  \n  for (var i = 0; i < events.length; i++)\n  {\n    var e = events[i];\n    var attr = e.attribute;\n      \n    if ( e.getParser() !== this )\n    {\n      continue;\n    }\n\n    var delay = anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay );\n    var duration = anim8.coalesce( durations[attr], newOptions.duration, oldOptions.duration );\n\n    e.delay = anim8.delay( delay ) + anim8.duration( duration );\n  }\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.final = new anim8.ParserFinal();","\n/**\n * Instantiates a new parser for the 'initial' animation type.\n */\nanim8.ParserInitial = function()\n{\n  \n};\n\n// ParserInitial extends anim8.Parser()\nanim8.ParserInitial.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserInitial.prototype.parse = function( animation, options, events )\n{\n  // 1. Generate the events, only caring about the delays\n  \n\tvar values = animation.initial;\n\t\n  var delays = animation.delays || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n    \n    value = calculator.parse( value, defaultValue ); \n\t\t\n    var delay    = anim8.delay( anim8.coalesce( delays[attr], options.delay ) );\n    \n    var path     = new anim8.PointPath( attr, calculator, value );\n    var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1, true, this );\n    \n    events.push( event );\n\t}\n};\n\n/**\n * Merges the options with the given event instances. This is when an existing \n * animation is provided but the user wants to override the animation's options.\n *\n * Because event properties can be specified in several places there's a priority\n * to which one takes precedence. The properties specified in the animation object\n * itself are highest priority, followed by the new options, then by the old\n * options, and finally by the existing property on the event instance.\n *\n * @param {object} animation\n * @param {object} newOptions\n * @param {object} oldOptions\n * @param {Array} events\n */\nanim8.ParserInitial.prototype.merge = function( animation, newOptions, oldOptions, events )\n{\n  var durations = animation.durations || {};\n  var delays    = animation.delays || {};\n  \n  for (var i = 0; i < events.length; i++)\n  {\n    var e = events[i];\n    var attr = e.attribute;\n      \n    if ( e.getParser() !== this )\n    {\n      continue;\n    }\n    \n    e.delay = anim8.time( anim8.coalesce( delays[attr], newOptions.delay, oldOptions.delay ), e.delay );\n  }\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.initial = new anim8.ParserInitial();","\n/**\n * Instantiates a new parser for the 'keyframe' animation type.\n */\nanim8.ParserKeyframe = function()\n{\n  \n};\n\n// ParserKeyframe extends anim8.Parser()\nanim8.ParserKeyframe.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserKeyframe.prototype.parse = function( animation, options, events )\n{\n  // 1. Normalize keys by converting aliases to the actual value\n  // 2. Split up keys that have commas into multiple entries\n  // 3. Validate keys and remove invalid ones - also calculate max key value\n  // 4. Sort frames by the key\n  // 5. Expand frames to generate delta arrays, value arrays, and easing arrays\n  // 6. Generate the events\n  \n  var kframes = animation.keyframe;\n  \n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n  \n  var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n  \n  var sort = false;\n  \n  var aliases = {\n    from:     '0',\n    start:    '0',\n    initial:  '0',\n    first:    '0',\n    half:     '50',\n    middle:   '50',\n    to:       '100',\n    end:      '100',\n    last:     '100'\n  };\n  \n  // split up comma delimited times\n  for (var time in kframes)\n  {\n    if ( time in aliases )\n    {\n      kframes[ aliases[time] ] = kframes[ time ];\n      \n      delete kframes[ time ];\n    }\n    else if ( time.indexOf(',') !== -1 )\n    {\n      var times = time.split(',');\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i]] = kframes[time];\n      }\n      \n      delete kframes[time];\n      \n      sort = true;\n    }\n  }\n  \n  var times = [];\n  \n  // validate times\n  var lastTime = 0.0;\n  var maxTime = 0.0;\n  \n  for (var time in kframes)\n  {\n    var t = parseFloat(time);\n    \n    if (isNaN(t))\n    {\n      delete kframes[time];\n    }\n    else\n    {\n      if (t < lastTime)\n      {\n        sort = true;\n      }\n      \n      times.push({\n        order: t,\n        key: time,\n        value: kframes[time]\n      });\n      \n      lastTime = t;\n      \n      maxTime = Math.max( maxTime, t );\n    }\n  }\n  \n  // sort if necessary\n  if (sort)\n  {\n    times.sort(function(a, b) {\n      return a.order - b.order;\n    });\n    \n    kframes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      kframes[times[i].key] = times[i].value;\n    }\n  }\n  \n  // split up into deltas and values\n  var deltas = {};\n  var values = {};\n  var calculators = {};\n\tvar defaults = {};\n  var pathEasings = {};\n  \n  for (var i = 0; i < times.length; i++)\n  {\n    var frame = times[i];\n    var easing = anim8.coalesce( frame.value.easing, options.easing );\n    \n    delete frame.value.easing;\n    \n    for (var attr in frame.value)\n    {\n      if ( !(attr in deltas) )\n      {\n        deltas[attr] = [];\n        values[attr] = [];\n        pathEasings[attr] = [];\n        \n        if (attr in anim8.attribute)\n        {\n          calculators[attr] = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\t\t\tdefaults[attr] = anim8.attribute[attr].defaultValue;\n        }\n        else\n        {\n          calculators[attr] = anim8.calculator.default;\n\t\t\t\t\tdefaults[attr] = calculators[attr].create();\n        }\n      }\n\t\t\t\n      deltas[attr].push( frame.order / maxTime );\n      values[attr].push( calculators[attr].parse( frame.value[attr], defaults[attr] ) );\n      pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[attr], easing ) ) );\n    }\n  }\n\t\n  // create events & paths\n  for (var attr in deltas)\n  {\n    var duration = anim8.coalesce( durations[attr], options.duration );\n    var delay    = anim8.coalesce( delays[attr], options.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat );\n    \n    var path     = new anim8.KeyframePath( attr, calculators[attr], values[attr], deltas[attr], pathEasings[attr] );\n    var event    = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat, true, this );\n    \n    events.push( event );\n  }\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.keyframe = new anim8.ParserKeyframe();","\n/**\n * Instantiates a new parser for the 'tweenTo' animation type.\n */\nanim8.ParserTween = function()\n{\n  \n};\n\n// ParserTween extends anim8.Parser()\nanim8.ParserTween.prototype = new anim8.Parser();\n  \n/**\n * Parses the animation object (and optionally an option object) and pushes\n * all generated events to the given array.\n * \n * @param {object} animation\n * @param {object} options\n * @param {Array} events\n */\nanim8.ParserTween.prototype.parse = function( animation, options, events )\n{\n  // 1. Starting values are all true which signals to Animator to replace those points with the animator's current values.\n\n  var tweenTo = animation.tweenTo;\n\n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n\n\tfor (var attr in tweenTo)\n\t{\n    var calculator = null;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue= calculator.create();\n    }\n\t\t\n    var value    = calculator.parse( tweenTo[attr], defaultValue );\n    var duration = anim8.coalesce( durations[attr], options.duration );\n    var easing   = anim8.coalesce( easings[attr], options.easing );\n    var delay    = anim8.coalesce( delays[attr], options.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat );\n    \n    var path     = new anim8.Tween( attr, calculator, true, value );\n    var event    = new anim8.Event( attr, path, duration, easing, delay, sleep, repeat, true, this );\n    \n    events.push( event );\n\t}\n};\n\n// Add the parser to the object of possible parsers\nanim8.parser.tweenTo = new anim8.ParserTween();","\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factory = function(subject, optional) \n{\n  for (var factoryName in anim8.factory) \n  {\n    var factory = anim8.factory[ factoryName ];\n    \n    if ( factory.is( subject ) )\n    {     \n      return factory;\n    }\n  }\n  \n  if ( optional )\n  {\n    return false;\n  }\n  \n  throw 'No factory exists for subject ' + subject;\n};\n\n/**\n * A factory creates Animator instances for subjects.\n */\nanim8.Factory = function()\n{\n\n};\n\nanim8.Factory.prototype = \n{\n\n  /**\n   * Determines whether the given subject is valid for this factory to create Animators for.\n   * \n   * @param  {any} subject\n   * @return {boolean}\n   */\n  is: function(subject)\n  {\n    return false;\n  },\n\n  /**\n   * Returns an animator given a subject.\n   * \n   * @param  {any} subject\n   * @return {anim8.Animator}\n   */\n  animatorFor: function(subject)\n  {\n    return false;\n  },\n\n  /**\n   * Explodes the given subject to an array of Animators and adds them to the given array.\n   * \n   * @param  {any} subject\n   * @param  {array} animators\n   * @return {void}\n   */\n  animatorsFor: function(subject, animators)\n  {\n    animators.push( this.animatorFor( subject ) );\n  },\n\n  /**\n   * Destroys the animator by unlinking the animator from the subject.\n   * \n   * @param  {anim8.Animator} animator\n   * @return {void}\n   */\n  destroy: function(animator)\n  {\n\n  }\n\n};\n","\n/**\n * A factory for plain objects.\n */\nanim8.ObjectFactory = function()\n{\n\n};\n\n// It extends anim8.Factory\nanim8.ObjectFactory.prototype = new anim8.Factory();\n\n/**\n * Determines whether the given subject is valid for this factory to create Animators for.\n * \n * @param  {any} subject\n * @return {boolean}\n */\nanim8.ObjectFactory.prototype.is = function(subject)\n{\n  return anim8.isObject( subject ) && !anim8.isElement( subject ) && !anim8.isArray( subject );\n};\n\n/**\n * Returns an animator given a subject.\n * \n * @param  {any} subject\n * @return {anim8.Animator}\n */\nanim8.ObjectFactory.prototype.animatorFor = function(subject)\n{\n  var animator = subject.$animator;\n    \n  if ( !animator )\n  {\n    animator = new anim8.Animator( subject );\n    animator.factory = this;\n    \n    subject.$animator = animator;\n  }\n  \n  return animator;\n};\n\n/**\n * Destroys the animator by unlinking the animator from the subject.\n * \n * @param  {anim8.Animator} animator\n * @return {void}\n */\nanim8.ObjectFactory.prototype.destroy = function(animator)\n{\n  delete animator.subject.$animator;\n};\n\n/**\n * Registers the object factory.\n */\nanim8.factory.object = new anim8.ObjectFactory();\n"],"sourceRoot":"/source/"}