{"version":3,"sources":["anim8js-core.js","anim8js-easing.js","anim8js-path.js","anim8js-spring.js","anim8js-event.js","anim8js-animation.js","anim8js-animator.js","anim8js-color.js","anim8js-calculator.js","anim8js-parser-deltavalues.js","anim8js-parser-final.js","anim8js-parser-initial.js","anim8js-parser-keyframe.js","anim8js-object.js"],"names":["m8","anim8","subjects","this","window","args","Array","prototype","slice","call","arguments","isArray","i","length","push","animators","arg","Animator","factory","factories","parseAnimators","noop","isDefined","x","isFunction","isNumber","isString","isObject","isElement","HTMLElement","nodeType","nodeName","now","Date","getTime","copy","p","coalesce","a","b","c","d","delegate","functionName","returning","RETURN_THIS","apply","RETURN_RESULTS","results","RETURN_FIRST","undefined","eventize","object","onListeners","$this","property","events","callback","context","split","on","once","offListeners","listeners","event","eventListeners","k","splice","off","$on","$once","triggerListeners","argument","clear","trigger","time","regex","conversions","s","sec","min","ms","hr","parsed","exec","parseFloat","unit","Math","floor","subject","factoryName","is","attribute","attr","defaultValue","easing","indexOf","pair","e","t","easingType","bezier","isEasingName","calculator","calc","parser","animation","options","Animation","parserName","defaults","duration","teasing","delay","sleep","repeat","each","iterator","filter","filterer","isAnimating","pause","transition","play","resume","stop","finish","queue","restore","eventsFor","set","get","spring","unspring","springsFor","running","animating","requestRun","vendors","requestor","requestAnimationFrame","lastTime","timeToCall","max","currTime","id","setTimeout","add","animator","active","run","preupdate","update","finished","cleanup","out","inout","pong","linear","quad","ease","i2","x2","eq1","eq2","cubic","quartic","quintic","back","x3","sine","sin","overshot","elastic","scale","wave","revisit","abs","lasso","cos","slowbounce","bounce","smallbounce","inv","tinybounce","hesitant","sqrt","sqrtf","log10","slingshot","circular","gentle","mX1","mY1","mX2","mY2","A","aA1","aA2","B","C","CalcBezier","aT","GetSlope","GetTForX","aX","aGuessT","currentSlope","currentX","cssEase","cssEaseIn","cssEaseOut","cssEaseInOut","cssLinear","Path","reset","name","points","trues","hasTrue","compute","ps","reference","last","first","point","DeltaPath","deltas","delta","ds","end","d0","d1","pd","p0","p1","interpolate","PointPath","KeyframePath","easings","ea","CubicPath","p2","p3","d2","d3","i1","i3","adds","QuadraticPath","CompiledPath","path","pointCount","create","index","Tween","start","JumpPath","Spring","type","rest","position","parse","velocity","frame","dt","MAX_DT","starting","onUpdate","updated","isEqual","EPSILON","BoxSpring","constant","acceleration","sub","mul","box","LinearSpring","damping","stiffness","temp0","temp1","DistanceSpring","distance","temp","EventState","CREATED","DELAYED","ANIMATING","SLEEPING","PAUSED","FINISHED","Event","totalTime","newInstance","EventInstance","state","pauseTime","pauseState","elapsed","next","startup","catchup","progress","applyValue","newState","getPoint","getFuture","fdelta","getDelta","getStart","getEnd","baseValue","value","isDelayed","isSleeping","timeRemaining","timeRemainingInChain","isFinished","isPaused","hasStates","states","stateText","input","isSaved","mergeOptions","durations","delays","sleeps","repeats","newEvents","save","springs","attributes","wasFinished","placeSpring","placeEvent","trimEvents","createEvents","onAnimation","all","attrs","maxRemaining","transitionTime","transitionDelta","transitionEasing","e1","e2","transitionPath","transitionEvent","objectsFor","objects","objectCount","hasEvents","hasSprings","color","r","g","parsers","parseComponent","parseFunction","v","vparsed","isNaN","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","toLowerCase","named","matches","parseInt","invalidColor","format","ca","cr","cg","cb","toString","methods","defaultMethods","clone","amount","zero","distanceSq","method","amountScale","ab","isValid","isZero","epsilon","y","aliases","left","right","middle","center","top","bottom","_x","_y","dx","dy","z","dz","angle","da","dr","dg","db","number","values","deltaObject","calculators","initial","keyframe","kframes","sort","from","half","to","times","maxTime","order","key","pathEasings","$animator"],"mappings":"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","file":"anim8js-object.min.js","sourcesContent":["\n/**\n * The core object of the framework. It extends Array and the method can be used \n * to construct an array of animators from subjects.\n * \n * @param {array} subjects\n */\nm8 = anim8 = function(subjects) \n{\n  if ( this === window ) \n  {\n\t\tvar args = Array.prototype.slice.call( arguments );\n\t\t\n\t\tif ( !anim8.isArray( subjects ) )\n\t\t{\n\t\t\tsubjects = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < args.length; i++)\n\t\t\t{\n\t\t\t\tsubjects.push( args[i] );\n\t\t\t}\n\t\t}\n\t\t\n    var animators = [];\n    \n    for (var i = 0; i < subjects.length; i++) \n    {\n      var arg = subjects[ i ];\n      \n      if ( arg instanceof anim8.Animator ) \n      {\n        animators.push( arg );\n      } \n      else\n      {\n\t\t\t\tvar factory = anim8.factories( arg );\n\t\t\t\t\n\t\t\t\tif (factory !== false)\n\t\t\t\t{\n          factory.parseAnimators( arg, animators );\n\t\t\t\t}\n      }\n    }\n\t\t\n\t\treturn new anim8( animators );\n  } \n  else \n  {\n    for (var i = 0; i < subjects.length; i++) \n    {\n      this.push( subjects[ i ] );\n    }\n  }\n};\n\n/*****************************************************************\n  UTILITY FUNCTIONS\n******************************************************************/\n\n/**\n * A function that does nothing.\n */\nanim8.noop = function() {};\n\n/**\n * Returns true if the given variable is defined.\n */\nanim8.isDefined = function(x) \n{\n  return typeof x !== 'undefined';\n};\n\n/**\n * Returns true if the given variable is a function.\n */\nanim8.isFunction = function(x) \n{\n  return typeof x === 'function';\n};\n\n/**\n * Returns true if the given variable is a number.\n */\nanim8.isNumber = function(x) \n{\n  return typeof x === 'number';\n};\n\n/**\n * Returns true if the given variable is a string.\n */\nanim8.isString = function(x) \n{\n  return typeof x === 'string';\n};\n\n/**\n * Returns true if the given variable is an array. This should be checked before\n * anim8.isObject since Arrays are objects.\n */\nanim8.isArray = function(x) \n{\n  return x instanceof Array;\n};\n\n/**\n * Returns true if the given variable is an object.\n */\nanim8.isObject = function(x) \n{\n  return typeof x === 'object';\n};\n\n/**\n * Returns true if the given variable is an HTML element.\n */\nanim8.isElement = function(x)\n{\n  return typeof HTMLElement === \"object\" ? x instanceof HTMLElement :\n  x && typeof x === \"object\" && x !== null && x.nodeType === 1 && typeof x.nodeName === \"string\";\n};\n\n/**\n * Returns the current time in milliseconds.\n */\nanim8.now = (function() {\n\n  return Date.now ? Date.now : function() \n  {\n    return new Date().getTime();\n  };\n  \n})();\n\n\n/**\n * Performs a deep copy of the given variable. If the variable is an array or object a new instance\n * of that type is created where the values are copied as well. All other types can't be copied\n * (most likely because they're scalar) so they are returned as-is.\n *\n * @param {any} x\n */\nanim8.copy = function(x) \n{\n  if ( anim8.isArray(x) ) \n  {\n    var copy = [];\n    for (var i = 0; i < x.length; i++) \n    {\n      copy.push( anim8.copy( x[i] ) );\n    }\n    x = copy;\n  }\n  else if ( anim8.isObject(x) ) \n  {\n    var copy = {};\n    for (var p in x) \n    {\n      copy[p] = anim8.copy( x[p] );\n    }\n    x = copy;\n  }\n  \n  return x;\n};\n\n/**\n * Returns the first defined variable of a possible 4 variables.\n */\nanim8.coalesce = function(a, b, c, d) \n{\n  if (anim8.isDefined(a)) return a;\n  if (anim8.isDefined(b)) return b;\n  if (anim8.isDefined(c)) return c;\n  return d;\n};\n\n/**\n * Creates a function which calls a method on all elements in the array or on the first element.\n *\n * @param {string} functionName\n * @param {string} returning\n */\nanim8.delegate = function(functionName, returning) \n{  \n  switch (returning)\n  {\n  case anim8.delegate.RETURN_THIS:\n    return function() \n    {\n      for (var i = 0; i < this.length; i++) \n      {\n        this[i][functionName].apply( this[i], arguments );\n      }\n      \n      return this;  \n    };\n    \n  case anim8.delegate.RETURN_RESULTS:\n    return function() \n    {\n      var results = [];\n    \n      for (var i = 0; i < this.length; i++) \n      {\n        results.push( this[i][functionName].apply( this[i], arguments ) );\n      }\n    \n      return results;\n    };\n    \n  case anim8.delegate.RETURN_FIRST:\n    return function()\n    {\n      return this.length === 0 ? undefined : this[0][functionName].apply( this[0], arguments );\n    };\n  }\n  \n  return anim8.noop;\n};\n\n/**\n * this is returned at the end.\n */\nanim8.delegate.RETURN_THIS = 'this';\n\n/**\n * An array of results for each method call is returned.\n */\nanim8.delegate.RETURN_RESULTS = 'results';\n\n/**\n * The result of the first element.\n */\nanim8.delegate.RETURN_FIRST = 'first';\n\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any number of events\n * on the given object, optionally once. Listeners can be removed later.\n */\nanim8.eventize = function(object)\n{\n  var onListeners = function($this, property, events, callback, context)\n  {\n    events = events.split(' ');\n    \n    if ( !anim8.isDefined( $this[ property ] ) )\n    {\n      $this[property] = {};\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      if ( !anim8.isDefined( $this[ property ][ events[i] ] ) )\n      {\n        $this[ property ][ events[i] ] = [];\n      }\n      \n      $this[ property ][ events[i] ].push( [ callback, context || this ] );\n    }\n  };\n  \n  object.on = function(events, callback, context)\n  {\n    onListeners( this, '$on', events, callback, context );\n  };\n  \n  object.once = function(events, callback, context)\n  {\n    onListeners( this, '$once', events, callback, context );\n  };\n  \n  var offListeners = function(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][0] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }  \n    }\n  };\n  \n  object.off = function(events, callback)\n  {\n    events = events.split(' ');\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      offListeners( this.$on, events[i] );\n      offListeners( this.$once, events[i] );\n    }\n  };\n  \n  var triggerListeners = function(listeners, event, argument, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      \n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n        \n        callback[0].call( callback[1], argument );\n      }\n      \n      if ( clear )\n      {\n        eventListeners.length = 0;\n      }\n    }\n  }\n  \n  object.trigger = function(event, argument)\n  {\n    triggerListeners( this.$on, event, argument, false );\n    triggerListeners( this.$once, event, argument, true );\n  };\n};\n\n/**\n * Parses milliseconds from a string or number. If a number is given it's assumed to be milliseconds\n * and is returned immediately.\n *\n * @param {string|number} time\n */\nanim8.time = (function()\n{\n  var regex = /(-?\\d*(\\.\\d+)|-?\\d+)(s|sec|min|ms|hr)?/;\n  \n  var conversions = {\n    s:    1000,\n    sec:  1000,\n    min:  1000 * 60,\n    ms:   1,\n    hr:   1000 * 60 * 60\n  };\n  \n  return function(time) \n  {  \n    if ( anim8.isNumber( time ) )\n    {\n      return time;\n    }\n    if ( anim8.isString( time ) )\n    {\n      var parsed = regex.exec( time );\n      \n      if ( parsed )\n      {\n        var time = parseFloat( parsed[1] );\n        var unit = parsed[3];\n        \n        if ( unit in conversions )\n        {\n          time *= conversions[ unit ];\n        }\n        \n        return Math.floor(time);\n      }\n    }\n    \n    return false;\n  };\n  \n})();\n\n\n/*****************************************************************\n  REGISTRIES\n******************************************************************/\n\n/**\n * Returns a factory for the given subject or throws an error if no factory exists.\n *\n * @param {any} subject\n */\nanim8.factories = function(subject) \n{\n\tfor (var factoryName in anim8.factories) \n\t{\n\t\tvar factory = anim8.factories[ factoryName ];\n\t\t\t\n\t\tif ( factory.is( subject ) )\n\t\t{\t\t\t\n\t\t\treturn factory;\n\t\t}\n\t}\n\t\n\tthrow 'No factory exists for subject ' + subject;\n};\n\n/* Attributes are the animatable properties of a subject\n\n  anim8.attribute[name] = {\n    // the default value for an attribute if none exists on the subject\n    defaultValue: 0,\n    // the name of the calculator this attribute requires for mathematical operations. default value: anim8.calculator.default\n    calculator: calculatorName,\n    // other values can be specified here that the respective factory might use\n    \"factory specific attributes\"\n  }\n*/\n\n/**\n * Returns an attribute based on the given input. If the input is an object it's assumed to be an attribute and it's\n * returned immediately. If the input is a string the attribute with the given name is returned. Otherwise\n * the default attribute is returned.\n *\n * @param {object|string} attr\n */\nanim8.attribute = function(attr) \n{\n  if ( anim8.isObject(attr) && anim8.isDefined(attr.defaultValue) ) \n\t{\n    return attr;\n  }\n  if ( anim8.isString(attr) && attr in anim8.attribute ) \n\t{\n    return anim8.attribute[ attr ];\n  }\n\t\n  return anim8.attribute.default;\n};\n\n/**\n * The default attribute.\n */\nanim8.attribute.default = {defaultValue: 0};\n \n/* Easings are functions that are magic\n\n  anim8.applier[name] = {\n    // array of properties required \n    properties: [],\n    // function to invoke each frame\n    apply: function(e, anim)\n  }\n*/\n\n/**\n * Returns an easing based on the given input. If the input is a function it's assumed to be an easing function and is\n * returned immediately. If the input is a string the easing with that name is returned. If the input is a string in the\n * format 'easing-easingType' then an easing is returned that is a combination of the easing with the given name and the\n * easingType with the given name. If the given input is an array with 4 elements it's assumed to be a bezier path and\n * one is created and returned. If no input is given the default easing is returned. If an easing cannot be determined\n * then an error is thrown.\n * \n * @param {function|string|array} easing\n */\nanim8.easing = function(easing) \n{\n  if ( anim8.isFunction( easing ) ) \n\t{\n    return easing;\n  }\n\tif ( anim8.isString( easing ) )\n\t{\n\t\tif ( easing in anim8.easing )\n\t\t{\n\t\t\treturn anim8.easing[ easing ];\n\t\t}\n\t\tif ( easing.indexOf('-') !== -1 )\n\t\t{\n\t\t\tvar pair = easing.split('-');\n\t\t\tvar e = pair[0];\n\t\t\tvar t = pair[1];\n\t\t\t\n\t\t\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t\t\t{\t\t\t\t\n\t\t\t\treturn anim8.easingType[ t ]( anim8.easing[ e ] );\n\t\t\t}\n\t\t}\n\t}\n  if ( anim8.isArray( easing ) && easing.length === 4 ) \n\t{\n    return anim8.easing.bezier.apply( null, easing );\n  }\n  if ( !anim8.isDefined( easing ) ) \n\t{\n    return anim8.easing.default;\n  }\n\t\n  throw easing + ' is not a valid easing';\n};\n\n/**\n * Returns true if the given string would result in returning an easing.\n * \n * @see anim8.easing\n * @param {string} easing\n */\nanim8.isEasingName = function(easing)\n{\n  if ( easing in anim8.easing )\n  {\n    return true;\n  }\n  \n\tvar pair = easing.split('-');\n\tvar e = pair[0];\n\tvar t = pair[1];\n\t\n\tif ( pair.length >= 2 && e in anim8.easing && t in anim8.easingType )\n\t{\t\t\t\t\n    return true;\n\t}\n  \n  return false;\n};\n\n/**\n * Returns an easing type based on the input. If the input is a function that function is immediately returned. \n * If the input is a string the easing type with that name is returned. If no easing type could be determined\n * an error is thrown.\n *\n * @param {function|string} easingType\n */\nanim8.easingType = function(easingType)\n{\n\tif ( anim8.isFunction( easingType ) )\n\t{\n\t\treturn easingType;\n\t}\n\tif ( anim8.isString( easingType ) && easingType in anim8.easingType )\n\t{\n\t\treturn anim8.easingType[ easingType ];\n\t}\n\t\n\tthrow easingType + ' is not a valid easing type';\n};\n\n/**\n * Returns a calculator based on the input. If the input is an object that object is immediately returned.\n * If the input is a string the calculator with that name is returned. If no calculator could be determined\n * the default calculator is returned.\n *\n * @param {object|string} calc\n */\nanim8.calculator = function(calc)\n{\n\tif ( anim8.isObject(calc) )\n\t{\n\t\treturn calc;\n\t}\n\tif ( anim8.isString( calc ) && calc in anim8.calculator )\n\t{\n\t\treturn anim8.calculator[ calc ];\n\t}\n\t\n\treturn anim8.calculator.default;\n};\n\n/**\n * Returns a parser based on the input. If the input is a function that function is immediately returned.\n * If the input is a string the parser with that name is returned. If no parser could be determined then\n * false is returned.\n * \n * @param {function|string} parser\n */\nanim8.parser = function(parser)\n{\n\tif ( anim8.isFunction( parser ) )\n\t{\n\t\treturn parser;\n\t}\n\tif ( anim8.isString( parser ) && parser in anim8.parser )\n\t{\n\t\treturn anim8.parser[ parser ];\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Returns an animation based on the input. If the input is an instance of anim8.Animation that instance\n * is immediately returned. If the input is a string the animation with that name is returned. If the\n * input is an object an anonymous animation is created using the second options argument. If no animation\n * could be determined then false is returned.\n * \n * @param {anim8.Animation|string|object} animation\n * @param [object] options\n */\nanim8.animation = function(animation, options)\n{\n  if ( animation instanceof anim8.Animation )\n  {\n    return animation;\n  }\n\tif ( anim8.isString( animation ) && animation in anim8.animation )\n\t{\n\t\treturn anim8.animation[ animation ];\n\t}\n\tif ( anim8.isObject( animation ) )\n\t{\n\t\tvar events = [];\n\t\t\n\t\toptions = options || {};\n\t\t\n\t\tfor (var parserName in animation)\n\t\t{\n\t\t\tvar parser = anim8.parser( parserName );\n\t\t\t\n\t\t\tif ( parser !== false )\n\t\t\t{\n\t\t\t\tparser( animation, options, events );\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (events.length)\n\t\t{\n\t\t\treturn new anim8.Animation( false, animation, options, events );\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * The default values for event properties.\n */\nanim8.defaults = \n{\n  duration: 1000,\n  easing: 'ease',\n  teasing: 'linear',\n  delay: 0,\n  sleep: 0,\n  repeat: 1\n};\n\n\n/*****************************************************************\n  ANIM8 DEFINITION\n******************************************************************/\n\n/**\n * anim8 is an instance of Array. All array methods are supported.\n */\nanim8.prototype = new Array();\n\n/**\n * Invokes a callback for each element in the array.\n * \n * @param {function} iterator\n */\nanim8.prototype.each = function(iterator) \n{\n  for (var i = 0; i < this.length; i++) \n  {\n    if ( iterator.call( this[i], this[i], i ) === false ) \n    {\n      break;\n    }\n  }\n\t\n\treturn this;\n};\n\n/**\n * Invokes a callback for each element in the array and if true is returned that element is removed from the array.\n *\n * @param {function} filterer\n */\nanim8.prototype.filter = function(filterer)\n{\n\tfor (var i = this.length - 1; i >= 0; i--)\n\t{\n\t\tif ( filterer(this[i]) )\n\t\t{\n\t\t\tthis.slice(i, 1);\n\t\t}\n\t}\n\t\n\treturn this;\n};\n\n/**\n * Returns true if any of the animators in the array are animating.\n */\nanim8.prototype.isAnimating = function() \n{\n  for (var i = 0; i < this.length; i++)\n  {\n    if ( this[i].isAnimating() )\n    {\n      return true;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Adds the following methods to anim8 to make an array of Animators appear like a single Animator.\n */\nanim8.prototype.pause \t\t\t= anim8.delegate( 'pause', anim8.delegate.RETURN_THIS );\nanim8.prototype.transition \t= anim8.delegate( 'transition', anim8.delegate.RETURN_THIS );\nanim8.prototype.play \t\t\t\t= anim8.delegate( 'play', anim8.delegate.RETURN_THIS );\nanim8.prototype.resume \t\t\t= anim8.delegate( 'resume', anim8.delegate.RETURN_THIS );\nanim8.prototype.stop \t\t\t\t= anim8.delegate( 'stop', anim8.delegate.RETURN_THIS );\nanim8.prototype.finish \t\t\t= anim8.delegate( 'finish', anim8.delegate.RETURN_THIS );\nanim8.prototype.queue \t\t\t= anim8.delegate( 'queue', anim8.delegate.RETURN_THIS );\nanim8.prototype.restore\t\t\t= anim8.delegate( 'restore', anim8.delegate.RETURN_THIS );\nanim8.prototype.eventsFor   = anim8.delegate( 'eventsFor', anim8.delegate.RETURN_RESULTS );\nanim8.prototype.set         = anim8.delegate( 'set', anim8.delegate.RETURN_THIS );\nanim8.prototype.get         = anim8.delegate( 'get', anim8.delegate.RETURN_FIRST );\nanim8.prototype.spring \t\t\t= anim8.delegate( 'spring', anim8.delegate.RETURN_RESULTS );\nanim8.prototype.unspring \t\t= anim8.delegate( 'unspring', anim8.delegate.RETURN_THIS );\nanim8.prototype.springsFor \t= anim8.delegate( 'springsFor', anim8.delegate.RETURN_RESULTS );\n\nanim8.prototype.on\t\t\t    = anim8.delegate( 'on', anim8.delegate.RETURN_THIS );\nanim8.prototype.once\t\t    = anim8.delegate( 'once', anim8.delegate.RETURN_THIS );\nanim8.prototype.off\t\t\t    = anim8.delegate( 'off', anim8.delegate.RETURN_THIS );\nanim8.prototype.trigger     = anim8.delegate( 'trigger', anim8.delegate.RETURN_THIS );\n\n/*****************************************************************\n  ANIM8 ANIMATION LOOP\n******************************************************************/\n\n/**\n * Whether the animation cycle is currently running. This is true\n * when where are active animators and anim8.run is being called\n * and false otherwise.\n */\nanim8.running = false;\n\n/**\n * The anim8 instance for all active animators.\n */\nanim8.animating = anim8();\n\n/**\n * The function to call if animations need to be done.\n *\n * @param {function} callback\n */\nanim8.requestRun = (function() \n{  \n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  var requestor = window.requestAnimationFrame;\n  \n  for (var x = 0; x < vendors.length && !requestor; ++x) \n  {\n    requestor = window[ vendors[x] + 'RequestAnimationFrame' ];\n  }\n  \n  if (!requestor)\n  {\n    var lastTime = 0;\n    \n    return function(callback)\n    {\n      var now = anim8.now();\n      var timeToCall = Math.max( 0, 16 - (currTime - lastTime) );\n      var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  \n  return function(callback)\n  {\n    requestor( callback );\n  };\n  \n})();\n\n/**\n * Adds an animator to the list if animating if it isn't there already. If the animation\n * loop isn't currently running it's started.\n * \n * @param {anim8.Animator} animator\n */\nanim8.add = function(animator)\n{\n  if ( !animator.active )\n  {\n    anim8.animating.push( animator );\n    \n    animator.active = true;\n  }\n  \n  if ( !anim8.running )\n  {\n    anim8.running = true;\n\t\tanim8.requestRun( anim8.run );\n  }\n}\n\n/**\n * Executes an animation cycle which consists of four operations:\n *   1. Call preupdate on all Animators\n *   2. Call update on all Animators\n *   3. Call apply on all Animators\n *   4. Remove finished Animators\n * When there are no more animating the cycle is stopped.\n */\nanim8.run = function() \n{\n  var now = anim8.now();\n  \n  // notify animators that we're about to update\n  anim8.animating.each(function(animator)\n  {\n    animator.preupdate();\n  });\n  \n  // update animating based on the current time\n  anim8.animating.each(function(animator)\n  {\n    animator.update( now );\n  });\n  \n  // apply the attributes calculated\n  anim8.animating.each(function(animator)\n  {\n    animator.apply();\n  });\n  \n  // if the animator is done remove it\n  anim8.animating.filter(function(animator)\n  {\n    if ( animator.finished )\n    {\n\t\t\tanimator.cleanup();\n      animator.active = false;\n    }\n    \n    return animator.finished;\n  });\n  \n  // if there are animators still remaining call me again!\n  if ( anim8.animating.length )\n  {\n\t\tanim8.requestRun( anim8.run );\n  } \n  else \n  {\n    anim8.running = false;\n  }\n};","\n/**\n * Easing & Easing Type functions\n */\n\nanim8.easingType.in = function(easing) \n{\n\treturn function(x) {\n\t\treturn easing( x );\n\t};\n};\n\nanim8.easingType.out = function(easing) \n{\n\treturn function(x) {\n\t\treturn 1.0 - easing( 1.0 - x );\n\t};\n};\n\nanim8.easingType.inout = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x ) * 0.5;\n\t  } else {\n\t    return 1.0 - (easing( 2.0 - 2.0 * x ) * 0.5);\n\t  }\n\t};\n};\n\nanim8.easingType.pong = function(easing) \n{\n\treturn function(x) {\n\t  if ( x < 0.5 ) {\n\t    return easing( 2.0 * x );\n\t  } else {\n\t    return easing( 2.0 - 2.0 * x );\n\t  }\n\t};\n};\n\nanim8.easing.linear = function(x) \n{\n  return x;\n};\n\nanim8.easing.quad = function(x)\n{\n  return x * x;\n};\n\nanim8.easing.ease = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  var x2 = x * x;\n  var eq1 = (0.3 * i2 * x) + (3.0 * i * x2) + (x2 * x);\n  var eq2 = 1.0 - i2 * i2;\n  \n  return eq1 * i + eq2 * x;\n};\n\nanim8.easing.cubic = function(x) \n{\n  return x * x * x;\n};\n\nanim8.easing.quartic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2;\n};\n\nanim8.easing.quintic = function(x) \n{\n  var x2 = x * x;\n  return x2 * x2 * x;\n};\n\nanim8.easing.back = function(x) \n{\n  var x2 = x * x;\n\tvar x3 = x2 * x;\n\treturn x3 + x2 - x;\n};\n\nanim8.easing.sine = function(x) \n{\n\treturn Math.sin( x * 1.57079632679 );\n};\n\nanim8.easing.overshot = function(x)\n{\n  return (1.0 - x * (7.0 / 10/0)) * x * (10.0 / 3.0);\n};\n\nanim8.easing.elastic = function(x) \n{\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var scale = x2 * ((2.0 * x3) + x2 - (4.0 * x) + 2.0);\n\tvar wave = -Math.sin(x * 10.9955742876);\n\treturn scale * wave;\n};\n\nanim8.easing.revisit = function(x) \n{\n  return Math.abs( x - Math.sin(x * 3.14159265359) );\n};\n\nanim8.easing.lasso = function(x)\n{\n  return (1.0 - Math.cos(x * x * x * 36.0) * (1.0 - x))\n};\n\nanim8.easing.slowbounce = function(x) \n{\n  var x2 = x * x;\n  return (1.0 - Math.abs((1.0 - x2) * Math.cos(x2 * x * 14.8044066016)));\n};\n\nanim8.easing.bounce = function(x) \n{\n  return (1.0 - Math.abs((1.0 - x) * Math.cos(x * x * 14.8044066016)));\n};\n\nanim8.easing.smallbounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 14.8044066016)));\n};\n\nanim8.easing.tinybounce = function(x) \n{\n  var inv = 1.0 - x;\n\treturn (1.0 - Math.abs(inv * inv * Math.cos(x * x * 7.0)));\n};\n\nanim8.easing.hesitant = function(x) \n{\n\treturn (Math.cos(x * x * 12.0) * x * (1.0 - x) + x);\n};\n\nanim8.easing.lasso = function(x)\n{\n  var x2 = x * x;\n\treturn (1.0 - Math.cos(x2 * x * 36.0) * (1.0 - x));\n};\n\nanim8.easing.sqrt = function(x)\n{\n  return Math.sqrt( x );\n};\n\nanim8.easing.sqrtf = function(x)\n{\n  var i = (1.0 - x);\n  var i2 = i * i;\n  return ((1.0 - i2 * i2) + x) * 0.5;\n};\n\nanim8.easing.log10 = function(x)\n{\n  return (Math.log10(x) + 2.0) * 0.5;\n};\n\nanim8.easing.slingshot = function(x)\n{\n  if (x < 0.7) {\n\t\treturn (x * -0.357);\n  } else {\n    var d = x - 0.7;\n    return ((d * d * 27.5 - 0.5) * 0.5);\n  }\n};\n\nanim8.easing.circular = function(x)\n{\n  return 1.0 - Math.sqrt( 1 - x * x );\n};\n\nanim8.easing.gentle = function(x)\n{\n  return  (3.0 * (1.0 - x) * x * x) + (x * x * x);\n};\n\nanim8.easing.bezier = function(mX1, mY1, mX2, mY2) \n{\n  // https://gist.githubusercontent.com/gre/1926947/raw/KeySpline.js\n  \n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\n  function C(aA1)      { return 3.0 * aA1; }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function CalcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function GetSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function GetTForX(aX) {\n    // Newton raphson iteration\n    var aGuessT = aX;\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = GetSlope(aGuessT, mX1, mX2);\n      if (currentSlope == 0.0) return aGuessT;\n      var currentX = CalcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  \n  return function(x) {\n    return CalcBezier( GetTForX( x ), mY1, mY2 );\n  };\n};\n\nanim8.easing.cssEase      = anim8.easing.ease;\nanim8.easing.cssEaseIn    = anim8.easing.quad;\nanim8.easing.cssEaseOut   = anim8.easingType.out( anim8.easing.quad );\nanim8.easing.cssEaseInOut = anim8.easingType.inout( anim8.easing.quad );\nanim8.easing.cssLinear    = anim8.easing.linear;\n\nanim8.easing.default      = anim8.easing.ease;","anim8.Path = function()\n{\n};\n\nanim8.Path.prototype = \n{\n  reset: function(name, calculator, points)\n  {\n    this.name = name;\n    this.calculator = anim8.calculator( calculator );\n    this.points = points;\n    this.trues = this.hasTrue();\n  },\n  compute: function(out, delta) \n\t{\n    return out;\n  },\n  hasTrue: function() \n\t{\n    var ps = this.points;\n    \n    for (var i = 0; i < ps.length; i++) \n    {\n      if (ps[i] === true) \n      {\n        return true;\n      }\n    }\n    return false;\n  },\n  reference: function() \n\t{\n    return this.trues ? this.copy() : this;\n  },\n  last: function()\n  {\n    return this.points[ this.points.length - 1 ];\n  },\n  first: function()\n  {\n    return this.points[ 0 ];\n  },\n  point: function(i)\n  {\n    return this.points[ i ];\n  }\n};\n\n\n\n\n\nanim8.DeltaPath = function(name, calculator, points, deltas) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n};\n\nanim8.DeltaPath.prototype = new anim8.Path();\n\nanim8.DeltaPath.prototype.compute = function(out, delta) \n{\n  var ds = this.deltas;\n  var end = ds.length - 2;\n  var i = 0;\n  while (ds[i + 1] < delta && i < end) i++;\n  var d0 = ds[i];\n  var d1 = ds[i + 1];\n  var pd = (delta - d0) / (d1 - d0);\n  var p0 = this.points[i];\n  var p1 = this.points[i + 1];\n  \n  return this.calculator.interpolate( out, p0, p1, pd );\n};\n  \nanim8.DeltaPath.prototype.copy = function() \n{\n    return new anim8.DeltaPath( this.name, anim8.copy(this.points), anim8.copy(this.deltas), this.calculator );\n};\n\n\n\n\n\nanim8.PointPath = function(name, calculator, point)\n{\n  this.reset( name, calculator, [point] );\n};\n\nanim8.PointPath.prototype = new anim8.Path();\n\nanim8.PointPath.prototype.compute = function(out, delta)\n{\n  return this.calculator.copy( out, this.points[0] );\n};\n  \nanim8.PointPath.prototype.copy = function() \n{\n    return new anim8.PointPath( this.name, this.calculator, this.points[0] );\n};\n\n\n\nanim8.KeyframePath = function(name, calculator, points, deltas, easings) \n{\n  this.reset( name, calculator, points );\n  this.deltas = deltas;\n  this.easings = easings;\n};\n\nanim8.KeyframePath.prototype = new anim8.Path();\n\nanim8.KeyframePath.prototype.compute = function(out, delta) \n{  \n  var ds = this.deltas;\n  var end = ds.length - 2;\n  \n  if ( delta < ds[0] ) {\n    return false;\n  }\n  \n  if ( delta > ds[ds.length - 1] ) {\n    return this.points[ds.length - 1];\n  }\n  \n  var i = 0;\n  while (ds[i + 1] < delta && i < end) i++;\n  var d0 = ds[i];\n  var d1 = ds[i + 1];\n  var pd = (delta - d0) / (d1 - d0);\n  var p0 = this.points[i];\n  var p1 = this.points[i + 1];\n  var ea = this.easings[i];\n  \n  return this.calculator.interpolate( out, p0, p1, ea( pd ) );\n};\n  \nanim8.KeyframePath.prototype.copy = function() \n{\n    return new anim8.KeyframePath( this.name, this.calculator, anim8.copy(this.points), anim8.copy(this.deltas), anim8.copy(this.easings) );\n};\n\n\n\n\n\nanim8.CubicPath = function(name, calculator, p0, p1, p2, p3)\n{\n  this.reset( name, calculator, [p0, p1, p2, p3] );\n};\n\nanim8.CubicPath.prototype = new anim8.Path();\n\nanim8.CubicPath.prototype.compute = function(out, d1)\n{\n  var calc = this.calculator;\n  var d2 = d1 * d1;\n  var d3 = d1 * d2;\n  var i1 = 1 - d1;\n  var i2 = i1 * i1;\n  var i3 = i1 * i2;\n  \n  out = calc.copy( out, this.points[0] );\n  out = calc.scale( out, i3 );\n  out = calc.adds( out, this.points[1], 3 * i2 * d1 );\n  out = calc.adds( out, this.points[2], 3 * i1 * d2 );\n  out = calc.adds( out, this.points[3], d3 );\n  \n  return out;\n};\n  \nanim8.CubicPath.prototype.copy = function() \n{\n    return new anim8.CubicPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2], this.points[3] );\n};\n\n\n\n\n\nanim8.QuadraticPath = function(name, calculator, p0, p1, p2)\n{\n  this.reset( name, calculator, [p0, p1, p2] );\n};\n\nanim8.QuadraticPath.prototype = new anim8.Path();\n\nanim8.QuadraticPath.prototype.compute = function(out, d1)\n{\n  var calc = this.calculator;\n  var d2 = d1 * d1;\n  var i1 = 1 - d1;\n  var i2 = i1 * i1;\n  \n  out = calc.copy( out, this.points[0] );\n  out = calc.scale( out, i2 );\n  out = calc.adds( out, this.points[1], 2 * i1 * d1 );\n  out = calc.adds( out, this.points[2], d2 );\n    \n  return out;\n};\n  \nanim8.QuadraticPath.prototype.copy = function() \n{\n    return new anim8.QuadraticPath( this.name, this.calculator, this.points[0], this.points[1], this.points[2] );\n};\n\n\n\n\n\nanim8.CompiledPath = function(name, path, pointCount)\n{\n  var calc = path.calculator;\n  var points = [];\n  \n  for (var i = 0; i < pointCount; i++)\n  {\n    points.push( path.compute( calc.create(), i / (pointCount - 1) ) );\n  }\n  \n  this.reset( name, calc, points );\n};\n\nanim8.CompiledPath.prototype = new anim8.Path();\n\nanim8.CompiledPath.prototype.compute = function(out, delta)\n{\n  var ps = this.points;\n  var a = Math.floor( delta * ps.length );\n  var index = Math.min( a, ps.length - 1 );\n  \n  return this.calculator.copy( out, ps[ index ] );\n};\n  \nanim8.CompiledPath.prototype.copy = function() \n{\n    return new anim8.CompiledPath( this.name, this, this.points.length );\n};\n\n\n\n\n\nanim8.Tween = function(name, calculator, start, end)\n{\n  this.reset( name, calculator, [start, end] );\n};\n\nanim8.Tween.prototype = new anim8.Path();\n\nanim8.Tween.prototype.compute = function(out, delta)\n{\n  return this.calculator.interpolate( out, this.points[0], this.points[1], delta );\n};\n  \nanim8.Tween.prototype.copy = function() \n{\n    return new anim8.Tween( this.name, this.calculator, this.points[0], this.points[1] );\n};\n\n\n\n\n\nanim8.JumpPath = function(name, calculator, points)\n{\n  this.reset( name, calculator, points );\n};\n\nanim8.JumpPath.prototype = new anim8.Path();\n\nanim8.JumpPath.prototype.compute = function(out, delta)\n{\n  var ps = this.points;\n  var a = Math.floor( delta * ps.length );\n  var index = Math.min( a, ps.length - 1 );\n  \n  return this.calculator.copy( out, ps[ index ] );\n};\n  \nanim8.JumpPath.prototype.copy = function() \n{\n    return new anim8.JumpPath( this.name, this.calculator, anim8.copy(this.points) );\n};","/**\n * Returns a spring if the provided argument is a spring, the name of a spring, or\n * an object with a spring type to be created. If none of these conditions are true\n * then false is returned.\n *\n * @param {anim8.Spring|string|object} spring\n */\nanim8.spring = function(spring)\n{\n  if ( spring instanceof anim8.Spring )\n  {\n    return spring;\n  }\n  if ( anim8.isString( spring ) && spring in anim8.spring )\n  {\n    return anim8.spring[ spring ];\n  }\n  if ( anim8.isObject( spring ) && spring.type in anim8.spring )\n  {\n    return anim8.spring[ spring.type ]( spring );\n  }\n  \n  return false;\n};\n\n\n/**\n * A spring has a resting point, a current position, and the velocity currently enacting on the position\n * based on the implementing classes logic.\n */\nanim8.Spring = function()\n{\n};\n\nanim8.Spring.prototype = \n{\n  /**\n   * Resets the spring's properties.\n   * \n   * @param {string} attribute\n   * @param {string|object} calculator\n   * @param {any} rest\n   * @param {any} position\n   */\n  reset: function(attribute, calculator, rest, position)\n  {\n    var a = anim8.attribute( attribute );\n    \n    this.attribute    = attribute;\n    this.calculator   = anim8.calculator( calculator );\n    this.rest         = this.calculator.parse( rest, a.defaultValue );\n    this.position     = this.calculator.parse( position, a.defaultValue );\n    this.velocity     = this.calculator.create();\n    this.time         = 0;\n  },\n  \n  /**\n   * Updates the spring given the current time in milliseconds and the frame which\n   * contains (or will contain) the attribute to which this spring is animating.\n   *\n   * @param {number} now\n   * @param {object} frame\n   */\n  update: function(now, frame)\n  {\n    if (this.time === 0)\n    {\n      this.time = now;\n    }\n    \n    // the number of elapsed seconds (maxed to avoid crazy behavior with low FPS)\n    var dt = Math.min( (now - this.time) * 0.001, anim8.Spring.MAX_DT );\n    \n    // keep track of the starting position to determine whether the position has updated.\n    var starting = this.calculator.copy( {}, this.position );\n    \n    // call the update method which should update the position\n    this.onUpdate( dt );\n    \n    this.time = now;\n    \n    // track whether the attribute has updated so the animator knows if it needs to apply the attribute to the subject.\n    var updated = !this.calculator.isEqual( starting, this.position, anim8.Spring.EPSILON );\n    \n    if ( updated )\n    {\n      frame[ this.attribute ] = this.position;\n    }\n    \n    return updated;\n  },\n  \n  /**\n   * Method that's invoked on each update.\n   *\n   * @param {number} dt\n   */\n  onUpdate: function(dt)\n  {\n    \n  }\n};\n\n/**\n * The maximum elapsed time that should be used for the spring simulation. If you allow the elapsed time\n * to get to high the spring will overreact and produce undesirable results.\n */\nanim8.Spring.MAX_DT = 0.1;\n\n/**\n * The value used to determine whether two positions in a spring are different.\n */\nanim8.Spring.EPSILON = 0.0001;\n\n\n\n\n/**\n * A box spring is a simple string\n */\nanim8.BoxSpring = function(attribute, calculator, position, rest, constant)\n{\n  var a = anim8.attribute( attribute );\n    \n  this.reset( attribute, calculator, rest, position );\n  \n  this.acceleration   = this.calculator.create();\n  this.constant       = this.calculator.parse( constant, a.defaultValue );\n};\n\nanim8.BoxSpring.prototype = new anim8.Spring();\n\nanim8.BoxSpring.prototype.onUpdate = function(dt)\n{\n  var calc = this.calculator;\n  \n  this.acceleration = calc.copy( this.acceleration, this.rest );\n  this.acceleration = calc.sub( this.acceleration, this.position );\n  this.acceleration = calc.mul( this.acceleration, this.constant );\n  this.position     = calc.adds( this.position, this.acceleration, dt );\n//  this.velocity     = calc.adds( this.velocity, this.acceleration, dt );\n};\n\nanim8.spring.box = function(spring)\n{ \n  return new anim8.BoxSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.constant\n  );\n};\n\n\n\n\nanim8.LinearSpring = function(attribute, calculator, position, rest, damping, stiffness)\n{\n  var a = anim8.attribute( attribute );\n  \n  this.reset( attribute, calculator, rest, position );\n  \n  this.damping      = this.calculator.parse( damping, a.defaultValue );\n  this.stiffness    = this.calculator.parse( stiffness, a.defaultValue );\n  this.temp0        = this.calculator.create();\n  this.temp1        = this.calculator.create();\n};\n\nanim8.LinearSpring.prototype = new anim8.Spring();\n\nanim8.LinearSpring.prototype.onUpdate = function(dt)\n{\n  // velocity += ((stiffness * (position - rest)) - (damping * velocity)) * elapsed.seconds;\n\t// position += velocity * elapsed.seconds;\n    \n  var calc = this.calculator;\n\n  this.temp1 = calc.copy( this.temp1, this.damping );\n  this.temp1 = calc.mul( this.temp1, this.velocity );\n  \n  this.temp0 = calc.copy( this.temp0, this.position );\n  this.temp0 = calc.sub( this.temp0, this.rest );\n  this.temp0 = calc.mul( this.temp0, this.stiffness );\n  this.temp0 = calc.sub( this.temp0, this.temp1 );\n  \n  this.velocity = calc.adds( this.velocity, this.temp0, dt );\n  this.position = calc.adds( this.position, this.velocity, dt );\n};\n\nanim8.spring.linear = function(spring)\n{ \n  return new anim8.LinearSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.damping,\n    spring.stiffness\n  );\n};\n\n\n\n\n\n\n\nanim8.DistanceSpring = function(attribute, calculator, position, rest, distance, damping, stiffness)\n{\n  this.reset( attribute, calculator, rest, position );\n  \n  this.distance   = distance;\n  this.damping    = damping;\n  this.stiffness  = stiffness;\n  this.temp       = this.calculator.create();\n};\n\nanim8.DistanceSpring.prototype = new anim8.Spring();\n\nanim8.DistanceSpring.prototype.onUpdate = function(dt)\n{\n  // d = DISTANCE( position, rest )\n  // velocity += ((position - rest) / d * stiffness * |distance - d| - (damping * velocity)) * elapsed.seconds;\n  // position += velocity * elapsed.seconds;\n\n  var calc = this.calculator;\n  var d = calc.distance( this.position, this.rest );\n  \n  this.temp = calc.copy( this.temp, this.position )\n  this.temp = calc.sub( this.temp, this.rest );\n  \n  if ( d !== 0 )\n  {\n  \tthis.temp = calc.scale( this.temp, 1.0 / d );\n  \tthis.temp = calc.scale( this.temp, (d - this.distance) * this.stiffness );\n  }\n\n  this.temp = calc.adds( this.temp, this.velocity, -this.damping );\n\n  this.velocity = calc.adds( this.velocity, this.temp, dt );\n  this.position = calc.adds( this.position, this.velocity, dt );\n};\n\nanim8.spring.distance = function(spring)\n{ \n  return new anim8.DistanceSpring(\n    spring.attribute,\n    anim8.calculator( anim8.attribute( spring.attribute ).calculator ),\n    spring.position,\n    spring.rest,\n    spring.distance,\n    spring.damping,\n    spring.stiffness\n  );\n};","\nanim8.EventState = \n{\n  CREATED: 0,\n  DELAYED: 1,\n  ANIMATING: 2,\n  SLEEPING: 4,\n  PAUSED: 8,\n  FINISHED: 16\n};\n\nanim8.Event = function(attribute, path, duration, easing, delay, sleep, repeat) \n{\n  this.attribute \t= attribute;\n  this.path \t\t\t= path;\n  this.easing \t\t= anim8.easing( easing );\n  this.delay \t\t\t= anim8.coalesce( delay, anim8.defaults.delay );\n  this.duration \t= anim8.coalesce( duration, anim8.defaults.duration );\n  this.sleep \t\t\t= anim8.coalesce( sleep, anim8.defaults.sleep );\n  this.repeat \t\t= anim8.coalesce( repeat, anim8.defaults.repeat );\n};\n\nanim8.Event.prototype = \n{\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n  newInstance: function()\n  {\n    return new anim8.EventInstance( this );\n  }\n};\n\nanim8.EventInstance = function(event)\n{\n\tthis.event \t\t\t= event;\n\tthis.attribute \t= event.attribute;\n\tthis.path \t\t\t= event.path;\n\tthis.duration \t= event.duration;\n\tthis.easing \t\t= event.easing;\n\tthis.delay \t\t\t= event.delay;\n\tthis.sleep \t\t\t= event.sleep;\n\tthis.repeat \t\t= event.repeat;\n  this.state \t\t\t= anim8.EventState.CREATED;\n  this.time \t\t\t= 0;\n  this.pauseTime \t= 0;\n  this.pauseState = 0;\n\tthis.elapsed\t\t= 0;\n\tthis.next\t\t\t\t= null;\n};\n\nanim8.EventInstance.prototype = \n{\n  update: function(now, frame) \n\t{\n    var updated = false;\n    \n    this.startup( now );\n    \n    var elapsed = this.catchup( now, frame );\n    \n    if (this.isAnimating()) \n\t\t{\t\t\t\n      var delta = elapsed / this.duration;\n      \n      if (delta >= 1 || this.duration === 0)\n\t\t\t{\n        if (--this.repeat === 0) \n\t\t\t\t{\n          this.finish(frame);\n\t\t\t\t\t\n          return true;\n        } \n\t\t\t\telse \n\t\t\t\t{\n          if (this.sleep)\n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.SLEEPING ); \n            delta = 1;\n            \n            this.trigger('sleeping', this);\n          } \n\t\t\t\t\telse \n\t\t\t\t\t{\n            elapsed = this.progress( elapsed, this.duration, anim8.EventState.ANIMATING );\n            delta -= 1;\n          }\n        }\n      }\n      \n      this.applyValue( frame, frame[this.attribute], delta );\n      updated = true;\n    }\n    \n    return updated;\n  },\n  progress: function(elapsed, time, newState) \n\t{\n    this.time += time;\n\t\tthis.elapsed += time;\n    this.state = newState;\n\t\t\n    return elapsed - time;\n  },\n  finish: function(frame) \n\t{\n    this.applyValue( frame, this.path.calculator.create(), 1.0 );\n    this.state = anim8.EventState.FINISHED;\n    \n    this.trigger('finish', this);\n  },\n  getPoint: function(delta)\n  {\n    return this.path.compute( this.path.calculator.create(), this.easing( delta ) );\n  },\n  getFuture: function(fdelta)\n  {\n    return this.getPoint( Math.min( 1.0, this.getDelta() + fdelta ) );\n  },\n  getDelta: function()\n  {\n    return this.isAnimating() ? Math.min( 1.0, (anim8.now() - this.time) / this.duration ) : 0.0;\n  },\n  getStart: function()\n  {\n    return this.getPoint( 0 );\n  },\n  getEnd: function() \n\t{\n    return this.getPoint( 1 );\n  },\n  applyValue: function(frame, baseValue, delta)\n  {\n    var value = this.path.compute( baseValue, this.easing( delta ) );\n        \n    if ( value !== false )\n    {\n      frame[this.attribute] = value;\n    }\n  },\n\tstartup: function(now)\n\t{\n    if (this.state === anim8.EventState.CREATED) \n\t\t{\n      this.time = now;\n\t\t\t\n      if (this.delay) \n\t\t\t{\n        this.state = anim8.EventState.DELAYED;\n        \n        this.trigger('delaying', this);\n      } \n\t\t\telse \n\t\t\t{\n        this.state = anim8.EventState.ANIMATING;\n      }\n    }\n\t},\n  catchup: function(now, frame) \n\t{\n\t\tvar elapsed = now - this.time;\n\t\t\n    if (this.isDelayed()) \n\t\t{\n      if (elapsed > this.delay) \n\t\t\t{\n        this.trigger('delayed', this);\n        \n        elapsed = this.progress( elapsed, this.delay, anim8.EventState.ANIMATING );\n      }\n    }\n\t\t\n    if (this.isSleeping()) \n\t\t{\n      if (elapsed > this.sleep)\n\t\t\t{\n        this.trigger('slept', this);\n        \n        elapsed = this.progress( elapsed, this.sleep, anim8.EventState.ANIMATING );\n      }\n    }\n\t\t\n    if (this.isAnimating())\n    {\n      if (this.sleep)\n      {\n        \n      }\n      else\n      {\n        \n      }\n    }\n\t\t/*\n    TODO\n\t\tif (this.isAnimating())\n\t\t{\n\t\t\tvar total = (this.sleep + this.duration);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (this.sleep)\n\t\t\t{\n\t\t\t\tvar iterations = (this.sleep + this.duration);\n\t\t\t}\n\t\t}\n\t\t*/\n\t\t\n\t\treturn elapsed;\n  },\n\ttotalTime: function()\n\t{\n\t\treturn this.delay + (this.repeat * this.duration) + ((this.repeat - 1) * this.sleep);\n\t},\n  timeRemaining: function() \n\t{    \n\t\treturn this.totalTime() - this.elapsed;\n  },\n  timeRemainingInChain: function()\n  {\n    return this.timeRemaining() + (this.next ? this.next.timeRemainingInChain() : 0);\n  },\n  queue: function(e)\n  {\n    if ( this.next )\n    {\n      this.next.queue( e );\n    }\n    else\n    {\n      this.next = e;\n    }\n  },\n  pause: function() \n\t{\n    if (this.state !== anim8.EventState.PAUSED) \n\t\t{\n      this.pauseTime = anim8.now();\n      this.pauseState = this.state;\n      this.state = anim8.EventState.PAUSED; \n    }\n  },\n  resume: function() \n\t{\n    if (this.state === anim8.EventState.PAUSED) \n\t\t{\n      this.time += anim8.now() - this.pauseTime;\n      this.state = this.pauseState; \n    }\n  },\n  isAnimating: function() \n\t{\n    return (this.state === anim8.EventState.ANIMATING);\n  },\n  isFinished: function() \n\t{\n    return (this.state === anim8.EventState.FINISHED);\n  },\n  isDelayed: function() \n\t{\n    return (this.state === anim8.EventState.DELAYED);\n  },\n  isPaused: function() \n\t{\n    return (this.state === anim8.EventState.PAUSED);\n  },\n  isSleeping: function() \n\t{\n    return (this.state === anim8.EventState.SLEEPING);\n  },\n  hasStates: function(states) \n\t{\n    return (this.state & states) !== 0;\n  },\n  stateText: function() \n\t{\n    switch(this.state) \n    {\n      case anim8.EventState.CREATED:            return \"created\";\n      case anim8.EventState.DELAYED:            return \"delayed\";\n      case anim8.EventState.ANIMATING:          return \"animating\";\n      case anim8.EventState.SLEEPING:           return \"sleeping\";\n      case anim8.EventState.FINISHED:           return \"finished\";\n    }\n  },\n  hasTrue: function()\n  {\n    return this.path.trues;\n  }\n};\n\n/**\n * Adds the following event methods to EventInstances: on, once, off, trigger.\n */\nanim8.eventize( anim8.EventInstance.prototype );","\n/**\n * Instantiates a new Animation given it's name, the input & options passed, and the events that\n * were generated from the input & options. If the name is false this is an anonymous animation.\n * Input & Options are used by parsers to generate events, options allow for an animations\n * default event properties to be overriden.\n *\n * @param {string} name\n * @param {object} input\n * @param [object] options\n * @param {array:anim8.Event} events\n */\nanim8.Animation = function(name, input, options, events)\n{\n\tthis.name = name;\n\tthis.input = input;\n\tthis.options = options;\n\tthis.events = events;\n};\n\nanim8.Animation.prototype = \n{\n  /**\n   * Returns true if this animation was a saved animation, otherwise it's an anonymous one\n   * and false is returned.\n   */\n  isSaved: function()\n  {\n    return (this.name !== false);\n  },\n  /**\n   * Merges options provided during play to override the defaults in the events.\n   *\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  mergeOptions: function(options, events)\n  { \n    // TODO move to parsers\n    \n    var durations = this.input.durations || {};\n    var easings   = this.input.easings || {};\n    var delays    = this.input.delays || {};\n    var sleeps    = this.input.sleeps || {};\n    var repeats   = this.input.repeats || {};\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      \n      e.easing   = anim8.easing( anim8.coalesce( easings[attr], options.easing, this.options.easing, e.easing ) );\n      e.duration = anim8.coalesce( durations[attr], options.duration, this.options.duration, e.duration );\n      e.delay    = anim8.coalesce( delays[attr], options.delay, this.options.delay, e.delay );\n      e.sleep    = anim8.coalesce( sleeps[attr], options.sleep, this.options.sleep, e.sleep );\n      e.repeat   = anim8.coalesce( repeats[attr], options.repeat, this.options.repeat, e.repeat );\n    }\n  },\n  /**\n   * Generates an array of event instances from the events in this animation.\n   */\n  newEvents: function()\n  {\n    var e = [];\n    \n    for (var i = 0; i < this.events.length; i++)\n    {\n      e.push( this.events[i].newInstance() );\n    }\n    \n    return e;\n  }\n};\n\n/**\n * Saves an animation under the given name. It can be played, queued, and transitioned into\n * at a later time providing the name and optionally options to override with.\n *\n * @param {string} name\n * @param {object} animation\n * @param [object] options\n */\nanim8.save = function(name, animation, options)\n{\n  var animation = anim8.animation( animation, options );\n  \n  animation.name = name;\n  \n\tanim8.animation[name] = animation;\n};","\n/**\n * Instantiates a new Animator given a subject to animate.\n *\n * @param {any} e\n */\nanim8.Animator = function(e) \n{\n\tthis.reset( e );\n};\n\nanim8.Animator.prototype = \n{\n  /**\n   * Resets the animator given a subject to animate.\n   *\n   * @param {any} e\n   */\n\treset: function(e)\n\t{\n\t  this.e = e;\n\t  this.events = {};\n    this.springs = {};\n\t  this.attributes = {};\n\t  this.frame = {};\n    this.updated = {};\n\t  this.finished = false;\n\t\tthis.factory = null;\n    this.active = false;\n\t},\n  \n  /**\n   * Restores any temporary state that may exist on this Animator that\n   * is a result from animations.\n   */\n  restore: function()\n  {\n    \n  },\n  \n  /**\n   * A method thats invoked along with all other animators before updates are called.\n   * This is used to make any necessary preparations before the animator is updated.\n   */\n  preupdate: function()\n  {\n    \n  },\n  \n  /**\n   * Updates the animator with the current time. All events and springs in this\n   * animator are updated.\n   *\n   * @param {number} now\n   */\n  update: function(now) \n\t{  \n    this.wasFinished = this.finished;\n    \n    this.finished = true;\n\t\t\n    for (var attr in this.events)\n    {\n      var e = this.events[ attr ];\n      \n      this.updated[ attr ] = e.update( now, this.frame );\n      \n      this.finished = this.finished && e.isFinished();\n    }\n    \n    for (var attr in this.springs)\n    {\n      var s = this.springs[ attr ];\n      \n      this.updated[ attr ] = s.update( now, this.frame );\n      \n      this.finished = false;\n    }\n  },\n  \n  /**\n   * Places the spring in this animator replacing any spring that exists for the same\n   * attribute. The next time the animator is updated the spring will be started.\n   *\n   * @param {anim8.Spring} s\n   */\n  placeSpring: function(s)\n  {\n    var attr = s.attribute;\n    \n    this.springs[ attr ] = s;\n    \n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = anim8.attribute( attr ).defaultValue;\n    }\n  },\n  \n  /**\n   * Places the event in this animator replacing any event that exists for the same\n   * attribute. The next time the animator is updated the event will be started.\n   *\n   * @param {anim8.EventInstance} e\n   */\n  placeEvent: function(e)\n  {\n    var attr = e.attribute;\n    \n    this.events[ attr ] = e;\n    \n    if ( !(attr in this.frame) )\n    {\n      this.frame[ attr ] = anim8.attribute( attr ).defaultValue;\n    }\n  },\n  \n  /**\n   * Applies all updated attributes to the subject. This method is invoked with all of the other\n   * animators at the end of the animation cycle.\n   */\n  apply: function()\n\t{\n    for (var attr in this.frame)\n    {\n      if ( this.updated[attr] )\n      {\n        this.e[ attr ] = this.frame[ attr ]; \n      }\n    }\n    \n    this.trimEvents();\n  },\n  \n  /**\n   * Removes any finished events and places queued events. If the animator previously wasn't finished\n   * but now it is the 'finished' event will be triggered.\n   */\n  trimEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      var e = this.events[attr];\n      \n      if ( e.isFinished() )\n      {\n        if ( e.next )\n        {                    \n          this.placeEvent( e.next );\n          this.finished = false;\n        }\n        else\n        {\n          delete this.events[attr];\n        }\n      }\n    }\n    \n    if ( !this.wasFinished && this.finished )\n    {\n      this.trigger( 'finished', this );\n    }\n  },\n  \n  /**\n   * Returns the current value for the given attribute (or undefined if the attribute is not or \n   * has not animated).\n   *\n   * @param {string} attr\n   */\n  value: function(attr)\n  {\n    return this.frame[ attr ];\n  },\n  \n  /**\n   * A method that is invoked when an animator is finished and is being removed from the list\n   * of currently animating Animators.\n   */\n\tcleanup: function()\n\t{ \n    this.trigger('cleanup', this);\n\t},\n  \n  /**\n   * Creates event instances for the given animation and options. The animation can be an animation\n   * object or an animation name. If a name is provided the options are merged in.\n   *\n   * @param {anim8.Animation|string|object} animation\n   * @param [object] options\n   */\n  createEvents: function(animation, options)\n  {\n    options = options || {};\n    \n    var animation = anim8.animation( animation, options );\n  \n    if (animation === false)\n    {\n      return false;\n    }\n    \n    var events = animation.newEvents();\n    \n    if ( animation.isSaved() )\n    {\n      animation.mergeOptions( options, events );\n    }\n    \n    this.onAnimation( animation, options, events );\n    \n    return events;\n  },\n  \n  /**\n   * A method invoked when an animation is about to be played in the Animator.\n   * \n   * @param {anim8.Animation} animation\n   * @param {object} options\n   * @param {array:anim8.EventInstance} events\n   */\n  onAnimation: function(animation, options, events)\n  {\n    \n  },\n  \n  /**\n   * Adds a spring to this animator replacing any existing spring for the same attribute.\n   * A spring object can be given, an instance of anim8.Spring, or a name of a saved Spring.\n   * \n   * @param {anim8.Spring|string|object} spring\n   */\n  spring: function(spring)\n  {\n    var spring = anim8.spring( spring );\n    \n    if ( spring === false )\n    {\n      return false;\n    }\n\n    this.placeSpring( spring );\n    \n    anim8.add( this );\n    \n    return spring;\n  },\n  \n  /**\n   * Removes springs for the specified attributes. If no attributes are specified then all springs\n   * are removed. Attributes can be specified as an array of attribute names or a string with attribute\n   * names separated by a space.\n   *\n   * @param {string|Array} attributes\n   */\n  unspring: function(attributes)\n  {\n    return this.springsFor( attributes, function(s)\n    {\n      delete this.springs[ s.attribute ];\n    });\n  },\n  \n  /**\n   * Adds an animation to this Animator optionally finishing events for attributes not specified in the\n   * given attribute. Events will be replaced immediately.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all \n   */\n\tplay: function(animation, options, all)\n\t{\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    var attrs = {};\n    \n    for (var i = 0; i < events.length; i++)\n    { \n      this.placeEvent( events[i] );\n      \n      attrs[ events[i].attribute ] = true;\n    }\n    \n    if ( all )\n    {\n      for (var attr in this.events)\n      {\n        if ( !(attr in attrs) )\n        {\n          this.events[ attr ].finish( this.frame );\n        }\n      }\n    }\n    \n    anim8.add( this );\n    \n    return events;\n\t},\n  \n  /**\n   * Queues an animation on this Animator. The events generated for the given animation\n   * will all start at the same time - at the end of the events currently on the Animator.\n   *\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   */\n\tqueue: function(animation, options)\n\t{\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n        \n    var maxRemaining = 0.0;\n    \n    for (var attr in this.events)\n    {\n      maxRemaining = Math.max( maxRemaining, this.events[attr].timeRemainingInChain() );\n    }\n        \n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[i];\n      var attr = e.attribute;\n      \n      if ( attr in this.events )\n      {    \n        e.delay += (maxRemaining - this.events[attr].timeRemainingInChain());\n        \n        this.events[attr].queue( e );\n      }\n      else\n      {\n        e.delay += maxRemaining;\n        \n        this.placeEvent( e );\n      }\n    }\n    \n    anim8.add( this );\n    \n    return events;\n\t},\n  \n  /**\n   * Transitions from the currently playing events into a new animation. The transition is made\n   * by constructing a quadratic curve from the current value to a point further on the current\n   * path to the starting point of the new animation.\n   *\n   * @param {number} transitionTime \n   * @param {number} transitionDelta\n   * @param {string|function|array} transitionEasing\n   * @param {string|object|anim8.Animation} animation\n   * @param [object] options\n   * @param [boolean] all\n   */\n\ttransition: function(transitionTime, transitionDelta, transitionEasing, animation, options, all)\n\t{\n    var events = this.createEvents( animation, options );\n    \n    if ( events === false )\n    {\n      return false;\n    }\n    \n    for (var i = 0; i < events.length; i++)\n    {\n      var e1 = events[i];\n      var attr = e1.attribute;\n      \n      if ( attr in this.events )\n      {\n        var path = e1.path;\n        var calc = path.calculator;\n        var e2 = this.events[attr];\n        \n        var p0 = calc.copy( calc.create(), this.frame[attr] );\n        var p1 = e2.getFuture( transitionDelta );\n        var p2 = e1.getPoint( 0 );\n        \n        var transitionPath = new anim8.QuadraticPath( attr, calc, p0, p1, p2 );\n        var transitionEvent = new anim8.Event( attr, transitionPath, transitionTime, transitionEasing, 0, 0, 1 ).newInstance();\n        \n        transitionEvent.next = e1;\n        \n        this.placeEvent( transitionEvent );\n      }\n      else\n      {\n        e1.delay += transitionTime;\n     \n        this.placeEvent( e1 );\n      }\n    }\n    \n    anim8.add( this );\n    \n    return events;\n\t},\n  \n  /**\n   * Helper method that calls a callback for each object in the given map that exists\n   * in the attribute string/array.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   * @param {object} objects\n   */\n  objectsFor: function(attributes, callback, objects)\n  {\n\t\tif ( anim8.isString( attributes ) )\n\t\t{\n\t\t\tattributes = attributes.split( ' ' );\n\t\t}\n    \n    var objectCount = 0;\n    \n\t\tif ( anim8.isArray( attributes ) )\n\t\t{\n      for (var i = 0; i < attributes.length; i++)\n      {\n        var attr = attributes[i];\n        \n        if ( attr in objects )\n        {\n          callback.call( this, objects[attr] );\n        \n          objectCount++;\n        }\n      }\n\t\t}\n    else\n    {\n      for (var attr in objects)\n      {\n        callback.call( this, objects[attr] );\n        \n        objectCount++;\n      }\n    }\n    \n\t\treturn objectCount;\n  },\n  \n  /**\n   * Invokes the callback for each event for the given attributes.\n   * \n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\teventsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.events );\n\t},\n  \n  /**\n   * Invokes the callback for each spring for the given attributes.\n   *\n   * @param {string|array} attributes\n   * @param {function} callback\n   */\n\tspringsFor: function(attributes, callback)\n\t{\n\t\treturn this.objectsFor( attributes, callback, this.springs );\n\t},\n  \n  /**\n   * Stops all events for the specified attributes. If events are queued the last value of the last event\n   * is applied to this Animator before being completely removed. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tstop: function(attributes)\n\t{\n\t\treturn this.eventsFor(attributes, function(event) \n\t\t{\n\t\t\twhile (event.next)\n\t\t\t{\n\t\t\t\tevent = event.next;\n\t\t\t}\n\t\t\t\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Finishes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tfinish: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.finish( this.frame );\n\t\t});\n\t},\n  \n  /**\n   * Pauses all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tpause: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.pause();\n\t\t});\n\t},\n  \n  /**\n   * Resumes all current events for the specified attributes. Attribute names can be given as an array\n   * or a space separated string. If no attributes are given all attributes are assumed.\n   *\n   * @param {string|array} attributes\n   */\n\tresume: function(attributes)\n\t{\n\t\treturn this.eventsFor( attributes, function(event)\n\t\t{\n\t\t\tevent.resume();\n\t\t});\n\t},\n  \n  /**\n   * Sets the given attributes to this Animator immediately.\n   *\n   * @param {object} attributes\n   */\n  set: function(attributes)\n  {\n    for (var attr in attributes)\n    {\n      this.frame[ attr ] = attributes[ attr ];\n    }\n    \n    this.apply();\n  },\n  \n  /**\n   * Gets the current attribute values for all attributes specified. The argument must be an object\n   * where the key is the name of an attribute.\n   *\n   * @param {object} attributes\n   */\n  get: function(attributes)\n  {\n    var out = {};\n    \n    for (var attr in attributes)\n    {\n      out[ attr ] = this.frame[ attr ];\n    }\n    \n    return out;\n  },\n  \n  /**\n   * Returns true if there are any events on this Animator.\n   */\n  hasEvents: function()\n  {\n    for (var attr in this.events)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator.\n   */\n  hasSprings: function()\n  {\n    for (var attr in this.springs)\n    {\n      return true;\n    }\n    \n    return false;\n  },\n  \n  /**\n   * Returns true if there are any springs on this Animator or animating events.\n   */\n  isAnimating: function()\n  {\n    if ( this.hasSprings() )\n    {\n      return true;\n    }\n    \n    for (var attr in this.events)\n    {\n      if ( this.events[attr].isAnimating() )\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n};\n\n/**\n * Adds the following event methods to Animators: on, once, off, trigger.\n */\nanim8.eventize( anim8.Animator.prototype );","\n/**\n * Instantiates a new color given red, green, blue, and white components.\n * If a component is missed it's default value is either 255 (white) or\n * 1.0 (opaque).\n */\nanim8.color = function(r, g, b, a) \n{\n  return {\n    r: anim8.coalesce( r, 255 ),\n    g: anim8.coalesce( g, 255 ),\n    b: anim8.coalesce( b, 255 ),\n    a: anim8.coalesce( a, 1.0 )\n  };\n};\n\n/**\n * The array of parsing methods to execute sequentally until a color is returned.\n */\nanim8.color.parsers = \n[\n  { /* already parsed color */\n    parse: function(input) {\n      if (typeof input === 'object') {\n        var color = {\n          r: this.parseComponent(input.r, 'parseInt', 255),\n          g: this.parseComponent(input.g, 'parseInt', 255),\n          b: this.parseComponent(input.b, 'parseInt', 255),\n          a: this.parseComponent(input.a, 'parseFloat', 1.0)\n        };\n        return color;\n      }\n      return false;\n    },\n    parseComponent: function(c, parseFunction, max) {\n      var t = typeof c;\n      var v = max;\n      if (t === 'string') {\n        var vparsed = window[parseFunction](t, 10);\n        if (!isNaN(vparsed)) {\n          v = vparsed;\n        }\n      }\n      else if (t === 'number') {\n        v = c;\n      }\n      if (v > max) {\n        v = max;\n      }\n      if (v < 0) {\n        v = 0;\n      }\n      return v;\n    }\n  }, \n  { /* colorname */\n    names: {\n      transparent:{r:255,g:256,b:255,a:0.0},\n      aliceblue:{r:240,g:248,b:255,a:1.0},\n      antiquewhite:{r:250,g:235,b:215,a:1.0},\n      aqua:{r:0,g:255,b:255,a:1.0},\n      aquamarine:{r:127,g:255,b:212,a:1.0},\n      azure:{r:240,g:255,b:255,a:1.0},\n      beige:{r:245,g:245,b:220,a:1.0},\n      bisque:{r:255,g:228,b:196,a:1.0},\n      black:{r:0,g:0,b:0,a:1.0},\n      blanchedalmond:{r:255,g:235,b:205,a:1.0},\n      blue:{r:0,g:0,b:255,a:1.0},\n      blueviolet:{r:138,g:43,b:226,a:1.0},\n      brown:{r:165,g:42,b:42,a:1.0},\n      burlywood:{r:222,g:184,b:135,a:1.0},\n      cadetblue:{r:95,g:158,b:160,a:1.0},\n      chartreuse:{r:127,g:255,b:0,a:1.0},\n      chocolate:{r:210,g:105,b:30,a:1.0},\n      coral:{r:255,g:127,b:80,a:1.0},\n      cornflowerblue:{r:100,g:149,b:237,a:1.0},\n      cornsilk:{r:255,g:248,b:220,a:1.0},\n      crimson:{r:220,g:20,b:60,a:1.0},\n      cyan:{r:0,g:255,b:255,a:1.0},\n      darkblue:{r:0,g:0,b:139,a:1.0},\n      darkcyan:{r:0,g:139,b:139,a:1.0},\n      darkgoldenrod:{r:184,g:134,b:11,a:1.0},\n      darkgray:{r:169,g:169,b:169,a:1.0},\n      darkgreen:{r:0,g:100,b:0,a:1.0},\n      darkkhaki:{r:189,g:183,b:107,a:1.0},\n      darkmagenta:{r:139,g:0,b:139,a:1.0},\n      darkolivegreen:{r:85,g:107,b:47,a:1.0},\n      darkorange:{r:255,g:140,b:0,a:1.0},\n      darkorchid:{r:153,g:50,b:204,a:1.0},\n      darkred:{r:139,g:0,b:0,a:1.0},\n      darksalmon:{r:233,g:150,b:122,a:1.0},\n      darkseagreen:{r:143,g:188,b:143,a:1.0},\n      darkslateblue:{r:72,g:61,b:139,a:1.0},\n      darkslategray:{r:47,g:79,b:79,a:1.0},\n      darkturquoise:{r:0,g:206,b:209,a:1.0},\n      darkviolet:{r:148,g:0,b:211,a:1.0},\n      deeppink:{r:255,g:20,b:147,a:1.0},\n      deepskyblue:{r:0,g:191,b:255,a:1.0},\n      dimgray:{r:105,g:105,b:105,a:1.0},\n      dodgerblue:{r:30,g:144,b:255,a:1.0},\n      feldspar:{r:209,g:146,b:117,a:1.0},\n      firebrick:{r:178,g:34,b:34,a:1.0},\n      floralwhite:{r:255,g:250,b:240,a:1.0},\n      forestgreen:{r:34,g:139,b:34,a:1.0},\n      fuchsia:{r:255,g:0,b:255,a:1.0},\n      gainsboro:{r:220,g:220,b:220,a:1.0},\n      ghostwhite:{r:248,g:248,b:255,a:1.0},\n      gold:{r:255,g:215,b:0,a:1.0},\n      goldenrod:{r:218,g:165,b:32,a:1.0},\n      gray:{r:128,g:128,b:128,a:1.0},\n      green:{r:0,g:128,b:0,a:1.0},\n      greenyellow:{r:173,g:255,b:47,a:1.0},\n      honeydew:{r:240,g:255,b:240,a:1.0},\n      hotpink:{r:255,g:105,b:180,a:1.0},\n      indianred:{r:205,g:92,b:92,a:1.0},\n      indigo:{r:75,g:0,b:130,a:1.0},\n      ivory:{r:255,g:255,b:240,a:1.0},\n      khaki:{r:240,g:230,b:140,a:1.0},\n      lavender:{r:230,g:230,b:250,a:1.0},\n      lavenderblush:{r:255,g:240,b:245,a:1.0},\n      lawngreen:{r:124,g:252,b:0,a:1.0},\n      lemonchiffon:{r:255,g:250,b:205,a:1.0},\n      lightblue:{r:173,g:216,b:230,a:1.0},\n      lightcoral:{r:240,g:128,b:128,a:1.0},\n      lightcyan:{r:224,g:255,b:255,a:1.0},\n      lightgoldenrodyellow:{r:250,g:250,b:210,a:1.0},\n      lightgrey:{r:211,g:211,b:211,a:1.0},\n      lightgreen:{r:144,g:238,b:144,a:1.0},\n      lightpink:{r:255,g:182,b:193,a:1.0},\n      lightsalmon:{r:255,g:160,b:122,a:1.0},\n      lightseagreen:{r:32,g:178,b:170,a:1.0},\n      lightskyblue:{r:135,g:206,b:250,a:1.0},\n      lightslateblue:{r:132,g:112,b:255,a:1.0},\n      lightslategray:{r:119,g:136,b:153,a:1.0},\n      lightsteelblue:{r:176,g:196,b:222,a:1.0},\n      lightyellow:{r:255,g:255,b:224,a:1.0},\n      lime:{r:0,g:255,b:0,a:1.0},\n      limegreen:{r:50,g:205,b:50,a:1.0},\n      linen:{r:250,g:240,b:230,a:1.0},\n      magenta:{r:255,g:0,b:255,a:1.0},\n      maroon:{r:128,g:0,b:0,a:1.0},\n      mediumaquamarine:{r:102,g:205,b:170,a:1.0},\n      mediumblue:{r:0,g:0,b:205,a:1.0},\n      mediumorchid:{r:186,g:85,b:211,a:1.0},\n      mediumpurple:{r:147,g:112,b:216,a:1.0},\n      mediumseagreen:{r:60,g:179,b:113,a:1.0},\n      mediumslateblue:{r:123,g:104,b:238,a:1.0},\n      mediumspringgreen:{r:0,g:250,b:154,a:1.0},\n      mediumturquoise:{r:72,g:209,b:204,a:1.0},\n      mediumvioletred:{r:199,g:21,b:133,a:1.0},\n      midnightblue:{r:25,g:25,b:112,a:1.0},\n      mintcream:{r:245,g:255,b:250,a:1.0},\n      mistyrose:{r:255,g:228,b:225,a:1.0},\n      moccasin:{r:255,g:228,b:181,a:1.0},\n      navajowhite:{r:255,g:222,b:173,a:1.0},\n      navy:{r:0,g:0,b:128,a:1.0},\n      oldlace:{r:253,g:245,b:230,a:1.0},\n      olive:{r:128,g:128,b:0,a:1.0},\n      olivedrab:{r:107,g:142,b:35,a:1.0},\n      orange:{r:255,g:165,b:0,a:1.0},\n      orangered:{r:255,g:69,b:0,a:1.0},\n      orchid:{r:218,g:112,b:214,a:1.0},\n      palegoldenrod:{r:238,g:232,b:170,a:1.0},\n      palegreen:{r:152,g:251,b:152,a:1.0},\n      paleturquoise:{r:175,g:238,b:238,a:1.0},\n      palevioletred:{r:216,g:112,b:147,a:1.0},\n      papayawhip:{r:255,g:239,b:213,a:1.0},\n      peachpuff:{r:255,g:218,b:185,a:1.0},\n      peru:{r:205,g:133,b:63,a:1.0},\n      pink:{r:255,g:192,b:203,a:1.0},\n      plum:{r:221,g:160,b:221,a:1.0},\n      powderblue:{r:176,g:224,b:230,a:1.0},\n      purple:{r:128,g:0,b:128,a:1.0},\n      red:{r:255,g:0,b:0,a:1.0},\n      rosybrown:{r:188,g:143,b:143,a:1.0},\n      royalblue:{r:65,g:105,b:225,a:1.0},\n      saddlebrown:{r:139,g:69,b:19,a:1.0},\n      salmon:{r:250,g:128,b:114,a:1.0},\n      sandybrown:{r:244,g:164,b:96,a:1.0},\n      seagreen:{r:46,g:139,b:87,a:1.0},\n      seashell:{r:255,g:245,b:238,a:1.0},\n      sienna:{r:160,g:82,b:45,a:1.0},\n      silver:{r:192,g:192,b:192,a:1.0},\n      skyblue:{r:135,g:206,b:235,a:1.0},\n      slateblue:{r:106,g:90,b:205,a:1.0},\n      slategray:{r:112,g:128,b:144,a:1.0},\n      snow:{r:255,g:250,b:250,a:1.0},\n      springgreen:{r:0,g:255,b:127,a:1.0},\n      steelblue:{r:70,g:130,b:180,a:1.0},\n      tan:{r:210,g:180,b:140,a:1.0},\n      teal:{r:0,g:128,b:128,a:1.0},\n      thistle:{r:216,g:191,b:216,a:1.0},\n      tomato:{r:255,g:99,b:71,a:1.0},\n      turquoise:{r:64,g:224,b:208,a:1.0},\n      violet:{r:238,g:130,b:238,a:1.0},\n      violetred:{r:208,g:32,b:144,a:1.0},\n      wheat:{r:245,g:222,b:179,a:1.0},\n      white:{r:255,g:255,b:255,a:1.0},\n      whitesmoke:{r:245,g:245,b:245,a:1.0},\n      yellow:{r:255,g:255,b:0,a:1.0},\n      yellowgreen:{r:154,g:205,b:50,a:1.0}\n    },\n    parse: function(input) {\n      if (typeof input === 'string') {\n        input = input.toLowerCase();\n        if (input in this.names) {\n          var named = this.names[input];\n          return {\n            r: named.r,\n            g: named.g,\n            b: named.b,\n            a: named.a\n          };\n        }\n      }\n      return false;\n    }\n  },\n  { /* #rgb */\n    regex: /^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1] + matches[1], 16),\n          g: parseInt(matches[2] + matches[2], 16),\n          b: parseInt(matches[3] + matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* #rrggbb */\n    regex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: parseInt(matches[1], 16),\n          g: parseInt(matches[2], 16),\n          b: parseInt(matches[3], 16),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGB(r,g,b) */\n    regex: /^rgb\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: 1.0\n        };\n      }\n      return false;\n    }\n  },\n  { /* RGBA(r,g,b,a) */\n    regex: /^rgba\\(\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*(\\d{3})\\s*,\\s*([01]?\\.\\d+|[01])\\)$/i,\n    parse: function(input) {\n      var matches = this.regex.exec(input);\n      if (matches !== null) {\n        return {\n          r: Math.min(255, parseInt(matches[1], 10)),\n          g: Math.min(255, parseInt(matches[2], 10)),\n          b: Math.min(255, parseInt(matches[3], 10)),\n          a: Math.min(1.0, parseFloat(matches[4]))\n        };\n      }\n      return false;\n    }\n  }\n];\n\n/**\n * Parses a color from a string.\n *\n * @param {string} input\n */\nanim8.color.parse = function(input)\n{\n  var cp = m8.color.parsers;\n  \n  for (var i = 0; i < this.parsers.length; i++)\n  {\n    var parsed = this.parsers[i].parse(input);\n    \n    if (parsed !== false) \n    {\n      return parsed;\n    }\n  }\n  \n  return this.invalidColor;\n};\n\n/**\n * Formats a color to a string.\n * \n * @param {object} color\n */\nanim8.color.format = function(color)\n{\n  var ca = anim8.coalesce( color.a, 1.0 );\n  var cr = anim8.coalesce( color.r, 255 );\n  var cg = anim8.coalesce( color.g, 255 );\n  var cb = anim8.coalesce( color.b, 255 );\n  \n  if (ca === 1.0)\n  {\n    var r = cr.toString( 16 );\n    var g = cg.toString( 16 );\n    var b = cb.toString( 16 );\n    \n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    \n    return '#' + r + g + b;\n  }\n  else\n  {\n    return 'rgba(' + cr + ',' + cg + ',' + cb + ',' + ca + ')';\n  }\n};\n\n/**\n * The color to return when input is invalid.\n */\nanim8.color.invalidColor = anim8.color.defaultValue =\n{\n  r: 255,\n  g: 255,\n  b: 255,\n  a: 1.0\n};","/**\n * Calculators perform math and basic operations for a specific data structure. Calculators have the following methods.\n *\n *  parse(x, default)\n *  copy(out, copy)\n * -clone(out)\n *  create()\n *  zero(out)\n * -scale(out, scale)\n * -add(out, amount)\n *  adds(out, amount, amountScale)\n * -sub(out, amount)\n *  mul(out, scale)\n * -interpolate(out, start, end, delta)\n *  distanceSq(a, b)\n *  isValid(a)\n *  isNaN(a)\n *  isZero(a, epsilon)\n *  isEqual(a, b, epsilon)\n */\n\n/**\n * Creates a calculator and fills in any missing methods where possible.\n * \n * @param {string} name\n * @param {object} methods\n */\nanim8.calculator.create = function(name, methods)\n{\n  var defaultMethods = \n\t{\n\t  clone: function(out) \n\t\t{\n\t    return this.copy( this.create(), out );\n\t  },\n\t  scale: function(out, scale) \n\t\t{\n\t    return this.adds( out, out, scale - 1 );\n\t  },\n\t  add: function(out, amount) \n\t\t{\n\t    return this.adds( out, amount, 1 );\n\t  },\n\t  sub: function(out, amount) \n\t\t{\n\t    return this.adds( out, amount, -1 );\n\t  },\n\t  interpolate: function(out, start, end, delta) \n\t\t{\n\t    out = this.zero( out );\n\t    out = this.adds( out, start, 1 - delta );\n\t    out = this.adds( out, end, delta );\n\t    return out;\n\t  },\n\t\tdistance: function(a, b)\n\t\t{\n\t\t\treturn Math.sqrt( this.distanceSq( a, b ) );\n\t\t}\n\t};\n  \n  for (var method in defaultMethods)\n  {\n    if ( !(method in methods) )\n    {\n      methods[ method ] = defaultMethods[ method ];\n    }\n  }\n  \n\tanim8.calculator[name] = methods; \n};\n\n/**\n * A calculator for number primitives.\n */\nanim8.calculator.create('number', \n{\n\tparse: function(x, defaultValue)\n\t{\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\tif ( anim8.isString( x ) )\n\t\t{\n\t\t\tx = parseFloat( x );\n\t\t\t\n\t\t\tif (!isNaN(x))\n\t\t\t{\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn defaultValue;\n\t},\n  copy: function(out, copy) \n\t{\t\n    return copy;\n  },\n  create: function() \n\t{\n    return 0.0;\n  },\n  zero: function(out) \n\t{\n    return 0.0;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    return out += amount * amountScale;\n  },\n  mul: function(out, scale) \n\t{\n    return out *= scale;\n  },\n  distanceSq: function(a, b) \n\t{\n    var ab = a - b;\n    return ab * ab;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'number';\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a - b) < epsilon;\n  }\n});\n\n/*\n * A calculator for objects with an x and y component (number)\n */\nanim8.calculator.create('2d', \n{\n\tparse: function(x, defaultValue)\n\t{\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y )\n\t\t\t};\n\t\t}\n    if ( anim8.isString( x ) )\n    {\n      var aliases = {\n        'left':   0,\n        'right':  100,\n        'middle': 50,\n        'center': 50,\n        'top':    0,\n        'bottom': 100\n      };\n      \n      if ( x.indexOf(' ') === -1 )\n      {\n        var _x = parseFloat( x );\n        \n        if ( !isNaN(_x) || x in aliases )\n        {\n          return {\n            x: x in aliases ? aliases[x] : _x,\n            y: x in aliases ? aliases[x] : _x\n          };\n        }\n      }\n      else\n      {\n        var pair = x.split(' ');\n        var _x = parseFloat( pair[0] );\n        var _y = parseFloat( pair[1] );\n        \n        if ((!isNaN(_x) || pair[0] in aliases) && (!isNaN(_y) || pair[1] in aliases))\n        {\n          return {\n            x: pair[0] in aliases ? aliases[pair[0]] : _x,\n            y: pair[1] in aliases ? aliases[pair[1]] : _y\n          };\n        }\n      }\n    }\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;    \n    return dx * dx + dy * dy;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with an x, y, and z component (number)\n */\nanim8.calculator.create('3d',\n{\n\tparse: function(x, defaultValue)\n\t{\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: x,\n\t\t\t\tz: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\t\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y ),\n\t\t\t\tz: anim8.coalesce( x.z, defaultValue.z )\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0};\n  },\n  zero: function(out) \n\t{ \n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n    return dx * dx + dy * dy + dz * dz;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y) < epsilon && Math.abs(a.z) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t  \t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t\t Math.abs(a.z - b.z) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with an x, y, z, and angle components.\n */\nanim8.calculator.create('quaternion', \n{\n\tparse: function(x, defaultValue)\n\t{\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tz: 1,\n\t\t\t\tangle: x\n\t\t\t};\n\t\t}\n\t\tif ( anim8.isObject( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tx: anim8.coalesce( x.x, defaultValue.x ),\n\t\t\t\ty: anim8.coalesce( x.y, defaultValue.y ),\n\t\t\t\tz: anim8.coalesce( x.z, defaultValue.z ),\n\t\t\t\tangle: anim8.coalesce( x.angle, defaultValue.angle )\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n  copy: function(out, copy) \n\t{\n    out.x = copy.x;\n    out.y = copy.y;\n\t\tout.z = copy.z;\n\t\tout.angle = copy.angle;\n    return out;\n  },\n  create: function() \n\t{\n    return {x: 0.0, y:0.0, z:0.0, angle:0.0};\n  },\n  zero: function(out) \n\t{\n    out.x = 0.0;\n    out.y = 0.0;\n\t\tout.z = 0.0;\n\t\tout.angle = 0.0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.x += amount.x * amountScale;\n    out.y += amount.y * amountScale;\n\t\tout.z += amount.z * amountScale;\n\t\tout.angle += amount.angle * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.x *= scale.x;\n    out.y *= scale.y;\n\t\tout.z *= scale.z;\n\t\tout.angle *= scale.angle;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;   \n\t\tvar dz = a.z - b.z; \n\t\tvar da = a.angle - b.angle;\n    return dx * dx + dy * dy + dz * dz + da * da;\n  },\n  isValid: function(a) \n\t{\n    return typeof a === 'object' && 'x' in a && 'y' in a && 'z' in a && 'angle' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.x) || isNaN(a.y) || isNaN(a.z) || isNaN(a.angle);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.x) < epsilon && \n\t\t  \t\t Math.abs(a.y) < epsilon && \n\t\t       Math.abs(a.z) < epsilon && \n\t\t       Math.abs(a.angle) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.x - b.x) < epsilon && \n\t\t\t\t\t Math.abs(a.y - b.y) < epsilon && \n\t\t\t\t   Math.abs(a.z - b.z) < epsilon && \n\t\t       Math.abs(a.angle - b.angle) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with r, g, & b components (numbers 0 -> 255)\n */\nanim8.calculator.create('rgb', \n{\n\tparse: function(x, defaultValue)\n\t{\n\t\tif ( anim8.isNumber( x ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: x,\n\t\t\t\tg: x,\n\t\t\t\tb: x\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn anim8.color.parse( x );\n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    return dr * dr + dg * dg + db * db;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon;\n  }\n});\n\n/**\n * A calculator for objects with r, g, & b components \n * (numbers 0 -> 255) and an a (alpha) component (0.0 -> 1.0).\n */\nanim8.calculator.create('rgba', \n{\n\tparse: function(a, defaultValue)\n\t{\n\t\tif ( anim8.isNumber( a ) )\n\t\t{\n\t\t\treturn {\n\t\t\t\tr: a,\n\t\t\t\tg: a,\n\t\t\t\tb: a,\n\t\t\t\ta: 1.0\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn anim8.color.parse( a );\n\t},\n  copy: function(out, copy) \n\t{\n    out.r = copy.r;\n    out.g = copy.g;\n    out.b = copy.b;\n    out.a = copy.a;\n    return out;\n  },\n  create: function() \n\t{\n    return {r: 0, g:0, b:0, a:0};\n  },\n  zero: function(out) \n\t{\n    out.r = 0;\n    out.g = 0;\n    out.b = 0;\n    out.a = 0;\n    return out;\n  },\n  adds: function(out, amount, amountScale) \n\t{\n    out.r += amount.r * amountScale;\n    out.g += amount.g * amountScale;\n    out.b += amount.b * amountScale;\n    out.a += amount.a * amountScale;\n    return out;\n  },\n  mul: function(out, scale) \n\t{\n    out.r *= scale.r;\n    out.g *= scale.g;\n    out.b *= scale.b;\n    out.a *= scale.a;\n    return out;\n  },\n  distanceSq: function(a, b) \n\t{\n    var dr = a.r - b.r;\n    var dg = a.g - b.g;    \n    var db = a.b - b.b;    \n    var da = a.a - b.a;    \n    return dr * dr + dg * dg + db * db + da * da;\n  },\n  isValid: function(a) \n\t{\n    return anim8.isObject( a ) && 'r' in a && 'g' in a && 'b' in a && 'a' in a;\n  },\n  isNaN: function(a) \n\t{\n    return isNaN(a.r) || isNaN(a.g) || isNaN(a.b) || isNaN(a.a);\n  },\n  isZero: function(a, epsilon) \n\t{\n    return Math.abs(a.r) < epsilon && \n           Math.abs(a.g) < epsilon && \n           Math.abs(a.b) < epsilon && \n           Math.abs(a.a) < epsilon;\n  },\n  isEqual: function(a, b, epsilon) \n\t{\n    return Math.abs(a.r - b.r) < epsilon && \n           Math.abs(a.g - b.g) < epsilon && \n           Math.abs(a.b - b.b) < epsilon && \n           Math.abs(a.a - b.a) < epsilon;\n  }\n});\n\n/**\n * Sets the default calculator to the numeric calculator.\n */\nanim8.calculator.default = anim8.calculator.number;","anim8.parser.deltas = function( animation, options, events ) \n{\n\tvar deltas = animation.deltas;\n\tvar values = animation.values;\n\t\n\tif ( anim8.isArray( deltas ) )\n\t{\n\t\tvar deltaObject = {};\n\t\t\n\t\tfor (var attr in values)\n\t\t{\n\t\t\tdeltaObject[attr] = deltas;\t\n\t\t}\n\t\t\n\t\tdeltas = deltaObject;\n\t}\n\t\n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculators[attr] = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaults[attr] = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculators[attr] = anim8.calculator.default;\n\t\t\tdefaults[attr] = calculators[attr].create();\n    }\n\t\t\n\t\tfor (var k = 0; k < value.length; k++)\n\t\t{\n      if ( value[k] !== true )\n      {\n  \t\t\tvalue[k] = calculators[attr].parse( value[k], defaults[attr] ); \n      }\n\t\t}\n\t\t\n    var duration = anim8.coalesce( durations[attr], options.duration, anim8.defaults.duration );\n    var easing   = anim8.coalesce( easings[attr], options.easing, anim8.defaults.easing );\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep, anim8.defaults.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat, anim8.defaults.repeat );\n\n    var path     = new anim8.DeltaPath( attr, calculators[attr], values[attr], deltas[attr] );\n    var event    = new anim8.Event( attr, path, duration, anim8.easing( easing ), delay, sleep, repeat );\n    \n    events.push( event );\n\t}\n\t\n\treturn true;\n};","anim8.parser.final = function( animation, options, events ) \n{\n\tvar values = animation.final;\n\t\n  var delays = animation.delays || {};\n  var durations = animation.durations || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n\n    if ( value !== true )\n    {\n      value = calculator.parse( value, defaultValue ); \n    }\n\t\t\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    var duration = anim8.coalesce( durations[attr], options.duration, anim8.defaults.duration );\n    \n    var path     = new anim8.PointPath( attr, calculator, value );\n    var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay + duration, 0, 1 );\n    \n    events.push( event );\n\t}\n\t\n\treturn true;\n};","anim8.parser.initial = function( animation, options, events ) \n{\n\tvar values = animation.initial;\n\t\n  var delays = animation.delays || {};\n  var calculators = {};\n\tvar defaults = {};\n  \n\tfor (var attr in values)\n\t{\n\t\tvar value = values[attr];\n    var calculator = false;\n\t\tvar defaultValue = false;\n\t\t\n    if ( attr in anim8.attribute )\n    {\n      calculator = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\tdefaultValue = anim8.attribute[attr].defaultValue;\n    }\n    else\n    {\n      calculator = anim8.calculator.default;\n\t\t\tdefaultValue = calculator.create();\n    }\n    \n    if ( value !== true )\n    {\n      value = calculator.parse( value, defaultValue ); \n    }\n\t\t\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    \n    var path     = new anim8.PointPath( attr, calculator, value );\n    var event    = new anim8.Event( attr, path, 0, anim8.easing.default, delay, 0, 1 );\n    \n    events.push( event );\n\t}\n\t\n\treturn true;\n};","anim8.parser.keyframe = function( animation, options, events ) \n{\n  var kframes = animation.keyframe;\n  \n  var durations = animation.durations || {};\n  var easings = animation.easings || {};\n  var delays = animation.delays || {};\n  var sleeps = animation.sleeps || {};\n  var repeats = animation.repeats || {};\n  \n  var teasing = anim8.easing( anim8.coalesce( options.teasing, anim8.defaults.teasing ) );\n  \n  var sort = false;\n  \n  var aliases = {\n    from:     '0',\n    start:    '0',\n    initial:  '0',\n    first:    '0',\n    half:     '50',\n    middle:   '50',\n    to:       '100',\n    end:      '100',\n    last:     '100'\n  };\n  \n  // split up comma delimited times\n  for (var time in kframes)\n  {\n    if ( time in aliases )\n    {\n      kframes[ aliases[time] ] = kframes[ time ];\n      \n      delete kframes[ time ];\n    }\n    else if ( time.indexOf(',') !== -1 )\n    {\n      var times = time.split(',');\n      \n      for (var i = 0; i < times.length; i++)\n      {\n        kframes[times[i]] = kframes[time];\n      }\n      \n      delete kframes[time];\n      \n      sort = true;\n    }\n  }\n  \n  var times = [];\n  \n  // validate times\n  var lastTime = 0.0;\n  var maxTime = 0.0;\n  \n  for (var time in kframes)\n  {\n    var t = parseFloat(time);\n    \n    if (isNaN(t))\n    {\n      delete kframes[time];\n    }\n    else\n    {\n      if (t < lastTime)\n      {\n        sort = true;\n      }\n      \n      times.push({\n        order: t,\n        key: time,\n        value: kframes[time]\n      });\n      \n      lastTime = t;\n      \n      maxTime = Math.max( maxTime, t );\n    }\n  }\n  \n  // sort if necessary\n  if (sort)\n  {\n    times.sort(function(a, b) {\n      return a.order - b.order;\n    });\n    \n    kframes = {};\n    \n    for (var i = 0; i < times.length; i++)\n    {\n      kframes[times[i].key] = times[i].value;\n    }\n  }\n  \n  // split up into deltas and values\n  var deltas = {};\n  var values = {};\n  var calculators = {};\n\tvar defaults = {};\n  var pathEasings = {};\n  \n  for (var i = 0; i < times.length; i++)\n  {\n    var frame = times[i];\n    var easing = anim8.coalesce( frame.value.easing, options.easing );\n    \n    delete frame.value.easing;\n    \n    for (var attr in frame.value)\n    {\n      if ( !(attr in deltas) )\n      {\n        deltas[attr] = [];\n        values[attr] = [];\n        pathEasings[attr] = [];\n        \n        if (attr in anim8.attribute)\n        {\n          calculators[attr] = anim8.calculator( anim8.attribute[attr].calculator );\n\t\t\t\t\tdefaults[attr] = anim8.attribute[attr].defaultValue;\n        }\n        else\n        {\n          calculators[attr] = anim8.calculator.default;\n\t\t\t\t\tdefaults[attr] = calculators[attr].create();\n        }\n      }\n\t\t\t\n      deltas[attr].push( frame.order / maxTime );\n      values[attr].push( frame.value[attr] === true ? true : calculators[attr].parse( frame.value[attr], defaults[attr] ) );\n      pathEasings[attr].push( anim8.easing( anim8.coalesce( easings[attr], easing ) ) );\n    }\n  }\n\t\n  // create events & paths\n  for (var attr in deltas)\n  {\n    var duration = anim8.coalesce( durations[attr], options.duration, anim8.defaults.duration );\n    var delay    = anim8.coalesce( delays[attr], options.delay, anim8.defaults.delay );\n    var sleep    = anim8.coalesce( sleeps[attr], options.sleep, anim8.defaults.sleep );\n    var repeat   = anim8.coalesce( repeats[attr], options.repeat, anim8.defaults.repeat );\n\n    var path     = new anim8.KeyframePath( attr, calculators[attr], values[attr], deltas[attr], pathEasings[attr] );\n    var event    = new anim8.Event( attr, path, duration, teasing, delay, sleep, repeat );\n    \n    events.push( event );\n  }\n};","\n/**\n * The factory for Plain-Old-Javascript-Objects.\n */\nanim8.factories.object = \n{\n  is: function(subject) \n\t{\n    return anim8.isObject( subject ) && !anim8.isElement( subject );\n  },\n  \n  parseAnimators: function(from, animators) \n\t{\n    var animator = from.$animator;\n    \n    if ( !animator )\n    {\n      animator = new anim8.Animator( from );\n      animator.factory = this;\n      \n      from.$animator = animator;\n    }\n    \n    animators.push( animator );\n  }\n};"],"sourceRoot":"/source/"}